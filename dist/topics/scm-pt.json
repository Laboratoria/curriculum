{
  "slug": "scm-pt",
  "createdAt": "2021-07-12T22:08:22.366Z",
  "title": "Source Code Management (SCM) - Git + GitHub",
  "description": "",
  "tags": {
    "secondary": {},
    "primary": {}
  },
  "targetAudience": "",
  "dependencies": "",
  "learningObjectives": "",
  "product": "",
  "syllabus": {
    "01-git": {
      "title": "Git",
      "bonus": false,
      "description": "<p>Nesta unidade aprenderemos o básco do sistema de controle de versões <code>Git</code>.</p>\n",
      "parts": {
        "01-git": {
          "title": "O que é o Git?",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<p>O texto a seguir é baseado em grande parte, com alguns ajustes, nas seguintes\nreferências:</p>\n<ul>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\">Pro Git book</a></li>\n<li><a href=\"https://github.com/wdi-sf-september-2014/notes/tree/master/git_intro\" target=\"_blank\">Getting Started with Git - Arun Sood</a></li>\n</ul>\n<hr>\n<p><code>Git</code> é um <em>Sistema de Controle de Versões</em>.</p>\n<p><strong>O que é um Sistema de Controle de Versões</strong>?</p>\n<p>Um <em>Sistema de Controle de Versões</em> (VCS em inglês) é um sistema que registra\nas alterações de um, dois ou mais arquivos o tempo todo para, caso necessário,\nrecuperarmos uma versão facilmente. Por exemplo, se você alguma vez elaborou\num projeto para uma tarefa qualquer, já fez algo como ilustrado na imagem\nabaixo?</p>\n<p><img src=\"https://user-images.githubusercontent.com/39506102/56902962-bca09500-6a71-11e9-84f9-e332b3c63a87.png\" alt=\"Versionamento\"></p>\n<p>Graças ao VCS, podemos fazer com que isso não ocorra, pois ele permite:</p>\n<ul>\n<li>Reverter arquivos para um estado anterior.</li>\n<li>Reverter o projeto inteiro para um estado anterior.</li>\n<li>Comparar as alterações realizadas ao longo do projeto.</li>\n<li>Ver quem introduziu uma mudança ou atualizou o arquivo, e quando.</li>\n<li>E o mais importante: assegurar que os arquivos não se percam.</li>\n</ul>\n<p>De agora em diante, o <code>Git</code> vai nos ajudar a salvar e identificar todas as\nmudanças que faremos durante o desenvolvimento de um projeto, seja de um ou\nmais arquivos.</p>\n<p>Cada vez que confirmar uma mudança, ou salvar o estado de seu projeto no <code>Git</code>,\nele basicamente tira uma foto do estado de todos os seus arquivos naquele\nmomento, e salva uma referência a essa foto. Para ser eficiente, se os arquivos\nnão foram modificados, o <code>Git</code> não armazena o arquivo novamente, apenas um link\npara o arquivo idêntico que já estava armazenado.</p>\n<p>Tanto a coleção de arquivos como suas versões completas serão salvas em um\n<code>repositório</code>.</p>\n<p>Em suma, o <code>Git</code> pensa em seus arquivos como um fluxo de \"imagens\". Assim, a\ncada mudança que realizamos, ele tirará uma foto no instante em que lhe\nindicarmos e tudo isso será armazenado em um <code>repositório local</code>.</p>\n<p><strong>Vamos conhecer agora algumas palavras-chave que você certamente irá ouvir\nquando trabalhar com Git.</strong></p>\n<ul>\n<li><p><strong>Repositório local</strong>: Quando falamos repositório local, fazemos referência\naos arquivos e suas versões localizados em nosso equipamento. Aqui,\nencontraremos duas partes muito importantes:</p>\n<ul>\n<li>Working directory: é o nosso diretório de trabalho</li>\n<li>Staging area: área intermediária, de preparação, na qual alterações\nsão adicionadas para formar uma nova versão do projeto</li>\n</ul>\n</li>\n<li><p><strong>Repositório remoto</strong>: o <code>Git</code> nos permite sincronizar nosso repositório\nlocal com um repositório remoto que pode estar na \"nuvem\"</p>\n</li>\n</ul>\n",
          "order": 0,
          "durationString": "5min"
        },
        "02-install": {
          "title": "Instalação",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<p>Se estivermos usando Linux ou Mac OS X, não será necessário instalar o Git\nporque ele já vem instalado, mas se nosso sistema operacional for Windows,\ndevemos baixar e instalar o Git em nossa máquina.</p>\n<p><a href=\"https://git-scm.com/download/win\" target=\"_blank\">Download Git</a></p>\n<p>Quando terminar o download do nosso programa, começaremos a instalação com um\nduplo clique no arquivo que acabamos de baixar e, em seguida, aparecerão as\nseguintes telas:</p>\n<ul>\n<li><p>Clique no botão \"Next &gt;\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58835921-ab791400-862d-11e9-83fc-cb5f1c35d5a5.png\" alt=\"Passo 1 Git\"></p>\n</li>\n<li><p>Selecione o local da instalação e clique em \"Next &gt;\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58835922-ab791400-862d-11e9-8fad-e9384a8402f0.png\" alt=\"Passo 2 Git\"></p>\n</li>\n<li><p>Selecione as mesmas opções e clique em \"Next &gt;\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58835923-ab791400-862d-11e9-9438-6243735a6c1e.png\" alt=\"Passo 3 Git\"></p>\n</li>\n<li><p>Clique em \"Next &gt;\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836048-fd219e80-862d-11e9-8ad0-ada7b3e7d3bc.png\" alt=\"Passo 4 Git\"></p>\n</li>\n<li><p>Selecione o Nano como o seu editor padrão e clique em \"Next &gt;\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836050-fd219e80-862d-11e9-8d65-714ad0b6f240.png\" alt=\"Passo 5 Git\"></p>\n</li>\n<li><p>Selecione a opção \"Use Git from Git Bash only\" e clique em \"Next &gt;\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836051-fdba3500-862d-11e9-8400-d436554381c2.png\" alt=\"Passo 6 Git\"></p>\n</li>\n<li><p>Selecione a opção \"Use the OpenSSL library\" e continue \"Next &gt;\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836054-001c8f00-862e-11e9-99bc-6db7d5bd8c32.png\" alt=\"Passo 7 Git\"></p>\n</li>\n<li><p>Selecione a segunda opção e prossiga</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836055-00b52580-862e-11e9-9072-78d7a5b94b42.png\" alt=\"Passo 8 Git\"></p>\n</li>\n<li><p>Certifique-se de escolher a opção \"Use MinTTY\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836056-00b52580-862e-11e9-934b-bac93567f6fc.png\" alt=\"Passo 9 Git\"></p>\n</li>\n<li><p>Selecione as duas primeiras opções e clique em \"Install\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836057-00b52580-862e-11e9-9f32-a5976b91401c.png\" alt=\"Passo 10 Git\"></p>\n</li>\n<li><p>Finalmente, a instalação começará</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836059-00b52580-862e-11e9-823a-f02471c7d4bf.png\" alt=\"Passo 11 Git\"></p>\n</li>\n<li><p>Com o Git já instalado em nosso computador, clique em \"Finish\"</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58836061-014dbc00-862e-11e9-9c74-6c72556b9b35.png\" alt=\"Passo 12 Git\"></p>\n</li>\n</ul>\n<h2 id=\"o-que-é-git-bash\">O que é Git Bash?</h2>\n<p>Quando concluirmos a instalação do Git, encontraremos, em nossas novas\naplicações, uma chamada <code>Git Bash</code>.</p>\n<p>No sistema operacional Windows, pelo fato do <em>Command Prompt</em> (ou terminal do\nWindows) não ser muito amigável e não suportar comandos UNIX, o Git nos dá uma\nferramenta muito boa chamada <code>Git Bash</code> que vai nos permitir executar comandos\ncomo se estivéssemos no Linux ou Mac OS X.</p>\n<blockquote>\n<p>Assim, <code>Git Bash</code> será a \"linha de comandos\" que usaremos no Windows. Já no\nLinux ou Mac OS X, utilizaremos o terminal.</p>\n</blockquote>\n",
          "order": 1,
          "durationString": "5min"
        },
        "03-configure": {
          "title": "Configuração",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=fB5auBqxLtM",
              "id": "fB5auBqxLtM"
            }
          ],
          "body": "<p>Com o Git já instalado em nosso computador, vamos agora personalizar o ambiente\ndo Git.</p>\n<blockquote>\n<p>Lembre-se de que se você quiser executar comandos Git e estiver no Mac OS X ou\nLinux, deverá executá-los na linha de comandos. Porém, se seu sistema\noperacional é Windows, utilizará o Git Bash para executar os mesmos comandos\nde Git.</p>\n</blockquote>\n<p>A primeira coisa a fazer é definir nosso nome de usuário (_username_) e e-mail\nque o Git utilizará para gravar as alterações de código (o que veremos mais\nadiante: _commits_). Podemos configurar esses dados através do comando <code>git config</code>, o qual nos permite visualizar e configurar variáveis que controlam a\naparência e funcionamento do Git. Por exemplo, se executo o comando <code>git config --list</code> em meu terminal, obtenho o seguinte resultado:</p>\n<pre><code class=\"language-text\">user.name = michellesegv\nuser.email = michelle@laboratoria.la\n</code></pre>\n<p>(Esses são os dados que eu já havia configurado)</p>\n<p>Agora, vamos definir o nosso ambiente de <code>Git</code>:</p>\n<ul>\n<li><p>Para definir seu <strong>username</strong> (nome de usuário), substitue <code>seu-username</code> na\nseguinte linha e depois pressione a tecla \"enter\":</p>\n<pre><code class=\"language-bash\">git config --global user.name seu-username\n</code></pre>\n</li>\n<li><p>Para definir seu <strong>e-mail</strong>, escreva o comando abaixo, pressionando \"enter\" em\nseguida:</p>\n<pre><code class=\"language-bash\">git config --global user.email seuemail@gmail.com\n</code></pre>\n</li>\n</ul>\n<p>Os dados das linhas acima devem ser os mesmos que você usou ao criar a sua conta\nno <code>GitHub</code>, pois eles ficarão gravados nos <code>commits</code> que você fizer no <code>Git</code> e\nfarão parte do histórico do projeto que está armazenado no <code>GitHub</code>.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/fB5auBqxLtM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 2,
          "durationString": "5min"
        },
        "04-commands": {
          "title": "Comandos comuns",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<p>A seguir, você encontrará uma lista dos comandos mais comuns ao trabalhar com\n<code>Git</code> e <code>GitHub</code>.</p>\n<ul>\n<li><p><code>init</code>: Este comando diz ao Git para começar a monitorar o diretório atual,\n criando um repositório. Em outras palavras, o Git vai começar a vigiar essa\n pasta. O comando para tal é:</p>\n<pre><code class=\"language-bash\">git init\n</code></pre>\n</li>\n</ul>\n<p> Ao executar essa linha, o Git vai criar uma pasta oculta chamada <code>.git</code> no\n  <em>working directory</em>, o diretório raiz do projeto, local onde você digitou o\n  comando.</p>\n<ul>\n<li><p><code>add</code>: Com este comando, indicaremos quais arquivos queremos passar do nosso\n<em>working directory</em> para <em>staging area</em>. Isto é, dizer quais arquivos estão\n<strong>preparados</strong> para a nova versão do projeto.</p>\n<p>Por exemplo, se quisermos adicionar o arquivo HTML <strong>index.html</strong> à nossa\n<em>staging area</em>, devemos executar a seguinte linha:</p>\n<pre><code class=\"language-bash\">git add index.html\n</code></pre>\n<p>Se desejarmos que todos os arquivos do diretório atual sejam adicionados à\n<em>staging area</em> (definir que já estão preparados para a nova versão),\nexecutamos a seguinte linha:</p>\n<pre><code class=\"language-bash\">git add .\n</code></pre>\n</li>\n<li><p><code>commit</code>: Com <code>commit</code>, <strong>confirmaremos</strong> os arquivos que já definimos como\npreparados pelo comando anterior (<code>add</code>). A estrutura do comando é a\nseguinte:</p>\n<pre><code class=\"language-bash\">git commit -m 'Adicionar um comentário'\n</code></pre>\n<p>O texto entre aspas ('') pode ser qualquer um. Eu recomendo que você\nescreva um resumo do que está sendo modificado nessa versão para melhor se\norganizar. Além disso, um bom comentário irá ajudá-la se for necessário\nvoltar a uma determinada funcionalidade sem precisar ler todo o código, mas\napenas guiando-se pelos comentários dos commits. Por exemplo, se a \"\n<strong>nova versão</strong> <em>cria a estrutura do HTML</em>\", um bom comentário seria:</p>\n<pre><code class=\"language-bash\">git commit -m 'Cria a estrutura do HTML'\n</code></pre>\n</li>\n<li><p><code>status</code>: Com <code>status</code>, podemos saber o estado dos arquivos no nosso\nrepositório local. Ou seja, o comando nos dirá se há algum arquivo modificado\nque não foi atualizado no repositório ou se há arquivos que ainda não foram\nenviados, e também nos informará se está em nosso <em>working directory</em> ou\n<em>staging area</em>. Este comando será muito útil para determinar quais arquivos\ndevemos declarar como \"preparados\" (via <code>add</code>) e, em seguida,\n\"confirmá-los\" para a nova versão (através do comando <code>commit</code>) que\nenviaremos ao repositório remoto. O comando para ver o estado do nosso\nrepositório é:</p>\n<pre><code class=\"language-bash\">git status\n</code></pre>\n</li>\n</ul>\n",
          "order": 3,
          "durationString": "5min"
        },
        "05-quiz": {
          "questions": [
            {
              "title": "1) Git é um _________________________",
              "description": "",
              "answers": [
                "Sistema de código <em>online</em>",
                "Sistema que controla o <code>GitHub</code>",
                "Sistema de controle de versões",
                "Sistema para manter nossas contas"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) Dos enunciados a seguir, qual NÃO se relaciona com GitHub?",
              "description": "",
              "answers": [
                "Uma rede onde podemos manter nossas contas unificadas",
                "Um sistema de acompanhamento de problemas",
                "Uma ferramenta de revisão de código",
                "Um visualizador de versões"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "3) Por meio de _____________, enviaremos nossa nova versão _ ao nosso repositório remoto, enquanto que _____________ serve para atualizar nosso repositório local ao último commit registrado no repositório remoto",
              "description": "",
              "answers": [
                "<code>add</code> - <code>update</code>",
                "<code>update</code> - <code>add</code>",
                "<code>push</code> - <code>pull</code>",
                "<code>pull</code> - <code>push</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "4) Qual dos seguintes comandos são do Git? Você pode escolhar mais do que um",
              "description": "",
              "answers": [
                "<code>git update nome-ramo</code>",
                "<code>git status</code>",
                "<code>git commit -m 'adicionando um comentário'</code>",
                "<code>git end</code>",
                "<code>git init</code>",
                "<code>git change -a 'mudando um comentário'</code>"
              ],
              "solution": [
                1,
                2,
                4
              ]
            },
            {
              "title": "5) Para que serve a linha de comandos?",
              "description": "",
              "answers": [
                "Para usar os comandos e transformar nossos archivos <code>.js</code> em <code>.git</code>",
                "Para refatorar nosso código e enviá-lo sem a necessidade de usar <code>GitHub</code>",
                "Para criar novos comandos de <code>Git</code> e <code>GitHub</code> e, posteriormente, dar suporte\na eles",
                "Para visualizar, gerenciar e manipular arquivos de nosso computador por meio\nde comandos"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "6) Das opções abaixo, qual(is) se aplica(m) ao GitHub?",
              "description": "",
              "answers": [
                "Um visualizador de versões",
                "Um Sistema de Controle de Versões",
                "Uma ferramenta de revisão de código",
                "Uma rede onde podemos manter nossas contas unificadas"
              ],
              "solution": [
                0,
                2
              ]
            },
            {
              "title": "7) Qual a diferença entre Git e Github?",
              "description": "",
              "answers": [
                "<code>Git</code> só server como rede social e <code>Github</code> armazena extensões de arquivos",
                "<code>Github</code> armazena os arquivos JavaScript enquanto que o <code>Git</code>, arquivos\n<code>HTML</code> e <code>CSS</code>",
                "<code>Git</code> guarda os arquivos na nuvem e <code>Github</code> serve apenas como uma rede\nsocial",
                "<code>Github</code> utiliza <code>Git</code> como Sistema de Controle de Versões"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "8) Por meio de _____________, indicamos quais arquivos queremos que passem de nosso working directory para a staging area, enquanto que com ___________, confirmamos os arquivos que declaramos como preparados através do comando anterior",
              "description": "",
              "answers": [
                "<code>commit</code> - <code>add</code>",
                "<code>add</code> - <code>commit</code>",
                "<code>confirm</code> - <code>adding</code>",
                "<code>adding</code> - <code>confirm</code>"
              ],
              "solution": [
                1
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 10,
          "order": 4,
          "durationString": "10min"
        }
      },
      "order": 0,
      "stats": {
        "duration": 30,
        "durationString": "30min",
        "exerciseCount": 0,
        "partCount": 5
      }
    },
    "02-github": {
      "title": "GitHub",
      "bonus": false,
      "description": "<p>Depois de termos visto sobre o <code>Git</code> é hora de nos concentramos, nesta unidade,\nno uso do <code>Git</code> em conjunto com o <code>GitHub</code>(que é um serviço de repositórios\nremotos e colaboração).</p>\n",
      "parts": {
        "01-github": {
          "title": "GitHub",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=UciuMoszpp8",
              "id": "UciuMoszpp8"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=ZPoYWdQdJRs",
              "id": "ZPoYWdQdJRs"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=rfb3abnbkxM",
              "id": "rfb3abnbkxM"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Criar sua conta no <code>GitHub</code></li>\n<li>Entender a diferença entre <code>Git</code> e <code>GitHub</code></li>\n<li>Compreender os conceitos básicos: repositórios local e remoto, <em>working\ndirectory</em>, <em>staging area</em> e <em>branches</em></li>\n<li>Saber utilizar os comandos essenciais: <code>init</code>,<code>status</code>, <code>add</code>, <code>commit</code>,\n<code>push</code> e <code>pull</code></li>\n</ul>\n<h2 id=\"o-que-é-github\">O que é Github?</h2>\n<p><code>GitHub</code> é conhecido como a \"rede social\" dos desenvolvedores, pois muitos deles\nenviam seus projetos para lá. Ele permite criar <code>repositórios remotos</code> que\nsempre terão uma cópia do seu código facilmente acessível pelo <code>Git</code>, o\ncontrolador de versões.</p>\n<p>Mas o <code>GitHub</code> não serve apenas para guardar o nosso código. Ele também\ncontribuirá para o desenvolvimento colaborativo do projeto fornecendo\nferramentas como:</p>\n<ul>\n<li><p>Um <em>sistema de acompanhamento de problemas</em> que permite aos membros da equipe\ndetalhar um problema ou sugerir alterações no projeto.</p>\n</li>\n<li><p>Uma <em>ferramenta de revisão código</em>, através da qual é possível adicionar\nanotações em qualquer ponto do projeto e discutir sobre uma alteração em\nespecífico.</p>\n</li>\n<li><p>Um <em>visualizador de versões</em> para comparar o progresso do projeto ao longo das\ndiferentes versões.</p>\n</li>\n</ul>\n<p><strong>Resumindo, poderíamos dizer que GitHub é como o Dropbox, mas para\ndesenvolvedores.</strong></p>\n<h2 id=\"qual-é-a-diferença-entre-git-e-github\">Qual é a diferença entre Git e GitHub?</h2>\n<p><strong><code>Git</code> e <code>GitHub</code> se complementam, mas não são iguais.</strong></p>\n<p><code>GitHub</code> utiliza <code>Git</code> como sistema de controle de versões. Graças ao Git,\npodemos salvar localmente os diferentes progressos (estado) do nosso projeto\ne, graças ao GitHub, podemos enviá-los à nuvem e iniciar um trabalho\ncolaborativo ou trabalhar em nossos projetos pessoais sem depender do computador\nonde se encontra o projeto ou de um <em>pen drive</em> para copiá-lo a outra máquina.</p>\n<h2 id=\"por-que-git-e-github-são-importantes\">Por que Git e GitHub são importantes?</h2>\n<p>A programação é feita, na maioria das vezes, em equipes. Várias empresas têm uma\nequipe que se complementa para cada projeto. Diante dessa situação, você pode se\nperguntar:</p>\n<blockquote>\n<p>Como se organizam para trabalhar todos em um único projeto? Talvez eles tenham\ntudo em um USB e se revezam para poderem trabalhar, ou cada um trabalha por si\ne, na hora de juntar todas as partes, precisam analisar detalhadamente se\nrepetiram ou não algum pedaço.</p>\n</blockquote>\n<p>Isso não seria nada eficiente, pois não seria possível trabalhar ao mesmo tempo\nem algo específico e dependeríamos do progresso de outra pessoa para que\npudéssemos avançar.</p>\n<p>Para esses casos, existem ferramentas como o <code>Git</code> e <code>GitHub</code> que nos ajudam a\ntrabalhar de forma colaborativa. <code>GitHub</code> é o lugar perfeito para trabalhar em\nconjunto num projeto com um ou vários companheiros, pois você poderá: criar um\nprojeto e adicionar os membros de sua equipe como colaboradores; trazer ao seu\nrepositório local as alterações que seus companheiros enviaram ao repositório\nremoto; ver automaticamente o que seu companheiro acabou de adicionar.</p>\n<h2 id=\"como-criar-uma-conta-no-github\">Como criar uma conta no GitHub?</h2>\n<p>Para criar sua conta no GitHub, siga estes passos:</p>\n<ol>\n<li><p>Vá à <a href=\"https://github.com\" target=\"_blank\">página oficial do GitHub</a></p>\n</li>\n<li><p>Uma vez na página, clique em <strong>\"Sign up\"</strong></p>\n</li>\n<li><p>Digite um nome de usuário (<strong>username</strong>) que pode ser um que você já tenha.\nPor exemplo, se você já criou um <em>username</em> para um jogo online, poderá usar\nele mesmo. Há infinitas possibilidades para criar um novo, mas tenha em mente\nque seu <em>username</em> será visível para o mundo todo e poderá ser solicitado\nquando alguém for incluí-la no time de colaboradores de um projeto. Portanto,\ntenha cuidado com sua escolha de <em>username</em>. Em seguida, digite seu e-mail,\nsenha e clique em <strong>\"Create an account\"</strong>.</p>\n</li>\n<li><p>Na próxima tela, certifique-se de marcar a opção <strong>\"Unlimited public</strong>\n<strong>repositories for free\"</strong>, a versão \"free\" do GitHub. Em seguida, clique em\n<strong>\"continue\"</strong></p>\n</li>\n<li><p>No terceiro passo do registro, você pode completar com seus dados e clicar em\n<strong>\"Submit\"</strong>, ou somente clicar em <strong>\"Skip this step\"</strong></p>\n</li>\n</ol>\n<p>E pronto! Ao finalizar essas etapas, teremos nossa conta GitHub criada.</p>\n<p>Agora Juliana, seguindo os passos anteriores, criará\nsua conta no <code>Github</code>.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/UciuMoszpp8?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"como-criamos-um-repositório-remoto-no-github\">Como criamos um repositório remoto no GitHub?</h2>\n<p>Siga os passos a seguir para criar um repositório no <code>Github</code>:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ZPoYWdQdJRs?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Por último temos a tela onde encontramos a <code>url</code> do nosso <code>repositório remoto</code>,\ncom o qual (mais adiante) vincularemos nosso repositório remoto com nosso\nrepositório local.</p>\n<h2 id=\"como-usar-o-git-e-github\">Como usar o Git e GitHub?</h2>\n<p>Já lemos as vantagens que <code>Git</code> e <code>GitHub</code> podem nos oferecer: com eles, podemos\nfazer upload de um repositório local a outro remoto, trabalhar com versões e de\nforma colaborativa, etc. Agora, vamos a \"mágica\" do Git com GitHub: enviar nosso\nrepositório <em>local</em> a um repositório <em>remoto</em> e trabalhar colaborativamente.</p>\n<ul>\n<li><p><code>remote</code>: Com <code>remote</code>, <strong>vincularemos</strong> nosso repositório local ao nosso\nrepositório localizado na \"nuvem\" por meio de uma <strong>URL</strong>. Este passo <em>não</em> é\nfeito a cada versão criada, mas somente uma vez para especificarmos o\nrepositório remoto que temos à disposição. Para ligar o nosso repositório\nlocal com nosso repositório remoto, devemos executar o seguinte comando:</p>\n<pre><code class=\"language-bash\">git remote add nome-remoto url\n</code></pre>\n<p>Normalmente, a maioria dos desenvolvedores utilizam <em>origin</em> (origem) como\n<code>nome-remoto</code> e <code>url</code> é o endereço do repositório no GitHub. Por exemplo,\ncriei um repositório \"teste\" no GitHub há pouco tempo atrás e, para vincular\nmeu repositório local a esse repositório remoto, eu devo executar a seguinte\nlinha de comando:</p>\n<pre><code class=\"language-bash\">git remote add origin https://github.com/michellesegv/teste.git\n</code></pre>\n</li>\n<li><p><code>push</code>: Através do <code>push</code>, <strong>enviaremos</strong> nossa nova versão, confirmada pelo\n<code>commit</code>, ao nosso repositório remoto. O comando é o seguinte:</p>\n<pre><code class=\"language-bash\">git push nome-remoto master\n</code></pre>\n<p>O <code>nome-remoto</code> é aquele atribuído com o comando anterior (<code>remote add</code>) e,\nno nosso caso, é <em>origin</em>. Em seguida, digitamos <code>master</code>, o nome da <em>branch</em>.\nVeremos mais adiante como trabalhar com <em>branches</em> (ramos). Os ramos são uma\ncópia paralela que podemos criar do nosso código. Por padrão, os repositórios\npossuem um ramo chamado <em>master</em> (mestre) e, por enquanto, trabalharemos\nsomente nele. Dessa forma, para enviar as mudanças ao ramo remoto <em>master</em>,\nexecutamos:</p>\n<pre><code class=\"language-bash\">git push origin master\n</code></pre>\n</li>\n<li><p><code>pull</code>: Permite atualizar nosso repositório local para o último <code>commit</code>\nregistrado no repositório remoto. Este comando irá nos ajudar muito ao\ntrabalharmos de forma colaborativa, pois poderemos trazer o progresso que\nnossos colaboradores enviaram ao repositório remoto para o repositório local,\nmantendo-o atualizado. O comando é o seguinte:</p>\n<pre><code class=\"language-bash\">git pull nome-remoto master\n</code></pre>\n<p>No nosso caso, como já declaramos o nome do repositório remoto como <em>origin</em> e\nestamos trabalhando no ramo <em>master</em> (padrão), o comando seria:</p>\n<pre><code class=\"language-bash\">git pull origin master\n</code></pre>\n</li>\n</ul>\n<h2 id=\"exemplo\">Exemplo</h2>\n<p>Agora vamos ver como Juliana utiliza <code>Git</code> e <code>Github</code> para manejar o controle\nde versões de ses projetos e colaborar com outras coaches de Laboratoria.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/rfb3abnbkxM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"material-complementar\">Material complementar</h3>\n<p>A seguir, temos uma lista de comandos do Git usados nesta aula:</p>\n<table>\n<thead>\n<tr>\n<th>Comando</th>\n<th>Descrição</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>git config --global user.name seu-username</code></td>\n<td>Configura o nome do usuário</td>\n</tr>\n<tr>\n<td><code>git config --global user.email seu@email.com</code></td>\n<td>Configura o e-mail</td>\n</tr>\n<tr>\n<td><code>git init</code></td>\n<td>Inicia o monitoramento do diretório indicado</td>\n</tr>\n<tr>\n<td><code>git add arquivo</code></td>\n<td>Passa o arquivo do <em>working directory</em> à <em>staging area</em></td>\n</tr>\n<tr>\n<td><code>git add .</code></td>\n<td>Passa tudo do <em>working directory</em> à <em>staging area</em></td>\n</tr>\n<tr>\n<td><code>git commit -m 'Comentário'</code></td>\n<td>Confirma os arquivos para serem salvos</td>\n</tr>\n<tr>\n<td><code>git remote add nome-remoto URL</code></td>\n<td>Vincula o repositório local com remoto</td>\n</tr>\n<tr>\n<td><code>git push nome-remoto master</code></td>\n<td>Envia o conteúdo local no repositório remoto</td>\n</tr>\n<tr>\n<td><code>git status</code></td>\n<td>Mostra o estado dos arquivos do diretório local</td>\n</tr>\n<tr>\n<td><code>git pull nome-remoto master</code></td>\n<td>Atualiza o repositório local</td>\n</tr>\n</tbody></table>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<p>Recomendamos as seguintes leituras:</p>\n<ul>\n<li><a href=\"https://try.github.io/levels/1/challenges/1\" target=\"_blank\">Try Git</a></li>\n<li><a href=\"https://services.github.com/on-demand/intro-to-github/\" target=\"_blank\">GitHub Flow</a></li>\n<li><a href=\"https://learngitbranching.js.org/\" target=\"_blank\">Learn git branching</a></li>\n<li><a href=\"http://www.ndpsoftware.com/git-cheatsheet.html\" target=\"_blank\">Outro tutorial interativo e\nvisual</a></li>\n</ul>\n",
          "order": 0,
          "durationString": "20min"
        },
        "02-quiz": {
          "questions": [
            {
              "title": "1) Qual das frases a baixo NÃO pertence ao Github?",
              "description": "",
              "answers": [
                "Um sistema para unificar as contas de desenvolvimento",
                "Um sistema de histórico",
                "Uma ferramenta de revisão de código",
                "Um revisor de versões"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "2) Através do comando _____________ enviamos a nova versão ao repositório remoto, enquanto o comando _____________ serve para atualizar o repositório local com o último commit que está no repositório remoto",
              "description": "",
              "answers": [
                "<code>add</code> - <code>update</code>",
                "<code>update</code> - <code>add</code>",
                "<code>push</code> - <code>pull</code>",
                "<code>pull</code> - <code>push</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) Das seguintes frases, qual pertence ao Github? Pode selecionar mais de uma",
              "description": "",
              "answers": [
                "Revisor de versões",
                "Um sistema de controle de versões",
                "Uma ferramenta de revisão de código",
                "Um sistema para unificar as contas de desenvolvimento"
              ],
              "solution": [
                0,
                2
              ]
            },
            {
              "title": "4) Qual é a diferença entre Git e Github?",
              "description": "",
              "answers": [
                "<code>Git</code> somente serve como uma rede social e o <code>Github</code> armazena as extensões\ndos arquivos.",
                "<code>Github</code> armazena os arquivos JavaScript enquanto o <code>Git</code> cuida do <code>HTML</code> e <code>CSS</code>",
                "<code>Git</code> guarda os arquivos na nuvem e o <code>Github</code> serve como rede social",
                "<code>Github</code> utiliza o <code>Git</code> como sistema de controle de versões"
              ],
              "solution": [
                3
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 5,
          "order": 1,
          "durationString": "5min"
        }
      },
      "order": 1,
      "stats": {
        "duration": 25,
        "durationString": "25min",
        "exerciseCount": 0,
        "partCount": 2
      }
    }
  },
  "grades": "",
  "contributors": "",
  "books": "",
  "benchmarks": "",
  "references": "",
  "repo": "Laboratoria/bootcamp",
  "path": "topics/scm",
  "version": "3.1.0",
  "parserVersion": "3.0.0",
  "track": "js",
  "locale": "pt-BR",
  "stats": {
    "duration": 55,
    "durationString": "55min",
    "exerciseCount": 0,
    "unitCount": 2,
    "partCount": 7
  }
}
