{
  "slug": "browser-pt",
  "createdAt": "2021-07-12T22:08:24.898Z",
  "title": "Browser JavaScript",
  "description": "<p>Este <em>tópico</em> cubre JavaScript en el contexto del navegador.</p>\n",
  "tags": {
    "secondary": {},
    "primary": {}
  },
  "targetAudience": "<p>...</p>\n",
  "dependencies": "<p>...</p>\n",
  "learningObjectives": "<ul>\n<li>...</li>\n<li>Qué es un Browser API y como utilizarlas</li>\n<li>Qué es un API y qué APIs nos ofrece HTML5</li>\n<li>...</li>\n</ul>\n",
  "product": "",
  "syllabus": {
    "02-dom": {
      "title": "DOM",
      "bonus": false,
      "description": "<p>Nesta unidade você irá aprender sobre o Modelo de Documento por Objetos (do\ninglês Document Object Model - DOM), que é uma conveção multiplataforma e\nindependente de linguagem para representação e interação com objetos em\ndocumentos HTML, XHTML e XML. E também irá aprender sobre as suas APIs.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Introdução: tornando o seu site interativo",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Nesta unidade aprenderemos:</p>\n<ul>\n<li>O que é o DOM e qual é a utilidade de manipulá-lo?</li>\n<li>Qual é o BOM e qual é a utilidade de manipulá-lo?</li>\n<li>O que é um evento e qual é a sua utilidade?</li>\n</ul>\n<h2 id=\"por-que-aprender-isso\">Por que aprender isso?</h2>\n<p>Quando estamos construindo sites, chega um momento em que precisamos dar\nfuncionalidade dinâmica à nossa página (que muda conforme o tempo passa). Pode\nser alguma animação, o tamanho de um texto, a visibilidade de uma imagem, etc.</p>\n<p>O DOM, o BOM e os eventos nos permitem fazer essas manipulações, se soubermos\ncomo usá-los.</p>\n<h2 id=\"guia-para-perguntas-e-conceitos-chave\">Guia para perguntas e conceitos-chave</h2>\n<p>Quando começamos a estudar um novo tópico, é útil ter uma ideia dos conceitos\nmais importantes sobre o que vamos aprender e as questões centrais às quais\ndevemos prestar atenção particular.</p>\n<p>Aqui está uma série de perguntas que você deve ser capaz de responder no final\ndesta unidade. Use essas perguntas como um guia para orientar seus esforços de\naprendizado. Volte para eles constantemente enquanto você avança para validar\nque você está se indo na direção certa. Isso serve como uma \"lista de\nverificação\" que você marca conforme avança.</p>\n<h3 id=\"dom\">DOM</h3>\n<ul>\n<li>O que é o DOM?</li>\n<li>O que é um selector?</li>\n<li>Qual é a diferença entre document.getElementById e\ndocument.getElementsByClassName?</li>\n<li>Como invocamos os filhos de um elemento usando o DOM?</li>\n<li>Como invocamos o pai de um item usando o DOM?</li>\n<li>Quais atributos CSS de um elemento podem ser modificados usando o DOM?</li>\n<li>Como podemos simular animação entre elementos HTML?</li>\n</ul>\n<h3 id=\"bom\">BOM</h3>\n<ul>\n<li>O que é o BOM?</li>\n<li>Como o DOM se relaciona com o BOM?</li>\n<li>Quais são alguns usos comuns do BOM?</li>\n</ul>\n<h3 id=\"modificando-o-dom\">Modificando o DOM</h3>\n<ul>\n<li>Novos nós podem ser criados usando o DOM?</li>\n<li>O que é um nó?</li>\n<li>Quantos tipos de nós existem?</li>\n<li>Por que dizemos que o DOM tem nós?</li>\n<li>Por que dizemos que o DOM tem nós de objetos?</li>\n<li>Como podemos acessar a propriedade <em>style</em> do <em>body</em> usando o DOM?</li>\n<li>Qual é o nó de origem no DOM?</li>\n<li>Qual é o nó de origem no BOM?</li>\n<li>Qual é a diferença entre o nó e o elemento?</li>\n</ul>\n<h3 id=\"eventos\">Eventos</h3>\n<ul>\n<li>O que é um evento?</li>\n<li>Quais são os eventos mais usados ​​em um navegador?</li>\n<li>Como detectamos um \"clique\" do usuário?</li>\n<li>Como podemos detectar a entrada de texto de um usuário?</li>\n<li>Como detectamos o envio de um formulário?</li>\n<li>Podemos usar o evento <em>submit</em> para um <em>input text</em>?</li>\n<li>Para que server a palavra reservada \"event\" ou \"e\"?</li>\n<li>Como podemos armazenar ou passar informações entre elementos HTML?</li>\n<li>O que é <em>event delegation</em>?</li>\n<li>O que é <em>event propagation</em>?</li>\n<li>Como definimos nossos próprios eventos?</li>\n<li>Qual é a diferença entre onClick e addEventListener (\"click\")?</li>\n</ul>\n",
          "order": 0,
          "durationString": "20min"
        },
        "01-dom": {
          "title": "Document Object Model (DOM)",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=3UE4ndfUQVk",
              "id": "3UE4ndfUQVk"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Nesta unidade aprenderemos:</p>\n<ul>\n<li>O que é o DOM e para que nos serve?</li>\n<li>Conhecer as seguintes propriedades:<ul>\n<li><code>parentNode</code></li>\n<li><code>childNodes</code></li>\n<li><code>firstChild</code></li>\n<li><code>lastChild</code></li>\n<li><code>previousSibling</code></li>\n<li><code>previousElementSibling</code></li>\n<li><code>nextSibling</code></li>\n<li><code>nextElementSibling</code></li>\n</ul>\n</li>\n<li>Conhecer os seguintes métodos:<ul>\n<li><code>document.getElementById()</code></li>\n<li><code>document.getElementsByTagName()</code></li>\n<li><code>document.getElementsByClassName()</code></li>\n<li><code>document.querySelector()</code></li>\n<li><code>document.querySelectorAll()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"o-que-é-o-dom\">O que é o DOM?</h2>\n<p>A criação do <em>Document Object Model</em> o <code>DOM</code> é uma das inovações que mais\ninfluênciou o desenvolvimento de sites e de aplicações mais complexas.</p>\n<p><code>DOM</code> é uma ferrramente que permite que permite os programadoes a acessar e\nmanipular as páginas XHTML como se fossem documentos XML. Na verdade, o <code>DOM</code>\nfoi projetado originalmente para manipular o XML de forma mais simples.</p>\n<p>Apesar de suas origens, o <code>DOM</code> virou uma utilidade disponível para a maioria\ndas linguagens de programação (Java, PHP, JavaScript) com a única forma sendo a\nmaneira de implementar.</p>\n<p>Uma das tarefas mais comuns da programação web com JavaScript consiste em\nmanipular as páginas web. Desta forma, é comum obter o valor armazenado em\nalguns elementos (por exemplo os elementos de um formário), criar um elemento\n(<code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>) de forma dinâmica e adicionar ele na página, inserir uma\nanimação com um elemento (fazer aparecer e desaparecer, fazer se mover, etc).</p>\n<p>Todas essas tarefas comuns são muito simples de realizar graças ao <code>DOM</code>, sem\ndificuldades, para poder realizar estas tarefas é necessário \"transformar\" a\npágina original.</p>\n<p>Uma página <code>HTML</code> não é mais do que uma seqüência de caracateres, por isso que é\num formato difícil de manipular, os navegadores web (Chrome, Mozilla, IE, etc)\ntransformam automaticamente todas as páginas web em uma estrutura mais eficiente\nde manipular.</p>\n<p>Está transformação é realizada por todos os navegadores de forma automática e\nque nos permite utilizar as ferramentas do <code>DOM</code> de forma simples.</p>\n<p><code>DOM</code> transforma todos os documentos <code>XHTML</code> em um conjunto de elementos\nchamados <code>nós</code>, que estão interconectados e que representam o conteúdo da página\nweb e a relação entre eles. Por causa de seu formato, a união de todos os nós é\nchamado de <code>árvore de nós</code> como mostrado na imagem.</p>\n<table>\n<thead>\n<tr>\n<th>Página Web (1)</th>\n<th>Árbol de Nodos DOM (2)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://user-images.githubusercontent.com/11894994/58907326-48968400-86e4-11e9-87e8-8026b6063636.png\" alt=\"Página web\"></td>\n<td><img src=\"https://user-images.githubusercontent.com/11894994/58907322-459b9380-86e4-11e9-9677-bb17626dd546.png\" alt=\"DOM\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"tipos-de-nós\">Tipos de Nós</h2>\n<p>A transformação automática de uma página em uma árvore de nós sempre segue as\nmesmas regras.</p>\n<ul>\n<li><code>As etiquetas XHTML se transformar em nós</code></li>\n</ul>\n<blockquote>\n<p>O primeira é a própria tag e o segundo nó é o filho do primeiro e consistem no\nconteúdo de texto da tag.</p>\n</blockquote>\n<ul>\n<li><code>Se uma etiqueta XHTML se encontra dentro da outra</code></li>\n</ul>\n<blockquote>\n<p>Segue o mesmo procedimento anterior, mas os nós gerados serão nós filhos das\ntags pai.</p>\n</blockquote>\n<p>Como se pode supor, as páginas XHTML normalmente produzem árvores com milhares\nde nós. Mesmo assim, o processo de transformação é rápido e automático, sendo as\nfunções fornecidas pelo DOM (que serão vistas posteriormente) as únicas que\npermitem o acesso a qualquer nó da página de forma simples e imediata.</p>\n<p>A especificação completa de <code>DOM</code> define 12 tipos de nós, que estão detalhados\nabaixo:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Nome do Nó</th>\n<th align=\"center\">Significado</th>\n<th align=\"right\">Tipo de Nó</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ELEMENT_NODE</td>\n<td align=\"center\">Nó do tipo <code>Element</code></td>\n<td align=\"right\">1</td>\n</tr>\n<tr>\n<td align=\"left\">ATTRIBUTE_NODE</td>\n<td align=\"center\">Nó do tipo <code>Attr</code></td>\n<td align=\"right\">2</td>\n</tr>\n<tr>\n<td align=\"left\">TEXT_NODE</td>\n<td align=\"center\">Nó do tipo <code>Text</code></td>\n<td align=\"right\">3</td>\n</tr>\n<tr>\n<td align=\"left\">CDATA_SECTION_NODE</td>\n<td align=\"center\">Nó do tipo <code>CDATASection</code></td>\n<td align=\"right\">4</td>\n</tr>\n<tr>\n<td align=\"left\">ENTITY_REFERENCE_NODE</td>\n<td align=\"center\">Nó do tipo <code>EntityReference</code></td>\n<td align=\"right\">5</td>\n</tr>\n<tr>\n<td align=\"left\">ENTITY_NODE</td>\n<td align=\"center\">Nó do tipo <code>Entity</code></td>\n<td align=\"right\">6</td>\n</tr>\n<tr>\n<td align=\"left\">PROCESSING_INSTRUCTION_NODE</td>\n<td align=\"center\">Nó do tipo <code>ProcessingInstruction</code></td>\n<td align=\"right\">7</td>\n</tr>\n<tr>\n<td align=\"left\">COMMENT_NODE</td>\n<td align=\"center\">Nó do tipo <code>Comment</code></td>\n<td align=\"right\">8</td>\n</tr>\n<tr>\n<td align=\"left\">DOCUMENT_NODE</td>\n<td align=\"center\">Nó do tipo <code>Document</code></td>\n<td align=\"right\">9</td>\n</tr>\n<tr>\n<td align=\"left\">DOCUMENT_TYPE_NODE</td>\n<td align=\"center\">Nó do tipo <code>DocumentType</code></td>\n<td align=\"right\">10</td>\n</tr>\n<tr>\n<td align=\"left\">DOCUMENT_FRAGMENT_NODE</td>\n<td align=\"center\">Nó do tipo <code>DocumentFragment</code></td>\n<td align=\"right\">11</td>\n</tr>\n<tr>\n<td align=\"left\">NOTATION_NODE</td>\n<td align=\"center\">Nó do tipo <code>Notation</code></td>\n<td align=\"right\">12</td>\n</tr>\n</tbody></table>\n<p>Embora as páginas XHTML que iremos gerenciar possam ser manipuladas manipulando\napenas quatro ou cinco tipos desses nós:</p>\n<ul>\n<li><p><code>DOCUMENT_NODE</code>, nó raíz que deriva todos os outros nodes da árvore.</p>\n</li>\n<li><p><code>ELEMENT_NODE</code>, representa cada uma das tags XHTML. Podem ser filhos de outro\nnó de tipo <em>element</em> e também ter filhos (nó <em>element</em> ou nó _text_).</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n\n3 nós de Element -&gt; tags html, head e body\n</code></pre>\n</li>\n<li><p><code>ATTRIBUTE_NODE</code>, um nó desse tipo é definido para representar cada um dos\natributos das tags XHTML. Esses nós são sempre filhos de um nó Elemento e não\npodem ter filhos.</p>\n<pre><code class=\"language-html\">&lt;img src=\"images/logo.png\" alt=\"Logo Laboratoria\"/&gt;\n\n1 nó Element -&gt; tag img\n2 nós Attr -&gt; src e alt\n</code></pre>\n</li>\n<li><p><code>TEXT_NODE</code>, nó que contém o texto entre uma tag HTML. Esses nós são sempre\nfilhos de um nó Element e não podem ter filhos.</p>\n<pre><code class=\"language-html\">&lt;h1&gt;Futuramente eu serei uma programadora da Laboratoria&lt;/h1&gt;\n&lt;h2&gt;O que devo fazer?&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;li&gt;Mentalidade do crescimento&lt;/li&gt;\n  &lt;li&gt;Praticar muito&lt;/li&gt;\n  &lt;li&gt;Autoaprendizagem e perguntar sempre&lt;/li&gt;\n&lt;/ul&gt;\n\n6 Nós Element -&gt; tags h1, h2, ul, li,\n5 nós Text -&gt; 'Futuramente eu serei uma programadora da Laboratoria',\n'O que devo fazer?', 'Mentalidade de crescimento',\n'praticar muito', 'Autoaprendizagem e perguntar sempre'\n</code></pre>\n</li>\n<li><p><code>COMMENT_NODE</code>, representa os comentários incluídos na página XHTML.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Página única&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;!-- Olá, este é um comentário --&gt;\n    &lt;h1&gt;Olá mundo&lt;/h1&gt;\n     &lt;!-- Por favor, coloque uma foto --&gt;\n    &lt;img  src=\"images/logo.png\"  alt=\"Logo Laboratoria\"/&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n6 Nós Element -&gt; tag html, head, title, body, h1, img\n2 nós Text -&gt; 'Página simples', 'Olá mundo'\n2 nós Attr -&gt; src e alt\n2 nós Comment -&gt; &lt;!--Olá, este é um comentário --&gt;\n&lt;!-- Por favor, coloque uma foto --&gt;\n</code></pre>\n</li>\n</ul>\n<p>Existem outros tipos de nós que não vamos mostrar aqui, como por exemplo:\n<code>DocumentType</code>, <code>CDataSection</code>, <code>DocumentFragment</code>, <code>Entity</code>, <code>EntityReference</code>,\n<code>ProcessingInstruction</code> e <code>Notation</code>.</p>\n<h2 id=\"relação-entre-nós\">Relação entre nós</h2>\n<p>Os nós do <code>DOM</code> se relacionam entre si, tendo em conta quem é o nós pai, quem\nsão os irmão e filhos. Assim como você tem irmãos, pais e filhoes, <strong>todos os\nnós do DOM também tem alguma relação familiar</strong>.</p>\n<h3 id=\"analisemos-esta-imagem\">Analisemos esta imagem</h3>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/58907764-4bde3f80-86e5-11e9-8c73-2fa2831dc891.gif\" alt=\"DOM\nTree\"></p>\n<ul>\n<li>A raiz da árvore de nós de qualquer página da web é sempre a mesma: <strong>um nó\nchamado document</strong> que é o objeto <code>pai</code> dos demais objetos.</li>\n<li>O nó <strong>html</strong> é aquele pai dos objetos ou nós <strong>head</strong> e <strong>body</strong> (mas\n<strong>filho</strong> do nó <strong>document</strong>).</li>\n<li>O objeto ou nó do <strong>body</strong> é o <code>pai</code> de <strong>a</strong> e <strong>h1</strong>, portanto, esses\nrótulos são filhos do nó do <strong>body</strong>.</li>\n<li>O nó de texto <strong>My header</strong> é filho do nó <strong>h1</strong> .</li>\n</ul>\n<h3 id=\"irmãos-de-relacionamento\">Irmãos de relacionamento</h3>\n<p>Analisando a mesma imagem acima:</p>\n<ul>\n<li>Os nós <code>irmãos</code> referem-se aos nós que possuem o mesmo pai, ou seja, são nós\ndo mesmo nível na árvore DOM.</li>\n<li>Os objetos ou nós <strong>head</strong> e <strong>body</strong> são <code>irmãos</code>, cujo pai é o objeto ou nó\n<strong>html</strong> .</li>\n<li>O nó de texto <strong>My link</strong> e o nó <strong>attribute</strong> são nós <code>irmãos</code>, cujo pai é o\nobjeto ou nó <strong>a</strong> . (Na imagem parece que <strong>attribute</strong> é o irmão do nó\n<strong>a</strong>, mas <strong>a</strong> é pai de <strong>attribute</strong>.)</li>\n</ul>\n<h2 id=\"propriedades-dos-nós\">Propriedades dos nós</h2>\n<p>Primeiro, cada vez que falamos em <code>nós</code> na realidade estão nos referindo a um\n<em>objeto</em> e como você lembra, os objetos possuem <em>propriedades e métodos</em>. Com\nisso os <code>nós</code> tem também tem propriedades e métodos que irão te ajudar a\nidentificá-los.</p>\n<p>Os nós DOM possuem propriedades básicas, que são:</p>\n<ul>\n<li><strong>nodeName</strong> , indica o nome do nó.</li>\n<li><strong>nodeType</strong> , é um número inteiro que descreve o tipo de nó: <code>1</code> para tags\nHTML, <code>3</code> para nós de tipo de texto, <code>8</code> para nós de tipo de comentário, <code>9</code>\npara nó de tipo de documento, etc.</li>\n<li><strong>nodeValue</strong> , é o texto contido em um nó de texto. Esta propriedade é usada\napenas para nós do tipo 3 e nós do tipo comentário <code>8</code>.</li>\n</ul>\n<h2 id=\"recapitulando\">Recapitulando</h2>\n<p>Prepare seu editor, replique o que Daniel realiza no vídeo a seguir e reforce\nseu aprendizado.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/3UE4ndfUQVk?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-bom": {
          "title": "Browser Object Model (BOM)",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Nesta leitura vamos aprender:</p>\n<ul>\n<li>Para que usamos o BOM?</li>\n<li>Quais elementos podemos modificar no BOM?</li>\n<li>Qual é a relação entre  BOM e  DOM?</li>\n<li>Para que serve o objeto <em>window</em>?</li>\n</ul>\n<h2 id=\"bom\">BOM</h2>\n<p>O BOM é muito semelhante ao DOM, mas possui objetivos diferentes. Esta\n<a href=\"http://librosweb.es/libro/ajax/capitulo_5.html\" target=\"_blank\">leitura</a> mostra o que é BOM e\npara que serve.</p>\n<h2 id=\"o-objeto-window\">O objeto <em>window</em></h2>\n<p>O objeto <em>window</em> faz parte do BOM e serve para controlar as coisas diretamente\ndo navegador. Esta\n<a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_window.html\" target=\"_blank\">leitura</a> nos\nmostra quais.</p>\n<h2 id=\"relação-entre-bom-e-dom\">Relação entre BOM e DOM</h2>\n<p>Como podemos ver nas leituras anteriores, o BOM é muito semelhante ao DOM, tanto\nna sintaxe quanto na estrutura. No entanto, um se concentra em acessar o HTML\nque é exibido no navegador e o outro se concentra em modificar diretamente o\nnavegador e suas propriedades.</p>\n<p>Algumas dessas propriedades a serem modificadas pela lista de materiais são as\nseguintes:</p>\n<ul>\n<li><p>O objeto\n<a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_location.html\" target=\"_blank\">Location</a></p>\n</li>\n<li><p>O objeto\n<a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_navigator.html\" target=\"_blank\">Navigator</a></p>\n</li>\n<li><p>O objeto de\n<a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_screen.html\" target=\"_blank\">screen</a></p>\n</li>\n</ul>\n",
          "order": 2,
          "durationString": "30min"
        },
        "03-1-dom-methods-selection": {
          "title": "Modificando o DOM",
          "type": "read",
          "format": "self-paced",
          "duration": 120,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=6mzK28lEZsI",
              "id": "6mzK28lEZsI"
            }
          ],
          "body": "<h2 id=\"seleção-de-nós-com-dom\">Seleção de nós com DOM</h2>\n<p>Uma vez construído automaticamente a árvore completa de nós do DOM, já é\npossível utilizar as funções DOM para acessar de maneira direta qualquer nó da\nárvore.</p>\n<p>Como acessar um nó da árvore equivale a acessar \"um pedaço\" da página, uma vez\nconstruída a árvore já é possível manipular de forma simples a página: acessar o\nvalor de um elemento, estabelecer o valor de um elemento, mover um elemento da\npágina, criar e adicionar novos elementos, etc.</p>\n<p>DOM fornece dois métodos alternativos para acessar um nó específico: acesso por\nmeios de seus nós pais e acesso direto.</p>\n<p>As funções que o DOM disponibiliza para acessar um nó por meio de seus nós pais\nconsistem em acessar o nó raiz da página e depois seus nós filhos e os nós\nfilhos desses filhos e assim sucessivamente até o último nó folha contendo o nó\nprocurado. Porém, quando queremos acessar um nó específico, é muito mais rápido\nacessar diretamente esse nó e não chegar até ele caminhando por todos os seus\nnós pais.</p>\n<p>Por essa razão, não vamos apresentar as funções necessárias para o acesso\nhierárquico dos nós e mostraremos somente as que permitem acesso os nós de forma\ndireta.</p>\n<p>É importante lembrar que o acesso aos nós, sua modificação e sua eliminação\nsomente são possíveis quando a árvore do DOM estiver construída completamente,\nou seja, depois que a página XHTML estiver carregada completamente. Mais adiante\nveremos como garantir que um código JavaScript só seja executado quando o\nnavegador tenha carregado toda a página XHTML.</p>\n<p>Por fim, tem recomendamos que prove os siguentes métodos replicando o código no\nseu editor de texto.</p>\n<h3 id=\"getelementbyid\"><strong>getElementById()</strong></h3>\n<p>A função <code>getElementById()</code> é a mais utilizada quando desenvolvemos aplicações\nweb dinâmicas. É a função preferida para acessar diretamente um nó e poder ler\nsuas propriedades.</p>\n<p>A função <code>getElementById()</code> retorna o elemento XHTML cujo atributo <code>id</code> coincide\ncom o parâmetro informando na função. Como o atributo <code>id</code> deve ser único para\ncada elemento de uma mesma página, a função devolve somente o nó desejado.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hello Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hello Mundo&lt;/h2&gt;\n &lt;h2&gt;My Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programming&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Dancing&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Watch Netflix&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">const firstItem = document.getElementById(\"highlight\");\n</code></pre>\n<h3 id=\"getelementsbyclassname\"><strong>getElementsByClassName()</strong></h3>\n<p>A função <code>getElementsByClassName()</code> retorna uma lista de nós da página <code>XHTML</code>\ncuja o atributo <code>class</code> é igual ao parâmetro indicado na função.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hello Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hello Mundo&lt;/h2&gt;\n &lt;h2&gt;My Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programming&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Dancing&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Watch Netflix&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">const items = document.getElementsByClassName(\"bolded\");\n</code></pre>\n<h3 id=\"getelementsbytagname\"><strong>getElementsByTagName()</strong></h3>\n<p>Como algumas funções do <code>DOM</code> , a função <code>getElementsByTagName()</code> tem o nome\nmuito grande, mas autoexplicativo.</p>\n<p>A função <code>getElementsByTagName(tagName)</code> retorna uma lista de nós da página\n<code>XHTML</code> cuja a <em>tag</em> é igual ao parâmetro que foi passado na função.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hello Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hello Mundo&lt;/h2&gt;\n &lt;h2&gt;My Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programming&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Dancing&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Watch Netflix&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">const titles = document.getElementsByTagName('h2');\nconsole.log(titles[0]);\nconsole.log(titles[1]);\nconsole.log(titles[2]);\n\nconst listItems = document.getElementsByTagName('li');\nconsole.log(listItems[0]);\nconsole.log(listItems[1]);\nconsole.log(listItems[2]);\n</code></pre>\n<h3 id=\"queryselector\"><strong>querySelector()</strong></h3>\n<p>Está função retorna o primeiro elemento que coincide com o seletor <code>CSS</code> passado\ncomo parâmetro.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hello Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hello Mundo&lt;/h2&gt;\n &lt;h2&gt;My Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programming&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Dancing&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Watch Netflix&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - id\nconst item = document.querySelector('#highlight');\nconsole.log(item);\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - class\nconst item = document.querySelector('.bolded');\nconsole.log(item);\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - tag\nconst title = document.querySelector('h2');\nconsole.log(title);\n</code></pre>\n<h3 id=\"queryselectorall\"><strong>querySelectorAll()</strong></h3>\n<p>Está função retorna uma lista de nós que coincidem com o seletor <code>CSS</code> passado\ncomo parâmetro.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hello Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hello Mundo&lt;/h2&gt;\n &lt;h2&gt;My Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programming&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Dancing&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Watch Netflix&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - tag\nconst titles = document.querySelectorAll('h2');\nconsole.log(titles);\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - class\nconst items = document.querySelectorAll('.bolded');\nconsole.log(items);\n</code></pre>\n<h2 id=\"recapitulando\">Recapitulando</h2>\n<p>Prepare seueditor, replique o que Daniel realiza no seguinte vídeo e\nreforce seu aprendizado.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/6mzK28lEZsI?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Também recomendamos o\n<a href=\"https://developer.mozilla.org/pt-PT/docs/Gecko_DOM_Reference/Introduction\" target=\"_blank\">link</a>\nda documentação oficinal do Mozilla sobre o DOM.</p>\n",
          "order": 3,
          "durationString": "2h"
        },
        "03-2-dom-methods-crud": {
          "title": "Modificando o DOM",
          "type": "read",
          "format": "self-paced",
          "duration": 120,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=jWpUT_dF8EA",
              "id": "jWpUT_dF8EA"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=fDz1IgduZxA",
              "id": "fDz1IgduZxA"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=7MKCrho0nho",
              "id": "7MKCrho0nho"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Nesta unidade aprenderemos:</p>\n<ul>\n<li>Como manipular os nós no DOM</li>\n<li>Como criar, adicionar e eliminar nós no DOM<ul>\n<li><code>document.createTextNode()</code></li>\n<li><code>document.createElement()</code></li>\n<li><code>.appendChild()</code></li>\n<li><code>.removeChild()</code></li>\n</ul>\n</li>\n<li>Conhecer as seguintes propriedades:<ul>\n<li><code>.innerHTML</code></li>\n<li><code>.textContent</code></li>\n<li><code>.innerText</code></li>\n<li><code>.value</code></li>\n</ul>\n</li>\n<li>Conhecer sobre os seguintes métodos:<ul>\n<li><code>.replaceChild()</code></li>\n<li><code>.insertBefore()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"modificando-elementos-e-conteúdo-do-dom\">Modificando elementos e conteúdo do DOM</h2>\n<p>No tópico anterior vimos o que é o DOM e como selecionar nós usando JavaScript.\nDesta vez vamos usar o DOM para modificar o documento HTML usando JavaScript.</p>\n<h2 id=\"criação-de-nós\">Criação de nós</h2>\n<p>O DOM nos oferece uma série de métodos para adicionar nós a árvore de um\ndocumento, os métodos mais básicos são <code>.createElement()</code>, para criar um\nelemento e <code>.createTextNode()</code>, para criar um nós de texto.</p>\n<p>Criar e adicionar a uma página um novo elemento é simples, você precisa de\napenas quatro passos:</p>\n<ol>\n<li>Criar um nó do tipo <code>Element</code> que represente o elemento.</li>\n<li>Criar um nós do tipo <code>Text</code> que presente o conteúdo do elemento.</li>\n<li>Adicionar o nós <code>Text</code> como filho do nós <code>Element</code>.</li>\n<li>Adicionar nós <code>Element</code> na página.</li>\n</ol>\n<p>Este processo de criação de novos nós implica na utilização de três funções de\nDOM:</p>\n<ol>\n<li><p><code>createElement(tag)</code></p>\n<p> Cria um nós do tipo <code>Element</code> que representa um elemento XHTML cuja a <em>tag</em>\n é passada como parâmetro.</p>\n</li>\n<li><p><code>createTextNode(conteúdo)</code></p>\n<p> Criar um nós do tipo <code>Text</code> que armazena o conteúdo de texto dos elementos.</p>\n</li>\n<li><p><code>nóPai.appendChild(nóFilho)</code></p>\n<p> Adiciona o <code>nóFilho</code> dentor do <code>nóPai</code>.</p>\n</li>\n</ol>\n<p>Desta maneira, se quiser adicionar um parágrafo no final de um página, é\nnecessário incluir o seguinte código JavaScript.</p>\n<pre><code class=\"language-js\">// Cria o nó do tipo Element\nconst paragraph = document.createElement(\"p\");\n// Cria o nó do tipo Text\nconst content = document.createTextNode(\"Hola Mundo!\");\n// Adiciona o nó Text como filho do nós Element\nparagraph.appendChild(content);\n// Adiciona o nó Element como filho da página\ndocument.body.appendChild(parrafo);\n</code></pre>\n<p>Temos que lembrar que o DOM é uma interface que conecta o documento HTML com o\nJavaScript. É por isso que ao utilizar <code>.createElement()</code>, o nó não ficará\nvisível, ele será uma espécie de fantasma dentro do documento. Isso ocorre da\nmesma maneira com a função <code>.createTextNode()</code> e o texto passado como parâmetro.\nPara que esses elementos sejam visíveis na tela, temos que lembrar de utilizar\nalguma função como <code>.appendChild()</code> para adicionar esses elementos ao documento\nHTML.</p>\n<h2 id=\"remover-nós-do-dom\">Remover nós do DOM</h2>\n<p>Como podemos incluir novos filhos em um nó, faz sentido eliminá-los. Para isso,\nexiste o seguinte método:</p>\n<h3 id=\"removechild\"><code>removeChild()</code></h3>\n<p>Para remover um nó do documento, temos que selecionar o pai do nó e, a partir\ndaí, remover o nó desejado.</p>\n<p>Se não soubermos o pai do nó, podemos selecionar diretamente o nó, obter o pai\n(com <code>.parentElement</code>) e usar <code>.removeChild()</code> para excluí-lo.</p>\n<p>Sintaxis:</p>\n<pre><code class=\"language-js\">  pai.removeChild(nóParaEliminacao);\n</code></pre>\n<pre><code class=\"language-js\">const container = document.getElementById('container');\nconst paragraph = document.getElementById('paragraph');\ncontainer.removeChild(paragraph);\n\n/*\n * Com o nó selecionado utilizamos '.parentElement'\n * para selecionar o pai. A partir do pai utilizamos\n * '.removeChild()' para eliminar o nó selecionado.\n */\n\nconst paragraph = document.getElementById('paragraph');\nparagraph.parentNode.removeChild(paragraph);\n</code></pre>\n<p>Cuando se elimina un nodo, también se eliminan automáticamente todos los nodos\nhijos que tenga, por lo que no es necesario borrar manualmente cada nodo hijo.</p>\n<h2 id=\"más-funciones-para-manipulación-de-dom\">Más funciones para manipulación de DOM</h2>\n<p>A cima mostramos algumas funções com as quais você pode começar a praticar, mas\né importante mencionar que na hora de programar não existe apenas uma única\nmaneira de fazer ou uma única solução possível. Pensando nisso vamos te\napresentar alguns outros métodos e propriedade para você praticar.</p>\n<p>Os atributos <code>.textContent</code> e <code>.innerHTML</code> funcionam como propriedades para\nobter e modificar o valor de um elemento específico.</p>\n<h3 id=\"textcontent\"><code>textContent</code></h3>\n<p>Ao usar <code>textContent</code> em um nó, ele mostrará o conteúdo do texto que existe no\nnó e seus filhos. Se houver tags HTML, elas serão ignoradas. Se um valor for\natribuído, ele substituirá todo o conteúdo do nó pela <em>string</em> atribuída a ele.\nSe a <em>string</em> contiver tags HTML, elas serão interpretadas e exibidas como\ntexto. As alterações feitas não serão permanentes, o documento retornará ao seu\nestado original assim que o site for recarregado.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59518266-b5a3d980-8e9b-11e9-8ee1-1624d0047213.png\" alt=\"textContent\"></p>\n<h4 id=\"innerhtml\">innerHTML</h4>\n<p>Funciona de maneira semelhante ao textContent, mas, além de mostrar o texto que\nexiste no nó selecionado e nos filhos, ele mostrará as tags HTML que podem\nexistir. Se um valor for atribuído a ele, o conteúdo do nó será substituído,\nincluindo seus filhos, pela sequência de texto atribuída a ele. Ao contrário\ndo<code>textContent</code>, se as tags HTML existirem na <em>string</em> atribuída, elas serão\nexibidas no navegador. As alterações feitas não serão permanentes, o documento\nretornará ao seu estado original assim que o site for recarregado.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59518324-cf452100-8e9b-11e9-82a0-99a3895f5ad1.png\" alt=\"textContent\"></p>\n<p>No vídeo a seguir, vemos de uma maneira prática, como usar <code>.innerHTML</code> e\n<code>.textContent</code>:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/jWpUT_dF8EA?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"value\">value</h4>\n<p>A propriedade <code>value</code> retorna o valor do atributo <code>value</code> de um elemento HTML,\nsempre e quando existir a propriedade <code>value</code> no elemento. Algunas das <em>tags</em>\nque contém a propriedade <code>value</code> são os elementos de formulário.</p>\n<p>Sintaxis</p>\n<ul>\n<li>Retorna a propriedade <strong>value</strong>: <code>elemento.value</code>;</li>\n<li>Modifica a propriedade <strong>value</strong>: <code>elemento.value = texto</code>;</li>\n</ul>\n<blockquote>\n<p>Nota: o valor de retorno é uma <em>string</em>, que representa o valor do campo de texto.</p>\n</blockquote>\n<p>Você pode ver um exemplo mais claro neste\n<a href=\"https://codepen.io/Si7v4n4/pen/prBzoX?editors=1010#0\" target=\"_blank\">pen</a> .</p>\n<h3 id=\"insertbefore\">insertBefore</h3>\n<p> Permite escolher um nó do documento e incluir outro antes dele.</p>\n<pre><code class=\"language-javascript\">pai.insertBefore(novoNo, noDeReferencia);\n</code></pre>\n<p> Se tivéssemos um fragmento de um documento como este:</p>\n<pre><code class=\"language-html\">&lt;div id=\"container\"&gt;\n    &lt;p&gt;Primeiro parágrafo&lt;/p&gt;\n    &lt;p&gt;Segundo paragráfo&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>e quiséssemos adicionar um novo parágrafo antes do segundo, faríamos assim:</p>\n<pre><code class=\"language-javascript\">// Criamos o novo parágrago com seu texto filho\nconst newParagraph = document.createElement('p');\nconst paragraphText = document.createTextNode('Novo parágrafo.');\nnewParagraph.appendChild(paragraphText);\n\n// Armazenamos em uma varipavel o pai e em outra variável o segundo parágrafo\nconst container = document.getElementById('container');\nconst secondParagraph = container.getElementsByTagName('p')[1];\n\n// Agora inserimos\ncontainer.insertBefore(newParagraph, secondParagraph);\n</code></pre>\n<h3 id=\"replacechild\">replaceChild</h3>\n<p>Este método é usado para substituir um nó secundário por outro. Tome como\nargumentos dois nós: um novo nó e o nó a ser substituído. O nó substituído deve\nser um filho do elemento para o qual o método é chamado.</p>\n<p>Sintaxe:</p>\n<pre><code class=\"language-javascript\">    pai.replaceChild(novoNo, noParaSubstituir);\n</code></pre>\n<p>Com o mesmo HTML do exemplo de <code>.insertBefore()</code>, se quiséssemos substituir o\nsegundo parágrafo pelo qual criamos, faríamos assim:</p>\n<pre><code class=\"language-javascript\">container.replaceChild(newParagraph, secondParagraph);\n</code></pre>\n<blockquote>\n<p>Note que tanto <code>.replaceChild()</code> tanto quanto <code>.insertBefore()</code> esperam que o\nnovo nó seja o primeiro argumento.</p>\n</blockquote>\n<h2 id=\"vamos-praticar\">Vamos praticar</h2>\n<p>Nos vídeos a seguir vamos colocar em prática a parte teórica já que eles usam os\nmétodos como criar, adicionar e eliminar os nós do DOM por meio do Javascript e\nassim poder criar páginas dinâmicas. sugerimos que você faça o exercício junto\ncom o vídeo e se necessário, você pode ir pausando.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/fDz1IgduZxA?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<ul>\n<li>Este outro vídeo adiciona os nós criados ao DOM.</li>\n</ul>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/7MKCrho0nho?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 4,
          "durationString": "2h"
        },
        "03-3-dom-methods-crud-attributes": {
          "title": "Modificando atributos do DOM",
          "type": "read",
          "format": "self-paced",
          "duration": 120,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Nesta unidade aprenderemos:</p>\n<ul>\n<li>Como manipular atributos que utilizam a interface <code>HTMLElement</code> do DOM.<ul>\n<li><code>.id</code></li>\n<li><code>.src</code></li>\n<li><code>.className</code></li>\n</ul>\n</li>\n<li>Como manipular atributos que não utilizam a interface <code>HTMLElement</code>.<ul>\n<li><code>getAttribute()</code></li>\n<li><code>setAttribute()</code></li>\n</ul>\n</li>\n<li>Como modificar atributos CSS do DOM<ul>\n<li><code>.style.property</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"atributos\">Atributos</h3>\n<p>Além de modificar o conteúdo do nó ou o próprio nó, também podemos buscar os\natributos do nó, buscar os seus valores e modificá-los.</p>\n<p>Os atributos que podemos trabalhar diretamente são os que utilizam a interface\n<code>HTMLElement</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59519308-f8ff4780-8e9d-11e9-96aa-edd666cb3aa8.png\" alt=\"Nodos\"></p>\n<pre><code class=\"language-js\">const paragraph = document.getElementById('paragraph');\n/*\n * Para obter o valor designado utilizamos o nós seguido do\n * atributo que queremos obter\n */\nparagraph.id;\n/*\n * Para atribuir o valor ou valores ao atributo, chame o nome do\n * atributo e designe o valor\n */\nparagraph.className = 'nueva-clase';\n/*\n * É utilizado \".className\" para fazer referência ao atributo class.\n * Pois no JavaScript class é uma palavra reservada\n */\n</code></pre>\n<p>Haverá momentos em que precisaremos trabalhar com atributos que não fazem parte\nda interface HTMLElement. Para esses casos, existem dois métodos:\n<code>.setAttribute()</code> e <code>.getAttribute().</code></p>\n<h4 id=\"setattribute-atributo-valor\">setAttribute ('atributo', 'valor')</h4>\n<p>Cria um atributo e define um valor.</p>\n<h4 id=\"getattribute-atributo\">getAttribute ('atributo')</h4>\n<p>Obtém o valor do atributo.</p>\n<pre><code class=\"language-html\">&lt;img id='image'\n  src=\"https://user-images.githubusercontent.com/11894994/59519308-f8ff4780-8e9d-11e9-96aa-edd666cb3aa8.png\"\n  alt=\"DOM - innerHTML\" width=\"100%\"  /&gt;\n</code></pre>\n<pre><code class=\"language-js\">const image = document.getElementById('image');\n\n// Retorna o tamanho da imagem em px\nimage.width;\nimage.height;\n\n// Retorna o tamanho da imagem como está especificado na tag\nimage.getAttribute('width');\nimage.getAttribute('height');\n\n/*\n * Se quisermos atribuir um tamanho à imagem que não seja em px temos que\n * utilizar '.setAttribute()'\n */\nimage.width = '50%';\nimage.height = 'auto';\n\nimage.setAttribute('width', '50%');\nimage.setAttribute('height', 'auto');\n</code></pre>\n<h2 id=\"manipulando-css-pelo-javascript\">Manipulando CSS pelo Javascript</h2>\n<p>É um pouco diferente da maioria dos outros atributos, pois a propriedade de\nestilo é um objeto, que irá conter as propriedades de CSS dentro dela.</p>\n<h3 id=\"style\">style</h3>\n<p>Esta propriedade é usada para exibir ou definir o estilo do nó no qual está\nsendo usado.</p>\n<ul>\n<li><p>Sintaxis</p>\n<pre><code class=\"language-js\">  elemento.style.propriedade = valor;\n</code></pre>\n</li>\n</ul>\n<p>Tenha em mente que as propriedades CSS que são separadas por um hífen\n(<code>font-family</code>, <code>font-size</code>, <code>border-bottom</code>) deve ser escrito notação\n<em>lowerCamelCase</em> (<code>fontFamily</code>, <code>fontSize</code>, <code>borderBottom</code>).</p>\n<pre><code class=\"language-js\">const paragraph  = document.getElementById('paragraph');\nparagraph.style.padding = '5px';\nparagraph.style.color = 'rgb(242, 242, 242)';\nparagraph.style.fontFamily = 'helvetica';\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59519792-0a951f00-8e9f-11e9-970a-81558d6b8baa.png\" alt=\"Styles in JS\"></p>\n",
          "order": 5,
          "durationString": "2h"
        },
        "03-5-reflow-browser": {
          "title": "Redesenho do navegador",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<p>Com a chegada das aplicações ricas da internet (RIA: <em>Rich Internet\nApplications</em>), nossas páginas exigem uma melhor experiência para o usuário, o\nque leva a uma maior manipulação do DOM com muitas instruções <code>javascript</code>,\nanimações, etc. Mas isto ocasiona um problema que nem sempre é previso antes do\ndesenvolvimento e rapidamente tudo começa a funcionar lentamente ou consumindo\nmuita memória na máquina do cliente.</p>\n<h2 id=\"é-útil-entender-quando-se-ativam-os-re-flow\">É útil entender quando se ativam os re-flow</h2>\n<h3 id=\"adição-exclusão-ou-modificação-de-elementos-do-dom-visíveis\">Adição, exclusão ou modificação de elementos do DOM visíveis</h3>\n<blockquote>\n<p>A primeira é óbia, o uso de JavaScript para alterar o DOM provocará o um\nre-flow.</p>\n</blockquote>\n<h3 id=\"adição-exclusão-ou-modificação-dos-estilos-de-css\">Adição, exclusão ou modificação dos estilos de CSS</h3>\n<blockquote>\n<p>Da mesma maneira que no JavaScript, aplicar diretamento os estilos, alterar\nalguma classe ou propriedade, prococará um re-flow daquele ramo do DOM</p>\n</blockquote>\n<h3 id=\"animações-e-transições-css\">Animações e transições CSS</h3>\n<blockquote>\n<p>Cada alteração na animação causará um re-flow</p>\n</blockquote>\n<h3 id=\"uso-de-offsetwidth-e-offsetheight\">Uso de <code>offsetWidth</code> e <code>offsetHeight</code></h3>\n<blockquote>\n<p>Curiosamente, ler a propriedade <code>offsetWidth</code> e <code>offsetHeight</code> de um elemento\npode desencadear um re-flow inicial para calcular as estruturas.</p>\n</blockquote>\n<h3 id=\"ações-do-usuário\">Ações do usuário</h3>\n<blockquote>\n<p>Finalmente, o usuário pode ativar os re-flow, como por exemplo ativando um\nefeito de <code>hover</code>, adicionando texto ao um campo, alterando o tamanho de uma\ntela, etc.</p>\n</blockquote>\n<p>Cada fluxo de processamento de re-flow varia. Alguns navegadores são melhores\nque outros em alguns operações. Alguns elementos geram mais re-flow que outros.\nFelizmente, existem várias maneiras de <a href=\"https://developers.google.com/speed/docs/insights/browser-reflow\" target=\"_blank\">melhorar o\nrendimento</a>.</p>\n",
          "order": 6,
          "durationString": "10min"
        },
        "04-events": {
          "title": "Eventos",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=gyICdb1iwII",
              "id": "gyICdb1iwII"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=wsim6ujXeOY",
              "id": "wsim6ujXeOY"
            }
          ],
          "body": "<h2 id=\"o-que-é-um-evento\">O que é um evento?</h2>\n<p>É quando o usuário realiza uma ação permitindo que ele interaja com o programa.\nCada evento é associado a um manipulador (_conhecidos como eventHandlers ou\neventListener_), que será executado quando o evento ocorrer.</p>\n<p>Aqui está um <div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/gyICdb1iwII?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div> de referência.</p>\n<h2 id=\"como-usar-os-eventos\">Como usar os eventos?</h2>\n<p>Para poder fazer uso da magia dos eventos é necessário saber primeiro como\n\"escutá-los\". Isto pode ser conseguido através do método <strong>addEventListener</strong> .</p>\n<p>A sintaxe é muito simples:</p>\n<pre><code class=\"language-javascript\">  elemento_que_escucha.addEventListener('evento', funcao_para_escutar);\n</code></pre>\n<p>Aqui um <a href=\"http://www.codexexempla.org/curso/curso_4_3_e.php\" target=\"_blank\">link</a> de referência.</p>\n<p>Existem diferentes formas de associar um evento a elementos do DOM. Para saber\nmais visite este\n<a href=\"http://librosweb.es/libro/javascript/capitulo_6/modelo_basico_de_eventos_2.html\" target=\"_blank\">link</a>\n(a partir de 6.2).</p>\n<h2 id=\"tratamento-de-eventos\">Tratamento de eventos</h2>\n<p>Além de adicionar o <em>listener</em> ao evento, ele também pode ser eliminado usando o\nmétodo <strong>removeEventListener</strong> , que funciona quase da mesma maneira. A sintaxe\né a seguinte:</p>\n<pre><code class=\"language-javascript\">  elemento_que_escuta.removeEventListener('evento', funcao_para_remover);\n</code></pre>\n<p>Para que o método funcione corretamente, é obrigatório enviar como parâmetro o\nretorno de chamada (função) usado com addEventListener.</p>\n<p>Agora vamos falar sobre <strong>objectEvent,</strong> que é outra questão importante no\ntratamento de eventos. Quando um evento ocorre, a função que será executada\nprecisa de informações adicionais sobre ele.</p>\n<p><strong>objectEvent</strong> é o objeto que representa o evento que ocorreu. É criado\nautomaticamente quando o evento ocorre e é destruído quando sua função de\ngerenciamento é executada. Este objeto tem um conjunto de propriedades com\ninformações sobre o evento. No código a seguir, você encontrará um exemplo.</p>\n<pre><code class=\"language-javascript\">function olaMundo(event){\n  const evento = window.event || event;\n  alert('Olá Mundo.');\n}\n\nconst boton = document.getElementById('boton');\nboton.addEventListener('click', olaMundo, false);\n</code></pre>\n<p>Às vezes é necessário evitar certos comportamentos que um evento tem por padrão.\nPara isso existe <strong>preventDefault.</strong> Aqui está um exemplo:</p>\n<blockquote>\n<p>Este é o código para um formulário muito simples Há um <em>input</em> para inserir o\nnome e outro para inserir o sobrenome. Finalmente, há um <em>inpu</em> do tipo\n<em>submit</em> (botão de envio)</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form&gt;\n  &lt;div&gt;\n    &lt;label for=\"fname\"&gt;First name: &lt;/label&gt;\n    &lt;input id=\"fname\" type=\"text\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"lname\"&gt;Last name: &lt;/label&gt;\n    &lt;input id=\"lname\" type=\"text\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n     &lt;input id=\"submit\" type=\"submit\"&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;&lt;/p&gt;\n</code></pre>\n<blockquote>\n<p>Agora vejamos a funcionalidade JS: Na primeira parte são armazenados em\nvariáveis os elementos do formulário. Em seguida, temos a função que dispara o\nevento <em>submit.</em> Esta função verifica se os campos estão vazios. Se a condição\nse cumpre a função executa <em>preventDefault</em> para <em>eventObject</em> (e) impedindo\nque o formulário seja enviado automaticamente (ação que tem por padrão este\ntipo de \"botão\") para mostrar ao usuário uma mensagem de erro.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">const form = document.querySelector('form');\nconst fname = document.getElementById('fname');\nconst lname = document.getElementById('lname');\nconst submit = document.getElementById('submit');\nconst para = document.querySelector('p');\n\nform.onsubmit = function(e) {\n  if (fname.value === '' || lname.value === '') {\n    e.preventDefault();\n    para.textContent = 'You need to fill in both names!';\n  }\n}\n</code></pre>\n<h2 id=\"fluxo-de-eventos-propagação\">Fluxo de Eventos (Propagação)</h2>\n<p>Quando um evento é executado, ele passa por diferentes fases:  <em>Capture phase</em>,\n<em>Target phase</em> e <em>Bubbling phase</em> , conforme mostrado na imagem a seguir.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59521680-4205ca80-8ea3-11e9-8332-0ac326994e11.png\" alt=\"flow-event\"></p>\n<p>A seguir, um vídeo que te explicará com um exemplo o fluco que seguem os\neventos:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/wsim6ujXeOY?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"tipo-de-eventos\">Tipo de eventos</h2>\n<p>Quando o usuário interage com o navegador, vários tipos de eventos podem ser\nacionados. Alguns dos mais comuns são:</p>\n<ul>\n<li>Eventos do mouse (mouseEvent)</li>\n<li>Eventos de teclado (keyboardEvent)</li>\n<li>Eventos de formulários</li>\n<li>Eventos da janela</li>\n</ul>\n<p>Para mais informações sobre todos os eventos, acesse este\n<a href=\"https://pt.khanacademy.org/computing/computer-programming/html-css-js/html-js-dom-events/a/dom-event-types\" target=\"_blank\">link</a>.</p>\n<h3 id=\"principais-eventos\">Principais eventos</h3>\n<p>Estes são alguns dos eventos mais usados:</p>\n<ul>\n<li>keyup/keydown</li>\n<li>mouse click</li>\n<li>mouse motion</li>\n<li>scroll</li>\n<li>focus</li>\n<li>load</li>\n<li>script execution timeline</li>\n<li>setting timers</li>\n<li>debouncing</li>\n</ul>\n<p><a href=\"https://codepen.io/Inti_Developer/pen/EvGMKG\" target=\"_blank\">Aqui</a> você pode encontrar um\nexemplo sobre interação com eventos.</p>\n<blockquote>\n<p>Guia de uso:</p>\n<ol>\n<li>Observe como o fundo é branco</li>\n<li>Agora clique no botão <em>Make magic</em> :)</li>\n<li>Verifique o código e analise a lógica de programação</li>\n<li>Agora tente modificar o código para que ele reaja com outros eventos,\ndivirta-se;)</li>\n</ol>\n</blockquote>\n<p>Finalmente, anexamos o\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/Events\" target=\"_blank\">link</a> da documentação\noficial explicando tudo sobre os eventos:</p>\n",
          "order": 7,
          "durationString": "30min"
        },
        "05-data-attributes": {
          "title": "Atributos de dados",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=fnn6mqN1S8Q",
              "id": "fnn6mqN1S8Q"
            }
          ],
          "body": "<h2 id=\"o-que-são-os-atributos-de-dados\">O que são os atributos de dados?</h2>\n<p>Eles são atributos personalizados que nos permitem adicionar dados aos nossos\nelementos HTML, que não são necessariamente visíveis, mas que nos ajudam muito\nao fornecer informações adicionais sobre esses elementos.</p>\n<h2 id=\"como-eles-são-usados\">Como eles são usados?</h2>\n<p>Usá-los é muito fácil, já que sua sintaxe e interação são simples.</p>\n<h2 id=\"sintaxe\">Sintaxe</h2>\n<p>Consiste em um prefixo <code>data-</code> acompanhado do nome (_em letras minúsculas_)\nque consideramos mais apropriado para o valor que você irá salvar:</p>\n<pre><code class=\"language-html\">&lt;elemento id=\"exemplo\" data-nome=\"valor\" data-outro-nome=\"outro valor\"&gt;\n</code></pre>\n<h2 id=\"interação-com-javascript\">Interação com JavaScript</h2>\n<p>Para acessar esses atributos, usamos o método <code>dataset</code>.</p>\n<pre><code class=\"language-javascript\">  const exemplo = document.getElementById(\"exemplo\");\n  const valor = exemplo.dataset.nome;\n  const outroValor = exemplo.dataset.outroNome;\n</code></pre>\n<h2 id=\"e-o-que-vem-agora\">E o que vem agora?</h2>\n<p>Como temos uma noção do que são e como os atributos de dados são usados, o que\nvocê acha de vermos o vídeo a seguir, no qual um exercício é mostrado fazendo\nuso deles.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/fnn6mqN1S8Q?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Para ler mais sobre os atributos de dados, verifique este\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/Guide/HTML/Using_data_attributes\" target=\"_blank\">link</a>\ne este outro <a href=\"https://www.w3schools.com/tags/att_global_data.asp\" target=\"_blank\">link</a>.</p>\n",
          "order": 8,
          "durationString": "30min"
        },
        "06-practical-cases": {
          "title": "Exercícios Livres",
          "type": "read",
          "format": "self-paced",
          "duration": 360,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=HwOqNq-QIss",
              "id": "HwOqNq-QIss"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=5fzzEx7-a5k",
              "id": "5fzzEx7-a5k"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=qziZsQC7C-c",
              "id": "qziZsQC7C-c"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=Y-JmMbIP-Uw",
              "id": "Y-JmMbIP-Uw"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Como já fizemos antes, é hora de aplicar os conceitos aprendidos para resolver\nproblemas.</p>\n<p>A seguir, você terá vários problemas que deverá resolver. Tente resolvê-los\nprimeiro por conta própria. Abaixo você encontrará as soluções.</p>\n<p>Depois de tentar, compare suas soluções com os vídeos abaixo.</p>\n<p><em>NÃO</em> antes.</p>\n<h3 id=\"1-reserva-de-assentos-de-avião\">1. Reserva de assentos de avião</h3>\n<p>Uma pequena companhia aérea acaba de comprar um computador para seu novo sistema\nde reservas automatizado. Você foi solicitada a desenvolver o novo sistema.\nEscreva uma aplicação para atribuir assentos em cada voo do <strong>único</strong> avião da\ncompanhia (capacidade: 10 assentos).</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522404-010eb580-8ea5-11e9-86e3-4c1e8f32b0b5.jpg\" alt=\"Avião\"></p>\n<p>Sua aplicação deve mostrar as seguintes alternativas:</p>\n<p>Por favor, digite 1 para Primeira Classe e Por favor, digite 2 para Econômica.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522439-184da300-8ea5-11e9-83de-4823ef78efb4.jpg\" alt=\"Avião\"></p>\n<p>Se o usuário digitar 1, seu aplicativo deve atribuir um lugar na seção de\nprimeira classe (assentos 1 a 4). Se o usuário digitar 2, sua aplicação deve\natribuir um assento na seção econômica (assentos 5 a 10).</p>\n<p>A sua aplicação deverá então imprimir um cartão de embarque, indicando o número\ndo lugar da pessoa e se está na primeira classe ou na classe econômica.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522498-33b8ae00-8ea5-11e9-9081-6417549b41bb.jpg\" alt=\"Avião\"></p>\n<h3 id=\"dicas-para-a-solução\">Dicas para a solução</h3>\n<p>Abaixo, você encontrará dicas que poderão ajudá-la com a solução, boa sorte!</p>\n<h4 id=\"dica--diagrama-de-fluxo\">[Dica | Diagrama de fluxo]</h4>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522574-62368900-8ea5-11e9-9be8-5c2679577b40.jpg\" alt=\"Fluxo\"></p>\n<h4 id=\"dica--representação-usando-arrays\">[Dica | Representação usando Arrays]</h4>\n<p>Use uma matriz unidimensional do tipo booleano para representar a tabela de\nassentos do avião. Inicialize todos os elementos do array com -false- para\nindicar que todos os lugares estão vazios. À medida que cada lugar é atribuído,\ndefina o elemento correspondente da matriz como true para indicar que esse lugar\nnão está mais disponível.</p>\n<p>Seu aplicativo nunca deverá atribuir um lugar que já tenha sido atribuído.\nQuando a seção econômica ou a primeira classe estiver cheia, seu programa deve\nperguntar à pessoa se ela concorda em ser colocada na primeira classe (e\nvice-versa).</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522653-98740880-8ea5-11e9-8733-84cc47264e9e.jpg\" alt=\"Avião\"></p>\n<p>Se a pessoa aceitar, faça a atribuição de lugar apropriada.</p>\n<p>Se não, você deve exibir a mensagem \"O próximo vôo sai em 3 horas\".</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522674-a45fca80-8ea5-11e9-867e-2762fee3a637.jpg\" alt=\"Avião\"></p>\n<h4 id=\"2-crie-um-menu-de-hambúrguer\">2. Crie um menu de hambúrguer</h4>\n<p>Um menu de hambúrguer nos permite ter o menu escondido e mostrar apenas um botão\n(3 linhas horizontais) que quando pressionamos (ou clicamos), todas as\nopções de menu são mostradas na tela.</p>\n<p>Algo assim:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522804-f7398200-8ea5-11e9-9e50-08ccec42da24.gif\" alt=\"Menu\nhamburger\"></p>\n<p>Replicar essa funcionalidade usando DOM e CSS. (Não adicione efeitos \"legais\",\napenas foque na funcionalidade)</p>\n<h4 id=\"3-criação-de-tabs\">3. Criação de tabs</h4>\n<p>As abas são usadas para agrupar conteúdo semelhante usando apenas um espaço.</p>\n<p>Algo assim:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59522837-12a48d00-8ea6-11e9-9704-8d137aee4ee7.gif\" alt=\"Menu em\ntabs\"></p>\n<p>Replicar essa funcionalidade usando DOM e CSS. (Não adicione efeitos \"legais\",\napenas foque na funcionalidade)</p>\n<h4 id=\"4-mini-zoo\">4. Mini Zoo</h4>\n<p>Esta página permite eleger efeitos como <strong>sepia</strong>, <strong>branco e preto</strong> e\n<strong>inverter cores</strong> que desejamos que nossas imagens tenham.\nVocê deverá replicar usando DOM e CSS.</p>\n<p>Veja como a página deve ficar:\n<img src=\"https://user-images.githubusercontent.com/11894994/62797560-613f6380-bab2-11e9-925d-a306c44368c4.gif\" alt=\"Mini\nZoo\"></p>\n<h3 id=\"soluções\">Soluções</h3>\n<p>A seguir a equipe te explica como ela resolveu cada um dos exercícios.</p>\n<h3 id=\"1-reserva-de-assentos-de-avião-1\">1. Reserva de assentos de avião</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/HwOqNq-QIss?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"2-crie-um-menu-de-hambúrguer-1\">2. Crie um menu de hambúrguer</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/5fzzEx7-a5k?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"3-criação-de-tabs-1\">3. Criação de tabs</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/qziZsQC7C-c?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"4-mini-zoo-1\">4. Mini Zoo</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/Y-JmMbIP-Uw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 9,
          "durationString": "6h"
        },
        "08-quiz": {
          "questions": [
            {
              "title": "1) Complete o seguinte enunciado: As tags HTML sempre serão nós de tipo _______.",
              "description": "",
              "answers": [
                "Texto",
                "Comentário",
                "Elemento",
                "Atributo"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) Na imagem a seguir, o texto Olá Mundo! Programar é muito cool! entre as tags h1, corresponde a um nó do tipo __",
              "description": "<pre><code class=\"language-html\">&lt;body&gt;\n  &lt;h1&gt;Olá Mundo! Programar é muito cool :3 !&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre>",
              "answers": [
                "Condicional",
                "Texto",
                "Elemento",
                "Atributo"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "3) O DOM nos serve para",
              "description": "",
              "answers": [
                "Atribuir aos elementos de uma página html e modificar suas propriedades",
                "Acessar os elementos do navegador e modificá-los",
                "Dominar o mundo da programação",
                "Criar bucles e condições"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4)  Quando eu quiser acessar ou obter um elemento exclusivo da minha página da web por meio de seu identificador, que método/métodos de seleção de DOM eu posso usar?",
              "description": "",
              "answers": [
                "<code>.getElementsByTagName();</code>",
                "<code>.getElementsByClassName();</code>",
                "<code>.getElementById();</code>",
                "<code>.querySelector();</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "5)  Para acessar elementos da minha página da Web que possuem a mesma tag HTML, que método / métodos do DOM eu posso usar?",
              "description": "",
              "answers": [
                "<code>.getElementsByTagName();</code>",
                "<code>.getElementsByClassName();</code>",
                "<code>.getElementById();</code>",
                "<code>.querySelector();</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "6) Seleciona os objetos do BOM",
              "description": "",
              "answers": [
                "Location",
                "Screen",
                "HTMLtags",
                "Navigator"
              ],
              "solution": [
                0,
                1,
                3
              ]
            },
            {
              "title": "7) BOM define __ métodos para manipular o tamanho e a posição da __",
              "description": "",
              "answers": [
                "dois, janela",
                "quatro, janela",
                "três, tag",
                "dois, informação"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "8)  Como posso usar os atributos data?",
              "description": "",
              "answers": [
                "Para adicionar estilos css a um elemento do HTML",
                "Para identificar um elemento do DOM",
                "Para obter o valor de uma entrada de texto",
                "Para armazena dados nas tags HTML sem modificar a apresentação do documento"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "9)  Qual das seguintes opções é a correta para usar os atributos data?",
              "description": "",
              "answers": [
                "<p>Opção 1</p>\n<pre><code class=\"language-html\">   &lt;ul&gt;\n      &lt;li data-lista=\"frutas\"&gt;Maça&lt;/li&gt;\n      &lt;li data-lista=\"frutas\"&gt;Peras&lt;/li&gt;\n      &lt;li data-lista=\"frutas\"&gt;Morangos&lt;/li&gt;\n   &lt;/ul&gt;\n</code></pre>\n",
                "<p>Opção 2</p>\n<pre><code class=\"language-html\">   &lt;ul&gt;\n      &lt;li data=\"frutas\"&gt;Maça&lt;/li&gt;\n      &lt;li data=\"frutas\"&gt;Peras&lt;/li&gt;\n      &lt;li data=\"frutas\"&gt;Morangos&lt;/li&gt;\n   &lt;/ul&gt;\n</code></pre>\n",
                "<p>Opção 3</p>\n<pre><code class=\"language-html\">   &lt;ul&gt;\n      &lt;li data-lista-frutas&gt;Maçã&lt;/li&gt;\n      &lt;li data-lista-frutas&gt;Peras&lt;/li&gt;\n      &lt;li data-lista-frutas&gt;Morangos&lt;/li&gt;\n   &lt;/ul&gt;\n</code></pre>\n",
                "<p>Opção 4</p>\n<pre><code class=\"language-html\">   &lt;ul&gt;\n      &lt;li data-lista(frutas)&gt;Maçã&lt;/li&gt;\n      &lt;li data-lista(frutas)&gt;Peras&lt;/li&gt;\n      &lt;li data-lista(frutas)&gt;Morangos&lt;/li&gt;\n   &lt;/ul&gt;\n</code></pre>\n"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "10)   Vendo o código a seguir, como podemos acessar nossos atributos data por meio de js?",
              "description": "<pre><code class=\"language-html\">&lt;p id=\"text\" data-autor=\"Gustavo Monet\"&gt;\n  Aque está nosso texto\n&lt;/p&gt;\n</code></pre>",
              "answers": [
                "<p>Opção 1</p>\n<pre><code class=\"language-javascript\">const text = document.getElementById('text');\nconst autor = autor.dataset;\n</code></pre>\n",
                "<p>Opção 2</p>\n<pre><code class=\"language-javascript\">const text = document.getElementById('text');\nconst autor = dataset.text.autor;\n</code></pre>\n",
                "<p>Opção 3</p>\n<pre><code class=\"language-javascript\">const text = document.getElementById('text');\nconst autor = text.dataset.autor;\n</code></pre>\n",
                "<p>Opção 4</p>\n<pre><code class=\"language-javascript\">const text = document.getElementById('text');\nconst text.dataset = autor;\n</code></pre>\n"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "11)  Por qual método você exclui um nó do DOM?",
              "description": "",
              "answers": [
                "elementoPai.removeAttribute(<strong>nodo</strong>);",
                "elementoPai.appendChild(<strong>nodo</strong>);",
                "elementoPai.removeChild(<strong>nodo</strong>);",
                "elementoPai.removeNode(<strong>nodo</strong>);"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "12)  Com que método você cria um evento?",
              "description": "",
              "answers": [
                ".addEventListener('<em>__</em>', <strong>funcion</strong>);",
                ".createEvent(' <strong>_</strong>',<strong>funcion</strong>);",
                ".createElement('<strong>_</strong>');",
                ".actionListener('<strong>_</strong>');"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "13)  O que são os eventos?",
              "description": "",
              "answers": [
                "Ações que o navegador realiza quando algo não está certo.",
                "Ações que são disparadas a partir da interação do usuário com um elemento da\npágina web.",
                "Datas importantes para o navegador."
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "14)  Como você adiciona um evento a um elemento?",
              "description": "",
              "answers": [
                "<p>Opção 1</p>\n<pre><code class=\"language-javascript\">const botao = document.getElementById('boton');\nbotao.createEventListener(click, funcao_a_executar);\n</code></pre>\n",
                "<p>Opção 2</p>\n<pre><code class=\"language-javascript\">const botao = document.getElementById('boton');\nbotao.addEventListener = 'click' + 'funcao_a_executar';\n</code></pre>\n",
                "<p>Opção 3</p>\n<pre><code class=\"language-javascript\">const botao = document.getElementById('boton');\nbotao.addEventListener('click', funcao_a_executar);\n</code></pre>\n",
                "<p>Opção 4</p>\n<pre><code class=\"language-javascript\">const botao = document.getElementById('boton');\nbotao = document.addEventListener('click', funcao_a_executar);\n</code></pre>\n"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "15)  Às vezes temos que usar e.preventDefault() para",
              "description": "",
              "answers": [
                "Para evitar determinado comportamento que os eventos já tem",
                "Para que nosso evento tenha um valor por default.",
                "Para que o evento execute automaticamente.",
                "Para evitar que se invoque o evento."
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz #1",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 10,
          "durationString": "30min"
        },
        "10-guided-exercises": {
          "title": "Aula Prática",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Aqui estão alguns exercícios para você praticar, sugerimos que tenta resolver\neles sozinha ou em grupo. Assim, você ficará familizariada com os desafios. E se\nquiser pode apresentar a sua solução para a sala e ajudar as suas companheiras\n😁</p>\n<h3 id=\"1-tic-tac-toe\">1. Tic Tac Toe</h3>\n<p>Crie uma página web que implemente o Jogo da Velha. Esse é um jogo divertido\nentre dois jogadores <strong>X</strong> e <strong>O</strong>, que marcam os espaços de um tabuleiro 3x3\nalternadamente. O ganhador é quem primeiro conseguir formar uma linha\nhorizontal, vertical ou diagonal de três espaços consecutivos com sua marca.\nPara isso, deverá criar o tabuleiro diretamente no arquivo HTML e as\nfuncionalidades serão desenvolvidas utilizando o DOM.</p>\n<p>Para desenvolver o jogo, devemos considerar certos pontos:</p>\n<ol>\n<li>Deve conter um botão <strong>RESET</strong> para limpar o tabuleiro e começar a jogar\nnovamente</li>\n<li>Abaixo do tabuleiro deverá indicar, após finalizar o jogo, qual jogador foi\nvencedor ou se deu velha.</li>\n<li>Os dois jogadores devem poder participar: por exemplo, o primeiro click\ncorresponde ao jogador <strong>X</strong> e o próximo click automaticamente corresponde ao\njogador <strong>O</strong>, alternando as jogadas.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59530511-2c4fcf80-8eba-11e9-8d0d-80d45c68c69d.png\" alt=\"Tic Tac\nToe\"></p>\n<h3 id=\"2-freelancer-v2\">2. Freelancer v2</h3>\n<p>Lembra-se do desafio\n<a href=\"https://github.com/Laboratoria-learning/freelancer\" target=\"_blank\">Freelancer</a>? Agora, vamos\nfocar em replicar a funcionalidade da seção <code>Portfolio</code> que é dinâmica ao clicar\nsobre uma das imagens. Deve ficar como a imagem a seguir:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59530609-6de07a80-8eba-11e9-9f8f-ad8c070cc373.gif\" alt=\"Freelancer\nPortfolio\"></p>\n<h3 id=\"3-nossas-programadoras-v2\">3. Nossas Programadoras v2</h3>\n<p>Lembra do exercício \"Nossas Programadoras\"? Agora adicionaremos um filtro para\nselecionar as programadores em função de sua sede. Ao final, deverá ficar assim:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59530740-be57d800-8eba-11e9-9257-f56b1ab96b94.gif\" alt=\"Nuestras\nCoders\"></p>\n<h3 id=\"4-captcha\">4. Captcha</h3>\n<p>No dia a dia usamos serviços que geram <strong>CAPTCHA</strong>. O mais usado é o do Google e\nvocê pode ver a documentação\n<a href=\"https://developers.google.com/recaptcha/docs/display?authuser=1\" target=\"_blank\">aqui</a>. Esses\nCAPTCHA tem como objetivo final identificar se é ou não uma pessoa e vai mudando\nconforme a tecnologia avança.</p>\n<p>Inicialmente consistia em um conjunto de imagens que o usuário devia determinar\no conteúdo e indicar ao sistema. Hoje em dia, avaliam seu comportamente no\nnavegador e se tiver dúvidas, pede para você avaliar um conjunto de imagens\nmaior.</p>\n<p>Faremos um Captcha (como mostra a imagem abaixo). Ele comprovará que o usuário\nescreva o mesmo que o Captcha que forneceremos. O valor digitado deverá ser\ntestado no momento em que o usuário clique no símbolo  <strong>✓</strong> e geraremos outro\ncódigo quando o usuário clicar no símbolo  <strong>↻</strong>.</p>\n<p>Dado: Gere os números e letras de maneira aleatória.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/random\" target=\"_blank\">Math.random()</a></li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59530848-f8c17500-8eba-11e9-9409-fb993225d14c.gif\" alt=\"Captcha\"></p>\n",
          "order": 11,
          "durationString": "2h"
        },
        "11-code-challenges": {
          "title": "Desafios",
          "type": "practice",
          "format": "self-paced",
          "duration": 1200,
          "body": "<h2 id=\"1-twitter\">1. Twitter</h2>\n<p>Neste desafio, vamos replicar o feed de notícias do Twitter. Para tanto,\nseguiremos um fluxo de versões que a guiarão para se concentrar mais\neficientemente :)</p>\n<p>Você pode adaptar o design como quiser, <em>mas não demore para definir as cores ou\nfontes. Finalmente, você pode replicar o design da</em> <a href=\"https://twitter.com/\" target=\"_blank\"><em>página\noficial</em></a> :). Aqui está um exemplo:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59531017-5655c180-8ebb-11e9-8ee4-165827230fa1.gif\" alt=\"Exemplo Twitter\nDOM\"></p>\n<h3 id=\"versão-001\">Versão 0.0.1</h3>\n<ol>\n<li>Crie um formulário que permita inserir um texto e um botão para \"twittar\".</li>\n<li>Adicione um evento de <em>click</em> ao botão ou de <em>submit</em> no formulário.</li>\n<li>No evento, obter o texto.</li>\n<li>Adicione o texto ao HTML.</li>\n</ol>\n<h3 id=\"versão-002\">Versão 0.0.2</h3>\n<ol>\n<li>Não inserir texto vazio (desativar o botão \"twittar\").</li>\n<li>Conte o número de caracteres de forma regressiva.</li>\n</ol>\n<h3 id=\"versão-003\">Versão 0.0.3</h3>\n<ol>\n<li>Se você passar os 140 caracteres, desative o botão.</li>\n<li>Se você passar os 120 caracteres, mostre o contador com outra cor.</li>\n<li>Se você passar os 130 caracteres, mostre o contador com outra cor.</li>\n<li>Se você passar os 140 caracteres, mostre o contador em negativo.</li>\n</ol>\n<h3 id=\"versão-004\">Versão 0.0.4</h3>\n<ol>\n<li>Ao pressionar enter (<code>/n</code>) aumente a área de texto de acordo com o tamanho\ndo texto.</li>\n</ol>\n<h3 id=\"versão-005-extra\">Versão 0.0.5 (Extra)</h3>\n<ol>\n<li>Se o número de caracteres digitados (sem dar um \"<em>enter</em>\") exceder o\ntamanho da área de texto por padrão, mais uma linha deverá ser adicionada\npara que a rolagem não apareça. (Se aplicável)</li>\n</ol>\n<h3 id=\"versão-006-extra\">Versão 0.0.6 (Extra)</h3>\n<ol>\n<li>Adicione a hora em que o tweet foi publicado no formato de 24 horas <code>hh:mm</code>.</li>\n</ol>\n<blockquote>\n<p>Nota: Para formatar a data e a hora, você pode criar sua própria função ou\nusar uma biblioteca como <a href=\"https://momentjs.com/\" target=\"_blank\"><code>moment.js</code></a><code>.</code></p>\n</blockquote>\n<h2 id=\"2-trello\">2. Trello</h2>\n<p>Neste desafio, vamos replicar o quadro do Trello. Para isso vamos seguir um\nfluxo de versões que irão guiá-la desde o início.</p>\n<p>Como no desafio anterior, você pode usar seu próprio estilo ou seguir o <a href=\"https://trello.com/\" target=\"_blank\">site\noriginal</a> . Abaixo você pode ver como deve ficar:</p>\n<p><img src=\"https://media.giphy.com/media/l1J9Ai0amYnS22ChW/giphy.gif\" alt=\"Exemplo - clone do\nTrello\"></p>\n<h3 id=\"versão-001-1\">Versão 0.0.1</h3>\n<ul>\n<li>O texto \"Adicionar uma lista ...\" será exibido.</li>\n<li>Ao clicar, você deve ocultar o texto e mostrar um formulário.</li>\n<li>O formulário é composto de um <em>input</em> e um botão para que você possa adicionar\ntarefas à sua lista.</li>\n</ul>\n<h3 id=\"versão-002-1\">Versão 0.0.2</h3>\n<ul>\n<li>Ao clicar no botão \"Salvar\", uma nova caixa aparecerá mostrando o nome da\nlista adicionada.</li>\n<li>Mostrar um texto de \"Adicionar uma tarefa\" na lista.</li>\n</ul>\n<h3 id=\"versão-003-1\">Versão 0.0.3</h3>\n<ul>\n<li>Quando você clica em \"Adicionar uma tarefa\", você deve mostrar um formulário\ncom uma área de texto e um botão que diz \"Adicionar\".</li>\n</ul>\n<h3 id=\"versão-004-1\">Versão 0.0.4</h3>\n<ul>\n<li>Coloque <em>focus</em> no <em>input</em> quando clicar em \"Adicionar nova tarefa\".</li>\n<li>Ao clicar no botão \"Adicionar\", o texto da tarefa deve aparecer abaixo do\ntítulo da lista.</li>\n</ul>\n<h3 id=\"versão-005\">Versão 0.0.5</h3>\n<ul>\n<li>Mostrar o formulário novamente abaixo da última tarefa adicionada.</li>\n</ul>\n<h3 id=\"versão-006-extra-1\">Versão 0.0.6 (Extra)</h3>\n<ul>\n<li>Poder adicionar várias listas com cartões. Para isso, o formulário \"Adicionar\numa lista\" deve aparecer à direita da lista criada anteriormente.</li>\n</ul>\n<h2 id=\"3-labirinto-opcional\">3. Labirinto (Opcional)</h2>\n<p>Crie uma página da Web que implemente o jogo do Labyrinth usando DOM e eventos.\nO jogo Labyrinth é um quebra-cabeça divertido onde você pode dar a qualquer\njogador a habilidade de interagir com o mapa para encontrar a saída.</p>\n<p>Lembre-se que no Labirinto o objetivo é ir do lugar A para o lugar B apenas pelo\ncaminho certo.</p>\n<blockquote>\n<p>O labirinto tem raízes tão profundas quanto o mito grego sobre Teseu, que foi\nenviado a um labirinto para matar o minotauro. Teseu usou um novelo de lã para\najudá-lo a encontrar o caminho de volta, assim que matasse a fera.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59531225-c2382a00-8ebb-11e9-9433-6b8da47678d6.jpg\" alt=\"GitHub set\nup-w800\"></p>\n<p>Para interagir com Teseu, o jogador terá que usar as setas do teclado para poder\nse mover e ajudar Teseu em sua busca pela saída.</p>\n<h3 id=\"dicas-para-a-solução\">Dicas para a solução</h3>\n<p>Abaixo, você encontrará dicas que poderão ajudá-lo com a solução, boa sorte!</p>\n<h4 id=\"dica-1--o-programa\">[Dica 1. | O programa]</h4>\n<p>Crie um programa que represente um Teseo em um labirinto e que implemente o\nalgoritmo de busca para um caminho de saída.</p>\n<p>Para tornar mais fácil para nós, vamos supor que o nosso labirinto é dividido em\n\"quadrados\". Cada quadrado do labirinto é aberto ou ocupado por uma seção de\nparede. Teseu só pode passar pelos quadrados abertos do labirinto. Se Teseu\ncorrer para uma parede, ele deve tentar uma direção diferente.</p>\n<h4 id=\"dica-2--criando-o-labirinto\">[Dica 2. | Criando o labirinto]</h4>\n<p>Para criar o labirinto, você pode usar uma matriz de <em>strings</em> para\nrepresentá-lo. A notação que você pode usar para cada elemento no mapa é a\nseguinte:</p>\n<ol>\n<li><code>*</code> Uma parede</li>\n<li><code>_</code> Um espaço vazio</li>\n<li><code>o</code> Posição inicial do jogador</li>\n<li><code>W</code> Saída do labirinto.</li>\n</ol>\n<pre><code class=\"language-javascript\">const mazeMap = [\n  '******************',\n  '*_________*______*',\n  '*_*****_____******',\n  '*______***__*__*_*',\n  '***_*____*____**_*',\n  '*___*____**__*___*',\n  '*_********__**_*_*',\n  '*____*______*__*_*',\n  '*_**_*__*****_**_*',\n  '*o*__*________**W*',\n  '******************',\n];\n</code></pre>\n<p>Esse mapa pode ser traduzido no seguinte com a função apropriada de\nrenderização/desenho:</p>\n<h4 id=\"dica-3--identificando-objetos-e-funções\">[Dica 3. | Identificando Objetos e Funções]</h4>\n<p>É importante identificar os objetos presentes. Se fizermos uma análise da imagem\nanterior, perceberemos que os objetos presentes são os seguintes:</p>\n<ol>\n<li>Labirinto: Objeto representando o Labirinto</li>\n<li>Jogador: Objeto que representa o Theseus</li>\n<li>MazeInterface: Objeto que representa a interface do jogo usando o DOM</li>\n</ol>\n<p>Também é importante identificar as propriedades associadas a esses objetos, bem\ncomo as principais funções presentes. Em seguida, apresentamos a interface do\ncódigo desses objetos e funções.</p>\n<pre><code class=\"language-javascript\">const maze = {\n  matrix: undefined,           // representa o mapa do labirinto\n  startX: undefined,           // posição x inicial do labirinto\n  startY: undefined,           // posição y inicial do labirinto\n  endX: undefined,             // posição x que representa a saída\n  endY: undefined,             // posição y que representa a saída\n  startOrientation: undefined, // direção inicial\n};\n\nconst player  = {\n  x: undefined,           // posição x atual do jogador\n  y: undefined,           // posição y atual do jogador\n  orientation: undefined, // direção atual do jogador\n};\n\nconst ORIENTATION = {\n  LEFT: 1,\n  UP: 2,\n  RIGHT: 3,\n  DOWN: 4,\n};\n\n// representa a interface usando DOM do labirinto\nconst mazeInterface = [];\n\n// desenhar o labirinto\nconst renderMaze = (maze, player) =&gt; {};\n// estabelecer o estilo na posição x, y\nconst setStyleAt = (maze, x, y, style) =&gt; {};\n\n// perguntar se (x,y) representa uma parede, ou seja, '*'\nconst isWall = (maze, x, y) =&gt; {};\n// perguntar se (x,y) representa um espaço vazio, ou seja,  '_'\nconst isSpace = (maze, x, y) =&gt; {};\n// perguntar se (x,y) representa a saída do labirinto, ou seja, 'W'\nconst isEnd = (maze, x, y) =&gt; {};\n\n//  virar a esquerda\nconst turnLeft = (player) =&gt; {};\n//  virar a direita\nconst turnRight = (player) =&gt; {};\n//  mover uma posição para frente na direção de player.direction\nconst moveForward = (player) =&gt; {};\n\n// algoritmo de busca para encontrar un caminho de saída para um\n// labirinto qualquer\nconst exitMaze = (player) =&gt; {};\n</code></pre>\n<h4 id=\"dica-4--perguntas-orientadoras\">[Dica 4. | Perguntas orientadoras]</h4>\n<ul>\n<li>Como podemos detectar o teclado do usuário? Em particular, as setas?</li>\n<li>Como podemos mover o personagem no quadro?</li>\n<li>Como limitamos o movimento do personagem no quadro? (se houver uma parede,\npor exemplo)</li>\n<li>O que significa pintar ou renderizar?</li>\n<li>Como fazer para renderizar o tabuleiro?</li>\n</ul>\n",
          "order": 12,
          "durationString": "20h"
        },
        "14-requiz": {
          "questions": [
            {
              "title": "1) O nó document, é pai dos objetos ou nós",
              "description": "",
              "answers": [
                "Nós<code>meta</code> dentro de <code>head</code>",
                "Nós script dentro de <code>body</code>",
                "Os nós <code>head</code> y <code>body</code>",
                "Não é pai de nenhum nó"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) Propriedades dos nós do DOM",
              "description": "",
              "answers": [
                "<code>nodeName</code>",
                "<code>nodeClass</code>",
                "<code>nodeType</code>",
                "<code>nodeValue</code>",
                "<code>nodeID</code>"
              ],
              "solution": [
                0,
                2,
                3
              ]
            },
            {
              "title": "3) Para o elemento a seguir, como posso mudar a cor de fundo do parágrafo?",
              "description": "<pre><code class=\"language-html\">&lt;p id=\"paragraph\"&gt;Olá, sou un parágrafo sensual&lt;/p&gt;\n</code></pre>",
              "answers": [
                "<p>Opção 1</p>\n<pre><code class=\"language-javascript\">const paragraph = document.getElementById('paragraph');\nparagraph.style.background = 'red';\n</code></pre>\n",
                "<p>Opção 2</p>\n<pre><code class=\"language-javascript\">const paragraph = document.getElementById('paragraph');\nparagraph.style.backgroundColor = 'red';\n</code></pre>\n",
                "<p>Opção 3</p>\n<pre><code class=\"language-javascript\">const paragraph = document.getElementById('paragraph');\nparagraph.backgroundColor = 'red';\n</code></pre>\n"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "4) document.getElementsByClassName('unaClase'), retorna um",
              "description": "<pre><code class=\"language-javascript\">const elementos = document.getElementsByClassName('unaClase');\nconsole.log(elementos);\n</code></pre>",
              "answers": [
                "<p>Vetor de nós HTML com a classe <code>unaClase</code>;</p>\n",
                "<p>Vetor com o valor de texto contido dentro de todos los elementos</p>\n<p>com a classe <code>unaClase</code>;</p>\n",
                "<p>Todos os caracteres da string <code>unaClase</code>;</p>\n",
                "<p>Retorno somente o primeiro Elemento com classe <code>unaClase</code>;</p>\n"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) Quando quero acessar todo os elementos que compartilham a mesta tag html, utilizo",
              "description": "",
              "answers": [
                "<code>.querySelector();</code>",
                "<code>.getElementsByClassName();</code>",
                "<code>.lastChild();</code>",
                "<code>.getElementsByTagName();</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "6) Qual função utilizamos para criar animações com JS?",
              "description": "",
              "answers": [
                "<code>location.href</code>",
                "<code>setTimeout();</code>",
                "<code>setInterval();</code>",
                "<code>confirm();</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) Por que é importante o objeto screen ?",
              "description": "",
              "answers": [
                "Para conhecer as resoluções mais utilizadas",
                "Para identificar um elemento do DOM",
                "Para adaptar os gráficos às resoluções mais utilizadas",
                "Para armazenar dados nas tags HTML sem modificar a apresentação do documento"
              ],
              "solution": [
                0,
                2
              ]
            },
            {
              "title": "8) Como posso obter a URL da página anterior a que estou neste momento?",
              "description": "",
              "answers": [
                "<code>document.referrer</code>",
                "<code>document.URL</code>",
                "<code>document.title</code>",
                "<code>document.lastModified</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "9) Qual método utilizamos para adicionar à listaDeCompras um novo elemento chamado elementoLista?",
              "description": "<pre><code class=\"language-html\">  &lt;ul id=\"listaDeCompras\"&gt;\n    &lt;li&gt;Leite sem Lactose&lt;/li&gt;\n    &lt;li&gt;Arequipe&lt;/li&gt;\n    &lt;li&gt;Harina para Hotcakes&lt;/li&gt;\n    &lt;li&gt;Moras&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre>",
              "answers": [
                "document.createTextNode(elementoLista);",
                "listaDeCompras.appendChild(elementoLista);",
                "listaDeCompras.getElementByName('elementoLista');"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "10) Qual evento é disparado ao selecionar o texto de um input ou textarea?",
              "description": "",
              "answers": [
                "onclick",
                "onselect",
                "onmouseover",
                "ondblclick"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "11) Para armazenar dados nas tags HTML sem modificar a apresentação do documento, usamos",
              "description": "",
              "answers": [
                "Atributos data",
                "Tags semánticas",
                "Variáveis",
                "Dados-HTML"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "12) Sintaxe dos atributos data",
              "description": "",
              "answers": [
                "const data = \"valor\"",
                "data-nomeAtribuido = \"valor\"",
                "data = \"valor\"",
                "nomeAtribuido-Datos(valor)"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "13) O método addEventListener serve para",
              "description": "",
              "answers": [
                "Criar um elemento",
                "Criar uma classe no DOM",
                "Criar um evento",
                "Criar um nó texto"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "14) Quantos métodos definem o BOM para manipular a janela?",
              "description": "",
              "answers": [
                "1",
                "2",
                "3",
                "4"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "15) Seleciona os objetos do BOM",
              "description": "",
              "answers": [
                "Location",
                "Screen",
                "HTMLtags",
                "Navigator"
              ],
              "solution": [
                0,
                1,
                3
              ]
            }
          ],
          "title": "Quiz #2: requizzing",
          "type": "quiz",
          "format": "guided",
          "duration": 30,
          "order": 13,
          "durationString": "30min"
        },
        "15-closing": {
          "title": "Encerramento: tornando o seu site interativo",
          "type": "seminar",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"agenda\">Agenda</h2>\n<h3 id=\"1-revisemos-o-que-aprendemos-até-aqui\">1. Revisemos o que aprendemos até aqui</h3>\n<h3 id=\"2-conversemos-sobre-o-sentimento-da-turma-resultado-da-auto-avaliação\">2. Conversemos sobre o sentimento da turma (resultado da <code>auto-avaliação</code>)</h3>\n<h3 id=\"3-respondamos-às-preguntas-da-abertura\">3. Respondamos às preguntas da abertura</h3>\n<h4 id=\"dom\">DOM</h4>\n<ul>\n<li>O que é o DOM?</li>\n<li>O que é um selector?</li>\n<li>Qual é a diferença entre document.getElementById e document.getElementsByClassName?</li>\n<li>Como invocamos os filhos de um elemento usando o DOM?</li>\n<li>Como invocamos o pai de um item usando o DOM?</li>\n<li>Quais atributos CSS de um elemento podem ser modificados usando o DOM?</li>\n<li>Como podemos simular animação entre elementos HTML?</li>\n</ul>\n<h4 id=\"bom\">BOM</h4>\n<ul>\n<li>O que é o BOM?</li>\n<li>Como o DOM se relaciona com o BOM?</li>\n<li>Quais são alguns usos comuns do BOM?</li>\n</ul>\n<h4 id=\"modificando-o-dom\">Modificando o DOM</h4>\n<ul>\n<li>Novos nós podem ser criados usando o DOM?</li>\n<li>O que é um nó?</li>\n<li>Quantos tipos de nós existem?</li>\n<li>Por que dizemos que o DOM tem nós?</li>\n<li>Por que dizemos que o DOM tem nós de objetos?</li>\n<li>Como podemos acessar a propriedade <em>style</em> do <em>body</em> usando o DOM?</li>\n<li>Qual é o nó de origem no DOM?</li>\n<li>Qual é o nó de origem no BOM?</li>\n<li>Qual é a diferença entre o nó e o elemento?</li>\n</ul>\n<h4 id=\"eventos\">Eventos</h4>\n<ul>\n<li>O que é um evento?</li>\n<li>Quais são os eventos mais usados em um navegador?</li>\n<li>Como detectamos um \"clique\" do usuário?</li>\n<li>Como podemos detectar a entrada de texto de um usuário?</li>\n<li>Como detectamos o envio de um formulário?</li>\n<li>Podemos usar o evento <em>submit</em> para um <em>input text</em>?</li>\n<li>Para que server a palavra reservada \"event\" ou \"e\"?</li>\n<li>Como podemos armazenar ou passar informações entre elementos HTML?</li>\n<li>O que é <em>event delegation</em>?</li>\n<li>O que é <em>event propagation</em>?</li>\n<li>Como definimos nossos próprios eventos?</li>\n<li>Qual é a diferença entre onClick e addEventListener (\"click\")?</li>\n</ul>\n",
          "order": 14,
          "durationString": "2h"
        }
      },
      "order": 0,
      "stats": {
        "duration": 2370,
        "durationString": "39.5h",
        "exerciseCount": 0,
        "partCount": 15
      }
    },
    "03-browser-apis": {
      "title": "Browser APIs",
      "bonus": false,
      "description": "<p>Nesta unidade você irá aprender sobre as APIs que não nativas do seu navegador.\nQue te fornecerão as ferramentas necessárias para utilizar geolocalização, drag\nn drop, storage e muito mais.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Opening",
          "type": "read",
          "format": "self-paced",
          "duration": 25,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>O que é uma API</li>\n<li>O que é Browser API</li>\n<li>Como utilizar as Browser APIs</li>\n<li>Quais APIs o HTML5 nos oferece</li>\n</ul>\n<h2 id=\"html5-e-a-magia-de-suas-apis\">HTML5 e a magia de suas APIs</h2>\n<p>Na leitura anterior, descobrimos que HTML5 vem com um conjunto de APIs. Vamos\nentrar um pouco nesse contexto com o seguinte documento:</p>\n<blockquote>\n<h3 id=\"então-o-que-é-uma-api\">Então, o que é uma API?</h3>\n<p>Uma API (Interface de Programação de Aplicações) é uma coleção de instruções e\npadrões de programação para acessar uma aplicação. Com uma API, é possível\nprojetar produtos baseados nos serviços que a API disponibiliza.</p>\n<p>HTML5 possui várias APIs novas. Por exemplo:</p>\n<ul>\n<li>Uma API de desenho em 2D utilizada com o novo elemento de canvas para\nrepresentar gráficos e outras imagens;</li>\n<li>Um mecanismo de API de memória cache que suporta aplicações web <em>offline</em>;</li>\n<li>Uma API para reproduzir vídeo e áudio utilizando os novos elementos de vídeo\ne áudio;</li>\n<li>Uma API de histórico que faz com que o histórico de navegação seja acessível\ne permita que as páginas o utilizem;</li>\n<li>Uma API para arrastar e soltar para ser utilizada com o atributo <em>draggable</em>;</li>\n<li>Uma API de edição para ser utilizada com o atributo <em>contenteditable</em>;</li>\n<li>Armazenamento do lado do cliente com APIs de JavaScript para pares de\nchave/valor e também bases de dados SQL intercaladas.</li>\n</ul>\n<p>Este texto é um trecho do <a href=\"https://www.ibm.com/developerworks/ssa/web/library/wa-html5fundamentals3/index.html\" target=\"_blank\">blog publicado na\nIBM</a>\npor Grace Walker.</p>\n</blockquote>\n<h2 id=\"quais-apis-veremos-nesta-unidade\">Quais APIs veremos nesta unidade?</h2>\n<p>Nesta unidade abordaremos 4 APIs do navegador, mas isso não será um limitador. O\nque veremos lhe dará uma base para trabalhar no variado universo de APIs que\nHTML5 traz consigo. As APIs que veremos são <strong>Media, Web Storage, Geolocation e\nDrag and Drop</strong>.</p>\n<h2 id=\"quer-saber-quais-apis-existem\">Quer saber quais APIs existem?</h2>\n<p>No sítio web <a href=\"http://html5index.org/\" target=\"_blank\">html5index.org</a> você pode encontrar a\nlista de APIs de JavaScript do HTML5 com alguns recursos para que possa obter\nmais informações. Como você perceberá, existem muitas destas APIs e vermos todas\nnão seria possível, por isso sugerimos que você se atenha às que veremos a\nseguir.</p>\n<h2 id=\"guia-de-perguntas-e-conceitos-chave\">Guia de perguntas e conceitos chave</h2>\n<p>Quando começamos a estudar um novo assunto, é útil termos uma ideia de conceitos\nmais importantes que vamos aprender e dos temas centrais a que devemos prestar\natenção especial.</p>\n<p>A seguir apresentamos uma série de perguntas que você deve ser capaz de\nresponder ao terminar esta unidade. Use estas perguntas como guia para orientar\nseu esforço de aprendizagem. Retorne a elas constantemente à medida em que\navança para validar que está indo na direção correta. Que este guia sirva como\num \"checklist\" que você vai riscando conforme avança.</p>\n<ul>\n<li>O que é HTML5?</li>\n<li>Qual é a diferença entre HTML e HTML5?</li>\n<li>O que são as APIs do navegador?</li>\n<li>Como utilizo as APIs do navegador?</li>\n<li>O que é necessário para a manipulação de áudio e vídeo?</li>\n<li>Como armazeno dados no navegador?</li>\n<li>Qual é a diferença entre <code>localStorage</code> e <code>sessionStorage</code>?</li>\n<li>Como obtenho a localização atual do usuário?</li>\n<li>O que significa DnD?</li>\n<li>Quais outras APIs do navegador você conhece?</li>\n</ul>\n",
          "order": 0,
          "durationString": "25min"
        },
        "01-audio-video": {
          "title": "Media: Áudio & Vídeo",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Aprender de forma geral como usar a API de Áudio e Vídeo.</p>\n<h2 id=\"áudio-e-vídeo-na-web\">Áudio e vídeo na web</h2>\n<blockquote>\n<p>Os desenvolvedores web desejam usar áudio e vídeo há muito tempo, desde o\ninício dos anos 2000, quando começamos a ter uma largura de banda\nsuficientemente rápida para suportar qualquer tipo de vídeo (os arquivos de\nvídeo são maiores que textos ou imagens). No início, as tecnologias web\nnativas como HTML não possuíam as habilidade para incorporar vídeo ou áudio na\nweb, o que fez com que tecnologias proprietárias (ou baseadas em plugins) como\nFlash (e posteriormente Silverlight) se tornassem muito populares para\nmanipular esse tipo de conteúdo. Estas tecnologias funcionaram bem, mas\npossuíam um grande número de problemas, incluindo que não funcionavam bem com\nHTML/CSS, problemas de segurança e de acessibilidade.</p>\n<p>Uma solução nativa resolveria isto se fosse bem feita. Felizmente, alguns anos\ndepois, a especificação de HTML5 incluiria estas <em>features</em> com os elementos\n<code>&lt;video&gt;</code> e <code>&lt;audio&gt;</code> e algumas APIs JavaScript para controlá-los.</p>\n</blockquote>\n<p>Este é um trecho da <a href=\"https://developer.mozilla.org/pt-BR/docs/Aprender/HTML/Multimedia_and_embedding/Video_and_audio_content\" target=\"_blank\">documentação de\nMDN</a>\nsobre as <em>tags</em> de áudio e vídeo, para você entender o contexto de como foi\nimportante adicionar suporte nativo no HTML5 com sua API de mídia.</p>\n<h2 id=\"inserindo-conteúdo-multimídia-na-nossa-página-web\">Inserindo conteúdo multimídia na nossa página web</h2>\n<p>Para inserir conteúdo multimídia em nossa web, devemos usar as <em>tags</em> <code>&lt;video&gt;</code>\ne <code>&lt;audio&gt;</code>. A seguir mostramos alguns exemplos de como inseri-los:</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"Video Tag\" src=\"//codepen.io/ivandevp/embed/gvMPjW/?height=265&amp;theme-id=0&amp;default-tab=html,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\">\n  See the Pen [Video Tag](https://codepen.io/ivandevp/pen/gvMPjW/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<iframe height=\"265\" scrolling=\"no\" title=\"Audio Tag\" src=\"//codepen.io/ivandevp/embed/PQzNoE/?height=265&amp;theme-id=0&amp;default-tab=html,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\">\n  See the Pen [Audio Tag](https://codepen.io/ivandevp/pen/PQzNoE/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<p>Você percebeu como é fácil adicioná-los? Bem, além disso, devemos levar em\nconsideração o seguinte:</p>\n<ul>\n<li>Atributos: nos exemplos a <em>tag</em> <strong>vídeo</strong> e <strong>áudio</strong> contam com um atributo\n<code>controls</code>. Você consegue imaginar o que acontece se o remover? Assim como\neste atributo, existem muitos mais que você verá conforme for precisando.</li>\n<li>Suporte entre navegadores: se você percebeu, só usamos um vídeo com extensão\n<code>.mp4</code> e um áudio com extensão <code>.mp3</code>. Nem todos os navegadores suportam o\nmesmo formato. Para garantir que nosso áudio e/ou vídeo funcione em qualquer\nformato, devemos adicioná-lo com vários formatos e para isso usamos a etiqueta\n<code>&lt;source&gt;</code>.</li>\n</ul>\n<h2 id=\"onde-encontro-a-lista-de-atributos-e-formatos-suportados\">Onde encontro a lista de atributos e formatos suportados?</h2>\n<p>A W3Schools (uma de suas melhores amigas neste momento) possui uma série de\nrecursos para ajudar a obter essa informação.</p>\n<ul>\n<li><a href=\"https://www.w3schools.com/tags/tag_audio.asp\" target=\"_blank\">HTML <code>&lt;audio&gt;</code> Tag</a>: aqui você\npode encontrar a lista de atributos que são suportados por esta <em>tag</em> e\nformatos de áudio que cada navegador suporta.</li>\n<li><a href=\"https://www.w3schools.com/tags/tag_video.asp\" target=\"_blank\">HTML <code>&lt;video&gt;</code> Tag</a>: aqui você\npode encontrar a lista de atributos que são suportados por esta <em>tag</em> e\nformatos de vídeo que cada navegador suporta.</li>\n<li><a href=\"https://www.w3schools.com/tags/ref_av_dom.asp\" target=\"_blank\">HTML Audio/Video DOM\nReference</a>: não esqueça de que,\npor serem <em>tags</em> HTML, estas podem ser manipuladas pelo DOM e para tanto\ncontam com métodos e eventos que possamos utilizar. Tenha isso como\nreferência, não é necessário que você memorize tudo isso agora.</li>\n</ul>\n<h2 id=\"e-como-interajo-com-a-api\">E como interajo com a API?</h2>\n<p>Interagimos por meio da interface <code>HTMLMediaElement</code>. Ela agrega as propriedades\ne métodos necessários para suportar capacidades básicas relacionadas a elementos\nmultimídia (áudio e vídeo).</p>\n<p>Exemplo:</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"HTMLMediaElement JS\" src=\"//codepen.io/ivandevp/embed/KQMWMy/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\">\n  See the Pen [HTMLMediaElement JS](https://codepen.io/ivandevp/pen/KQMWMy/) by\n  Ivan ([@ivandevp](https://codepen.io/ivandevp)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<p>Como você imagina que seria com o áudio? Basicamente o mesmo? Esperamos que você\ntente e veja qual é o resultado.</p>\n<p>E como seria com jQuery?</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"HTMLMediaElement jQuery\" src=\"//codepen.io/ivandevp/embed/XZKMjx/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\">\n  See the Pen [HTMLMediaElement jQuery](https://codepen.io/ivandevp/pen/XZKMjx/)\n  by Ivan ([@ivandevp](https://codepen.io/ivandevp)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<p>Ainda que jQuery nos permita manipular o DOM com mais facilidade, ele não\nfornece suporte para <code>HTMLMediaElement</code>s, o que nos força a obter o elemento do\nDOM usando o método <code>.get</code>; como ele é um único elemento (portanto, o primeiro),\nfazemos <code>$video.get(0)</code> para poder interagir com a API de vídeo. Outro detalhe\ninteressante a observar é que, ao aguardar que o DOM esteja pronto por meio de\n<code>$(document).ready</code> não significa necessariamente que o vídeo esteja carregado\ncomo tal. Por isso, para obter a duração, foi necessário adicionar um evento que\nnos indique que os dados do vídeo tenham terminado de carregar\n(<code>video.onloadeddata</code>).</p>\n<h2 id=\"recursos\">Recursos</h2>\n<p>Se deseja fazer uma aplicação com áudio e/ou vídeo, mas não lhe ocorre onde\nobter os arquivos, pode utilizar alguns gratuitos nos links abaixo:</p>\n<ul>\n<li><a href=\"https://coverr.co/\" target=\"_blank\">Coverr</a></li>\n<li><a href=\"https://videos.pexels.com/\" target=\"_blank\">Pexels</a></li>\n<li><a href=\"https://clyp.it/\" target=\"_blank\">Clyp.it</a></li>\n</ul>\n<p>Se não conseguir baixar algum, lembre-se de que você é uma desenvolvedora web e\nvocê possui superpoderes para inspecionar elementos e obter os links a partir de\nsuas Dev Tools ;).</p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-media-challenges": {
          "title": "Jogando com Áudio & Vídeo",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Praticar tudo que foi aprendido fazendo uso da API de Áudio/Vídeo.</li>\n<li>Praticar, praticar e praticar.</li>\n</ul>\n<h2 id=\"exercícios\">Exercícios</h2>\n<p>Você deve subir todos seus exercícios para o <code>GitHub</code> e publicá-los na\n<code>gh-pages</code>.</p>\n<h3 id=\"reprodutor-de-música\">Reprodutor de Música</h3>\n<p>Faça seu reprodutor de música com seus próprios controles e design. Seu\nreprodutor deve permitir iniciar, pausar, avançar e retroceder o áudio assim\ncomo controlar o volume. Para este exercício, você pode ter seu áudio\npredeterminado no HTML.</p>\n<p>Você pode usar <a href=\"https://www.w3.org/2010/05/video/mediaevents.html\" target=\"_blank\">este website</a>\ncomo referência interativa.</p>\n<p>Se você não tem ideia do design, pode utilizar este ou qualquer outro que\nencontre na internet.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59532797-1cd38500-8ec0-11e9-98d5-cde6744dd297.png\" alt=\"Music\nPlayer\"></p>\n<h3 id=\"reproduzir-em-hover\">Reproduzir em hover</h3>\n<p>Procure seu(s) vídeo(s) favorito(s) e publique-os no seu sítio web. Adicione a\nfuncionalidade para que ao passar o mouse sobre o vídeo (<code>hover</code>), ele seja\nreproduzido. Quando o mouse sair, o vídeo é pausado.</p>\n<p>Exemplo:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59533337-9029c680-8ec1-11e9-8ccb-5d23608a7b76.gif\" alt=\"Video on\nhover\"></p>\n<blockquote>\n<p>Nota: Não se vê o mouse, mas o GIF parece que foi pausado devido ao mouse\nsaindo da imagem.</p>\n</blockquote>\n<h2 id=\"mais-prática-para-o-volume\">Mais prática para o volume</h2>\n<h3 id=\"prepare-sua-playlist\">Prepare sua playlist</h3>\n<p>Como você melhoraria a experiência de playlist de vídeos do YouTube? Prepare um\nJSON com sua lista de vídeos favoritos que estejam relacionados e mostre-os em\numa lista que permita selecionar e reproduzir o vídeo.</p>\n<p>Exemplo:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59533388-b0f21c00-8ec1-11e9-9a97-b25daf30c29b.png\" alt=\"Video playlist\"></p>\n<p>Não é necessário seguir a mesma estrutura. Você pode propor a que desejar. Pense\ncomo seria a experiência em um dispositivo móvel.</p>\n<h3 id=\"rede-social-de-música\">Rede social de Música</h3>\n<p>Como você proporcionaria a experiência a seus usuários para que possam montar\nsua própria playlist e compartilhá-la com sua rede de amigos? Talvez, mesclando\nseus poderes com Firebase e fazendo uso de alguma API pública. 🤔</p>\n",
          "order": 2,
          "durationString": "2h"
        },
        "03-web-storage": {
          "title": "Web Storage",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/2K4Z46CT5z4",
              "id": "2K4Z46CT5z4"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Aprender a armazenar dados no navegador por meio da API de Web Storage.</li>\n</ul>\n<h2 id=\"armazenamento-web\">Armazenamento web</h2>\n<p>A API de armazenamento web fornece os mecanismos através do quais o navegador\npode armazenar informação do tipo <strong>chave/valor</strong> de uma maneira muito mais\nintuitiva do que utilizando <em>cookies</em>.</p>\n<p>Os dois mecanismos de armazenamento web são os seguintes:</p>\n<ul>\n<li><code>sessionStorage</code>: mantém uma área de armazenamento separada para cada origem\nque estiver disponível pela duração da sessão da página (tanto se o navegador\nestiver aberto como se estiver fechado, incluindo recarregamento de páginas e\nrestabelecimentos).</li>\n<li><code>localStorage</code> faz o mesmo, mas persiste inclusive quando o navegador é\nfechado e reaberto.</li>\n</ul>\n<p>Fonte: <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Web_Storage_API_pt_br\" target=\"_blank\">MDN - API de armazenamento\nweb</a></p>\n<p>Veja o seguinte link:\n<a href=\"https://mdn.github.io/dom-examples/web-storage/\" target=\"_blank\">https://mdn.github.io/dom-examples/web-storage/</a>,\nbrinque com ele e recarregue a página ou, se desejar, feche a janela ou o\nnavegador e volte a acessar. Ele informa quantas mudanças permaneceram? Isto é o\nque a API de Web Storage (armazenamento web) permite que façamos facilmente.</p>\n<p>Ainda não está claro pra você? Aqui deixamos um <a href=\"https://medium.com/laboratoria-how-to/api-web-storage-ad9b1efa9b01\" target=\"_blank\">post de\nMedium</a>\nescrito por nossa super professora Marcia no qual ela explica os métodos que\ntemos disponíveis por meio desta API.</p>\n<p>Se você for das que preferem o conteúdo visual, deixamos aqui um vídeo que lhe\npermite ver um exemplo de como usar <code>localStorage</code>.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/2K4Z46CT5z4?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"jsonstringify-jsonparse\"><code>JSON.stringify()</code>, <code>JSON.parse()</code>?</h2>\n<p>Se você assistiu ao vídeo, percebeu que ele usa os métodos <code>JSON.stringify()</code> e\n<code>JSON.parse()</code>. Se não o viu, é bom que tenha em mente ambos os métodos.</p>\n<p>Como é mencionado na parte superior, esta API armazena elementos no formato de\nchave/valor. Exemplo: se tenho o nome do usuário em uma variável chamada <code>name</code>\ne quero armazená-la no navegador, você faria o seguinte:</p>\n<pre><code class=\"language-javascript\">const name = 'nome de usuário';\n/*\n * name é o identificador (chave),\n * e o valor está armazenado na variável `name`\n */\nlocalStorage.setItem('name', name);\n// Se usássemos sessionStorage, só mudaríamos o objeto de localStorage\n// sessionStorage.setItem('name', name);\n</code></pre>\n<blockquote>\n<p>O valor sempre será armazenado como <code>string</code> independentemente do tipo de\ndado.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">// signup.html\nconst age = 50;\nlocalStorage.setItem('age', 50);\n\n// home.html\nconst userAge = localStorage.getItem('age');\ntypeof userAge; // \"string\"\n</code></pre>\n<p>Bem, isso deveríamos saber sempre, em particular quando vamos operar com esses\nvalores como o caso de números e booleanos. Mas e quando usamos os métodos do\nobjeto <code>JSON</code>? Há situações em que vamos precisar armazenar múltiplos valores\nque estão relacionados entre si. Normalmente, representaríamos isso como um\nobjeto e como tudo que ele armazena é uma string, não podemos fazê-lo\ndiretamente. Exemplo:</p>\n<pre><code class=\"language-javascript\">// login.html\nconst user = {\n    name: 'user',\n    email: 'user@gmail.com',\n    photoUrl: 'https://images.com/user.png',\n};\n\nsessionStorage.setItem('loggedUser', user);\n\n// home.html\nconst loggedUser = sessionStorage.getItem('loggedUser');\nconsole.log(loggedUser); // \"[object Object]\"\n</code></pre>\n<p>Isto acontece porque o interpretador trata de converter o objeto para uma string\ne isto faz com que armazene como <code>\"[object Object]\"</code>. Se você quiser saber mais\nsobre porque o objeto é convertido para uma string dessa maneira, deve entender\num pouco sobre como funciona a <a href=\"https://jherax.wordpress.com/2014/07/05/javascript-coercion/\" target=\"_blank\">coerção em\nJavaScript</a> e\nentender sobre o método <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects\" target=\"_blank\"><code>.toString()</code> dos\nobjetos</a>.</p>\n<p>Enfim, como resolvemos esta inconveniência e conseguimos armazenar nosso objeto?\nEntendamos o que fazem os seguintes métodos:</p>\n<ul>\n<li><code>JSON.stringify()</code>: converte o objeto que é passado como argumento para uma\nstring, serializando as propriedades e valores.</li>\n<li><code>JSON.parse()</code>: converte a string passada como argumento para um objeto,\ndesserializando as propriedades e valores.</li>\n</ul>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">// login.html\nconst user = {\n    name: 'user',\n    email: 'user@gmail.com',\n    photoUrl: 'https://images.com/user.png',\n};\n\n/*\n * Aqui guardamos o objeto em forma de string.\n */\nsessionStorage.setItem('loggedUser', JSON.stringify(user));\n\nconsole.log(sessionStorage.getItem('loggedUser'));\n// {\n//   \"name\":\"user\",\n//   \"email\":\"user@gmail.com\",\n//   \"photoUrl\":\"https://images.com/user.png\"\n// }\n\n\n// home.html\n/*\n * Aqui obtemos o objeto em forma de string e convertemos (parse) para objeto.\n */\nconst loggedUser = JSON.parse(sessionStorage.getItem('loggedUser'));\nconsole.log(typeof loggedUser); // \"object\"\n</code></pre>\n<blockquote>\n<p>Para finalizar, não esqueça de que o que foi armazenado no localStorage é\npersistido mesmo quando fechamos o navegador. Logo, se desejamos limpar ou\napagar o que temos armazenado, devemos usar os métodos <code>.removeItem()</code> ou\n<code>.clear()</code> dependendo se queremos eliminar uma chave específica ou todas.</p>\n</blockquote>\n",
          "order": 3,
          "durationString": "30min"
        },
        "04-storage-challenges": {
          "title": "Exercitando com Web Storage",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Praticar tudo o que foi aprendido utilizando a API de armazenamento web.</li>\n<li>Praticar, praticar e praticar.</li>\n</ul>\n<h2 id=\"exercícios\">Exercícios</h2>\n<p>Você deve subir todos os seus exercícios para o <code>GitHub</code> e publicá-los nas <code>gh-pages</code>.</p>\n<h3 id=\"perfil-de-usuário\">Perfil de usuário</h3>\n<p>Implemente um login com Firebase, seja manual ou com alguma rede social,\nredirecione para a página principal de seu sítio web (pode dar-lhe a temática\nque desejar) e permita ter uma edição de perfil. Para isto, os dados devem estar\npré-carregados com o que foi armazenado no navegador. Leve em consideração que\ndeve funcionar para diferentes usuários, motivo pelo qual deverá existir sessões\npor usuário. Você deverá usar <code>localStorage</code> ou <code>sessionStorage</code>?</p>\n<iframe height=\"500\" scrolling=\"no\" title=\"Edit Profile with Angular\" src=\"//codepen.io/DonPage/embed/HCjem/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [Edit Profile with Angular](https://codepen.io/DonPage/pen/HCjem/)\n  by Don Page ([@DonPage](https://codepen.io/DonPage)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<h3 id=\"leitura-personalizada\">Leitura personalizada</h3>\n<p>Alguma vez você começou a ler um post de um blog, mas você se sentiu incomodada\ncom a fonte, o tamanho ou as cores usados? Chegou a hora de resolver isso. Crie\num site responsivo (não é preciso dizer, mas por via das dúvidas) com um post\nreal (seu preferido, sem Lorem Ipsum) e implemente a opção para que o usuário\npossa personalizar seu modo de leitura da forma que achar conveniente.</p>\n<p>Algo muito similar ao exemplo visto na <a href=\"https://mdn.github.io/dom-examples/web-storage/\" target=\"_blank\">leitura de self-learning\nanterior</a>. Se desejar armazenar\na configuração do usuário, o que você usará?</p>\n",
          "order": 4,
          "durationString": "2h"
        },
        "05-geolocation": {
          "title": "Geolocalização",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/e/2PACX-1vQbFDCCktoR42Inmp5jjBt-OkwBMPS-CxOI4k4FgHvQKEOkLvht3qTZc5bYz4X8Vjt--a3NepBgu2A-/embed?start=false&loop=false&delayms=5000",
              "id": "2PACX-1vQbFDCCktoR42Inmp5jjBt-OkwBMPS-CxOI4k4FgHvQKEOkLvht3qTZc5bYz4X8Vjt--a3NepBgu2A-/embed"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Entender o que é a geolocalização e como usar a API.</p>\n<h2 id=\"geolocalização\">Geolocalização</h2>\n<p>Revisemos os seguintes conteúdos:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/2PACX-1vQbFDCCktoR42Inmp5jjBt-OkwBMPS-CxOI4k4FgHvQKEOkLvht3qTZc5bYz4X8Vjt--a3NepBgu2A-/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n<p>Agora vamos ler este\n<strong><a href=\"https://developers.google.com/web/fundamentals/native-hardware/user-location/?hl=pt-br\" target=\"_blank\">link</a></strong>\ndo Google developers que além de ter informação importante também apresenta um\nexemplo prático para ser resolvido.</p>\n",
          "order": 5,
          "durationString": "1h"
        },
        "06-geolocation-challenges": {
          "title": "Exercitando com Geolocalização",
          "type": "workshop",
          "format": "guided",
          "duration": 180,
          "embeds": [
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/e/2PACX-1vQQVIwRCvs17bO0YkP17rLec33TEsjj0k5rehs7XcnAGoO7eUCU41j-VxZGge47XLBA-rkss81K2dPd/embed?start=false&loop=false&delayms=5000",
              "id": "2PACX-1vQQVIwRCvs17bO0YkP17rLec33TEsjj0k5rehs7XcnAGoO7eUCU41j-VxZGge47XLBA-rkss81K2dPd/embed"
            },
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/e/2PACX-1vQMPjhYWVZPuLjEaA0ITeavo8zW_zZcXrPY8J-JUDkrU5EIBAhED5Ir5NhIn4KXffdc9xA92QdxaU2S/embed?start=false&loop=false&delayms=5000",
              "id": "2PACX-1vQMPjhYWVZPuLjEaA0ITeavo8zW_zZcXrPY8J-JUDkrU5EIBAhED5Ir5NhIn4KXffdc9xA92QdxaU2S/embed"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Praticar tudo o que foi aprendido utilizando a API de geolocalização.</li>\n<li>Praticar, praticar e praticar.</li>\n</ul>\n<h2 id=\"exercícios\">Exercícios</h2>\n<p>Você deve subir todos os exercícios para o <code>GitHub</code> e publicá-los nas <code>gh-pages</code>.</p>\n<p>Vejamos os seguintes slides para resolver nosso desafio.</p>\n<h3 id=\"encontre-me\">Encontre-me</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/2PACX-1vQQVIwRCvs17bO0YkP17rLec33TEsjj0k5rehs7XcnAGoO7eUCU41j-VxZGge47XLBA-rkss81K2dPd/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"encontre-me-hacker-edition\">Encontre-me Hacker Edition</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/2PACX-1vQMPjhYWVZPuLjEaA0ITeavo8zW_zZcXrPY8J-JUDkrU5EIBAhED5Ir5NhIn4KXffdc9xA92QdxaU2S/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 6,
          "durationString": "3h"
        },
        "07-dnd": {
          "title": "Drag and Drop",
          "type": "read",
          "format": "self-paced",
          "duration": 90,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Entender o que é o <em>Drag and Drop</em> e como usá-lo em algumas aplicações.</p>\n<h2 id=\"arrastar-e-soltar\">Arrastar e soltar</h2>\n<blockquote>\n<p>A função de arrastar e soltar (<em>Drag and Drop</em> DnD) possui uma grande\nimportância em HTML5. Na especificação é definido um mecanismo baseado em\neventos, na API de JavaScript e em elementos marcadores adicionais para indicar\nque praticamente qualquer tipo de elemento de uma página possa ser arrastado. A\ncompatibilidade nativa do navegador com a função DnD nos permite oferecer\naplicações web mais interativas.</p>\n</blockquote>\n<p>Este é um trecho de <strong>html5rocks</strong>. Vá para este\n<strong><a href=\"https://www.html5rocks.com/pt/tutorials/dnd/basics/\" target=\"_blank\">link</a></strong> para que você\npossa ler a explicação e veja o exemplo de <em>Drag and Drop</em>.</p>\n<p>Este <strong><a href=\"https://developer.mozilla.org/pt-BR/docs/DragDrop/Drag_and_Drop\" target=\"_blank\">link</a></strong>\ncontém a documentação da Mozilla e aqui você pode ter uma ideia do que é e o que\nfaz esta fantástica API de HTML5.</p>\n<blockquote>\n<p>Uma aplicação deve ser intuitiva e o que mais intuitivo do que arrastar um\n\"objeto\" de uma parte para outra?</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59534169-e7c93180-8ec3-11e9-88d4-eda8dbe57443.gif\" alt=\"exemploDnD\"></p>\n<p>Não se preocupe se você sentir de repente que é muita informação. Lembre-se de\nque a melhor maneira de entender o que lemos é colocá-lo em prática. Então, abra\nseu editor de texto e replique ou modifique os exemplos que já vimos.</p>\n",
          "order": 7,
          "durationString": "1.5h"
        },
        "08-dnd-challenges": {
          "title": "Exercitando com DnD",
          "type": "workshop",
          "format": "guided",
          "duration": 180,
          "embeds": [
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/e/2PACX-1vR4AWSnJCx4t7sS9bOnyY6JeToc_IE8FVM8MXVu5EN0c5AgJv5Odkwb8sHHkw_hzqtFb8WAyeFtTsZX/embed?start=false&loop=false&delayms=5000",
              "id": "2PACX-1vR4AWSnJCx4t7sS9bOnyY6JeToc_IE8FVM8MXVu5EN0c5AgJv5Odkwb8sHHkw_hzqtFb8WAyeFtTsZX/embed"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Praticar tudo o que foi aprendido utilizando a API de Drag and Drop.</li>\n<li>Praticar, praticar e praticar.</li>\n</ul>\n<h2 id=\"exercícios\">Exercícios</h2>\n<p>Você deve subir todos os exercícios para o <code>GitHub</code> e publicá-los nas <code>gh-pages</code>.</p>\n<h3 id=\"insta-collage\">Insta Collage</h3>\n<p>Revise os seguintes slides para resolver seu exercício.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/2PACX-1vR4AWSnJCx4t7sS9bOnyY6JeToc_IE8FVM8MXVu5EN0c5AgJv5Odkwb8sHHkw_hzqtFb8WAyeFtTsZX/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 8,
          "durationString": "3h"
        },
        "09-more-apis": {
          "title": "Mais APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 40,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Incentivar a explorar outras APIs de HTML5.</li>\n</ul>\n<h2 id=\"outras-apis\">Outras APIs</h2>\n<p>Nesta unidade, focamos em algumas APIs específicas, mas como mencionamos, não\nsão as únicas. Convidamos você a explorar por conta própria as outras.</p>\n<p>Aqui deixamos algumas com as quais você pode ir brincando:</p>\n<h3 id=\"canvas\">Canvas</h3>\n<p>O elemento HTML <code>&lt;canvas&gt;</code> é utilizado para desenhar gráficos por meio de\nJavaScript. No HTML, o elemento é só um contêiner de gráficos. A API fornece\ndiversos métodos para desenhar linhas, caixas, círculos, texto e adicionar\nimagens.</p>\n<h4 id=\"desafios\">Desafios</h4>\n<h5 id=\"exercitando-com-formas\">Exercitando com formas</h5>\n<p>Desenhe as diversas formas geométricas que você conhece e comece a dar um estilo\npersonalizado a cada uma delas.</p>\n<p>Exemplo:</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"CSS Basic Shapes\" src=\"//codepen.io/krystalcampioni/embed/bgYxQa/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\"> See the Pen [CSS Basic\n  Shapes](https://codepen.io/krystalcampioni/pen/bgYxQa/) by Krystal Campioni\n  ([@krystalcampioni](https://codepen.io/krystalcampioni)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<h5 id=\"imagens-pixeladas\">Imagens pixeladas</h5>\n<p>Crie uma interface com suas imagens preferidas e torne-as pixeladas.</p>\n<p>Exemplo: Veja a seção de <strong>Quem somos?</strong> no sítio web das <a href=\"http://developers.laboratoria.la/\" target=\"_blank\">Developers\nLaboratoria</a>.</p>\n<h4 id=\"referências\">Referências</h4>\n<ul>\n<li><a href=\"https://www.w3schools.com/html/html5_canvas.asp\" target=\"_blank\">HTML5 Canvas</a></li>\n<li><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/Guide/HTML/Canvas_tutorial/Utilizacao_basica\" target=\"_blank\">Uso básico de\nCanvas</a></li>\n</ul>\n<h3 id=\"file\">File</h3>\n<p>Esta provavelmente você já conhece, por meio do elemento <code>&lt;input type=\"file\" /&gt;</code>\nou quando você quis adicionar uma imagem no momento de postar em sua rede\nsocial. Qualquer que tenha sido o cenário, você perceberá que é muito útil saber\nmanipulá-la.</p>\n<h4 id=\"desafios-1\">Desafios</h4>\n<h5 id=\"editando-foto-de-perfil\">Editando foto de perfil</h5>\n<p>Lembra do desafio de <em>web storage</em>, no qual você podia editar os dados do seu\nperfil? Que tal se agora você puder alterar também sua foto de perfil? E se\nrecarregar a página, permanecer a imagem que acabou de trocar? Comece a mesclar\nas duas APIs e vá até onde sua imaginação deixar. Lembre-se de que uma boa\nmaneira de indicar ao usuário que sua edição está correta é exibindo como ficará\nantes de salvar efetivamente.</p>\n<blockquote>\n<p>Você deve testar isto no seu dispositivo móvel quando terminar. Estamos\nconfiantes que você perceberá que pode colocar uma selfie que tirou com sua\ncâmera como foto de perfil. Ooopss, a ideia era que você percebesse isso\nsozinha ;)</p>\n</blockquote>\n<h5 id=\"instagram\">Instagram?</h5>\n<p>Se você já sabe como exibir imagens que estão armazenadas em seu PC ou celular,\nvocê pode adicionar interação com o DOM, logar em redes sociais e armazenar as\ninformações em uma base de dados graças ao Firebase; isto quer dizer que você\ntem tudo o que precisa para construir o seu próprio Instagram! Solte sua\nimaginação e divirta-se criando sua rede social de imagens do seu jeito.</p>\n<blockquote>\n<p>Nota: com CSS você pode adicionar <a href=\"https://platzi.com/blog/filtros-css/\" target=\"_blank\">filtros em suas\nimagens</a> :scream:</p>\n</blockquote>\n<h4 id=\"referências-1\">Referências</h4>\n<ul>\n<li><a href=\"https://www.html5rocks.com/pt/tutorials/file/dndfiles/\" target=\"_blank\">Como ler arquivos em JavaScript pode meio da API\nFile</a></li>\n<li><a href=\"http://blog.teamtreehouse.com/reading-files-using-the-html5-filereader-api\" target=\"_blank\">File Reader\nAPI</a></li>\n</ul>\n<h3 id=\"websockets\">WebSockets</h3>\n<p>Algumas vez lhe perguntaram como funcionam as aplicações em tempo real? Como\nfunciona o Facebook, WhatsApp e outras redes sociais para notificar que você\nrecebeu uma mensagem imediatamente depois de que o remetente a tenha enviado? Um\nexemplo mais técnico seria por meio de Firebase. Você percebeu que, se sua\naplicação ouve as mudanças na base de dados, ela atualiza automaticamente?</p>\n<p>Tudo isso é graças aos <em>Web Sockets</em>. HTML5 fornece esta API com a qual você\npode estabelecer conexões <em>socket</em> entre o navegador e um servidor. Isso\nsignifica que existe uma conexão persistente na qual você pode enviar dados a\nqualquer momento.</p>\n<p>Como dissemos no parágrafo anterior, é necessário escrever um script no servidor\ne no cliente estabelecer uma conexão com Web Sockets. Isso pode ser um pouco\ncomplicado principalmente porque a implementação varia no <em>back-end</em> dependendo\nda linguagem e varia no cliente devido à compatibilidade entre navegadores. Para\ntestar esta API de uma maneira simples, você poderia utilizar Node.js\n(JavaScript ao lado do servidor) e uma biblioteca que funcione em ambos os lados\n(cliente e servidor) como <a href=\"https://socket.io/\" target=\"_blank\">socket.io</a>.</p>\n<h4 id=\"desafios-2\">Desafios</h4>\n<h5 id=\"real-time-chat\">Real-time chat</h5>\n<p>Provavelmente você dirá que com Firebase já pode fazer um chat em tempo real,\ncontudo convidamos você a viver a experiência de criá-lo sem Firebase e veja\ncomo pode fazer uma aplicação em tempo real escrevendo código tanto no cliente\ncomo no servidor.</p>\n<h5 id=\"canvas--socketio\">Canvas + Socket.io</h5>\n<p>Você pode imaginar ter uma lousa compartilhada? Com canvas você pode criar uma\ntela e usando eventos de mouse para desenhar nela. Se esses desenhos forem\nenviados para um <em>socket</em> você poderia desenhá-los para todos os usuários\nconectados em tempo real (quase como um quadro mágico). Pense nisso, pode\najudá-la quando quiser ensinar ou estudar em conjunto com alguém.</p>\n<h5 id=\"hangouts-skype\">Hangouts, Skype</h5>\n<p>Se você pudesse acessar a câmera de seu notebook, exibi-la na web e transmitir a\nimagem por meio de um socket, você teria uma aplicação de vídeo-chamadas. Acha\nque ainda não pode? Como já lhe dissemos, com um par de APIs associados a Web\nSockets e com sua vontade de fazer, você consegue ;)</p>\n<p>As APIs seriam <a href=\"https://davidwalsh.name/browser-camera\" target=\"_blank\"><code>getUserMedia</code></a> (parte\nde Media API) e Canvas. E provavelmente ao pesquisar sobre o assunto, você\nacabará encontrando o <a href=\"https://webrtc.org/\" target=\"_blank\">WebRTC</a>.</p>\n<p>Calma, você terá que dedicar tempo, mas se estiver interessada, temos 100% de\ncerteza de que você consegue :).</p>\n<h4 id=\"referências-2\">Referências</h4>\n<ul>\n<li><a href=\"https://www.html5rocks.com/pt/tutorials/websockets/basics/\" target=\"_blank\">Introdução aos WebSockets: incorporação de sockets na\nWeb</a></li>\n<li><a href=\"https://code.tutsplus.com/tutorials/real-time-chat-with-nodejs-socketio-and-expressjs--net-31708\" target=\"_blank\">Real time chat with NodeJS, Socket.io and\nExpressJS</a></li>\n</ul>\n<h3 id=\"notificações\">Notificações</h3>\n<blockquote>\n<p>A API de notificações permite que uma página web envie notificações que serão\nexibidas fora da web no nível de sistema. Isso permite às aplicações web\nenviar informações para o usuário embora estas estejam em segundo plano.</p>\n</blockquote>\n<p>Fonte: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API\" target=\"_blank\">MDN - Usando a API de\nNotificações</a></p>\n<h4 id=\"desafios-3\">Desafios</h4>\n<h5 id=\"notificações-de-mensagens\">Notificações de Mensagens</h5>\n<p>Você já tem seu chat ou rede social seja com Firebase ou com sua própria\nimplementação de Web Sockets. Agora, o que acha se a cada vez que um usuário\ninterage com sua aplicação, ela envia uma notificação? Isso seria muito legal!</p>\n<h4 id=\"referências-3\">Referências</h4>\n<ul>\n<li><a href=\"https://filisantillan.com/notificaciones-web-html5/\" target=\"_blank\">Notificações Web con\nHTML5</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API\" target=\"_blank\">Usando a API de\nNotificações</a></li>\n</ul>\n<h3 id=\"vibração\">Vibração</h3>\n<blockquote>\n<p>A maioria dos dispositivos modernos podem vibrar utilizando o hardware. Isso\npermite que por meio do código de software se possa emitir essas vibrações. A\nVibration API permite às aplicações web a capacidade de acessar esse hardware\nno caso de haver suporte para tal. Caso contrário, o dispositivo não faz nada.</p>\n</blockquote>\n<p>Fonte: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API\" target=\"_blank\">MDN - Vibration\nAPI</a></p>\n<h4 id=\"desafios-4\">Desafios</h4>\n<h5 id=\"vibração-de-notificações\">Vibração de notificações</h5>\n<p>Você já tem suas notificações. Agora, o que acha de adicionar a capacidade de\nvibrar quando elas chegarem para o usuário?</p>\n<h4 id=\"referências-4\">Referências</h4>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API\" target=\"_blank\">Vibración\nAPI</a></li>\n</ul>\n<h2 id=\"conclusão\">Conclusão</h2>\n<p>Existem muitas APIs que tornam o navegador cada vez mais poderoso e isso tem\npermitido grandes avanços na web. Só podemos dizer que nunca teremos tempo de\nlhe mostrar todas, portanto você deve ser curiosa e começar a brincar com elas\nsem medo.</p>\n<p>Lembre-se que muitas delas possuem problemas de compatibilidade com dispositivos\ne navegadores específicos. Portanto, alguma falha pode estar acontecendo por\nfalha de hardware e não por causa de seu software. Por outro lado, lembre-se que\nem <a href=\"http://html5index.org/\" target=\"_blank\">The HTML 5 JavaScript API Index</a> você pode aprender\num pouco mais sobre as APIs existentes.</p>\n<p>E veja de forma interativa como a web tem evoluído em\n<a href=\"http://www.evolutionoftheweb.com/#/evolution/day\" target=\"_blank\">www.evolutionoftheweb.com</a>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59535335-1563aa00-8ec7-11e9-8cea-73aa1816e0ef.jpg\" alt=\"Evolution of the\nweb\"></p>\n",
          "order": 9,
          "durationString": "40min"
        }
      },
      "order": 1,
      "stats": {
        "duration": 875,
        "durationString": "14.6h",
        "exerciseCount": 0,
        "partCount": 10
      }
    },
    "04-xhr": {
      "title": "Xhr",
      "bonus": false,
      "description": "<p>Nesta unidade você irá aprender sobre XMLHttpRequest (XHR) que é uma API\ndisponível em linguagens de script para navegadores web como por exemplo\nJavaScript. O XHR é utilizado para enviar requisições HTTP e HTTPS para um\nservidor web.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Abertura: O que significa trazer dados de um servidor assincronamente?",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/P5JlebbqzTQ",
              "id": "P5JlebbqzTQ"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>O objeto desta unidade é praticar o ciclo <em>request/response</em> do HTTP e fazê-lo\nassincronamente por meio de JS com XHR, AJAX e comunicação com o servidor usando\numa API.</p>\n<p>Referência:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/P5JlebbqzTQ?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 0,
          "durationString": "15min"
        },
        "01-client-server": {
          "title": "Comunicação Cliente Servidor",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/nozbz6J3_4w",
              "id": "nozbz6J3_4w"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender o fluxo de <em>request</em> e <em>response</em> e o que significa assíncrono.</li>\n</ul>\n<h2 id=\"requisição-e-resposta\">Requisição e Resposta</h2>\n<p>Para entender isso, primeiro precisamos lembrar que existe um protocolo de\ncomunicação que deixa claro de que maneira um cliente (navegador) solicita\ninformações/dados de um servidor. Levando em conta isso vamos revisar com a\nimagem a seguir:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59535679-eef23e80-8ec7-11e9-8878-ccc13659946c.jpg\" alt=\"Comunicação\"></p>\n<p>Na imagem podemos ver como um cliente (emissor) faz uma solicitação HTTP (<strong>HTTP\nRequest</strong>) para um servidor (receptor) e este último responde ao pedido (<strong>HTTP\nResponse</strong>).</p>\n<p>Esses <em>request</em> e <em>response</em> são transportados pela internet como intermediário.</p>\n<p>Quando fazemos isso normalmente o fazemos de forma <strong>síncrona</strong>, ou seja,\nnecessitamos que cada solicitação tenha sua resposta antes de enviar outra\npetição.</p>\n<blockquote>\n<p>Quando o navegador faz uma petição de forma síncrona ele precisa esperar a\nresposta antes de continuar com o carregamento de uma página.</p>\n</blockquote>\n<p>Mas isso em algum momento já não vai ser tão eficiente ou funcional, de maneira\nque podemos fazê-lo de forma <strong>assíncrona</strong> utilizando <strong>AJAX</strong>, podendo fazer\nmais de uma \"tarefa\" por vez.</p>\n<blockquote>\n<p>Quando o navegador faz petições de forma assíncrona, elas podem ocorrer por\ntrás sem bloquear o carregamento de uma página.</p>\n</blockquote>\n<p>No vídeo a seguir os amigos geniais da UDACITY explicam de maneira visual o\nconteúdo anterior. Está em inglês mas já sabemos que isso não é impedimento para\nque entendamos o conceito :muscle:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/nozbz6J3_4w?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-ajax": {
          "title": "AJAX",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=DAVOAzTX21U8",
              "id": "DAVOAzTX21U8"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender o que significa AJAX</li>\n</ul>\n<h2 id=\"um-pouco-de-história\">Um pouco de história</h2>\n<blockquote>\n<p>JavaScript Assíncrono e XML (AJAX) não são uma tecnologia por si mesmas, mas\num termo que descreve um novo modo de utilizar conjuntamente várias\ntecnologias existentes. Isso inclui: HTML ou XHTML, CSS, JavaScript, DOM, XML,\nXSLT e o objeto XMLHttpRequest. Quando essas tecnologias se combinam em um\nmodelo AJAX, é possível fazer aplicações web capazes de atualização contínua\nsem precisar recarregar a página completamente. Isso cria aplicações mais\nrápidas e com melhor resposta às ações do usuário.</p>\n</blockquote>\n<p>Parta do MDN WEB DOCS</p>\n<blockquote>\n<p>Na aplicação web tradicional, o computador cliente realiza uma solicitação de\numa página web. O servidor cria e retorna a página para o cliente. Finalmente,\no cliente carrega a nova página e mostra a informação. Há interação com as\npáginas, digamos para adicionar ou eliminar algo ou enviar um formulário e de\nnovo começa o ciclo. O cliente fará outra solicitação, o servidor retorna uma\npágina totalmente nova, o cliente carrega e a apresenta ao usuário.</p>\n</blockquote>\n<p><em>Até meados da década de 2000, esta era basicamente a única maneira de se\nproduzir comunicação pela Internet. A informação residiria no servidor, um\ncliente solicitaria esses dados, atualizaria a página e a mostraria. Esse ciclo\nse repetiria para toda nova solicitação.</em></p>\n<p>No final dos anos 1990, a equipe do Microsoft Outlook adicionou o componente\nXMLHTTP ao Internet Explorer e compilou uma versão web do cliente de e-mail do\nOutlook. Esse código foi agregado a outros navegadores como <strong>XMLHttpRequest</strong>.\nIsso permitiu aos navegadores realizar solicitações HTTP a partir do JavaScript\ne atualizar a página sem buscá-la no servidor. No lugar do modelo síncrono de\nespera para uma página completa, a interface do usuário poderia ser atualizada\nde forma assíncrona a medida que o usuário seguisse trabalhando.</p>\n<h2 id=\"ajax\">AJAX</h2>\n<p>Em 2005, Jesse James Garrett cunhou o termo AJAX como significado de \"JavaScript\ne XML assíncronos\". Essa é essencialmente a técnica de utilizar XMLHttpRequest\npara recuperar dados e em seguida modificar a página atual.</p>\n<p>AJAX tomou de assalto o mundo da web, indo muito mais além do Microsoft Outlook.\nAs aplicações web de vanguarda como Flickr, GMail e Google Maps adotaram AJAX\nrapidamente. No lugar de ter que esperar para obter dados e atualizar a página\ncompleta, essas novas aplicações quase instantâneas eram incríveis.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/DAVOAzTX21U8?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Na leitura e vídeo anteriores são mencionados JSON e XML. Vejamos este\n<a href=\"https://medium.com/laboratoria-how-to/como-enviar-y-recibir-informaci%C3%B3n-en-internet-json-y-xml-456d5109e885\" target=\"_blank\">link</a>\nem espanhol para ler a respeito.</p>\n<p>E por último terminamos com esta\n<a href=\"https://medium.com/laboratoria-how-to/entendiendo-como-funciona-el-internet-parte-ajax-c993f9802e72\" target=\"_blank\">leitura</a>\nem espanhol que resume e explica com outras palavras o que é AJAX.</p>\n",
          "order": 2,
          "durationString": "1h"
        },
        "03-apis": {
          "title": "APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender o que é uma API focada no ambiente de AJAX e onde podemos\nencontrá-las.</li>\n</ul>\n<h2 id=\"obter-dados\">Obter dados</h2>\n<p>Analisamos os conceitos de Ajax, que é a tecnologia que utilizaremos para\nadicionar dados a nosso projeto de forma assíncrona. Mas de onde vêm esses\ndados? Como podemos acessá-los? Como nossa aplicação saberá como deve recuperar\nesses dados?</p>\n<p>Usaremos uma API para interagir com várias fontes de dados.</p>\n<h2 id=\"o-que-é-uma-api\">O que é uma API?</h2>\n<p>Anteriormente já havíamos lido o que é uma <strong>API</strong> (Application Programming\nInterface = Interface de Programação de Aplicações)</p>\n<p>Uma API é uma \"chave de acesso\" a funções que podemos utilizar de um serviço web\nfornecido por terceiros, dentro de nossa própria aplicação web, de maneira\nsegura e confiável.</p>\n<blockquote>\n<p><strong>Há dados por aí que só esperam para serem utilizados.</strong></p>\n</blockquote>\n<p>Exemplos de API:</p>\n<ol>\n<li><strong>Google Maps</strong> através da sua API conseguimos pegar dados sobre os mapas,\ncriar rotas, buscar locais, e tudo isso dentro da nossa aplicação.</li>\n<li>Com a API <strong>Twitter</strong> você pode desenvolver muitas ferramentas, pois eles\npossuem muitos serviços postar tweet, analisar as tendências e muitos\noutros.</li>\n<li><strong>Facebook Connect</strong> com está API você pode registar os usuários do facebook\nno seu site ou em outros.</li>\n<li>A API do <strong>Paypal</strong> te permite fazer operações de pagamento através da web.</li>\n</ol>\n<p><a href=\"https://developers.google.com/apis-explorer/#p/\" target=\"_blank\">Google</a> conta com uma\nquantidade enorme de APIs. Podemos fazer uso de algumas delas ou buscar outros\nsítios que oferecem ou usam APIs.</p>\n",
          "order": 3,
          "durationString": "30min"
        },
        "04-xhr": {
          "title": "XHR",
          "type": "read",
          "format": "self-paced",
          "duration": 90,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=nz9S3uZE_dM",
              "id": "nz9S3uZE_dM"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/ravLi7zZA7Q",
              "id": "ravLi7zZA7Q"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender o que é XHR</li>\n</ul>\n<h2 id=\"analogia\">Analogia</h2>\n<p>Uma boa maneira de entender XHR é usando a seguinte analogia:</p>\n<blockquote>\n<p><strong>Preparar uma torta!</strong> Para prepará-la, precisamos de farinha, ovo, leite,\nmanteiga e um forno. Acendemos o forno. Em seguida podemos misturar os 4\ningredientes e já pronta a massa a colocamos no forno. Aqui demora um pouco\naté que asse, mas enquanto isso podemos ir fazendo o recheio.</p>\n</blockquote>\n<p>Um objeto XHR é fornecido pelo ambiente de JavaScript e é utilizado para fazer\nrequisições AJAX. É muito parecido com a parte da preparação da massa em que\nprimeiro devemos \"preparar\" as configurações e em seguida enviar nossa\nrequisição. Uma vez isto feito, nosso código pode seguir adiante e fazer outras\nrequisições ou tarefas.</p>\n<blockquote>\n<p>Quando o forno nos devolve a torta assada, podemos continuar a decorá-la.</p>\n</blockquote>\n<p>Uma vez que nossa requisição tem uma resposta, o programa pode seguir em frente\ncom o que programamos para esta \"tarefa\".</p>\n<h2 id=\"xmlhttprequest\">XMLHttpRequest</h2>\n<p>O ambiente de JavaScript proporciona uma forma de realizar requisições HTTP\nassíncronas. Isso é feito com um objeto <code>XMLHttpRequest</code>. Podemos usar este\nobjeto com a função do construtor <code>XMLHttpRequest</code>.</p>\n<p>XMLHttpRequests (comummente abreviado como XHR ou xhr) podem ser utilizados para\nrequisitar qualquer tipo de arquivo (por exemplo, arquivos de texto puro, HTML,\nJSON, de imagem, etc.) ou dados de uma API.</p>\n<p>Agora aprofundaremos o estudo no objeto XMLHttpRequest. Veremos como criá-lo,\nquais métodos e propriedades devem ser usadas e como enviar requisições\nassíncronas.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/nz9S3uZE_dM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"o-objeto-xhr-e-seu-método-open\">O objeto XHR e seu método <code>.open()</code></h3>\n<p>Construímos um objeto XHR chamado <em>asyncRequestObject</em>.</p>\n<pre><code class=\"language-javascript\">const asyncRequestObject = new XMLHttpRequest();\n</code></pre>\n<p>Podemos acessar seus métodos. Um dos mais importantes é o método <code>.open()</code></p>\n<p><code>asyncRequestObject.open();</code></p>\n<p><code>.open()</code> recebe uma série de parâmetros, mas os mais importantes são os dois\nprimeiros: o método HTTP e a URL para enviar a requisição.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59536886-5493fa00-8ecb-11e9-9fb2-dbf4237c6ae4.png\" alt=\"sintax-open\"></p>\n<p>Se queremos requisitar de maneira assíncrona a página inicial do popular sítio\nde imagens de alta resolução, Unsplash, usaremos uma requisição <code>GET</code> e\nforneceremos a URL:</p>\n<pre><code class=\"language-javascript\">asyncRequestObject.open('GET', 'https://unsplash.com');\n</code></pre>\n<blockquote>\n<p>Os métodos HTTP que mais usaremos por enquanto são: GET - para recuperar\ndados. POST - para enviar dados.</p>\n</blockquote>\n<h2 id=\"o-objeto-xhr-e-seu-método-send\">O objeto XHR e seu método <code>.send()</code></h2>\n<p>Para enviar a requisição, precisamos usar o método de envio:</p>\n<pre><code class=\"language-javascript\">asyncRequestObject.send();\n</code></pre>\n<p>Já sabemos que não há melhor maneira de aprender do que fazendo. Para ver como\nfunciona, vá ao <a href=\"https://unsplash.com\" target=\"_blank\">Unsplash</a>, abra suas <em>developer tools</em> e\nadicione no console o objeto e seus métodos <code>open</code> e <code>send</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/59536911-72615f00-8ecb-11e9-8e8a-5add6b412c9e.gif\" alt=\"XHR send\nmethod\"></p>\n<p>No vídeo a seguir podemos ver o que acontece:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ravLi7zZA7Q?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"resposta-de-sucesso\">Resposta de sucesso</h2>\n<p>Uma vez que a petição foi enviada, devemos estabelecer a propriedade <code>onload</code> no\nobjeto a uma função que manejará a resposta bem sucedida da nossa requisição\nXHR: XHR:</p>\n<pre><code class=\"language-javascript\">function handleSuccess () {\n    // na função, `this` é o valor do objeto XHR\n&nbsp;&nbsp;&nbsp;&nbsp;// this.responseText contém a resposta do servidor\n\n    console.log( this.responseText ); // o HTML de https://unsplash.com/\n}\n\nasyncRequestObject.onload = handleSuccess;\n</code></pre>\n<p>Com isso percebemos que se <code>onload</code> não estiver configurado, a solicitação\nretorna mas não faz nada.</p>\n<h2 id=\"manipulação-de-erros\">Manipulação de erros</h2>\n<p>Agora vejamos o que passa se algo acontece com a requisição e não acontece com\nsucesso. Nesse caso, precisamos usar a propriedade <code>onerror</code>:</p>\n<pre><code class=\"language-javascript\">function handleError () {\n    console.log( 'Um erro aconteceu 😞' );\n}\n\nasyncRequestObject.onerror = handleError;\n</code></pre>\n<p>Assim como com <code>onload</code>, se <code>onerror</code> não estiver configurado e um erro\nacontece, esse erro simplesmente ficará em <em>silêncio</em> e seu código (e seu\nusuário!) não saberá o que deu de errado e nem como refazer a operação.</p>\n<h2 id=\"juntando-tudo\">Juntando tudo</h2>\n<p>Aqui está o código completo que desenvolvemos:</p>\n<p>Criamos o objeto XHR, dissemos qual informação requisitar, configuramos os\nmanipuladores para sucesso ou erro e por fim enviamos a requisição:</p>\n<pre><code class=\"language-javascript\">function handleSuccess () {\n  console.log( this.responseText );\n\n}\n\nfunction handleError () {\n  console.log( 'Um erro aconteceu 😞' );\n}\n\nconst asyncRequestObject = new XMLHttpRequest();\nasyncRequestObject.open('GET', 'https://unsplash.com');\nasyncRequestObject.onload = handleSuccess;\nasyncRequestObject.onerror = handleError;\nasyncRequestObject.send();\n</code></pre>\n<h2 id=\"apis-e-json\">APIs e JSON</h2>\n<p>Obter o HTML de um sítio web é fácil, mas provavelmente não é muito útil. Os\ndados que retornam estão em um formato que é extremamente difícil de analisar e\nconsumir.</p>\n<p>Seria muito mais fácil (e útil) se pudéssemos obter somente os dados que\nqueremos em uma estrutura de dados melhor ordenada. Aqui entra <strong>JSON</strong>.</p>\n<p>Ao realizar uma requisição de uma API que retorna um JSON, tudo o que precisamos\nfazer é converter esse retorno JSON em um objeto JavaScript. Podemos fazer isso\ncom <code>JSON.parse();</code>. Modifiquemos a função de carregamento para manipular uma\nresposta JSON:</p>\n<pre><code class=\"language-javascript\">function handleSuccess () {\n  const data = JSON.parse( this.responseText );\n  console.log( data );\n}\n\nasyncRequestObject.onload = handleSuccess;\n</code></pre>\n<p>Para obter mais informação sobre o uso do objeto XHR para realizar requisições\nassíncronas, você pode consultar estes links:</p>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/XMLHttpRequest/open\" target=\"_blank\">MDN's\ndocs</a></p>\n</li>\n<li><p><a href=\"https://xhr.spec.whatwg.org/\" target=\"_blank\">WHATWG Spec</a></p>\n</li>\n<li><p><a href=\"https://www.w3.org/TR/XMLHttpRequest/\" target=\"_blank\">W3C Spec</a></p>\n</li>\n</ul>\n",
          "order": 4,
          "durationString": "1.5h"
        },
        "05-xhr-demo": {
          "title": "Projeto Demo XHR",
          "type": "read",
          "format": "self-paced",
          "duration": 120,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Usar XHR para construir uma aplicação.</li>\n</ul>\n<h2 id=\"por-onde-começamos\">Por onde começamos?</h2>\n<p>Primeiro e mais importante é saber o que queremos obter.</p>\n<p>Para este exercício guiado queremos fazer uma requisição na página do NY Times e\nmostrar suas notícias.</p>\n<h3 id=\"mãos-no-teclado\">Mãos no teclado</h3>\n<ol>\n<li><p>Crie uma conta de desenvolvedor <a href=\"https://developer.nytimes.com/\" target=\"_blank\">aqui</a> Será\nenviada uma chave de acesso que usaremos nas requisições.</p>\n</li>\n<li><p>Crie um projeto com seus arquivos HTML, CSS e JS (Nosso HTML tem uma\nestrutura simples, mas você pode dar-lhe o estilo que preferir).</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572825-5c3288ce-733f-11e8-86aa-c04d17ad2ad2.png\" alt=\"index-inicial\"></p>\n<p>Assim é como você vê no navegador:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572837-71a99922-733f-11e8-93a9-0819ca2998a8.png\" alt=\"pantalla-inicial\"></p>\n</li>\n<li><p>Em nosso arquivo app.js colocamos os elementos que usaremos e criamos um let\nsem atribuí-lo por enquanto.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572849-8319f602-733f-11e8-81a5-e5d66a65e26e.png\" alt=\"traemos-elementos\"></p>\n</li>\n<li><p>No nosso formulário adicionamos o evento <code>submit</code> e as instruções a serem\nexecutadas.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572863-9229576e-733f-11e8-9d8b-66d0f8ace7bc.png\" alt=\"form-addevent\"></p>\n</li>\n<li><p>Como você já percebeu, está invocando a função <code>getNews()</code> e é nesta função\nque criaremos as requisições.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572879-a16ae3c8-733f-11e8-85f6-b9a44caba985.png\" alt=\"getnews\"></p>\n<ul>\n<li><p>Criamos nosso objeto <em>(linha 14)</em>.</p>\n</li>\n<li><p>Usamos o método <code>.open()</code> e aqui é onde devemos colocar a chave que chegou\nno nosso e-mail, *<em>substituindo</em> &lt; SUA CHAVE&gt; por sua chave <em>(linha 15)</em>.</p>\n</li>\n<li><p>As propriedades <code>.onload</code> e <code>.onerror</code> têm suas funções correspondentes\natribuídas.</p>\n</li>\n<li><p>Enviamos a requisição com o método <code>.send()</code>.</p>\n</li>\n</ul>\n</li>\n<li><p>A função <code>handleError()</code> ficará assim:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572899-b6f9e98c-733f-11e8-9879-27588c37898c.png\" alt=\"handle-error\"></p>\n</li>\n<li><p>Comecemos a trabalhar com a função <code>addNews()</code>.</p>\n<ul>\n<li><p>Primeiro podemos fazer um console.log de <code>this.responseText</code> para saber o\nque será retornado nesta resposta (um JSON).</p>\n</li>\n<li><p>Após vermos que tipo de informação nos retornou, podemos proceder\narmazenando-o em uma constante e e fazer novamente um console.log para\nentender melhor a estrutura de dados.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572917-cd4a8fde-733f-11e8-8461-d26417c1b42c.png\" alt=\"add-news1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572941-e442637e-733f-11e8-9c98-3df461487aa0.png\" alt=\"consola-data\"></p>\n</li>\n</ul>\n</li>\n<li><p>Observando em detalhe o que é retornado no console vemos que esse objeto\npossui a propriedade <code>response</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572958-f386d82e-733f-11e8-9c68-9c52e0dc439d.png\" alt=\"add-news2\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572975-0245f002-7340-11e8-9407-530a13f0ce2e.png\" alt=\"consola-data2\"></p>\n</li>\n<li><p>A partir deste ponto já podemos brincar e investigar este JSON que temos no\nconsole e portanto podemos fazer uso de suas propriedades.</p>\n</li>\n<li><p>Criamos um <code>li</code>,  adicionamos uma classe que tenha estilos, adicionamos o\ntexto que obtivemos do JSON e o anexamos no <code>ul</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572984-10d3e732-7340-11e8-8928-756abfb74a18.png\" alt=\"add-news3\"></p>\n</li>\n<li><p>Após fazer tudo isso, o navegador deveria aparecer assim:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572997-20eef22e-7340-11e8-830b-8636312f1ad4.png\" alt=\"pantalla-final\"></p>\n</li>\n</ol>\n<blockquote>\n<p>Lembre que neste exemplo nosso <em>html</em> e o <em>li</em> que criamos possuem estilos.\nAssim, não se preocupe se estiverem diferentes. O importante é que mostre na\ntela o elemento com os valores.</p>\n</blockquote>\n",
          "order": 5,
          "durationString": "2h"
        },
        "06-xhr-quiz": {
          "questions": [
            {
              "title": "1) Para que usamos o método GET?",
              "description": "",
              "answers": [
                "Para confirmar que é possível estabelecer comunicação com o servidor.",
                "Para recuperar dados.",
                "Para manipulação de erros.",
                "Para enviar dados."
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) Para que usamos o método POST?",
              "description": "",
              "answers": [
                "Para confirmar que é possível estabelecer comunicação com o servidor.",
                "Para recuperar dados.",
                "Para a manipulação de erros.",
                "Para enviar dados."
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "3) XHR é a abreviação de",
              "description": "",
              "answers": [
                "XMLHttpRequest.",
                "Asynchronous JavaScript And XML.",
                "AJAX.",
                "Response Hipertext Xml."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Vá ao Google, abra suas developer tools e execute o seguinte no console",
              "description": "<pre><code class=\"language-javascript\">const req = new XMLHttpRequest();\nreq.open('GET', 'https://www.google.com/');\n</code></pre><p>O que acontece?</p>",
              "answers": [
                "A página de início do Google se abre no navegador.",
                "Uma requisição assíncrona é enviada a <code>https://www.google.com</code>",
                "Nada acontece.",
                "Acontece um erro."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "5) O método .open() de um objeto XHR pode ter vários argumentos. Mas os mais importantes são",
              "description": "",
              "answers": [
                "<code>.open ()</code> não tem argumentos.",
                "Nome da função e parâmetro.",
                "método HTTP e URL.",
                "URL e JSON."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) Qual propriedade devemos estabelecer para a manipulação de uma resposta com sucesso?",
              "description": "",
              "answers": [
                "asyncRequestObject.onsucces.",
                "asyncRequestObject.onload.",
                "asyncRequestObject.handleSuccess.",
                "asyncRequestObject.oncorrect."
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "7) Qual a propriedade devemos estabelecer para a manipulação de erros?",
              "description": "",
              "answers": [
                "asyncRequestObject.handleError.",
                "asyncRequestObject.onincorrect.",
                "asyncRequestObject.onerror.",
                "asyncRequestObject.errorReponse."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) Quando nossa resposta é um JSON, devemos convertê-la para um objeto JavaScript e isso é feito com",
              "description": "",
              "answers": [
                "JSON.parse();",
                "Object.json();",
                "JSON.object();",
                "parser.JSON();"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 6,
          "durationString": "30min"
        },
        "07-xhr-challenges": {
          "title": "Brincando com XHR",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Praticar tudo que foi aprendido fazendo uso de XHR.</li>\n<li>Praticar, praticar e praticar.</li>\n</ul>\n<h2 id=\"exercícios\">Exercícios</h2>\n<p>Você deve subir todos os seus exercícios para o <code>GitHub</code> e publicá-los nas\n<code>gh-pages</code>.</p>\n<h3 id=\"algo-mais-que-só-uma-notícia\">Algo mais que só uma notícia</h3>\n<p>No exercício de demonstração, trabalhamos fazendo requisições ao NY Times, mas\nnosso exercício só mostra uma única notícia das muitas que nos manda como\nresposta.</p>\n<p>Neste caso, o desafio é que consiga que sejam visualizadas pelo menos 5 dessas\nnotícias.</p>\n<ul>\n<li>Você precisa fazer mais requisições?</li>\n<li>E se quisermos adicionar imagens?</li>\n<li>Pode nos direcionar a cada nota de maneira individual?</li>\n<li>E se agora nossa requisição for para outro jornal?</li>\n<li>É possível ter diferentes requisições para diferentes sítios?</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/AnaSalazar/curricula-js/02c7691cd5325626c91a99f410fc8dddbc24b0fc/06-spa/02-asynchronous-js-request/07-xhr-challenges/muestra.png\" alt=\"mostra\"></p>\n",
          "order": 7,
          "durationString": "2h"
        },
        "08-xhr-recap": {
          "title": "Revisão XHR",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Revisar o que foi aprendido sobre XHR.</li>\n</ul>\n<h2 id=\"como-usamos-xhr\">Como usamos XHR</h2>\n<p>Há uma série de passos que devemos seguir para enviar uma requisição HTTP de\nforma assíncrona com JavaScript.</p>\n<h3 id=\"para-enviar-una-requisição\">Para enviar una requisição</h3>\n<ul>\n<li><p>Criamos um objeto XHR com a função do construtor XMLHttpRequest.</p>\n</li>\n<li><p>Utilizamos o método <code>.open()</code> e configuramos o método HTTP e a UTL do recurso\nque vamos buscar.</p>\n</li>\n<li><p>Estabelecemos a propriedade <code>.onload</code> ao nosso objeto e a ela atribuímos uma\nfunção que será executada se houver sucesso na pesquisa.</p>\n</li>\n<li><p>Estabelecer a propriedade <code>.onerror</code> a nosso objeto e a esta atribuímos uma\nfunção que será executada se ocorrer um erro.</p>\n</li>\n<li><p>Usamos o método <code>.send()</code> para que envie a requisição.</p>\n</li>\n</ul>\n<h3 id=\"para-usar-a-resposta\">Para usar a resposta</h3>\n<ul>\n<li><p>Usamos a propriedade <code>.responseText</code>, que contém o texto da resposta da\nrequisição assíncrona.</p>\n</li>\n<li><p>Podemos usá-la como nos é retornada ou no caso de ser retornada como um JSON\npodemos convertê-la em Objeto JavaScript com <code>JSON.parse()</code></p>\n</li>\n</ul>\n<h2 id=\"o-que-vem-agora\">O que vem agora?</h2>\n<p>Provavelmente você está se perguntando se realmente é necessário escrever todos\nesses passos para conseguir nossas solicitações assíncronas. A resposta é\n<strong>sim</strong> mas não é necessário escrever todas essas linhas de código. Se fizermos\nuso de alguma biblioteca, como jQuery, ela pode fazer a requisição por nós. Já\nsabemos que, quando utilizamos uma biblioteca, usamos menos código e podemos ser\num pouco mais eficientes.</p>\n",
          "order": 8,
          "durationString": "30min"
        },
        "09-jq-ajax": {
          "title": "AJAX com jQuery",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/NFGrayBZOVM",
              "id": "NFGrayBZOVM"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Usar jQuery para fazer requisições assíncronas e entender quais vantagens ele\nnos fornece.</li>\n</ul>\n<h2 id=\"analogia\">Analogia</h2>\n<p>Deixe um profissional preparar a torta para você.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/NFGrayBZOVM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"por-que-jquery\">Por que jQuery?</h2>\n<p>jQuery é uma biblioteca muito popular que você já teve a oportunidade de usar. O\nuso que lhe demos até o momento foi para manipular o DOM por meio de métodos que\nfazem nosso código mais simples.</p>\n<p>Agora, usaremos esta vantagem de utilizar métodos menores e deixar para o jQuery\na responsabilidade de checar a compatibilidade dos navegadores na implementação\ndo AJAX.</p>\n<p>Isso é possível graças ao método <code>.ajax()</code> que jQuery fornece para realizar\nrequisições assíncronas.</p>\n<h2 id=\"método-ajax\">Método <code>.ajax()</code></h2>\n<p>O método<code>.ajax()</code> é o coração das requisições assíncronas na biblioteca de\njQuery. Há duas formas de utilizar esse método:</p>\n<pre><code class=\"language-javascript\">$.ajax(&lt;url-a-realizar-a-requisicao&gt;, &lt;um-objeto-de-configuracao&gt;);\n\n// or\n\n$.ajax(&lt;só um objeto de configuração&gt;);\n</code></pre>\n<p>Fonte: <a href=\"https://api.jquery.com/jQuery.ajax/\" target=\"_blank\">Documentação de jQuery</a></p>\n<p>A maneira mais comum de usar o método<code>.ajax()</code> é usando somente o objeto de\nconfiguração, em parte devido a esta ser a forma mais antiga que está disponível\n(versão 1.0). Além disso, toda a configuração pode estar somente em um objeto.</p>\n<h3 id=\"o-que-é-um-objeto-de-configuração\">O que é um objeto de configuração?</h3>\n<blockquote>\n<p>É um objeto de JavaScript que utilizamos para configurar algo.</p>\n<p>Por exemplo:</p>\n<pre><code class=\"language-javascript\">const settings = {\n  name: 'this is my name',\n  colors: ['orange', 'blue'],\n  layers: 2,\n  isRound: true,\n};\n</code></pre>\n<p>O objeto de configuração pode ser passado como parâmetro de uma função\nconstrutora. Imaginemos a função construtora <code>MakeCake</code>:</p>\n<pre><code class=\"language-javascript\">const myDeliciousCake = MakeCake(settings);\n</code></pre>\n<p>Da mesma forma, o objeto de configuração pode ser passado diretamente:</p>\n<pre><code class=\"language-javascript\">const myDeliciousCake = MakeCake({\n  name: 'this is my name',\n  colors: ['orange', 'blue'],\n  layers: 2,\n  isRound: true,\n});\n</code></pre>\n</blockquote>\n<h2 id=\"fazendo-uma-chamada-ajax\">Fazendo uma chamada AJAX</h2>\n<p>O método <code>.ajax()</code> de jQuery tem que ser incrivelmente versátil e poderoso se é\no que dá vida às requisições assíncronas. Uma requisição AJAX simples seria\nassim:</p>\n<pre><code class=\"language-javascript\">$.ajax({\n    url: `https://api.github.com/users/${searchedUser}`\n});\n</code></pre>\n<p>Vamos testá-lo:</p>\n<ol>\n<li>Vá para o sítio web de <a href=\"http://jquery.com/\" target=\"_blank\">jQuery</a>.</li>\n<li>Abra as <code>Developer Tools</code> do seu navegador.</li>\n<li>Garanta que está na aba <code>Network</code> e que o botão gravação está ligado.</li>\n<li>Adicione o script anterior na console e execute-o.</li>\n</ol>\n<p><img src=\"https://media.giphy.com/media/l1KcRuWi059tT6VYQ/giphy.gif\" alt=\"jQuery - ajax\"></p>\n<p>Esta <code>request</code> (requisição) está sendo realizada para um recurso no GitHub\n(informação do usuário). A requisição pode ser acompanhada no painel de redes\n(aba <code>Network</code>no Dev Tools).</p>\n<p>Já sabemos como realizar uma requisição com <code>.ajax()</code> mas ainda não estamos\ncontrolando a resposta.</p>\n<h2 id=\"manipular-os-dados-retornados\">Manipular os dados retornados</h2>\n<p>Recordando como podemos fazer isso usando um objeto XHR, a <code>response</code> era\ncontrolada por uma função. Para o método <code>.ajax()</code> é exatamente o mesmo. Podemos\nencadear a execução dele com o método <code>.done()</code>. Passaremos uma função como\nargumento do método <code>.done()</code> que será executada quando a chamada AJAX estiver\nterminada:</p>\n<pre><code class=\"language-javascript\">function handleResponse(data) {\n    console.log('the ajax request has finished!');\n    console.log(data);\n}\n\n$.ajax({\n    url: `https://api.github.com/users/${searchedUser}`\n}).done(handleResponse);\n</code></pre>\n<p><img src=\"https://media.giphy.com/media/xUOwGiAxN7tYlwAZyg/giphy.gif\" alt=\"done method\"></p>\n<p>A chamada assíncrona é realizada e controlada pelo método <code>.done()</code> assim que é\nfinalizada. Neste caso, exibe a resposta no console.</p>\n<p>Para testarmos isso, vamos converter essa requisição assíncrona que usa <code>XHR</code> em\numa chamada com o método <code>.ajax()</code> de jQuery. Isso é que temos agora:</p>\n<pre><code class=\"language-javascript\">const githubRequest = new XMLHttpRequest();\ngithubRequest.onload = addUser;\ngithubRequest.open('GET', `https://api.github.com/users/${searchedUser}`);\ngithubRequest.send();\n</code></pre>\n<p>Muitas destas operações podem ser manipuladas internamente por jQuery. O\nprimeiro passo da conversão seria assim:</p>\n<pre><code class=\"language-javascript\">$.ajax({\n    url: `https://api.github.com/users/${searchedUser}`\n}).done(addUser);\n</code></pre>\n<p>Usando jQuery para requisições assíncronas:</p>\n<ul>\n<li>Não temos a necessidade de criar um objeto XHR.</li>\n<li>Ao invés de especificar que a <em>request</em> é do método <code>GET</code>, jQuery o faz por\npadrão e só temos que indicar a URL do recurso que está sendo solicitado.</li>\n<li>Ao invés de configurar o evento <code>.onload</code>, usamos o método <code>.done()</code></li>\n</ul>\n<p>A requisição deve ser processada corretamente agora. Bom trabalho! Mas agora\ntemos problemas com a <code>response</code> e como gerenciá-la.</p>\n<h2 id=\"limpando-o-callback-de-success\">Limpando o <em>callback</em> de <em>success</em></h2>\n<p>Já obtivemos nossa resposta no console. Agora veremos como a adicionamos em\nnossa página por meio de jQuery. Primeiro vejamos como o faríamos usando o\nobjeto XHR:</p>\n<pre><code class=\"language-javascript\">function addUser() {\n    const user = JSON.parse(this.responseText);\n    const firstImage = data.results[0];\n\n    userContainer.insertAdjacentHTML('afterbegin', `&lt;div class=\"card col-md-6 offset-md-3 col-xs-12\"&gt;\n        &lt;img class=\"card-img-top\" src=\"${user.avatar_url}\" alt=\"Card image cap\"&gt;\n        &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;${user.name || ''}&lt;/h5&gt;\n        &lt;h6&gt;@${user.login}&lt;/h6&gt;\n        &lt;p class=\"card-text\"&gt;${user.bio || ''}&lt;/p&gt;\n        &lt;a href=\"${user.html_url}\" class=\"btn btn-primary\"&gt;Stalkear coder&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;`);\n}\n</code></pre>\n<blockquote>\n<p><strong>Nota:</strong> Nesta exemplo, o HTML que estamos adicionando é um <em>card</em> de\nBootstrap 4. Para a finalidade deste exemplo, você pode usar outra estrutura e\nprojeto.</p>\n</blockquote>\n<p>Se usamos jQuery, poderíamos mudá-lo da seguinte maneira:</p>\n<pre><code class=\"language-javascript\">function addUser(user) {\n    $userContainer.html(`&lt;div class=\"card col-md-6 offset-md-3 col-xs-12\"&gt;\n        &lt;img class=\"card-img-top\" src=\"${user.avatar_url}\" alt=\"Card image cap\"&gt;\n        &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;${user.name || ''}&lt;/h5&gt;\n        &lt;h6&gt;@${user.login}&lt;/h6&gt;\n        &lt;p class=\"card-text\"&gt;${user.bio || ''}&lt;/p&gt;\n        &lt;a href=\"${user.html_url}\" class=\"btn btn-primary\"&gt;Stalkear coder&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;`);\n}\n</code></pre>\n<h3 id=\"o-que-mudou\">O que mudou?</h3>\n<ul>\n<li>A função agora tem um parâmetro (o usuário).</li>\n<li>O parâmetro já foi convertido de JSON para um objeto JavaScript. Assim, não\nprecisamos usar <code>JSON.parse()</code>.</li>\n<li>Aproveitamos os métodos de jQuery para manipular o DOM.</li>\n</ul>\n<p>O código que adiciona o HTML (template) no contêiner não mudou :).</p>\n<h2 id=\"e-se-ocorre-um-erro-como-proceder\">E se ocorre um erro, como proceder?</h2>\n<p>Acesse a documentação de jQuery e revise qual método (assim como <code>.done()</code>) você\nencadearia na requisição AJAX para controlar um possível erro. Uma vez\nencontrado, você pode testá-lo forçando um erro dentro da URL por exemplo.</p>\n<h2 id=\"código-fonte-do-demo\">Código fonte do demo</h2>\n<p>O código visto nesta leitura pode ser encontrado aqui:</p>\n<iframe height=\"400\" scrolling=\"no\" title=\"AJAX con jQuery\" src=\"//codepen.io/ivandevp/embed/vdxNMd/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\"> See the Pen [AJAX con jQuery](https://codepen.io/ivandevp/pen/vdxNMd/)\n  by Ivan ([@ivandevp](https://codepen.io/ivandevp)) on\n  [CodePen](https://codepen.io).\n</iframe>\n",
          "order": 9,
          "durationString": "30min"
        },
        "10-fetch": {
          "title": "AJAX com fetch",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de aprendizagem</h2>\n<ul>\n<li>Aprender como fazer chamas assíncronas com JavaScript moderno</li>\n<li>Revisão de fetch e suas funcionalidades</li>\n<li>Usar promessas para encadear várias chamadas http, ou fazer em paralelo</li>\n</ul>\n<h2 id=\"alternativa-ao-xhr-e-jquery-com-javascript-puro\">Alternativa ao XHR e JQuery com JavaScript puro</h2>\n<p>Quando usamos o XHR, vemos que se torna tedioso fazer requisições. Temos que\ncolocar um monte de código para que tudo funcione e também temos a obrigação de\nusar callbacks, o que rapidamente pode resultar em um código espaguete.</p>\n<p>O que acontece se quisermos fazer várias solicitações ao mesmo tempo?</p>\n<p>O que acontece se precisarmos dos dados de uma chamada em uma outra chamada?</p>\n<p>Para a nossa sorte o <code>fetch</code> está aqui, e já foi implementado pela maioria\n(exceto <em>Internet Explorer</em>). Com ele você pode utilizar <em>promises</em> para\nretornar os resultados, só de não depender de <em>callbacks</em> já é um benefício.\nUsar promessas também nos permite aninhar e exercutar elas em paralelo, deixando\no nosso código muito mais ordenado. Agora, vamos ver como usar.</p>\n<h2 id=\"uso-básico-de-fetch\">Uso básico de fetch</h2>\n<pre><code class=\"language-js\">fetch(url).then((response) =&gt; {\n  if (response.status !== 200) {\n    // O status de 200 é uma resposta de que deu tudo certo no servidor\n  } else {\n    // Caso respodam com algum erro\n  }\n}).catch((error) =&gt; {\n  /*\n   * Código em caso de erro na chamada.\n   * Como por exemplo quando cai da internet\n   */\n});\n</code></pre>\n<p>Como vimos a cima, a única coisa que de precisamos passar o o <code>fetch</code> é a URL\nque quermos chamar, logo depois usamos o <code>then</code> para receber a respostas da\nrequisição. A diferença do <code>fetch</code> para o <code>XHR</code> e <code>JQuery</code> é que independente da\nresposta, ela chegará na <code>then</code> podendo ser um erro ou um sucesso. A promessa\napenas irá falhar (passando pelo <code>catch</code>) se houver algum problema com a conexão\nou se não receber nenhuma resposta.</p>\n<p>Veja também que a respostas chega em um objeto <code>response</code> que contém o estado\nHTTP da resposta.</p>\n<p>Muitas <strong>APIs</strong> usam o formato <code>JSON</code> como o tipo de resposta, para isso temos\nque fazer um passo a mais:</p>\n<pre><code class=\"language-js\">\nfetch(url).then((response) =&gt; {\n  if (response.status !== 200) {\n    // O status de 200 é uma resposta de que deu tudo certo no servidor\n    return response.json();\n  } else {\n    // Caso respodam com algum erro\n  }\n}).then((responseJSON) =&gt; {\n  // Codígo que irá usar o JSON\n}).catch((error) =&gt; {\n  /*\n   * Código em caso de erro na chamada.\n   * Como por exemplo quando cai da internet\n   */\n</code></pre>\n<p>Como vimos, <code>response.json()</code> também retorna uma promessa (tudo é assíncrono),\nmas para obter o JSON precisamos de um segundo <code>then</code> para nos retornar o JSON\nque a API envia.</p>\n<p>Se a URL responder com um JSON, ou com uma imagem, ou com um texto, podemos\nusar:</p>\n<pre><code class=\"language-js\">response.json() //Para resposta deJSON\nresponse.blob() //Para arquivos binários como imagens\nresponse.text() //Para respotas em texto simples\n</code></pre>\n<p>Todos os métodos anteriores funcionam com promessas, com isso você terá que\nutilizar funções <code>then</code> para todas elas.</p>\n<p>Pode parecer muito mais trabalhoso, ou muito mais código do que nas soluções\nanteriores, mas agora vamos ver como fazer uma chamada depois da outra. E até\nfazer chamadas em paralelo.</p>\n<h2 id=\"chamada-sucessiva-com-fetch\">Chamada sucessiva com fetch</h2>\n<p>Muitas vezes quando estamos usando uma API, precisamos de certos dados de uma\nchamada anterior. Graças ao <code>fetch</code> isso irá ficar muito mais fácil e natural,\nvejamos o exemplo:</p>\n<pre><code class=\"language-js\">fetch(url1).then((response) =&gt; {\n  if (response.status == 200) {\n    return response.json();\n  } else {\n    throw new Error(\"Primeira chamada falhou\");\n  }\n}).then((jsonData) =&gt; {\n  return fetch(jsonData.url); // Imagina que precisamos da url da resposta da primeira requisição\n}).then((response) =&gt; {\n  if (response.status == 200){\n    return response.json();\n  } else {\n    throw new Error(\"Segunda chamada falhou\");\n  }\n}).then((jsonData) =&gt; {\n  // Código que irá utilizar o json da segunda chamada\n}).catch((error) =&gt; {\n  // Código executado em caso de erro\n});\n</code></pre>\n<p>Como vimos, podemos aproveitar todo o poder das promessas para fazer uma chamada\ndepois da outra, de uma maneira ordenada e sem cair em um <em>callback hell</em>\n(callback dentro de callback). Outra coisa que ganhamos ao fazer as chamadas\ndesta forma é que os erros irão retornar dentro da função <code>.catch</code>.</p>\n<h2 id=\"muitas-chamadas-de-uma-vez\">Muitas chamadas de uma vez</h2>\n<p>Outro caso muito comum que ocorre quando estamos programando, é precisar chamar\nvárias APIs de uma vez. E o <code>fetch</code> mais uma vez poderá nos ajudar com isso,\nveja os exemplos a seguir:</p>\n<pre><code class=\"language-js\">const chamadas = [];\nchamadas.push(fetch(url1));\nchamadas.push(fetch(url2));\nchamadas.push(fetch(url3));\n\nPromise.all(chamadas).then((responses) =&gt; {\n  return responses.map(response =&gt; response.json());\n  // Caso todas devam retornar JSON\n}).then((jsonResponses) =&gt; {\n  // Código para manipular todas as chamadas\n}).catch((error) =&gt; {\n  // Código para lidar com os erros\n});\n</code></pre>\n<p>Como vimos, este código é muito mais direto e simples do que usar XHR ou JQuery\npara fazer o mesmo. E com a ajuda do <code>map</code>, conseguimos transformar todas as\nrespostas em objetos JSON.</p>\n",
          "order": 10,
          "durationString": "30min"
        },
        "11-qz-fetch-jq": {
          "questions": [
            {
              "title": "1) Quais métodos podemos usar para fazer uma solicitação GET usando JQuery?",
              "description": "",
              "answers": [
                "<code>$.get()</code>",
                "<code>$.post()</code>",
                "<code>$.getJSON()</code>",
                "<code>$.ajax()</code>"
              ],
              "solution": [
                0,
                2,
                3
              ]
            },
            {
              "title": "2) Com o que o fetch trabalha para entregar as respostas?",
              "description": "",
              "answers": [
                "Callbacks",
                "Eventos",
                "Promesas",
                "Gatos pequeños"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) Qual método podemos encadear em uma solicitação AJAX com JQuery para controlar erros?",
              "description": "",
              "answers": [
                "<code>.fail()</code>",
                "<code>.done()</code>",
                "<code>.error()</code>",
                "<code>.load()</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Como manejamos erros os erros do fetch?",
              "description": "",
              "answers": [
                "A través de .catch(error =&gt; {})",
                "A través de um callback de error",
                "Usando .error()",
                "Com try / catch"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) Se quisermos fazer uma chamada depois da outra usando fetch, você deve",
              "description": "",
              "answers": [
                "usar o laço <code>for</code> para iterar a cada chamada",
                "usar funções <em>callback</em> uma dentro da outra",
                "guardar em um array e depois utilizar <code>.map</code> para executar cada chamada",
                "usar promessar e fazer um .then() depois do outro"
              ],
              "solution": [
                3
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 11,
          "durationString": "15min"
        },
        "12-jq-ajax-challenges": {
          "title": "Brincando com jQuery AJAX",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "embeds": [
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/1X3EXk48jTJWm2dmIoeRKpu1rPh5sLaNsJRKnOuJ_Edc/embed?start=false&loop=false&delayms=3000",
              "id": "3EXk48jTJWm2dmIoeRKpu1rPh5sLaNsJRKnOuJ_Edc/embed"
            },
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/1hR-LCtwMLm9vS0C18oRm1E1TOUdHEFXy-ETCEgAUD38/embed?start=false&loop=false&delayms=3000",
              "id": "R-LCtwMLm9vS0C18oRm1E1TOUdHEFXy-ETCEgAUD38/embed"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Praticar tudo o que foi aprendido fazendo requisições assíncronas com jQuery.</li>\n<li>Praticar, praticar e praticar.</li>\n</ul>\n<h2 id=\"exercícios\">Exercícios</h2>\n<p>Você deve subir todos os seus exercícios no <code>GitHub</code> e publicá-los nas\n<code>gh-pages</code>.</p>\n<h3 id=\"pokedex\"><em>Pokedex</em></h3>\n<p>Alguma vez você viu Pokemón? Se não, não importa, agora você vai saber do que se\ntrata. Um <em>pokedex</em> é um buscador de Pokemóns, no qual você pode obter a\ninformação sobre o Pokemón que estiver procurando. Usando a <a href=\"https://pokeapi.co/\" target=\"_blank\">API de\nPokeapi</a>, programe seu próprio <em>pokedex</em>. Deixamos aqui\nalguns slides com instruções um pouco mais detalhadas. Lembre-se de não se\nlimitar e ir além do que foi proposto ;)</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/3EXk48jTJWm2dmIoeRKpu1rPh5sLaNsJRKnOuJ_Edc/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"buscador-de-gifs\">Buscador de GIFs</h3>\n<p>Este desafio consiste em fazer literalmente o que o nome indica. Vamos dar a\noportunidade a nossos usuários de buscar GIFs e exibi-los da maneira mais\namigável e divertida possível. Para isso usaremos a <a href=\"https://developers.giphy.com/\" target=\"_blank\">API de\nGiphy</a>. Você perceberá que para realizar\nrequisições ele pede uma <code>API Key</code>. Para obtê-la, você terá que se registrar e\ncriar um app. Não esqueça que as boas APIs possuem documentação e apesar de\nestarem em inglês, podemos estudá-las para entendê-las melhor :). Uma vez que\nseu buscador estiver pronto, o que mais você acha que pode adicionar a ele?</p>\n<p>Aqui você tem um guia de como conseguir fazer. Não se contente com isso e\nadapte-o ao seu próprio estilo.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/R-LCtwMLm9vS0C18oRm1E1TOUdHEFXy-ETCEgAUD38/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 12,
          "durationString": "2h"
        },
        "13-jq-ajax-recap": {
          "title": "Revisão jQuery AJAX",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Revisar o que foi aprendido sobre AJAX com jQuery.</li>\n</ul>\n<h2 id=\"conclusões\">Conclusões</h2>\n<p>Nesta segunda parte da unidade, vimos como realizar uma requisição HTTP\nassíncrona por meio de jQuery. As vantagens de usar uma biblioteca como esta é\nque economizamos tempo e código para a configuração que faríamos nativamente por\nmeio do objeto <code>XMLHttpRequest</code>, além da configuração de compatibilidade entre\nnavegadores.</p>\n<p>Em uma das leituras, mencionamos que é conveniente usar jQuery para esta\nrequisições assíncronas; isto porque esta biblioteca é dedicada a isto e nada\nmais. A resposta é que atualmente é preferível utilizar micro-bibliotecas\n(bibliotecas bem menores) dedicadas a um propósito específico, como manipular\nrequisições assíncronas. Além disso, HTML5 fornece uma nova API como\nsubstituição a <code>XMLHttpRequest</code>, que faz a manipulação destas requisições.\nComece a brincar com elas! Você topa refatorar algum dos seus desafios com estas\nnovas ferramentas?</p>\n<ul>\n<li><strong><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\">Fetch</a></strong>:\nesta é a nova API que HTML5 fornece para executar requisições assíncronas e\nestá baseada em <code>promises</code>.</li>\n<li><strong><a href=\"https://github.com/visionmedia/superagent\" target=\"_blank\">SuperAgent</a></strong>: é uma\nmicro-biblioteca especializada em fazer requisições HTTP assíncronas.</li>\n<li><strong><a href=\"https://github.com/axios/axios\" target=\"_blank\">axios</a></strong>: é uma micro-biblioteca que,\ndiferente da anterior, está baseada em promessas.</li>\n</ul>\n<p>Estas não são as únicas ferramentas que existem para realizar requisições\nassíncronas, mas sem dúvida são algumas das mais usadas hoje em dia. Você\nperceberá que, ao usar uma, as outras são muito similares. Não perca a\noportunidade de testá-las para que você decida logo qual te chama mais a\natenção.</p>\n",
          "order": 13,
          "durationString": "30min"
        },
        "14-opening": {
          "title": "Abertura: Brincando com Web APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Nesta unidade vamos praticar brincando com diferentes tipos de Web APIs, com o\nobjetivo de experimentar a extração de dados sem autenticação, com um <em>token</em>\ngerado, enviando dados por meio de cabeçalhos HTTP, identificar quando são\n<em>RESTful</em> e outros detalhes que lhe darão superpoderes.</p>\n<h2 id=\"guia-de-perguntas-e-conceitos-chave\">Guia de perguntas e conceitos chave</h2>\n<p>Quando começamos a estudar um novo assunto, é útil termos uma ideia de conceitos\nmais importantes que vamos aprender e dos temas centrais a que devemos prestar\natenção especial.</p>\n<p>A seguir apresentamos uma série de perguntas que você deve ser capaz de\nresponder ao terminar esta unidade. Use estas perguntas como guia para orientar\nseu esforço de aprendizagem. Retorne a elas constantemente a medida que avança\npara validar que está indo na direção correta. Que este guia sirva como um\n\"checklist\" que você vai riscando conforme avança.</p>\n<h2 id=\"guia-de-perguntas-e-conceitos-chaves\">Guia de perguntas e conceitos chaves</h2>\n<ul>\n<li>O que é uma Web API?</li>\n<li>Identifique quais APIs são públicas sem autenticação.</li>\n<li>Identifique quais APIs são públicas mas necessitam de uma API Key.</li>\n<li>O que é autenticação baseada em <em>tokens</em>?</li>\n<li>Como enviar dados nos cabeçalhos HTTP usando AJAX?</li>\n<li>O que é OAuth?</li>\n<li>O que é REST?</li>\n<li>Como identificar uma RESTful API?</li>\n<li>O que é um CRUD?</li>\n</ul>\n",
          "order": 14,
          "durationString": "15min"
        },
        "15-third-party-apis": {
          "title": "Third party APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/_49_6pjTXiQ",
              "id": "_49_6pjTXiQ"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender a diferença entre as APIs do navegador e as APIs de terceiros.</li>\n<li>Conhecer as vantagens de utilizar APIs de terceiros.</li>\n</ul>\n<h2 id=\"lembremos-o-que-é-uma-web-api\">Lembremos o que é uma Web API</h2>\n<p>Já vimos muitas vezes que o acrônimo de API significa Application Programming\nInterface (Interface de Programação de Aplicações) e que podemos encontrá-las em\ndiferentes lugares como o navegador, no computador, na web e outros. Também\nvimos que elas nos dão interoperabilidade entre diversos sistemas. Nesta unidade\nfocaremos não na comunicação com um único dispositivo, mas sim entre milhares e\nmilhões deles. Como? Por meio da internet, com <strong>Web APIs</strong>. Ajuste as legendas\nou o tradutor automático e veja este vídeo:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/_49_6pjTXiQ?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"apis-de-terceiros\">APIs de terceiros</h2>\n<blockquote>\n<p>As APIs de terceiros são APIs fornecidas por terceiros (duh). Esses terceiros\nsão geralmente companhias (como Google, Facebook e outras) que permitem\nacessar suas funcionalidades por meio de linguagem de programação (no nosso\ncaso, JavaScript) e usá-las em nossa aplicação web.</p>\n</blockquote>\n<p>Este é um trecho traduzido de um <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\" target=\"_blank\">artigo da MDN sobre Third Party\nAPIs</a>.</p>\n<h2 id=\"prós-e-contras-do-uso-de-apis-de-terceiros\">Prós e contras do uso de APIs de Terceiros</h2>\n<blockquote>\n<h3 id=\"prós-do-uso-de-apis-de-terceiros\">Prós do uso de APIs de terceiros</h3>\n<ul>\n<li><strong>Rapidez.</strong> Poder integrar em questão de segundos mapas, imagens ou serviços\nde autenticação em nossas aplicações e concentrar esforços nas regras de\nnegócio.</li>\n<li><strong>Robustez.</strong> A maioria de APIs e serviços mais populares estão tão bem\ntestadas que podemos garantir que a resposta virá corretamente na maioria dos\ncasos.</li>\n<li><strong>Imagem.</strong> Quando os usuários costumam usar um bom serviço, acabam\nreconhecendo isso. Associar a nossa imagem a de uma empresa grande como\nGoogle, Facebook ou Twitter pode nos ajudar a contarmos com a boa percepção\nque os usuários têm desses gigantes.</li>\n<li><strong>Manutenção.</strong> De forma geral, as grandes empresas não deixarão que seus\nprodutos se deteriorem, o que faz com que os serviços acessados por meio das\nAPIs estejam em constante melhora, que na maior parte dos casos é totalmente\ntransparente para a programadora que as utiliza.</li>\n<li><strong>Inovação.</strong> É lógico pensar que empresas líderes como Microsoft, eBay ou\nAmazon não se satisfazem em manter suas aplicações funcionando bem, mas\ntratam de melhorá-las constantemente, o que fará com que os usuários de suas\nAPIs se vejam beneficiados com todas a melhorias que vão sendo produzidas.</li>\n</ul>\n<h3 id=\"contras-do-uso-de-apis-de-terceiros\">Contras do uso de APIs de terceiros</h3>\n<ul>\n<li><strong>Condições variáveis.</strong> Ao nos associarmos a uma empresa por um contrato tão\nfrágil como é uma licença de uso de uma API, normalmente estamos expostos à\nvontade de outra parte, o que pode levar à interrupção do serviço,\nobsolescência de métodos implementados ou perda da gratuidade do serviço,\ncomo acaba de ocorrer com Google Maps.</li>\n<li><strong>Disponibilidade.</strong> Como se não fosse suficiente nos preocuparmos em manter\no funcionamento de nosso próprio servidor e aplicações, quedas de serviços\nexternos, como as ocorridas este ano com a Amazon, podem deixar seus serviços\ninutilizados. Você pode imaginar ter uma loja virtual que funciona\nperfeitamente, mas admitindo apenas pagamento por PayPal e este não funciona?</li>\n<li><strong>Imagem.</strong> Anteriormente apontamos isso como uma vantagem, já que podemos\nnos favorecer do prestígio de uma boa marca ao trabalhar com ela, mas o que\nacontece quando a reputação de nossos parceiros vai à lama? Infelizmente é\nmuito difícil separar por completo a imagem de um e outro e seremos\nprejudicados por erros alheios.</li>\n<li><strong>Falta de inovação.</strong> Quando os serviços de terceiros que usamos são\natualizados constantemente geralmente não há queixas, mas pode acontecer o\ncontrário também: que fiquem estagnados, nosso aplicativo avance mais rápido\ne sua API possa não atender mais às nossas demandas. Em situações como esta,\nsurge a difícil decisão de mudar de provedor de serviços ou implementá-los\npor conta própria, com consequente custo adicional.</li>\n<li><strong>Privacidade.</strong> As leis são muito diferentes em cada país. Algumas como a\nLOPD espanhola, que é mais restritiva que as equivalentes em outros países,\npodem nos impedir legalmente de delegar certos dados ou serviços para seu\nprocessamento por terceiros.</li>\n</ul>\n</blockquote>\n<p>Esse prós e contras são parte de um <a href=\"https://www.genbetadev.com/programacion-en-la-nube/pros-y-contras-del-uso-de-apis-de-terceros\" target=\"_blank\">post de\nGenbetaDev</a>\n(em espanhol). Nós focaremos nas coisas positivas neste momento e tiraremos\nproveito de tudo o que nos oferecem as APIs de terceiros para fazermos apps\nincríveis.</p>\n",
          "order": 15,
          "durationString": "20min"
        },
        "16-web-apis": {
          "title": "Web APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 40,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/ATB23YVOSq4",
              "id": "ATB23YVOSq4"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/lyHrVjx8MSw",
              "id": "lyHrVjx8MSw"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Conhecer e identificar os diferentes tipos de Web APIs com os quais podemos\ntrabalhar</li>\n</ul>\n<h2 id=\"onde-posso-saber-quais-web-apis-públicas-existem\">Onde posso saber quais Web APIs públicas existem?</h2>\n<p>Já que nesta unidade trabalharemos com Web APIs públicas, devemos saber onde\npodemos encontrá-las. Para tanto, deixamos para você os seguintes recursos:</p>\n<ul>\n<li><a href=\"https://github.com/abhishekbanthia/Public-APIs\" target=\"_blank\">Public-APIS</a></li>\n<li><a href=\"https://any-api.com/\" target=\"_blank\">Any API</a></li>\n<li><a href=\"https://public.apis.zone/\" target=\"_blank\">Public APIs - Github Repo</a></li>\n<li><a href=\"https://www.programmableweb.com/apis/directory\" target=\"_blank\">API Directory</a></li>\n<li><a href=\"https://apilist.fun/\" target=\"_blank\">API List</a></li>\n</ul>\n<p>Para o objetivo desta leitura, focaremos em um recurso que não vimos até o\nmomentos: <a href=\"https://github.com/toddmotto/public-apis\" target=\"_blank\">Public APIs</a>. Este\nrepositório, diferente dos demais, tem uma maneira sintetizada de mostrar a\nautenticação que uma API necessita (os demais recursos também mostram esse\ndetalhe, mas não à primeira vista).</p>\n<p><img src=\"https://github.com/ivandevp/curricula-js/blob/378ca9e9ad8d178bf783ebbcea6383d9c44a783b/06-spa/03-working-with-apis/02-web-apis/web-apis.png?raw=true\" alt=\"Different Web APIs\nAuth\"></p>\n<p>Na imagem anterior, podemos visualizar a seção das APIs de Música, na qual a\ncoluna <code>Auth</code> tem valores distintos como <code>NO</code>, <code>apikey</code> ou <code>OAuth</code>. É uma\nmaneira de classificar as Web APIs com base em seu meio de autenticação. Vejamos\ndo que se trata.</p>\n<h3 id=\"web-apis-sem-autenticação\">Web APIs sem autenticação</h3>\n<p>Este tipo de API é o mais simples de consumir por meio de AJAX e por sua vez é o\nde maior uso público, pois não é preciso se registrar para obter uma chave ou\nlogin. Simplesmente faça uma requisição no <em>endpoint</em> especificado e pronto.\nExemplo destas APIs podem ser: Pokeapi, Swapi, entre outras. Aqui temos um <em>pen</em>\nmostrando o que você pode fazer com a API de\n<a href=\"https://lyricsovh.docs.apiary.io/#\" target=\"_blank\">Lyrics.ovh</a>.</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"Lyrics API\" src=\"//codepen.io/ivandevp/embed/NyjmMm/?height=760&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\"> See the Pen [Lyrics API](https://codepen.io/ivandevp/pen/NyjmMm/) by\n  Ivan ([@ivandevp](https://codepen.io/ivandevp)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<h3 id=\"web-apis-com-apikey\">Web APIs com <code>apiKey</code></h3>\n<p>Nestas APIs, o método de autenticação é por meio de um <code>API Key</code> que acompanha\ntodas as requisições que são feitas a algum <code>endpoint</code> (recurso). Na maioria dos\ncasos, você deverá se registrar para obter essa <code>apiKey</code>. Deixamos aqui um\nexemplo com Google Maps.</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"Laboratoria en Google Maps\" src=\"//codepen.io/ivandevp/embed/qxmGaY/?height=760&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\"> See the Pen[ Laboratoria en Google\n  Maps](https://codepen.io/ivandevp/pen/qxmGaY/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<p>Em algumas ocasiões, as API Keys geradas devem ir nos cabeçalhos HTTP da\nrequisição, para que no <em>backend</em> se faça a verificação do <em>token</em> e este possa\nser autenticado corretamente. Por exemplo, na API de\n<a href=\"https://www.coinapi.io/\" target=\"_blank\">CoinAPI.io</a>, o <em>token</em> é enviado por meio do <em>header</em>\n<code>X-CoinAPI-Key</code>. Aqui temos um <em>pen</em> de como ser faria a requisição nesse caso:</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"BYReOj\" src=\"//codepen.io/ivandevp/embed/BYReOj/?height=760&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\"> See the Pen [BYReOj](https://codepen.io/ivandevp/pen/BYReOj/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<h3 id=\"web-apis-com-oauth\">Web APIs com <code>OAuth</code></h3>\n<p>OAuth é um protocolo de autorização que permite obter acesso limitado a\naplicações de terceiros para obter dados e em seguida usar esse dados para o\nregistro de um <em>web service</em> ou API. Aqui deixamos um exemplo para que veja do\nque se trata:</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"YeQwOe\" src=\"//codepen.io/ivandevp/embed/YeQwOe/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\"> See the Pen [YeQwOe](https://codepen.io/ivandevp/pen/YeQwOe/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<p>Percebeu a diferença? Embora esta implementação seja similar às que usam um API\nKey como método de autenticação, para gerar esse <code>key</code> que vemos na URL do <strong>GET\nRequest</strong> é preciso criar uma aplicação em <a href=\"https://stackapps.com/\" target=\"_blank\">Stack Apps</a>,\ne para poder fazê-lo é necessário se cadastrar. No momento do cadastro, é\noferecida a opção de cadastrar-se usando o Facebook. Quando você se registra, o\nusuário garantirá que StackExchange pode obter certos dados de sua conta do\nFacebook; esse dados são usados para criar a conta e configurar a aplicação que\nestá no Stack Apps. É esse processo que o OAuth permite realizar de maneira\npadronizada.</p>\n<p>Outro exemplo: se testar acessar a API do Spotify, você pode ser conectar com\nele pode meio do Facebook e obter acesso à busca de músicas, artistas, playlists\ne demais itens.</p>\n<h2 id=\"autenticação-e-autorização\">Autenticação e Autorização</h2>\n<p>Estes dois termos foram mencionados ao longo desta leitura. É importante\nmencionar que são dois aspectos de segurança que as APIs levam em conta no\nmomento do projeto e implementação.</p>\n<p>A autenticação é o processo de verificar quem é o usuário que você indica ser.\nIsto é, no início da sessão, seu usuário e senha devem coincidir com os dados\nque estão armazenados no sistema. Isso é um exemplo de autenticação.</p>\n<p>Enquanto que a autorização, uma vez verificado que você é quem diz ser, verifica\nse você tem acesso ou permissão ao recurso solicitado.</p>\n<p>Aqui deixamos duas vídeos (nós sabemos, estão em inglês. Mas o Google Translate\npode nos ajudar, não 100%, mas o suficiente para poder entendê-los no contexto\nadequado).</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ATB23YVOSq4?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/lyHrVjx8MSw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"mais-recursos\">Mais recursos</h2>\n<ul>\n<li><a href=\"https://carlosazaustre.es/que-es-la-autenticacion-con-token/\" target=\"_blank\">O que é a autenticação baseada em <em>tokens</em>?\n(Espanhol)</a></li>\n<li><a href=\"https://aplicacionesysistemas.com/que-es-oauth/\" target=\"_blank\">O que é OAuth? (Espanhol)</a></li>\n</ul>\n",
          "order": 16,
          "durationString": "40min"
        },
        "17-rest": {
          "title": "RESTful APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/hTdYO7tKh_k",
              "id": "hTdYO7tKh_k"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/95X-pHvGBnw",
              "id": "95X-pHvGBnw"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/AyQboo5CycM",
              "id": "AyQboo5CycM"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/aI1DSeZAEMA",
              "id": "aI1DSeZAEMA"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender de forma geral o que é REST e como detectar quais APIs são RESTful.</li>\n</ul>\n<h2 id=\"formato-de-conteúdo\">Formato de conteúdo</h2>\n<h3 id=\"xml\">XML</h3>\n<blockquote>\n<p>Extensible Markup Language (XML) é um formato universal para dados e\ndocumentos estruturados. Os arquivos XML tem a extensão de arquivo <code>.xml</code>.\nAssim como HTML, XML utiliza <em>tags</em> (palavras delimitadas pelos caracteres <code>&lt;</code>\ne <code>&gt;</code>) para estruturar os dados do documento.</p>\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=UTF-8\"?&gt;\n&lt;doc&gt;\n &lt;customer id='123'&gt;\n    &lt;name&gt;...&lt;/name&gt;\n    &lt;address&gt;...&lt;/address&gt;\n     ...\n    &lt;order&gt;\n       &lt;amount&gt;...&lt;/amount&gt;\n          &lt;date&gt;...&lt;/date&gt;\n       &lt;item quant='12'&gt;\n          &lt;name&gt;...&lt;/name&gt;\n       &lt;/item&gt;\n       &lt;item quant='4'&gt;...&lt;/item&gt;\n        ...\n    &lt;/order&gt;\n    &lt;order&gt;...&lt;/order&gt;\n     ...\n    &lt;payment&gt;\n       &lt;number&gt;...&lt;/number&gt;\n       &lt;date&gt;...&lt;/date&gt;\n    &lt;/payment&gt;\n    &lt;payment&gt;&gt;...&lt;/payment&gt;\n     ...\n &lt;/customer&gt;\n &lt;customer id='124'&gt;...&lt;/customer&gt;\n&lt;/doc&gt;\n</code></pre>\n</blockquote>\n<p>Fonte: <a href=\"https://www.ibm.com/support/knowledgecenter/es/SSEPGG_8.2.0/com.ibm.db2.ii.doc/opt/c0007799.htm\" target=\"_blank\">O que é XML? -\nIBM</a></p>\n<h3 id=\"json\">JSON</h3>\n<blockquote>\n<p>JSON (JavaScript Object Notation) é um formato de dados. Basicamente, JSON\ndescreve os dados com uma sintaxe própria que se para validar e administrar os\ndados. JSON nasceu como uma alternativa ao XML. O uso fácil em JavaScript\ngerou um grande número de seguidores desta alternativa. Uma das maiores\nvantagens do uso de JSON é poder ser lido por qualquer linguagem de\nprogramação. Assim, pode ser utilizado para trocas de informação entre\ndiferentes tecnologias.</p>\n</blockquote>\n<p>Fonte: <a href=\"https://geekytheory.com/json-i-que-es-y-para-que-sirve-json/\" target=\"_blank\">O que é e para que serve JSON? -\nGeekyTheory</a></p>\n<blockquote>\n<pre><code class=\"language-json\">{\n  \"squadName\": \"Super hero squad\",\n  \"homeTown\": \"Metro City\",\n  \"formed\": 2016,\n  \"secretBase\": \"Super tower\",\n  \"active\": true,\n  \"members\": [\n    {\n      \"name\": \"Molecule Man\",\n      \"age\": 29,\n      \"secretIdentity\": \"Dan Jukes\",\n      \"powers\": [\n        \"Radiation resistance\",\n        \"Turning tiny\",\n        \"Radiation blast\"\n      ]\n    },\n    {\n      \"name\": \"Madame Uppercut\",\n      \"age\": 39,\n      \"secretIdentity\": \"Jane Wilson\",\n      \"powers\": [\n        \"Million tonne punch\",\n        \"Damage resistance\",\n        \"Superhuman reflexes\"\n      ]\n    },\n    {\n      \"name\": \"Eternal Flame\",\n      \"age\": 1000000,\n      \"secretIdentity\": \"Unknown\",\n      \"powers\": [\n        \"Immortality\",\n        \"Heat Immunity\",\n        \"Inferno\",\n        \"Teleportation\",\n        \"Interdimensional travel\"\n      ]\n    }\n  ]\n}\n</code></pre>\n</blockquote>\n<p>Fonte: <a href=\"https://developer.mozilla.org/es/docs/Learn/JavaScript/Objects/JSON\" target=\"_blank\">Exemplo - Trabalhando con JSON -\nMDN</a></p>\n<p>No vídeo a seguir, você encontra um resumo do formato de conteúdos:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/hTdYO7tKh_k?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Se você quiser comparar um pouco essas 2 estruturas de dados, aqui há um vídeo\nde resumo:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/95X-pHvGBnw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"serviços-web\">Serviços Web</h2>\n<h3 id=\"soap\">SOAP</h3>\n<blockquote>\n<p>SOAP (originalmente as siglas de Simple Object Access Protocol) é um protocolo\npadrão que define como objetos em diferentes processos podem se comunicar por\nmeio de troca de dados XML. Esse protocolo deriva de um protocolo criado por\nDave Winer em 1998, chamado XML-RPC. SOAP foi criado pela Microsoft, IBM e\noutros. Está atualmente sob o controle da W3C. É um dos protocolos mais\nutilizados nos serviços web.</p>\n</blockquote>\n<p>Fonte: <a href=\"https://es.wikipedia.org/wiki/Simple_Object_Access_Protocol\" target=\"_blank\">SOAP -\nWikipedia</a></p>\n<h3 id=\"rest\">REST</h3>\n<blockquote>\n<p>\"Representational State Transfer\" (ou traduzido para \"Transferência de\nRepresentação de Estado\") é o que se denomina REST. E o que é isso? É uma\ntécnica de arquitetura de software para construir APIs que permitam o nosso\nservidor comunicar-se com seus clientes usando protocolo HTTP mediante URIs\nsuficientemente inteligentes para satisfazer a necessidade do cliente.</p>\n<ul>\n<li>REST é STATELESS, ou seja, cada requisição que nossa API recebe deve morrer.\nPor exemplo, não podemos LEMBRAR um usuário logado na API usando uma sessão,\nisso é um PECADO já que usaria muita memória RAM de nosso servidor (10 mil\nusuários conectados em nossa API). O que é correto é passar um TOKEN para\ncada requisição realizada na API e a API deverá validar se ela está correta\nou não (por enquanto, não vamos falar de técnicas para gerar o TOKEN, mas o\nmais comum é usar um COOKIE).</li>\n<li>São implementados RECURSOS para gerar comunicação, ou seja, criar URIs\núnicas que permitem ao cliente entender e utilizar o que estão expondo. Por\nexemplo:<ul>\n<li><code>api.anexsoft.com/users/</code></li>\n<li><code>api.anexsoft.com/users/1405</code></li>\n</ul>\n</li>\n<li>Cada requisição realizada em nossa API responde a um verbo e este a uma\noperação em comum. Por meio dos métodos HTTP, fazemos as requisições. O\ncomum é GET, POST, PUT e DELETE.<ul>\n<li><strong>POST (create):</strong> quando enviamos informação para inserir um registro na\nbase de dados, por exemplo. A informação é enviada no corpo da requisição,\nou seja, os dados não são visíveis ao usuário. <code>POST /users</code></li>\n<li><strong>GET (read):</strong> é utilizado para o modo de leitura. Por exemplo: quando\nqueremos listar todos os usuários de nossa base de dados. Os parâmetros\nsão enviados pela URL. <code>GET /users</code></li>\n<li><strong>PUT (update):</strong> quando queremos atualizar um registro. Atualizar a\ninformação de um usuário X. <code>PUT /users/:userId</code></li>\n<li><strong>DELETE (delete):</strong> quando queremos apagar um registro. Eliminar um\nusuário X de nossa base de dados. <code>DELETE /uses/:userId</code></li>\n</ul>\n</li>\n</ul>\n<p>Com isso mencionamos algumas características básicas do que é REST. Poderíamos\ndizer que são um padrão para criar uma API REST ou RESTFul.</p>\n</blockquote>\n<p>Fonte: <a href=\"http://anexsoft.com/p/117/que-es-rest\" target=\"_blank\">O que é REST? - Anexsoft</a></p>\n<p>A seguir você pode ver um vídeo que resume SOAP e REST:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/AyQboo5CycM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Por convenção, cada um dos padrões usa um formato de conteúdo particular. Em\nresumo, SOAP transfere informação por meio de XML, enquanto REST transfere dados\nusando JSON. Aqui temos um vídeo que resume esta mensagem:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/aI1DSeZAEMA?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"conclusão\">Conclusão</h2>\n<p>Não ficou claro para você o que são RESTful APIs? Enquanto REST é um padrão, a\nimplementação deste é uma API, que vem a ser as APIs RESTful. Embora ao projetar\numa API haja muitas coisas mais para levar em conta, a principal é que você se\nconcentre em como se obtém os recursos e assim poder identificar os métodos e\nURIs necessárias para consumir a API.</p>\n<p>Exemplos de RESTful APIs são:</p>\n<ul>\n<li><a href=\"https://stripe.com/docs/api/php\" target=\"_blank\">Stripe</a></li>\n<li><a href=\"https://www.instagram.com/developer\" target=\"_blank\">Instagram</a></li>\n<li><a href=\"https://developer.spotify.com/web-api/\" target=\"_blank\">Spotify</a></li>\n<li><a href=\"https://developer.lyft.com/docs/overview\" target=\"_blank\">Lyft</a></li>\n<li>Muitas mais!</li>\n</ul>\n<p>Se você quiser saber mais sobre REST, aqui tem um\n<a href=\"http://www.restapitutorial.com/\" target=\"_blank\">tutorial</a> que pode te ajudar.</p>\n",
          "order": 17,
          "durationString": "30min"
        },
        "18-crud": {
          "title": "CRUD",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender o que é <code>CRUD</code> e como podemos gerar uma aplicação consumindo uma API\nRESTful.</li>\n</ul>\n<h2 id=\"crud-create-read-update-and-delete\">CRUD: Create, Read, Update and Delete</h2>\n<p>Você já notou que quase toda a interação que você faz na web tem a ver com uma\nbase de dados? Quando você entra no perfil de uma pessoa que você segue, todas\nas suas fotos, publicações, comentários e demais itens estão armazenados em\nalgum lugar (database). Quando sobe uma uma foto no Instagram ou envia um\ne-mail, você está criando um novo registro no DB. Quando você muda sua foto de\nperfil no WhatsApp, você está editando algo existente no banco de dados. Por\núltimo, quando você apaga a mensagem de uma conversa ou grupo, você está\nalterando seu DB.</p>\n<blockquote>\n<p>O uso de diferentes palavras para se referir à base de dados no parágrafo\nanterior foi intencional para você saber que fazem referência à mesma coisa.</p>\n</blockquote>\n<p>A todas essas ações descritas anteriormente que têm interação com a base de\ndados, possuem um acrônimo na programação: <strong>CRUD</strong>.</p>\n<p>CRUD é o acrônimo de <em>criar, ler, atualizar e apagar</em>, palavras que correspondem\nrespectivamente aos verbos do HTTP mais utilizados: <strong>POST, GET, PUT e DELETE.</strong></p>\n<p>Estas são as operações mais comuns que queremos ter no caso de uma API que\nmanipula dados.</p>\n<h2 id=\"exemplo\">Exemplo</h2>\n<p>Aqui um exemplo de CRUD para uma lista de tarefas:</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"Plain JS CRUD Frontend\" src=\"//codepen.io/ianseabrook/embed/rxvByR/?height=760&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width:\n  100%;\"> See the Pen [Plain JS CRUD\n  Frontend](https://codepen.io/ianseabrook/pen/rxvByR/) by Ian Seabrook\n  ([@ianseabrook](https://codepen.io/ianseabrook)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<p>Embora o exercício anterior perca as alterações ao recarregar a página, ele\nmostra o princípio das ações que um CRUD realiza. No momento da prática (nas\nseguintes lições), vamos colocá-lo em prática com uma base de dados reais!</p>\n",
          "order": 18,
          "durationString": "30min"
        },
        "19-api-challenges": {
          "title": "Brincando con APIs",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "embeds": [
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/e/2PACX-1vRGrO9hyhFU--4MSOJZgA8nRxfJ9qPdI6-2y25bTlBqo4T6C_VKfPm0IKEk-TIsx6a47Jk6lKgME-IS/embed?start=false&loop=false&delayms=5000",
              "id": "2PACX-1vRGrO9hyhFU--4MSOJZgA8nRxfJ9qPdI6-2y25bTlBqo4T6C_VKfPm0IKEk-TIsx6a47Jk6lKgME-IS/embed"
            },
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/e/2PACX-1vSjQwnB8r8N5hFRhtE1wQ9a8GH13MDjhQhPYwmekE66Qtwrdlld582UwJr1EomzQxjLNKr3UpzwVkLp/embed?start=false&loop=false&delayms=5000",
              "id": "2PACX-1vSjQwnB8r8N5hFRhtE1wQ9a8GH13MDjhQhPYwmekE66Qtwrdlld582UwJr1EomzQxjLNKr3UpzwVkLp/embed"
            },
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/16kxaGLh87JVbSD_Kee5dBDA0sN4zHq7cQYHZ-rnfFJs/embed?start=false&loop=false&delayms=3000",
              "id": "kxaGLh87JVbSD_Kee5dBDA0sN4zHq7cQYHZ-rnfFJs/embed"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Praticar tudo o que foi aprendido com relação às APIs.</li>\n<li>Praticar, praticar e praticar.</li>\n</ul>\n<h2 id=\"exercícios\">Exercícios</h2>\n<p>Você deve subir todos seus exercícios para o <code>GitHub</code> nas <code>gh-pages</code>.</p>\n<h3 id=\"swapi\">Swapi</h3>\n<p><em>Que a força esteja com você</em>! Neste exercício, revise os seguintes slides e\ncrie este app fenomenal para amantes de Star Wars.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/2PACX-1vRGrO9hyhFU--4MSOJZgA8nRxfJ9qPdI6-2y25bTlBqo4T6C_VKfPm0IKEk-TIsx6a47Jk6lKgME-IS/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"a-maior-rede-profissional-do-mundo\">A maior rede profissional do mundo</h3>\n<p>Se você pensava que o LinkedIn só servia para manter seu CV atualizado, veja os\nseguintes slides e surpreenda-se com todas as possibilidades que ele nos oferece\npara criar diferentes produtos.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/2PACX-1vSjQwnB8r8N5hFRhtE1wQ9a8GH13MDjhQhPYwmekE66Qtwrdlld582UwJr1EomzQxjLNKr3UpzwVkLp/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"weather\">Weather</h3>\n<p>Você já viu que os sistemas operacionais móveis vêm com um APP de previsão do\ntempo? Vamos fazer o nosso! Para isso, usaremos a API de <a href=\"https://darksky.net/dev\" target=\"_blank\">Dark\nSky</a> e esperamos que você use imagens como\n<a href=\"https://www.flickr.com/services/api/\" target=\"_blank\">Flickr</a>,\n<a href=\"https://unsplash.com/developers\" target=\"_blank\">Unsplash</a> ou outro. Em seguida, deixamos\nalguns slides com recursos e guias do fluxo do app. Lembre-se que não é\nnecessário que siga o projeto ao pé da letra. Você pode adaptá-lo livremente ao\nseu gosto.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/kxaGLh87JVbSD_Kee5dBDA0sN4zHq7cQYHZ-rnfFJs/embed\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 19,
          "durationString": "2h"
        },
        "20-quiz": {
          "questions": [
            {
              "title": "1) O que significa API?",
              "description": "",
              "answers": [
                "Application Programming Interface.",
                "Application Programming Internet.",
                "Application Programming Interaction."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "2) Marque a opção onde só se encontrem APIs do navegador",
              "description": "",
              "answers": [
                "Geolocalização, drag and drop, google map.",
                "LocalStorage, firebase, Json.",
                "Geolocalização, drag and drop, LocalStorage.",
                "Json, xml, ajax"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) Quais são os prós do uso de APIs de terceiros?",
              "description": "",
              "answers": [
                "Rapidez, robustez, manutenção, inovação.",
                "Rapidez, manutenção, disponibilidade, inovação.",
                "Rapidez, manutenção, privacidade, inovação.",
                "Disponibilidade, privacidade, imagem, condições variáveis."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Dependendo do meio de autenticação, como se classificam as web APIs de terceiros?",
              "description": "",
              "answers": [
                "Públicas ou sem autenticação, ApiKey, OAuth y Token.",
                "Rest, Crud, Públicas.",
                "Públicas e privadas.",
                "Públicas, privadas e com Token."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) O que é Rest?",
              "description": "",
              "answers": [
                "O principal protocolo da web.",
                "Serviço web que é executado em seu computador para exibir arquivos json\nencontrados na web.",
                "Arquitetura de software usada para construir APIs que permitam comunicar\nnosso servidor com seus clientes usando o protocolo HTTP por meio de URIs."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) Qual opção é incorreta com relação a xml?",
              "description": "",
              "answers": [
                "Extensible Markup Language (XML).",
                "Formato universal para dados e documentos estruturados.",
                "Desenvolvido em 1997.",
                "Utiliza tags de identificação similar a HTML.",
                "Deriva de Javascript."
              ],
              "solution": [
                4
              ]
            },
            {
              "title": "7) Qual opção é incorreta em relação a JSON?",
              "description": "",
              "answers": [
                "Formato para intercâmbio de dados.",
                "Nasce como uma alternativa a XML.",
                "Só pode ser lido com JavaScript.",
                "JavaScript Object Notation.",
                "Desenvolvido em 2001."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) CRUD é o acrônimo de \"Criar, Ler, Atualizar e Apagar\", palavras que correspondam a",
              "description": "",
              "answers": [
                "Os verbos http: Create, Read, Update, Delete.",
                "Os verbos http: Close, Request, Update, Delete.",
                "Os verbos http: Close, Response, Update, Delete.",
                "Os verbos http: Post, Get, Put, Delete."
              ],
              "solution": [
                3
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 20,
          "durationString": "30min"
        }
      },
      "order": 2,
      "stats": {
        "duration": 1035,
        "durationString": "17.3h",
        "exerciseCount": 0,
        "partCount": 21
      }
    }
  },
  "grades": "",
  "contributors": "",
  "books": "",
  "benchmarks": "",
  "references": "",
  "repo": "Laboratoria/bootcamp",
  "path": "topics/browser",
  "version": "3.1.0",
  "parserVersion": "3.0.0",
  "track": "js",
  "locale": "pt-BR",
  "stats": {
    "duration": 4280,
    "durationString": "71.3h",
    "exerciseCount": 0,
    "unitCount": 3,
    "partCount": 46
  }
}
