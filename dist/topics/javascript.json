{
  "slug": "javascript",
  "createdAt": "2021-11-30T14:02:24.787Z",
  "title": "JavaScript",
  "description": "<p>En un mundo que rápidamente se está digitalizando, aprender a programar abre\nnuevas (y muchas veces mejores) oportunidades. Con este curso darás tus primeros\npasos hacia el mundo de la programación. Empezaremos desde cero, enseñándote los\nfundamentos de JavaScript, el lenguaje de programación más popular de la Web.</p>\n<p>En este curso aprenderás mejores formas de estructurar y manipular la data de\ntu programa haciendo uso de estructuras de datos básicas: <code>arreglos</code> y\n<code>objetos</code>.</p>\n\n",
  "tags": {
    "secondary": {},
    "primary": {
      "value": true,
      "variable": true,
      "operator": true,
      "comment": true,
      "flow-control": true,
      "branching": true,
      "conditional": true,
      "loop": true,
      "function": true,
      "array": true,
      "object": true,
      "string": true,
      "built-ins": true,
      "async": true,
      "callback": true,
      "promise": true,
      "error": true,
      "debugging": true,
      "style": true
    }
  },
  "targetAudience": "<p>Este curso está dirigido a personas <em>sin</em> conocimientos previos de programación\nque tienen el interés de aventurarse al mundo del código. Será tu primer paso en\nla ruta de aprendizaje.</p>\n<h2 id=\"propósito-general\">Propósito General</h2>\n<p>El propósito de este curso es darte una idea de qué se trata el mundo del\ndesarrollo de software, para que puedas determinar si es algo que te apasiona\nperseguir como profesión. Al terminar este curso sabrás si el código es lo tuyo\ny habrás sentado unas buenas bases para el desarrollo de tu carrera profesional\nen el mundo tech.</p>\n",
  "dependencies": "<p>Ningún conocimiento previo de programación es necesario para completar este\ncurso. Está diseñado para principiantes.</p>\n",
  "learningObjectives": "<ul>\n<li>Conceptos básicos de programación como: <code>variables</code>, <code>tipos datos</code>,\n<code>operadores</code>, <code>declaraciones condicionales</code>, <code>ciclos</code> y <code>funciones</code>.</li>\n<li>La sintaxis básica de JavaScript como lenguaje de programación</li>\n<li>A utilizar estructuras de datos básicas: <code>arrays</code> y <code>objects</code></li>\n<li>...</li>\n</ul>\n",
  "product": "",
  "syllabus": {
    "01-basics": {
      "title": "Valores, variables, operadores, tipos y comentarios",
      "bonus": false,
      "description": "<p>Aprende a utilizar variables para almacenar información que cambia durante el\ntranscurso del programa y los diferentes tipo de datos de los valores en\nJavaScript.</p>\n",
      "parts": {
        "01-values-variables-and-types": {
          "title": "Valores, tipos de datos y operadores",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "body": "<p>El texto a continuación se basa en gran medida, con ciertos ajustes, en el\ncapítulo 1 de <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>, de Marijn\nHaverbeke, 2014. Traducción en <a href=\"http://hectorip.github.io/Eloquent-JavaScript-ES-online/chapters/01_values.html\" target=\"_blank\">Español</a>\ndisponible gracias a <a href=\"https://github.com/hectorip\" target=\"_blank\">hectorip</a>.</p>\n<h2 id=\"vivimos-en-un-mundo-de-data\">Vivimos en un mundo de Data</h2>\n<p>En el 2010, el entonces CEO de Google, Eric Schmidt, mencionaba que\ncada dos días creamos tanta data como lo hicimos desde los inicios de la\ncivilización hasta el 2003 (<a href=\"https://techcrunch.com/2010/08/04/schmidt-data/\" target=\"_blank\">fuente</a>).\nLas compras que haces son data, tus notas en el colegio son data, tu perfil de\nFacebook está minado de data. Tus búsquedas en Google, las señales de GPS de tu\ncelular, los videos que miras y subes a YouTube, las imágenes que ves en\nInstagram, los registros del clima, los corrreos electrónicos ... todo eso es\ndata!</p>\n<p>La data es crucial porque nos ayuda a tomar decisiones y a entender el mundo que\nnos rodea. La data es la base de la información, que a su vez es la base del\nconocimiento, y el conocimiento se traduce en mejores decisiones. Desde\ndecisiones simples, como elegir un lugar para almorzar en base a los reviews de\nYelp; hasta decisiones complejas, como predecir si una mujer está embarazada,\nsegún su historial de compra en un hipermercado (<a href=\"http://www.forbes.com/sites/kashmirhill/2012/02/16/how-target-figured-out-a-teen-girl-was-pregnant-before-her-father-did/#1a3ac4\" target=\"_blank\">fuente</a>).</p>\n<h2 id=\"tipos-de-datos\">Tipos de datos</h2>\n<p>Las computadoras son un gran recurso para trabajar con grandes cantidades de\ndatos. De hecho, en el mundo de las computadoras solo existen datos. Con las\ncomputadoras podemos leer data, modificar data y crear nueva data. Toda la data\nes almacenada como secuencias largas de los famosos <em>bits</em> - esas secuencias de\nunos y ceros que viste en Matrix.</p>\n<p>Las computadoras manejan billones de bits. Para hacer más fácil el manejo de\ngrandes cantidades de bits, los podemos dividir en \"pedazos\" que representan\npiezas de información. En un entorno JavaScript, estos pedazos son llamados\n<em><strong>values</strong></em> (valores en español). Cada <em>value</em> tiene un <em>data type</em> (tipo de\ndato) que determina su rol. En JavaScript existen cinco (5) tipos de datos\nprimitivos:</p>\n<ol>\n<li><code>number</code> (número).</li>\n<li><code>string</code> (cadena).</li>\n<li><code>boolean</code> (booleano).</li>\n<li><code>undefined</code> (indefinido).</li>\n<li><code>null</code> (nulo).</li>\n</ol>\n<p>La data y los tipos de datos forman las bases de cualquier lenguaje de\nprogramación. Nos permiten organizar información y determinar cómo ejecutar el\nprograma. En esta lección aprenderás a definir y manipular estos tipos de datos.</p>\n<h2 id=\"1-numbers\">1. Numbers</h2>\n<p>Los <em>values</em> de tipo <code>number</code> son, sin sorpresa alguna, valores numéricos. Es\ndecir, pedazos de data que representan información numérica se representan con\nel tipo <code>number</code>. Esto incluye números positivos, negativos, enteros y\ndecimales. Además, el tipo de datos <code>number</code> tiene tres valores simbólicos:\n<code>+Infinity</code>, <code>-Infinity</code> y <code>NaN</code> (no-un-número).</p>\n<p>Veamos varios ejemplos. Abre tu consola (recuerda que lo haces haciendo click\ncon el botón derecho del mouse -&gt; inspect -&gt; console) y escribe los siguientes\nnúmeros. Al hacerlo, la consola te regresa el número de vuelta.</p>\n<pre><code class=\"language-js\">13\n// retorna: 13\n\n-9.81\n// retorna: -9.81\n</code></pre>\n<p>También puedes hacer uso de la notación científica para números muy grandes o\nmuy pequeños, añadiendo una \"e\" de \"exponente\", seguido por el exponente del\nnúmero:</p>\n<pre><code class=\"language-js\">5e10\n// retorna: 50000000000\n\n-2.998e8\n// retorna: -299800000\n</code></pre>\n<h3 id=\"operadores-aritméticos\">Operadores Aritméticos</h3>\n<p>Lo principal que se hace con los números es aritmética. Sigamos explorando el\ncomportamiento del tipo de dato <code>number</code> en tu consola. Escribe el siguiente\nejemplo en tu consola y confirma que tienes el mismo resultado:</p>\n<pre><code class=\"language-js\">100 + 4 * 11\n// retorna: 144\n</code></pre>\n<p>Los símbolos <code>+</code> y <code>*</code> son llamados <em>operators</em> (operadores). El primero\nrepresenta la suma y el segundo la multiplicación. Al poner un operador entre\ndos valores, se aplicará la operación a esos valores y producirá un nuevo valor.\nComo ves, la multiplicación ocurre primero. Pero como en matemáticas, puedes\ncambiar esto encerrando en paréntesis la suma.</p>\n<pre><code class=\"language-js\">(100 + 4) * 11\n// retorna: 1144\n</code></pre>\n<p>Para la resta existe el operador <code>-</code>, y la división se puede hacer con el\noperador <code>/</code>. Veamos más ejemplos (recuerda hacerlos en tu consola también!):</p>\n<pre><code class=\"language-js\">12345 / 250\n// retorna: 49.38\n\n1234 + 57 * 3 - 31 / 4\n// retorna: 1397.25\n\n100 / 0\n// retorna: Infinity\n\n100 / -0\n// retorna: -Infinity\n\n1000 * Infinity\n// retorna: Infinity\n\n0/0\n// retorna: NaN\n\nInfinity - Infinity\n// retorna: NaN\n</code></pre>\n<p>También existe un operador aritmético más, que podrías no reconocer\ninmediatamente. El símbolo <code>%</code> es usado para representar la operación <em>residuo</em>.\nX % Y resulta en el residuo de dividir X entre Y. Por ejemplo, 314 % 100 produce\n14 (porque 100 multiplicado por 3 + 14 = 314), y 144 % 12 da 0 (porque 12\nmultiplicado por 12 + 0 = 144). Verás a menudo este operador referido como\n<em>módulo</em>, aunque técnicamente residuo es más preciso.</p>\n<pre><code class=\"language-js\">5 % 3\n// retorna: 2\n\n7 % 2\n// retorna: 1\n</code></pre>\n<h2 id=\"2-strings\">2. Strings</h2>\n<p>El siguiente <em>data type</em> básico es el <code>String</code> (<em>cadena</em> en español, ya que hace\nreferencia a <em>cadena de caracteres</em>). Es el tipo de dato que\nutilzamos para representar texto. Se declaran al poner el contenido entre\ncomillas.</p>\n<p>Abre tu consola y escribe lo siguiente:</p>\n<pre><code class=\"language-js\">\"Hola, mi nombre es Michelle\"\n// retorna: \"Hola, mi nombre es Michelle\"\n\n'Soy desarrolladora web'\n// retorna: \"Soy desarrolladora web\"\n\n\"123\"\n// retorna: \"123\"\n</code></pre>\n<p>Tanto las comillas simples como las dobles pueden ser usadas para declarar\n<code>strings</code>, siempre y cuando coincidan al principio y al final. Casi cualquier\ncosa puede colocarse entre comillas, y JavaScript creará un <em>string value</em> de\nesa cosa.</p>\n<hr>\n<p><strong>Pro tip</strong>:</p>\n<p>Podemos usar tanto comillas simples (<code>'</code>) como dobles (<code>\"</code>) para delimitar\nnuestros strings, pero por convención, normalmente en cada proyecto se elige\nusar o una u otra y tratamos de ser consistentes. Esto ayuda a la <em>claridad</em> y\n<em>mantenibilidad</em> del código a largo plazo. En nuestro caso, vamos a elegir las\ncomillas simples de aquí en adelante.</p>\n<hr>\n<p>Existen un par de caracteres en los <code>strings</code> que tienen un\ncomportamiento especial. Por ejemplo, cuando una diagonal invertida (<code>\\</code>) se\nencuentra dentro de un texto entre comillas, indica que el carácter siguiente\ntiene un significado especial. Esto se denomina <em>escapar el carácter</em>. Cuando el\ncarácter <code>n</code> sigue a una diagonal invertida (backslash - <code>\\</code>), se interpreta\ncomo una nueva línea. Similarmente, una <code>t</code> después de la diagonal invertida\nsignifica un tab. Escribe los siguientes textos en tu consola (recuerda siempre\ncolocarlos entre comillas, sean simples o dobles).</p>\n<pre><code class=\"language-js\">'Esta es la primera línea \\n Y esta la segunda'\n// retorna: \"Esta es la primera línea\n//            Y esta la segunda\"\n\n'Mi lenguaje favorito es \\t JavaScript'\n// retorna: \"Mi lenguaje favorito es    JavaScript\"\n</code></pre>\n<p>Cuando una comilla es precedida por una diagonal invertida, la comilla no\nterminará la cadena sino que será parte de ella.</p>\n<pre><code class=\"language-js\">'Yo \\'estudio\\' en Laboratoria'\n// retorna: \"Yo 'estudio' en Laboratoria\"\n</code></pre>\n<p>Existen, por supuesto, situaciones en las que querrás que una diagonal invertida\nsea sólo eso en una cadena de texto, no un código especial. Si dos diagonales\ninvertidas están juntas, se volverán una, y sólo eso quedará como resultado en\nel valor de la cadena.</p>\n<pre><code class=\"language-js\">'Un carácter de nueva línea es escrito \\'\\\\n\\'.'\n// retorna: \"Un carácter de nueva línea es escrito '\\n'.\"\n</code></pre>\n<p>Las cadenas de texto no pueden ser divididas numéricamente, multiplicadas, o\nrestadas, pero el carácter + puede ser usado en ellas. No suma, sino que\nconcatena; pega dos <code>strings</code>. La siguiente línea produce el <code>string</code>\n\"concatenar\":</p>\n<pre><code class=\"language-js\">'con' + 'cat' + 'e' + 'nar'\n// retorna: \"concatenar\"\n</code></pre>\n<p>Ten cuidado mezclando operaciones entre <em>numbers</em> y <em>strings</em>. Por ejemplo,\nmultiplicar un <em>number</em> por un <em>string</em> resulta en NaN.</p>\n<pre><code class=\"language-js\">'hola' * 3\n// retorna: NaN\n</code></pre>\n<p>Hay más maneras de manipular <code>strings</code>, que veremos más adelante.</p>\n<h3 id=\"operadores-unarios\">Operadores Unarios</h3>\n<p>No todos los operadores son símbolos. Algunos son escritos como palabras. Un\nejemplo es el operador <code>typeof</code>, que produce una cadena de caracteres (<em>string</em>)\nque representa el tipo del valor que le pasaste.</p>\n<pre><code class=\"language-js\">typeof 4.5\n// retorna: \"number\"\n\ntypeof 'hola'\n// retorna: \"string\"\n\ntypeof NaN\n// retorna: \"number\"\n\ntypeof Infinity\n// retorna: \"number\"\n</code></pre>\n<p>Fíjate que verificamos que <em>NaN</em> e <em>Infinity</em> son del tipo <code>number</code> (de valor\nsimbólico), tal como lo mencionamos anteriormente.</p>\n<p>Los otros operadores que hemos visto operaban sobre dos valores, pero <code>typeof</code>\nsólamente toma uno. Los operadores que usan dos valores son llamados operadores\n<em>binarios</em>, mientras que aquellos que sólo toman uno son llamados operadores\n<em>unarios</em>.</p>\n<p>El operador menos (<code>-</code>) puede usarse tanto como operador binario como operador\nunario.</p>\n<pre><code class=\"language-js\">- (10 - 2)\n// retorna: -8\n</code></pre>\n<h2 id=\"3-booleans\">3. Booleans</h2>\n<p>A menudo, necesitarás un valor que simplemente distinga entre dos posibilidades,\ncomo \"sí\" y \"no\" o \"encendido\" y \"apagado\". Para esto, JavaScript tiene un tipo\nde dato <em>boolean</em>, que tiene solo dos valores: <em>true</em> (verdadero) y <em>false</em>\n(falso).</p>\n<h3 id=\"operadores-comparativos\">Operadores comparativos</h3>\n<p>Realiza esta comparación en tu consola:</p>\n<pre><code class=\"language-js\">3 &gt; 2\n// retorna: true\n\n2 &gt; 3\n// retorna: false\n\ntypeof (3 &gt; 2)\n// retorna: \"boolean\"\n\ntypeof (2 &gt; 3)\n// retorna: \"boolean\"\n</code></pre>\n<p>Los signos <code>&gt;</code> y <code>&lt;</code> son los símbolos tradicionales para \"mayor que\" y \"menor\nque\", respectivamente. Estos son operadores binarios (porque operan sobre dos\nvalores). Aplicarlos resulta en un valor de tipo <em>boolean</em> que indica si son\nciertos.</p>\n<p>Los <code>strings</code> pueden ser comparados de la misma manera.</p>\n<pre><code class=\"language-js\">\"Aardvark\" &lt; \"Zoroaster\"\n// retorna: true\n</code></pre>\n<p>La manera en que los <code>strings</code> son ordenadas es más o menos alfabéticamente: las\nletras mayúsculas son siempre \"menores\" que las minúsculas, así que <code>'Z' &lt; 'a'</code>\nes <em>true</em>, y los caracteres no alfabéticos (<code>!</code>, <code>-</code>, y así por el estilo) son\ntambién incluidos en el ordenamiento. La comparación real está basada en el\nestándar <a href=\"https://unicode-table.com/en/#control-character\" target=\"_blank\">Unicode</a>.</p>\n<pre><code class=\"language-js\">'Zeyla' &lt; 'ana'\n// retorna: true\n\n'Zeyla' &lt; '!na'\n// retorna: false\n</code></pre>\n<p>Otros operadores similares son &gt;= (mayor o igual que), &lt;= (menor o igual que),\n== (igual que), y != (no es igual que).</p>\n<pre><code class=\"language-js\">'Itchy' == 'Itchy'\n// retorna: true\n\n'Itchy' != 'Scratchy'\n// retorna: true\n\n5 == 5\n// retorna: true\n\n10 != 'diez'\n// retorna: true\n</code></pre>\n<p>Sólo existe un valor en JavaScript que no es igual a sí mismo, y este es NaN,\nque significa \"no es un número\".</p>\n<pre><code class=\"language-js\">NaN == NaN\n// retorna: false\n</code></pre>\n<p>La intención de NaN es representar el resultado de un cálculo sin sentido y como\ntal, no es igual al resultado de cualquier otro cálculo sin sentido.</p>\n<h3 id=\"operadores-lógicos\">Operadores Lógicos</h3>\n<p>Hay también algunas operaciones que pueden ser aplicadas a los valores\n<code>Booleans</code>. JavaScript soporta tres operadores lógicos: <em>and</em>, <em>or</em> y <em>not</em>.\nEstos pueden ser usados para \"razonar\" con los <code>Booleans</code>.</p>\n<p>El operador <code>&amp;&amp;</code> representa la operación lógica <em>and</em> (\"y\"). Es un operador\nbinario, y su resultado es <em>true</em> (verdadero) sólo si los dos valores dados son\nverdaderos. El operador <code>||</code> denota la operación lógica or (\"o\"). Devuelve\nverdadero si cualquiera de los dos valores dados es verdadero. <em>Not</em> (Negación)\nes escrito como un símbolo de admiración <code>!</code>. Es un operador binario que voltea\nel valor que se le de; !true produce false y !false produce true. Veamos unos\nejemplos:</p>\n<pre><code class=\"language-js\">true &amp;&amp; true\n// retorna: true\n\ntrue &amp;&amp; false\n// retorna: false\n\nfalse &amp;&amp; false\n// retorna: false\n\ntrue || true\n// retorna: true\n\ntrue || false\n// retorna: true\n\n!true\n// retorna: false\n\n!false\n// retorna: true\n</code></pre>\n<p>El último operador lógico del que aprenderás no es unario, ni binario, sino\nternario, opera en tres valores. Este es escrito con un símbolo de interrogación\ny dos puntos, como sigue:</p>\n<pre><code class=\"language-js\">true ? 1 : 2\n// retorna: 1\n\nfalse ? 1 : 2\n// retorna: 2\n</code></pre>\n<p>Este es llamado el operador condicional (o algunas veces el operador tenario\ndado que es el único operador de este tipo en el lenguaje). El valor a la\nizquierda del signo de interrogación \"escoge\" cuál de los otros dos valores\nresultará. Cuando es verdadero, el valor central es escogido, y cuando es falso,\nel valor de la derecha se da como resultado.</p>\n<h2 id=\"4-null-y-undefined\">4. Null y undefined</h2>\n<p>Existen dos valores especiales, escritos <code>null</code> y <code>undefined</code>, que son usados\npara denotar la ausencia de un valor significativo. Son valores en sí mismos,\npero no poseen ninguna información. Muchas operaciones en el lenguaje que no\nproducen un valor con significado (lo verás después) producen <code>undefined</code>\nsimplemente porque tienen que producir algún valor.</p>\n<p>La diferencia en el significado entre <code>undefined</code> y <code>null</code> es un accidente del\ndiseño de JavaScript, y no importa la mayoría del tiempo.</p>\n<p>Entender la diferencia entre <code>undefined</code> y <code>null</code> (sí hay una diferencia\nsemántica) es importante, y más sencillo de lo que parece. Ambos valores denotan\nla ausencia de un valor, pero en un caso podríamos decir que es <em>intencional</em>\n(<code>null</code>) y en el otro no (<code>undefined</code>).</p>\n<p>El valor <code>undefined</code> significa que no se ha <em>asignado</em> un valor, a diferencia de\n<code>null</code>, que significa que hemos <em>asignado</em> el valor <code>null</code>. Esto puede ser muy\nútil para diferenciar estados en operaciones asíncronas, ... es común que\n<code>undefined</code> signifique que la operación no ha completado aún, mientras que\n<code>null</code> significa que completó pero retornó un valor nulo.</p>\n<h3 id=\"conversión-automática-de-tipo\">Conversión automática de tipo</h3>\n<p>Cuando un operador es aplicado al tipo \"incorrecto\" de valor, JavaScript\nconvertirá silenciosamente el valor en el tipo de dato que espera, usando un\nconjunto de reglas que a menudo no son lo que tú quieres o esperas. Esto es\nllamado <em>coerción de tipo</em>. Mira estos ejemplos:</p>\n<pre><code class=\"language-js\">8 * null\n// retorna: 0\n\n'5' - 1\n// retorna: 4\n\n'5' + 1\n// retorna: 51\n\n'cinco' * 2\n// retorna: NaN\n\nfalse == 0\n// retorna: true\n</code></pre>\n<p>El null en la primera expresión se vuelve 0, y el \"5\" en la segunda expresión se\nconvierte en 5 (de string a number). Aún así, en la tercera expresión, + intenta\nhacer concatenación de strings antes de una suma numérica, así que el 1 es\nconvertido en \"1\" (de number a string). Cuando algo que no se corresponde con un\nnúmero de manera obvia (como \"cinco\" o undefined) es convertido a un número, el\nvalor resultante es NaN. Las siguientes operaciones aritméticas sobre NaN\nseguirán produciendo NaN. Por eso, en la cuarta expresión, \"cinco\" * 2 retorna\nNaN.</p>\n<p>En el caso de la quinta expresión, cuando comparamos valores que tienen tipos de\ndato diferentes, JavaScript usa un complicado y confuso conjunto de reglas para\ndeterminar qué hacer. En la mayoría de los casos, sólo trata de convertir uno de\nlos valores al tipo de dato del otro valor. Sin embargo, cuando null o undefined\nestán en cualquier lado de la operación, resulta verdadero sólo en el caso de\nque los dos lados sean null o undefined.</p>\n<p>Siguiendo con la quinta expresión, las reglas para convertir cadenas y números a\nBooleanos dicen que 0, NaN y la cadena vacía (\"\") cuentan como <em>false</em>, mientras\nque todos los demás valores cuentan como <em>true</em>. Debido a esto, las siguientes\nexpresiones retornan <em>true</em>:</p>\n<pre><code class=\"language-js\">false == 0\n// retorna: true\n\n'' == 0\n// retorna: true\n</code></pre>\n<p>Para casos en el que no quieres que ocurra ninguna conversión automática de\ntipos, existen dos operadores extra: === y !==. El primero prueba si un valor es\nprecisamente igual a otro, y el segundo si no es precisamente igual. Por lo\ntanto, al cambiar de == a === las mismas expresiones anteriores, tenemos el\nresutado contrario: <em>false</em>:</p>\n<pre><code class=\"language-js\">false === 0\n// retorna: false\n\n'' === 0\n// retorna: false\n</code></pre>\n<hr>\n<h2 id=\"notas-sobre-comparaciones-de-igualdaddesigualdad\">Notas sobre comparaciones de igualdad/desigualdad</h2>\n<p>A continuación veremos algunas peculiaridades sobre los operadoradores de\nigualdad (<code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code>). Al final de la lectura te dejamos como\nreferencia el link a la documentación oficial de operadores y expresiones en MDN\nque recomendamos <em>leer</em> (o por lo menos ojear).</p>\n<h3 id=\"diferencia-entre--y-\">Diferencia entre <code>==</code> y <code>===</code></h3>\n<h4 id=\"algoritmo-de-\">Algoritmo de <code>==</code></h4>\n<p>Cuando se evalúan dos valores con este operador, se sigue la secuencia a\ncontinuación para determinar el resultado:</p>\n<ul>\n<li>Si son del mismo tipo, entonces, se prueban con ===.</li>\n<li>Si son de diferente tipo.<ul>\n<li>Si uno es null y otro undefined, retorna true.</li>\n<li>Si uno es string y otro number, se convierte el string, y se evalúan como\nnúmeros.</li>\n<li>Si uno es booleano, se transforma, true en 1 y false en 0, y se evalúan.</li>\n<li>Si uno es un object y otro un number o string, convierte el objeto a\nprimitivo.</li>\n<li>En otros casos, devuelve false.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">null == undefined // true\n10 == '10'        // true\ntrue == 1         // true\n[10] == 10        // true\n[] == []          // false\n</code></pre>\n<h4 id=\"algoritmo-de--1\">Algoritmo de <code>===</code></h4>\n<p>Esta igualdad es más estricta con sus resultados, utilizando la siguiente\nsecuencia para determinar el resultado:</p>\n<ul>\n<li>Si tienen diferentes tipos, devuelve false.</li>\n<li>Si ambos son null, devuelve true.</li>\n<li>Si ambos son undefined, devuelve true.</li>\n<li>Si uno o ambos son NaN, devuelve false.</li>\n<li>Si ambos son true o false, devuelve true.</li>\n<li>Si ambos son number y tienen el mismo valor, devuelve true.</li>\n<li>Si ambos son string y tienen el mismo valor, devuelve true.</li>\n<li>En otros casos, devuelve false.</li>\n</ul>\n<pre><code class=\"language-js\">21 === \"21\"         // false\nundefined === null  // false\nNaN === NaN         // false\n[10] === 10         // false\ntrue === 1          // false\n[] === []           // false\n'10' === '10'       // true\n</code></pre>\n<p>Podrías tener lo siguiente en cuenta para saber cuál operador utilizar:</p>\n<ul>\n<li>Si cualquiera de los valores es boolean, utiliza <code>===</code>.</li>\n<li>Si no tienes claro si los valores son convertidos por coerción, usa <code>===</code>.</li>\n<li>En otros casos podrías usar con seguridad <code>==</code>.</li>\n</ul>\n<blockquote>\n<p>Nota: Por convención y una buena práctica la comunidad promueve el uso de\n<code>===</code>.</p>\n</blockquote>\n<h3 id=\"desigualdades\">Desigualdades</h3>\n<p>Siempre el resultado de evaluar una desigualdad es un booleano. Los siguientes\noperadores son utilizados para comparar desigualdades:</p>\n<pre><code class=\"language-js\">&lt;  → Menor\n&gt;  → Mayor\n&lt;= → Menor Igual\n&gt;= → Mayor Igual\n</code></pre>\n<p>Casos de uso:</p>\n<ul>\n<li>Si alguno es un <code>object</code>, se convierte a primitivo y se evalúa.</li>\n<li>Si ambos son <code>string</code>, se evalúa el orden de los caracteres alfabéticamente.</li>\n<li>Si ambos son <code>number</code>, se evalúa.</li>\n<li>En otros casos es false.</li>\n</ul>\n<pre><code class=\"language-js\">[10] &lt; 9    // false, caso 1\n\"a\" &lt; \"b\"   // true, caso 2\n10 &gt;= 10    // true, caso 3\n</code></pre>\n<h2 id=\"lecturas-complementarias\">Lecturas complementarias</h2>\n<p><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\" target=\"_blank\">Expresiones y Operadores - MDN</a></p>\n",
          "order": 0,
          "durationString": "1h"
        },
        "02-variables": {
          "title": "Variables",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "body": "<p>El texto a continuación se basa en gran medida, con ciertos ajustes, en el\ncapítulo 2 de <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>, de Marijn\nHaverbeke, 2014. Traducción en <a href=\"http://hectorip.github.io/Eloquent-JavaScript-ES-online/chapters/01_values.html\" target=\"_blank\">Español</a>\ndisponible gracias a <a href=\"https://github.com/hectorip\" target=\"_blank\">hectorip</a>.</p>\n<h2 id=\"variables\">Variables</h2>\n<p>Ya conoces los tipos de datos más comunes en JavaScript. Sabes crear, combinar y\ntransformar <code>numbers</code>, <code>strings</code> y <code>booleans</code>. Pero, ¿qué podemos hacer con\nesto? Hasta ahora, todo lo que has trabajado ha sido para uso inmediato. Es\ndecir, los nuevos valores que generamos deben ser inmediatamente utilizados o se\npierden. Sigue en tu consola el siguiente ejemplo:</p>\n<pre><code class=\"language-js\">'Hola, mi nombre es ' + 'Michelle' + ' y tengo ' + 19 + ' años';\n// retorna: \"Hola, mi nombre es Michelle y tengo 19 años\"\n</code></pre>\n<p>Si quisiera utilizar ese <code>string</code> de nuevo, digamos porque Michelle cumplió años\ny ahora queremos que diga 20 años en lugar de 19, no lo podemos hacer. Se ha\nperdido.</p>\n<p>Para atrapar y mantener los valores, JavaScript proporciona una cosa llamada\n<code>variable</code>. Se utiliza así:</p>\n<pre><code class=\"language-js\">var age = 19;\n// retorna: undefined\n</code></pre>\n<p>La palabra clave (<em>keyword</em>) <code>var</code> indica que esta frase va a definir una\nvariable. Es seguida por el nombre de la variable (el nombre <em>age</em>) y, si\nqueremos asignarle de inmediato un valor, le sigue el operador <code>=</code> (operador de\nasignación) y una expresión (el número <code>19</code>).</p>\n<hr>\n<p>NOTA: En este primer ejemplo hemos usado <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/var\" target=\"_blank\"><code>var</code></a>,\nque a día de hoy se considera una manera un poco anticuada de declarar\nvariables. Desde ES6 (ES2015), preferimos usar o <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/let\" target=\"_blank\"><code>let</code></a>\n(para declarar variables a las que después necesitemos <em>reasignar</em> un valor\ndiferente) o <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/const\" target=\"_blank\"><code>const</code></a>\n(para declarar variables que no se van a reasignar), ambas ahora con ámbito\n(<em>scope</em>) de bloque, como veremos más adelante.</p>\n<hr>\n<p>La declaración anterior crea una variable llamada <code>age</code> (o edad en español) y se\nusa para retener el número <code>19</code>. La consola devuelve <code>undefined</code>, pero no creas\nque es un error. Es lo que JavaScript hace cuando un comando no retorna valor.\nCuando escribes <code>12 + 5</code>, la consola retorna <code>17</code>. Pero al declarar una variable\nllamada <code>age</code> asignándole el valor <code>19</code>, no hay un valor de retorno. Por eso la\nconsola simplemente devuelve <code>undefined</code> (en el resto de los ejemplos vamos a\nomitir ese <code>undefined</code> de retorno porque no agrega mucho valor a la\nexplicación).</p>\n<p>Después de que una variable se ha definido, su nombre puede ser usado como una\n<em>expresión</em>. El valor de esa expresión es el valor que la variable alberga\nactualmente. Sigamos con el ejemplo anterior:</p>\n<pre><code class=\"language-js\">// declaramos `age` usando `const` ya que no vamos a reasignar esta variable.\nconst age = 19;\n'Hola, mi nombre es ' + 'Michelle' + ' y tengo ' + age + ' años';\n// retorna: \"Hola, mi nombre es Michelle y tengo 19 años\"\n</code></pre>\n<p>La consola nos ayuda a saber el valor de una variable. Si escribimos el nombre\nde una variable que ha sido declarada en la consola, nos devuelve su valor. Si\nesa variable no ha sido declarada, la consola retorna un error. Y si la variabla\nha sido declarada, pero no le hemos asignado valor, la consola devuleve\n<code>undefined</code>.</p>\n<pre><code class=\"language-js\">age\n// retorna: Uncaught ReferenceError: age is not defined\n//           at &lt;anonymous&gt;:1:1\n\nconst age = 19;\nage\n// retorna: 19\n\nlet weight;\nweight\n// retorna: undefined\n</code></pre>\n<p>Cuando una variable apunta a un valor, eso no quiere decir que está ligada a ese\nvalor para siempre. De hecho, se llaman variables porque su valor puede variar.\nEl operador de asignación (<code>=</code>) se puede utilizar en cualquier momento en\nvariables existentes (declaradas con <code>let</code> o <code>var</code>) para desconectarlas de su\nvalor actual y apuntarlas a uno nuevo (identificadores declarados con <code>const</code> no\nse pueden reasignar).</p>\n<pre><code class=\"language-js\">let age = 19;\n// retorna: undefined\nage = 20;\n// retorna: 20\n'Hola, mi nombre es ' + 'Michelle' + ' y tengo ' + age + ' años';\n// retorna: \"Hola, mi nombre es Michelle y tengo 20 años\"\n</code></pre>\n<p>Ten en cuenta que para reasignarle un valor, no tienes que utilizar la <em>keyword</em>\n<code>let</code> o <code>var</code> de nuevo. Solo la utilizas cuando queremos <em>declarar</em> nuevas\nvariables.</p>\n<p>Muchas veces se explica el concepto de variables con la analogía de una caja:\nlas variables son como \"caja\" en las que puedes meter algún valor que luego\npudes cambiar por otro. Sin embargo, una analogía más fiel es pensar en\nvariables como <strong>tentáculos</strong>. Las variables en realidad no es que \"contengan\"\nlos valores (como una caja); más bien los agarra (como un tentáculo). De hecho,\ndos variables pueden referirse a un mismo valor. Un programa puede acceder sólo\na los valores que todavía mantiene \"agarrados\". Cuando necesitas recordar algo,\ncreas un tentáculo nuevo para \"agarrarlo\" o cambias unos de tus tentáculos\nexistentes para agarrar lo nuevo.</p>\n<h2 id=\"nombrando-variables\">Nombrando Variables</h2>\n<p>En JavaScript, existen ciertas reglas para nombrar variables. Los nombres de\nvariables:</p>\n<ol>\n<li><strong>No</strong> pueden incluir espacios</li>\n<li><strong>No</strong> pueden ser palabras reservadas (o <em>keywords</em>), como la palabra <code>var</code></li>\n<li><strong>No</strong> pueden comenzar con números, aunque sí pueden haber números dentro del\nnombre (solo que no al comienzo)</li>\n<li><strong>No</strong> pueden contener signos de puntuación, con la excepción de los signos\n<code>$</code> y <code>_</code></li>\n</ol>\n<p>No seguir alguna de las reglas anteriores resulta en un <strong>error</strong> por parte de\nJavaScript.</p>\n<p>Además de estas reglas, existen una serie de \"sugerencias\" que debes tomar en\nconsideración a la hora de nombrar variables. Son \"sugerencias\" porque\nJavaScript no te dará un error si no las sigues. Sin embargo, son \"buenas\nprácticas\" de escritura de código que hacen que tu trabajo sea de mejor calidad.\nLas sugerencias son:</p>\n<ol>\n<li>Convención <em>camel case</em>. Dado que no podemos incluir espacios en los nombres\nde variables, una convención que se utiliza es la de <code>camel case</code>. La\nconvención dicta que el nombre de la variable empieza con una letra minúscula\ny se coloca en mayúscula la primera letra de las palabras que continúan. Por\nejemplo: <code>numberOfCandies</code> o <code>studentTechScore</code>. Se llama <em>camel case</em> porque\nsimula una joroba de camello.</li>\n<li>Utilizar nombres en inglés. La programación está basada en el inglés, así que\nes buena práctica que te acostumbres a escribir tu código en inglés.</li>\n<li>Utiliza nombres descriptivos. Al igual que las otras sugerencias, algo que\nsiempre tienes que tomar en cuenta es que otras personas leerán tu código y\ndebes hacer el esfuerzo por utilizar nombres descriptivos que ayuden al\nlector a entender mejor lo que hace tu programa.</li>\n</ol>\n<p>Veamos algunos ejemplos:</p>\n<table>\n<thead>\n<tr>\n<th>Mal nombre</th>\n<th>Problema</th>\n<th>Mejor nombre</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>age of fiends</td>\n<td>Error: contiene espacios</td>\n<td>ageOfFriends</td>\n</tr>\n<tr>\n<td>null</td>\n<td>Error: palabra clave (keyword)</td>\n<td>empty</td>\n</tr>\n<tr>\n<td>1stName</td>\n<td>Error: empieza con número</td>\n<td>firstName</td>\n</tr>\n<tr>\n<td>full.price</td>\n<td>Error: contiene \".\"</td>\n<td>fullPrice</td>\n</tr>\n<tr>\n<td>full_price</td>\n<td>no usa camel case</td>\n<td>fullPrice</td>\n</tr>\n<tr>\n<td>x</td>\n<td>no es descriptivo</td>\n<td>age</td>\n</tr>\n<tr>\n<td>altura</td>\n<td>en español</td>\n<td>height</td>\n</tr>\n</tbody></table>\n<h2 id=\"incrementar-y-disminuir\">Incrementar y Disminuir</h2>\n<p>Como programadora, muchas veces tendrás que incrementar o disminuir el valor de\nuna variable numérica por un cierto valor. Por ejemplo, puede que tengas la\nvariable <code>score</code> que registra el puntaje en un juego de fútbol. Cada vez que\nalguien anote un gol, la variable <code>score</code> debe aumentar en 1. Esto lo puedes\nhacer de la siguiente manera:</p>\n<pre><code class=\"language-js\">let score = 0;\nscore = score + 1;\nscore;\n// retorna: 1\n</code></pre>\n<p>Esto mismo se puede escribir de una manera más sencilla:</p>\n<pre><code class=\"language-js\">let score = 0;\nscore++;\nscore;\n// retorna: 1\n</code></pre>\n<p>Lo mismo podemos hacer para disminuir el valor de una variable. Por ejemplo, en\nun video juego puede que tengas una variable llamada <code>lifePoints</code> que registra\nlos \"puntos de vida\" de un jugador. El jugador parte con 100 puntos y cada vez\nque un enemigo lo golpea, pierde 25 puntos. Cada vez que toma una bebida\nregenera 10 puntos.</p>\n<pre><code class=\"language-js\">let lifePoints = 100;\nlifePoints = lifePoints - 25;\nlifePoints\n// retorna: 75\n\nlifePoints = lifePoints + 10;\nlifePoints\n// retorna: 85\n</code></pre>\n<p>Esto se puede escribir de una manera reducida, así:</p>\n<pre><code class=\"language-js\">let lifePoints = 100;\nlifePoints -= 25;\nlifePoints\n// retorna: 75\n\nlifePoints += 10;\nlifePoints\n// retorna: 85\n</code></pre>\n<p>Existen otros operadores similares a <code>+=</code> y <code>-=</code>. Por ejemplo, existen también\n<code>*=</code> y <code>/=</code>:</p>\n<pre><code class=\"language-js\">let balloons = 100;\nballoons *= 2;\nballoons\n// retorna: 200\n\nlet balloons = 100;\nballoons /= 4;\nballoons\n// retorna: 25\n</code></pre>\n<h2 id=\"el-scope-de-una-variable\">El scope de una variable</h2>\n<p>El <em>scope</em> de una variable son las ubicaciones desde donde puede ser accedida.\nPor ejemplo:</p>\n<pre><code class=\"language-js\">const foo = () =&gt; {\n  let x;\n}\n</code></pre>\n<p>Aquí, el <em>direct scope</em> (ámbito directo) de <code>x</code> es la función <code>foo</code>. Esta\nvariable podrá ser accedida desde dentro del cuerpo de la función <code>foo</code>, pero no\nfuera de ella.</p>\n<p>Tradicionalmente, en JavaScript solo podíamos crear un nuevo scope o ámbito\ncreando una nueva función. Desde ES6 (ES2015) tenemos <code>let</code> y <code>const</code>, que\nintroducen el concepto de <em>block sope</em> en JavaScript.</p>\n<h3 id=\"lexical-scoping\">Lexical scoping</h3>\n<p>Las variables en JavaScript son <em>lexically scoped</em> (de ámbito léxico), lo que\nsignifica que la estructura estática de un programa determina el ámbito de la\nvariable (no es influenciada por dónde se invoca la función). En palabras más\nsimples, significa que las variables declaradas dentro de un <em>ámbito</em> (una\nfunción, o un bloque indicado por los caracteres <code>{}</code> en el caso de <code>let</code> y\n<code>const</code>), no son visibles fuera de ese <em>ámbito</em>.</p>\n<h3 id=\"nested-scopes-ámbitos-anidados\">Nested Scopes (ámbitos anidados)</h3>\n<p>Si el ámbito está anidado dentro del ámbito directo de una variable, la variable\nserá accesible en todos los ámbitos:</p>\n<pre><code class=\"language-js\">function foo(arg) {\n  function bar() {\n    console.log(`arg: ${arg}`);\n  }\n  bar();\n}\n\nconsole.log(foo('hello')); // arg: hello\n</code></pre>\n<p>El ámbito directo de <code>arg</code> es <code>foo</code>, pero es también accesible del ámbito\nanidado <code>bar</code>. Con respecto a la anidación, <code>foo</code> es el <em>outer scope</em> (alcance o\námbito externo) y <code>bar</code> es el <em>inner scope</em> (alcance o ámbito interno).</p>\n<h3 id=\"shadowing-sombra\">Shadowing (sombra)</h3>\n<p>Si un scope declara una variable que tiene el mismo nombre que otra en un scope\ninterno de una función, el acceso a la variable externa es bloqueado en el scope\ninterno y todos los scopes anidados dentro de ella. Cambios a la variable\ninterna no afecta a la variable externa, la cual es accesible nuevamente cuando\nel scope interno es dejado. Ejemplo:</p>\n<pre><code class=\"language-js\">let x = 'global';\nfunction f() {\n  let x = 'local';\n  console.log(x); // local\n}\nf();\nconsole.log(x); // global\n</code></pre>\n<p>Dentro de la función <code>f</code>, la variable <code>x</code> es sombreada por la variable local\n<code>x</code>.</p>\n<hr>\n<h2 id=\"diferencia-entre-contexto-y-alcance\">Diferencia entre contexto y alcance</h2>\n<p>Cada invocación de función tiene tanto un alcance como un contexto asociados a\nella. Fundamentalmente, el alcance es un concepto asociado a funciones mientras\nque el contexto está asociado a objetos. En otras palabras, el alcance se\nrefiere a la accesibilidad de variables de una función cuando es invocada y es\núnico a cada invocación. En cambio, el contexto es siempre el valor de <code>this</code>\ncuya referencia es siempre el objeto que está ejecutando el código.</p>\n<h3 id=\"alcance-de-variables\">Alcance de variables</h3>\n<p>Las variables pueden ser declaradas con <strong>alcance local</strong> o <strong>alcance global</strong>,\nlo cual establece su accesibilidad desde diferentes alcances en tiempo de\nejecución. Cualquier variable definida como global será accesible en tiempo de\nejecución por cualquier alcance, ya que se habrá declarado fuera del cuerpo de\nuna función.</p>\n<p>En cambio, las variables locales existen solamente dentro del cuerpo de una\nfunción o bloque. El alcance local de una variable solo se define a partir del\ncuerpo de la función o bloque que la contiene.</p>\n<h2 id=\"declaración-de-variables-de-ámbito-local-con-let\">Declaración de variables de ámbito local con \"let\"</h2>\n<p>La sentencia <code>let</code> declara una variable de alcance local, la cual,\nopcionalmente, puede ser inicializada con algún valor y permite ser reasignada\n(a diferencia de <code>const</code>).</p>\n<p>El alcance de <code>let</code> es local al bloque, declaración o expresión donde se está\nusando. Lo anterior diferencia la expresión <code>let</code> de la palabra reservada <code>var</code>,\nla cual define una variable global o local en una función sin importar el ámbito\ndel bloque.</p>\n<p>Veamos algunos ejemplos:</p>\n<pre><code class=\"language-js\">if (x &gt; y) {\n  let gamma = 12.7 + y;\n  i = gamma * x;\n}\n</code></pre>\n<p>En el ejemplo anterior, <code>gamma</code> solo existe dentro del bloque del <code>if</code>.</p>\n<pre><code class=\"language-js\">for (let i = 0; i &lt; students.length; i++) {\n  console.log(students[i].name);\n}\n</code></pre>\n<p>Podemos utilizar <code>let</code> para que la variable sea local al alcance del bucle\n<code>for</code>. Si en su lugar usáramos <code>var</code>, la variable sería visible en toda la\nfunción que contiene dicho bucle.</p>\n<pre><code class=\"language-js\">(function () {\n  if (true) {\n    let x = 'hola mundo';\n  }\n  console.log(x);\n  // Da error, porque \"x\" ha sido definida dentro del \"if\"\n})();\n</code></pre>\n<p>En el ejemplo, <code>console.log(x)</code> no tiene acceso a <code>let x = \"hola mundo\"</code> y da\nerror porque <code>x</code> ha sido definida dentro del bloque <code>if</code>.</p>\n<p>En el siguiente ejemplo la consola imprime <code>Hola Ale</code>, ya que la variable <code>x</code> en\nel bloque del <code>if</code> se mantiene dentro de su ámbito.</p>\n<pre><code class=\"language-js\">(function () {\n  let x = 'Hola Ale';\n\n  if (true) {\n    let x = 'Hola Joan';\n  }\n  console.log(x);\n  // Imprime en consola Hola Ale\n})();\n</code></pre>\n<h2 id=\"variables-no-reasignables-con-const\">Variables no reasignables con \"const\"</h2>\n<p>Las variables de solo lectura son otra de las novedades de ECMAScript 6,\nmediante la introducción de la nueva palabra reservada <code>const</code>. Cualquier\nvariable declarada como constante no podrá ser reasignada.</p>\n<p>Veamos un ejemplo:</p>\n<pre><code class=\"language-js\">(function () {\n  const HELLO = 'hello world';\n  HELLO = 'hola mundo';\n  // Dará ERROR, ya que `HELLO` no puede ser reasignada\n})();\n</code></pre>\n<p>En este ejemplo vemos cómo desde el momento en que declaramos la constante\n<code>HELLO</code>, su valor queda blindado y el intérprete lanzará error al tratar de\nasignar un nuevo valor.</p>\n<pre><code class=\"language-js\">(function () {\n  const PI;\n  PI = 3.15;\n  // Dará ERROR, ya que ha de asignarse un valor en la declaración\n})();\n</code></pre>\n<p>Pero, ¿qué pasa cuando la variable no se asigna a un valor, sino a un objeto?\nVeámoslo con un ejemplo:</p>\n<pre><code class=\"language-js\">const USER = {\n  name: 'Caro',\n  surname: 'Covarrubias',\n  age: 20\n};\n\n/**\n * La siguiente sentencia funciona, ya que estamos modificando una propiedad\n * del objeto, pero no el valor en sí, que es la referencia al objeto, la cual\n * no cambia.\n **/\nUSER.name = 'Joan';\n\nUSER.age = 'veinte'; // modificar el tipo de una propiedad también funciona\n\nconsole.log(USER); // {name: 'Joan', surname: 'Covarrubias', age: 'veinte'}\n\n// Si tratamos de asignar un nuevo valor a `USER` veremos un error\nUSER = 'Caro Covarrubias'; // Error, no esta permitido\n</code></pre>\n",
          "order": 1,
          "durationString": "1h"
        },
        "03-comments": {
          "title": "Comentarios",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"comentarios\">Comentarios</h2>\n<p>Muchas veces, por más descriptivo que escribas tu código, es necesario brindar\nmás información para que otras personas puedan entender fácilmente cómo funciona\ntu programa. Para añadir esa información sin afectar el flujo de tu código,\nexisten los <em>comentarios</em>.</p>\n<p>Se visualizan así:</p>\n<pre><code class=\"language-js\">// Esto es un comentario de una línea\n\n/*\n  Esto es un comentario de\n  múltiples\n  líneas\n*/\n</code></pre>\n<p>La computadora ignora los comentarios por completo. Los comentarios en\nJavaScript empiezan con <code>//</code>. Todo lo que sigue a las barras diagonales (en la\nmisma línea) es ignorado por el intérprete de JavaScript. Los comentarios de\nmúltiples líneas empiezan con <code>/*</code> y cierran con <code>*/</code>. Todo lo que está entre\neso es ignorado por el programa.</p>\n<p>De tal manera, los comentarios no tienen efecto alguno sobre cómo un programa se\nejecuta. Solo están allí para proporcionar contexto. Es una <strong>buena práctica</strong>\nincluir comentarios en el código para mejorar su legibilidad.</p>\n<h2 id=\"comentarios-como-sugerencias-o-instrucciones\">Comentarios como sugerencias o instrucciones</h2>\n<p>Muchos de los ejercicios y quizzes en este curso van a incluir comentarios para\ndarte sugerencias o instrucciones.</p>\n<p>Por ejemplo, es común ver algo como:</p>\n<pre><code class=\"language-js\">const firstName = // tu código aquí\nconsole.log(/* tu código aquí */);\n</code></pre>\n<p>La idea es que borres el comentario y utilices ese espacio para escribir tu\ncódigo. No te preocupes por borrar los comentarios. Eso sí, <strong>no</strong> borres otras\npartes del programa. Si lo haces, es muy probable que no te funcione muy bien.</p>\n<p>Ahora sí, continúa con los ejercicios y quizzes de esta lección. ¡Mucha suerte!</p>\n",
          "order": 2,
          "durationString": "15min"
        },
        "04-guided-exercises": {
          "title": "Ejercicios Guiados",
          "type": "practice",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=1IZT_7EfRMw",
              "id": "1IZT_7EfRMw"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=Ix6VLiBcABw",
              "id": "Ix6VLiBcABw"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=2WtBw8eC0us",
              "id": "2WtBw8eC0us"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=E5ozw3b6iM4",
              "id": "E5ozw3b6iM4"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Ahora que ya conoces ciertos conceptos base de la programación, es hora de que\nveas las cosas que puedes crear en la práctica.</p>\n<p>Los proyectos a crear son:</p>\n<ol>\n<li><strong>Edad en segundos</strong>: Crea una web que pida al usuario su edad en años,\nutilizando <code>prompt()</code>, y devuelva su edad <strong>en segundos</strong>, utilizando\n<code>document.write()</code>.</li>\n<li><strong>Convertidor de temperatura</strong>: Crea una página web que pida al usuario la\ntemperatura en grados Celsius (°C), utilizando <code>prompt()</code>, y devuelva, en la\nconsola, la temperatura en grados Farenheit (°F) utilizando <code>console.log()</code>.\nLa fórmula matemática para pasar de °C a °F es: <code>T(°F) = ( T(°C) × 1.8 ) + 32</code>.</li>\n<li><strong>Ganancias y pérdidas</strong>: Crea un programa que pide los ingresos, los costos\ny el % de impuestos, y calcula la ganancia después de impuestos. Debe\nimprimir el resultado en la web con el símbolo $ adelante.</li>\n<li><strong>Iniciales</strong>: Crea un programa que pide el nombre y apellido al usuario. El\nusuario debe ingresar dos palabras separadas por un espacio, por ejemplo:\n\"Ana Martinez\". El programa debe devolver las iniciales <strong>en mayúsculas</strong>.\nVeamos unos ejemplos: \"ana martinez\" y \"Ana Martinez\" devuelven las iniciales\n\"AM\". \"Michelle Seguil\" y \"michelle seguil\" devuelven \"MS\".</li>\n</ol>\n<hr>\n<h2 id=\"solucionarios\">Solucionarios</h2>\n<p>A continuación, Michelle te explica cómo resolvió cada uno de los ejercicios\nanteriores.</p>\n<blockquote>\n<p>NOTA: En los siguientes videos Michelle hace uso de <code>var</code> en vez de <code>let</code> y\n<code>const</code> para declarar variables, así como otras <em>características</em> un poco\n<em>antiguas</em> de JavaScript. Estas son válidas y parte del lenguaje, aunque hoy\nen día preferiríamos usar <em>características/features</em> más modernos y apropiados\ncomo es el caso de <code>let</code> y <code>const</code>. En este caso estos videos se grabaron hace\nya un tiempo... ;-)</p>\n</blockquote>\n<h3 id=\"1-edad-en-segundos\">1. Edad en segundos</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/1IZT_7EfRMw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"2-convertidor-de-temperatura\">2. Convertidor de temperatura</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/Ix6VLiBcABw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"3-ganancias-y-pérdidas\">3. Ganancias y pérdidas</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/2WtBw8eC0us?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"4-iniciales\">4. Iniciales</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/E5ozw3b6iM4?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "1h"
        },
        "05-quiz": {
          "questions": [
            {
              "title": "1) ¿Cuál/cuáles de las siguientes opciones reflejan \"buenos\" nombres de variables (es decir, cumplen con las reglas y las sugerencias de buenas prácticas)?",
              "description": "",
              "answers": [
                "<code>const last_name = 'Martinez';</code>",
                "<code>const score = 1;</code>",
                "<code>const cosita = 'El retorno del Jedi';</code>",
                "<code>const undefined = true;</code>",
                "<code>const likesCoffee = false;</code>",
                "<code>const 2ndChild = 'Diana';</code>"
              ],
              "solution": [
                1,
                4
              ]
            },
            {
              "title": "2) Los comentarios en la programación",
              "description": "",
              "answers": [
                "Afectan el flujo del programa y se utilizan para hacer más entendible tu código",
                "No afectan el flujo del programa y se utilizan para hacer que el código corra\nmás rápido",
                "No afectan el flujo del programa y se utilizan para hacer más entendible tu\ncódigo",
                "Afectan el flujo del programa y se utilizan para hacer que el código corra\nmás rápido"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) Un ejemplo de conversión automática es",
              "description": "",
              "answers": [
                "<code>3 &gt; 3</code>",
                "<code>'hola' + ' mundo'</code>",
                "<code>true &amp;&amp; false</code>",
                "<code>'10' + 1</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "4) La diferencia entre undefined y null",
              "description": "",
              "answers": [
                "No existe, son lo mismo",
                "No importa",
                "<code>undefined</code> no tiene valor y <code>null</code> es un string vacio",
                "<code>undefined</code> significa que no se ha <em>asignado</em> un valor, mientras que <code>null</code>\nsignifica que hemos <em>asignado</em> el valor <code>null</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) De la lista a continuación, elige las dos (2) fuentes más confiables para aprender por tu cuenta",
              "description": "",
              "answers": [
                "Documentación de la Red de Desarrolladores de Mozilla (MDN)",
                "elrincondelvago.com",
                "lineadecodigo.com",
                "stackoverflow.com"
              ],
              "solution": [
                0,
                3
              ]
            },
            {
              "title": "6) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'Hola' + 'mundo'\n</code></pre>",
              "answers": [
                "<code>'Hola Mundo'</code>",
                "<code>'Hola mundo'</code>",
                "<code>'Holamundo'</code>",
                "<code>'HolaMundo'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) ¿Qué tipo de dato es el siguiente valor?",
              "description": "<pre><code class=\"language-js\">'123'\n</code></pre>",
              "answers": [
                "<code>number</code>",
                "<code>string</code>",
                "<code>boolean</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "8) ¿Qué tipo de dato es Infinity?",
              "description": "",
              "answers": [
                "<code>number</code>",
                "<code>string</code>",
                "<code>boolean</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "9) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">10 == 'diez'\n</code></pre>",
              "answers": [
                "<code>true</code>",
                "<code>false</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "10) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">10 % 3\n</code></pre>",
              "answers": [
                "<code>1</code>",
                "<code>0</code>",
                "<code>3.33</code>",
                "<code>10</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "11) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'Me \\'encanta\\' JavaScript'\n</code></pre>",
              "answers": [
                "<code>Me \\'encanta\\' JavaScript</code>",
                "<code>Me \\encanta\\ JavaScript</code>",
                "<code>Me encanta JavaScript</code>",
                "<code>Me 'encanta' JavaScript</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "12) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">typeof NaN\n</code></pre>",
              "answers": [
                "<code>'boolean'</code>",
                "<code>'undefined'</code>",
                "<code>'number'</code>",
                "<code>'string'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "13) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">4 % 15\n</code></pre>",
              "answers": [
                "<code>4</code>",
                "<code>false</code>",
                "<code>15</code>",
                "<code>%</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "14) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'diez' * 4\n</code></pre>",
              "answers": [
                "<code>NaN</code>",
                "<code>40</code>",
                "<code>'diez4'</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "15) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'50' + 1\n</code></pre>",
              "answers": [
                "<code>'501'</code>",
                "<code>51</code>",
                "<code>'50+1'</code>",
                "<code>50</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "16) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">false == ''\n</code></pre>",
              "answers": [
                "<code>true</code>",
                "<code>false</code>",
                "<code>undefined</code>",
                "<code>null</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "17) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'' === NaN\n</code></pre>",
              "answers": [
                "<code>true</code>",
                "<code>false</code>",
                "<code>undefined</code>",
                "<code>null</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "18) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'a string'.slice(1, 5)\n</code></pre>",
              "answers": [
                "<code>' str'</code>",
                "<code>' string'</code>",
                "<code>'stri'</code>",
                "<code>' strin'</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "19) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'My long string is long'.slice(5)\n</code></pre>",
              "answers": [
                "<code>'ng string is long'</code>",
                "<code>'long string is long'</code>",
                "<code>''</code>",
                "<code>'My long string is long'</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "20) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'Quiero seguir aprendiendo!!!'.slice(0, -2)\n</code></pre>",
              "answers": [
                "<code>'Quiero seguir aprendiendo!!!'</code>",
                "<code>'Quiero seguir aprendiendo!!'</code>",
                "<code>'Quiero seguir aprendiendo!'</code>",
                "<code>'iero seguir aprendiendo!!!'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "21) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'cualquier string'.charAt(100)\n</code></pre>",
              "answers": [
                "<code>null</code>",
                "<code>undefined</code>",
                "<code>''</code>",
                "<code>'g'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "22) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'Hola Mundo'.indexOf(' ')\n</code></pre>",
              "answers": [
                "<code>null</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "23) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'Hola Mundo'.indexOf('s')\n</code></pre>",
              "answers": [
                "<code>null</code>",
                "<code>undefined</code>",
                "<code>0</code>",
                "<code>-1</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "24) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">'alphabet'.toUpperCase()\n</code></pre>",
              "answers": [
                "<code>'AlphaBet'</code>",
                "<code>'ALPHABET'</code>",
                "<code>'alphabet'</code>",
                "<code>'Alphabet'</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "25) ¿Cuál es el resultado de la siguiente expresión?",
              "description": "<pre><code class=\"language-js\">typeof parseInt('543')\n</code></pre>",
              "answers": [
                "<code>543</code>",
                "<code>'543'</code>",
                "<code>'boolean'</code>",
                "<code>'number'</code>"
              ],
              "solution": [
                3
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 4,
          "durationString": "30min"
        },
        "06-exercises": {
          "title": "Ejercicios",
          "type": "practice",
          "format": "self-paced",
          "duration": 30,
          "exercises": {
            "01-coin-convert": {
              "title": "coinConvert",
              "body": "<p>En este ejercicio nos concentraremos en asignar <em>valores</em> en <em>variables</em>. El\nejercicio ya incluye un <em>boilerplate</em> (<em>plantilla</em>), con una <em>función</em>, dentro\nde la cual tendrás que re-emplazar los <em>comentarios</em> <code>/* ??? */</code> por\n<em>expresiones</em> que produzcan el <em>valor</em> que queremos almacenar (<em>asignar</em>) en\nla <em>variable</em> correspondiente.</p>\n<p>El <em>boilerplate</em> (<em>plantilla</em>):</p>\n<pre><code class=\"language-js\">const coinConvert = (dollars) =&gt; {\n  // Asigna el monto equivalente en soles\n  const soles = /* ??? */;\n\n  // Asigna el monto equivalente en pesos mexicanos\n  const pesosMexicanos = /* ??? */;\n\n  // Asigna el monto equivalente en pesos chilenos\n  const pesosChilenos = /* ??? */;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n</code></pre>\n<p>La <em>función</em> del ejercicio se llama <code>coinConvert</code> y nos permitirá convertir una\ncantidad en dólares a 3 monedas diferentes (soles, pesos mexicanos y pesos\nchilenos).</p>\n<p>Esta <em>función</em> solo recibirá un <em>argumento</em> (<code>dollars</code>), que es un <em>número</em> que\nrepresenta una cantidad en dólares, y retornará un <em>arreglo</em> (<em>array</em>) con tres\nvalores: la cantidad en soles, pesos mexicanos y pesos chilenos. Por ahora no\nnos tenemos que preocupar sobre la <em>función</em> en sí o cómo retornar un <em>arreglo</em>,\nel <em>boilerplate</em>, ya se encarga de eso. Tú solo debes concentrarte en usar\n<code>dollars</code> junto con una operación para crear los valores que queremos asignar en\nlas variables <code>soles</code>, <code>pesosMexicanos</code> y <code>pesosChilenos</code>.</p>\n<p>Utiliza las siguientes tasas de cambio:</p>\n<pre><code class=\"language-text\">1 dólar = 3.25 soles peruanos\n1 dólar = 18 pesos mexicanos\n1 dólar = 660 pesos chilenos\n</code></pre>\n<p>¡Mucha suerte!</p>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# coinConvert\n\nNeste exercício vamos nos concentrar em atribuir _valores_ em _variáveis_. O\nexercício já inclui um _boilerplate_ (_modelo_), com uma _função_, dentro da qual\nvocê terá que substituir os _comentário_ `/* ??? */` por _expressões_ que produzam\no _valor_ que queremos armazenar (_atribuir_) na variável correspondente.\n\nO _boilerplate_ (_modelo_):\n\n```js\nconst coinConvert = (dollars) => {\n  // Atribuir o valor equivalente em soles\n  const soles = /* ??? */;\n\n  // Atribuir o valor equivalente em pesos mexicanos\n  const pesosMexicanos = /* ??? */;\n\n  // Atribuir o valor equivalente em pesos chilenos\n  const pesosChilenos = /* ??? */;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n```\n\nA _função_ do exercício se chama `coinConvert` e irá nos permitir converter uma\nquantidade de dólares em 3 moedas diferentes (soles, pesos mexicanos e pesos\nchilenos).\n\nEstá _função_ irá receber apenas um _argumento_ (`dollars`), que é um _número_\nque representa um valor em dólares, e irá retornar um _array_ com três valores: a\nquantidade em soles, pesos mexicanos e pesos chilenos. Por enquanto, não\nprecisamos nos preocupar com a _função_ em si ou como retornar um _array_, o\n_boilerplate_, já está fazendo isso. Você deve se concentrar em usar a variável\n`dollars` junto com a operação para criar os valores que queremos atribuir nas\nvariáveis `soles`, `pesosMexicanos` e `pesosChilenos`.\n\nUtilize as seguintes taxas de câmbio:\n\n```text\n1 dólar = 3.25 soles\n1 dólar = 18 pesos mexicanos\n1 dólar = 660 pesos chilenos\n```\n\nBoa sorte!\n",
                "Ym9pbGVycGxhdGU=": {
                  "Y29pbkNvbnZlcnQuanM=": "const coinConvert = (dollars) => {\n  const soles = /* ??? */;\n  const pesosMexicanos = /* ??? */;\n  const pesosChilenos = /* ??? */;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n\nmodule.exports = coinConvert;\n"
                },
                "c29sdXRpb24=": {
                  "Y29pbkNvbnZlcnQuanM=": "const coinConvert = (dollars) => {\n  const soles = dollars * 3.25;\n  const pesosMexicanos = dollars * 18;\n  const pesosChilenos = dollars * 660;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n\nmodule.exports = coinConvert;\n"
                },
                "dGVzdA==": {
                  "Y29pbkNvbnZlcnQuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst coinConvert = require('../solution/coinConvert');\n\ndescribe('coinConvert()', () => {\n  it('debería retornar [162.5, 900, 33000], para $50', () => {\n    const dollars = 50;\n    const soles = dollars * 3.25;\n    const pesosMx = dollars * 18;\n    const pesosCl = dollars * 660;\n    Assert.deepEqual(coinConvert(dollars), [soles, pesosMx, pesosCl]);\n  });\n\n  it('debería retornar [325, 1800, 66000], para $100', () => {\n    const dollars = 100;\n    const soles = dollars * 3.25;\n    const pesosMx = dollars * 18;\n    const pesosCl = dollars * 660;\n    Assert.deepEqual(coinConvert(dollars), [soles, pesosMx, pesosCl]);\n  });\n\n  it('debería retornar [243.75, 1350, 49500], para  $85', () => {\n    const dollars = 85;\n    const soles = dollars * 3.25;\n    const pesosMx = dollars * 18;\n    const pesosCl = dollars * 660;\n    Assert.deepEqual(coinConvert(dollars), [soles, pesosMx, pesosCl]);\n  });\n});\n"
                }
              }
            },
            "02-restaurant-bill": {
              "title": "Cuenta de restaurante",
              "body": "<p>Imagina que has salido a comer con tus cuatro mejores amigas.  La cuenta total\ndel consumo es de 50 dólares, pero a eso debes agregarle el 10% de Impuesto al\nValor Agregado (IVA). Quieres dividir la cuenta equitativamente entre las cinco.\nPara eso vamos a crear este programa.</p>\n<p>El ejercicio incluye un <em>boilerplate</em> (<em>plantilla</em>) que ya incluye una función\n(<code>restaurantBill</code>), la cual espera recibir un <em>argumento</em> (<code>bill</code>) con el monto\nde la cuenta antes de impuestos (un <em>número</em>), y espera que retornemos un\n<em>string</em> con la cantidad que le toca pagar a cada una ya teniendo en cuenta el\n10% de impuestos (e incluyendo el símbolo de dólar).</p>\n<p>El <em>boilerplate</em> (<em>plantilla</em>):</p>\n<pre><code class=\"language-js\">const restaurantBill = (bill) =&gt; {\n  const tax = /* ??? */\n\n  /* ??? */\n\n  return /* ??? */\n};\n</code></pre>\n<p>Sigue los pasos a continuación para completar la implementación de la <em>función</em>\n<code>restaurantBill</code>.</p>\n<ol>\n<li>Asigna el resultado de multiplicar <code>bill</code> por <code>10%</code> en la variable <code>tax</code>\n(impuesto en inglés). Tip: <code>10%</code> en decimal se escribe <code>0.1</code>.</li>\n<li>Crea una variable llamada <code>total</code> y asígnale el resultado de sumar <code>bill</code> más\n  <code>tax</code>.</li>\n<li>Retorna el monto que cada una debe pagar (<code>total</code> divido entre 5), con el\nsímbolo <code>$</code> adelante (por ejemplo: <code>$11</code>). Tip: puedes usar concatenación de\n<em>strings</em> (o <em>string literals</em>) para crear un <em>string</em> con el número y el\nsímbolo <code>$</code> adelante.</li>\n</ol>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = restaurantBill(50);\nconsole.log(output); // --&gt; '$11'\n</code></pre>\n<p>¡Mucha suerte!</p>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Conta do restaurante\n\nImagine que você saiu para comer com as suas quatro melhores amigas. O valor\ntotal da conta foi de 50 reais, lembrando que você deve adicionar os 10% de\nimposta. Vocês querem dividir a conta igualmente entre as cinco. E para isso\nvocê vai criar um programa.\n\nO exercício inclui um _boilerplate_ (_modelo_) que já inclui uma função\n(`restaurantBill`), a qual irá receber um _argumento_ (`bill`) com o valor total\nda conta sem contar o imposto (um _número_), e se espera que o retorno seja uma\n_string_ com a quantidade que deve ser paga por cada uma, já incluindo os 10% de\nimposto (e incluindo o símbolo de dólar).\n\nO _boilerplate_ (_modelo_):\n\n```js\nconst restaurantBill = (bill) => {\n  const tax = /* ??? */\n\n  /* ??? */\n\n  return /* ??? */\n};\n```\n\nSiga as etapas abaixo para completar a implementação da função _função_\n`restaurantBill`.\n\n1. Atribua o resultado da multiplicação `bill` por `10%` na variável `tax`\n   (imposto em inglês). Dica: `10%` em decimal se escreve `0.1`.\n2. Crie uma variável chamada `total` e atribua o resultado da soma de `bill`\n   mais `tax`.\n3. Retorne o valor que cada uma deve pagar (`total` dividido por 5), com o\n   símbolo `$` na frente (exemplo: `$11`). Dica: pode usar concatenação de\n   _strings_ (ou _string literals_) para criar uma _string_ com o número e o\n   símbolo `$` na frente.\n\nExemplo:\n\n```js\nconst output = restaurantBill(50);\nconsole.log(output); // --> '$11'\n```\n\nBoa sorte!\n",
                "Ym9pbGVycGxhdGU=": {
                  "cmVzdGF1cmFudEJpbGwuanM=": "const restaurantBill = (bill) => {\n  const tax = /* ??? */\n\n  /* ??? */\n\n  return /* ??? */\n};\n\nmodule.exports = restaurantBill;\n"
                },
                "c29sdXRpb24=": {
                  "cmVzdGF1cmFudEJpbGwuanM=": "const restaurantBill = (bill) => {\n  const tax = bill * 0.1;\n\n  const total = bill + tax;\n\n  return `$${total / 5}`;\n};\n\nmodule.exports = restaurantBill;\n"
                },
                "dGVzdA==": {
                  "cmVzdGF1cmFudEJpbGwuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst restaurantBill = require('../solution/restaurantBill');\n\ndescribe('restaurantBill()', () => {\n  it('debería regresar $11, para 50', () => {\n    const preTaxAmount = 50;\n    const tax = preTaxAmount * 0.1;\n    const total = `$${(preTaxAmount + tax) / 5}`;\n    Assert.deepEqual(restaurantBill(preTaxAmount), total);\n  });\n\n  it('debería regresar $22, para 100', () => {\n    const preTaxAmount = 100;\n    const tax = preTaxAmount * 0.1;\n    const total = `$${(preTaxAmount + tax) / 5}`;\n    Assert.deepEqual(restaurantBill(preTaxAmount), total);\n  });\n\n  it('debería regresar $18.7, para 85', () => {\n    const preTaxAmount = 85;\n    const tax = preTaxAmount * 0.1;\n    const total = `$${(preTaxAmount + tax) / 5}`;\n    Assert.deepEqual(restaurantBill(preTaxAmount), total);\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "30min"
        }
      },
      "order": 0,
      "stats": {
        "duration": 255,
        "durationString": "4.3h",
        "exerciseCount": 2,
        "partCount": 6
      }
    },
    "02-flow-control": {
      "title": "Control de Flujo",
      "bonus": false,
      "description": "<p>Explora una de las formas más comunes de controlar el flujo de tu programa, y\npor lo tanto darle flexibilidad a lo que hace tu producto.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Opening",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\nque debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a medida\nque avanzas para validar que estás avanzando en la dirección correcta. Que te\nsirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<ul>\n<li>¿Por qué quisiéramos modificar el control de flujo de un programa?</li>\n<li>¿Cuáles son las formas de modificar el flujo de un programa? Dibuja una\nrepresentación de cada una</li>\n<li>¿Qué significa <code>else</code> de una sentencia <code>if...else</code>? Dame un ejemplo</li>\n<li>¿Cuál es la diferencia entre un <code>while</code> y un <code>do</code>?</li>\n<li>¿Cuáles son las 3 partes (sentencias) esenciales de un <code>for</code>? Dame un ejemplo</li>\n<li>¿Para qué utilizamos <code>break</code> y <code>continue</code> en un <code>for</code>? Dame un ejemplo</li>\n<li>Explica, con una analogía y en tus propias palabras, qué es una función.</li>\n<li>Dibuja el concepto de una función</li>\n<li>¿Por qué son importantes las funciones en la programación?</li>\n<li>¿Qué se entiende por <code>DRY</code>?</li>\n<li>¿Qué significa \"llamar\" a una función?</li>\n<li>¿Qué sería un \"input\" (entrada) para una función y qué sería el equivalente\ndel \"output\" (salida)?</li>\n<li>¿Qué significa el valor de <code>return</code> de una función?</li>\n<li>¿Qué sucede cuando una función tiene varios valores de <code>return</code>?</li>\n<li>¿Por qué podemos resolver problemas más complejos sabiendo\n<code>estructuras condicionales</code>, <code>estructuras repetitivas</code> y <code>funciones</code>? Dame un\nejemplo</li>\n</ul>\n",
          "order": 0,
          "durationString": "10min"
        },
        "01-conditionals-and-loops": {
          "title": "Estructuras condicionales y repetitivas",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=-rNwUIEQJnc",
              "id": "-rNwUIEQJnc"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=lKwx1RAxTfo",
              "id": "lKwx1RAxTfo"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=C5rIORzHOgg",
              "id": "C5rIORzHOgg"
            }
          ],
          "body": "<p>El texto a continuación se basa en gran medida, con ciertos ajustes, en el\ncapítulo 2 de <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn\nHaverbeke, 2014. Traducción en <a href=\"http://hectorip.github.io/Eloquent-JavaScript-ES-online/chapters/01_values.html\" target=\"_blank\">Español</a>\ndisponible gracias a <a href=\"https://github.com/hectorip\" target=\"_blank\">hectorip</a>, y del capítulo 6 de\n<a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for kids</a>,\nNick Morgan, 2015;</p>\n<h2 id=\"control-de-flujo\">Control de Flujo</h2>\n<p>La razón por la cual creamos programas de computación es para <strong>resolver\nproblemas</strong>. Un programa, hemos visto, es simplemente un conjunto de\n\"instrucciones\" que las computadoras siguen. Ese conjunto de instrucciones\nresuelven un problema. Hasta ahora hemos aprendido a obtener, representar,\nmanipular y almacenar data en <code>variables</code>. Con esto, hemos podido crear\nprogramas que resuleven problemas muy sencillos. Esto es el caso, por ejempo,\ndel programa que hicimos para transformar la temperatura en Celsius (°C) a\nFarenheit (°F). Sin embargo, para crear programas más complejos, es necesario\nexpandir nuestro conocimiento sobre el <em>control de flujo de un programa</em> y las\nestructuras que existen para modificar este flujo.</p>\n<p>Para utilizar la terminología correcta de JavaScript, de ahora en adelante,\nsustituiremos la palabra \"instrucciones\" por la palabra \"sentencias\". Una\nsentencia JavaScript es el equivalente a una oración en un leguaje humano.\nEntendemos, por lo tanto, que un programa en JavaScript es una lista de\n\"sentencias JavaScript\"; es decir, un conjunto de oraciones que le dicen al\ncomputador qué hacer.</p>\n<h3 id=\"1-flujo-en-línea-recta\">1. Flujo en línea recta</h3>\n<p>Cuando un programa contiene más de una sentencia, éstas son ejecutadas de arriba\nhacia abajo, una por una. Por ejemplo, el siguiente programa tiene tres\nsentencias: la primera le declara una variable llamada <code>name</code> con el valor del\nstring 'Michelle'; la segunda, imprime en la consola un mensaje personalizado de\nsaludo 'Hola Michelle'; y la tercera, imprime en la consola un mensaje que dice\n'Qué nombre tan largo tienes!'.</p>\n<pre><code class=\"language-js\">const name = 'Michelle';\nconsole.log('Hola ' + name);\nconsole.log('Qué nombre tan largo tienes!');\n// returns &gt; Hola Michelle\n//           Qué nombre tan largo tienes!\n</code></pre>\n<p>Una representación trivial esquemática de un flujo de control recto sería:</p>\n<p><img src=\"http://eloquentjavascript.net/img/controlflow-straight.svg\" alt=\"Flujo recto\"></p>\n<h3 id=\"2-flujo-condicional\">2. Flujo condicional</h3>\n<p>Ejecutar sentencias en línea recta no es la única opción que tenemos. Una\nalternativa es la <em>ejecución condicional</em>, en donde escogemos entre dos rutas\ndiferentes basados en un valor <code>Boolean</code>, así:</p>\n<p><img src=\"http://eloquentjavascript.net/img/controlflow-if.svg\" alt=\"Flujo condicional\"></p>\n<p>La ejecución condicional se escribe con el keyword <code>if</code> en JavaScript. La\ninstrucción <code>if</code> es la más simple de las estructuras de control de JavaScript.\nSe utiliza para ejecutar código <em>si y sólo si</em> una condición es verdadera. Un\ncondicional dice: <em>\"Si algo es verdad, haz esto\"</em>. Por ejemplo, si hiciste tu\ntarea (true), recibes un helado, pero si <strong>no</strong> hiciste tu tarea (false),\nno recibes el helado.</p>\n<p>Como muestra el ejemplo a continuación, una sentencia <code>if</code> tiene 2 partes\nprincipales: la condición y el cuerpo. La condición debe ser un valor <code>Boolean</code>\nque va entre paréntesis. El cuerpo consiste en una o más sentencias JavaScript\nque se ejecutarán si, y solo si, la condición es verdadera (<code>Boolean</code> igual a\n<code>true</code>).</p>\n<pre><code class=\"language-js\">if (condición) {\n  // Conjunto de sentencias a ejecutar\n}\n</code></pre>\n<p>Cuando necesitamos ejecutar múltiples sentencias, podemos encerrarlas en llaves\n({ y }). Las llaves agrupan las sentencias, haciéndolos valer por una sola. Una\nsecuencia de sentencias encerradas en llaves es llamada un <strong>bloque</strong> (de\ncódigo). Muchos programadores de JavaScript encierran cada cuerpo de un <code>if</code> (y\nen los bucles, como verás más adelante), en llaves. Lo hacen en nombre de la\nconsistencia y para evitar tener que añadir o quitar las llaves cuando el número\nde sentencias en el cuerpo cambie. Otros, valoran la brevedad y en el caso del\n<code>if</code> no utilizan las llaves. En este curso, siempre usaremos las llaves para\nayudarnos a organizar nuestro código.</p>\n<p>Volvamos al ejemplo anterior y agreguemos una condición antes de la sentencia\nque imprime el segundo mensaje:</p>\n<pre><code class=\"language-js\">const name = 'Michelle';\nconsole.log('Hola ' + name);\nif (name.length &gt; 7) {\n  console.log('Qué nombre tan largo tienes!');\n}\n// imprime &gt; Hola Michelle\n//           Qué nombre tan largo tienes!\n</code></pre>\n<p>Con esta modificación, antes de imprimir en la consola el segundo mensaje ('Qué\nnombre tan largo tienes!'), el programa verifica si la longitud del string\n<code>name</code> es mayor a 7. De ser así, se imprime el segundo mensaje. De no ser así,\nno se ejecuta esa sentencia. En este caso, dado que <em>Michelle</em> tiene 8\ncaracteres (letras), la condición es <code>true</code>. Por lo tanto, se imprime el segundo\nmensaje.</p>\n<p>Cambiemos un poco este ejemplo, modificando el valor de <code>name</code> a 'Ana'.</p>\n<pre><code class=\"language-js\">const name = 'Ana';\nconsole.log('Hola ' + name);\nif (name.length &gt; 7) {\n  console.log('Qué nombre tan largo tienes!');\n}\n// returns &gt; Hola Ana\n</code></pre>\n<p>En esta ocasión, la condición <strong>no</strong> es <code>true</code> (es <code>false</code>) porque la longitud\ndel nombre es 3, lo cual <strong>no</strong> es mayor a 7. Por lo tanto, el cuerpo del <code>if</code>\n<strong>no</strong> se ejecuta. De tal manera, únicamente se ejecuta el primer mensaje 'Hola\nAna'.</p>\n<h4 id=\"sentencia-if-else\"><em>Sentencia <code>if... else</code></em></h4>\n<p>A menudo no sólo tendrás código que se ejecute cuando una condición sea\nverdadera, sino también que maneje el otro caso. Este camino alternativo es\nrepresentado por la segunda flecha en el diagrama de flujo. La palabra clave\n<code>else</code> puede ser usada, junto con <code>if</code>, para crear dos rutas de ejecución\nseparadas y alternativas.</p>\n<p>Agregemos una sentencia <code>else</code> a nuestro ejemplo:</p>\n<pre><code class=\"language-js\">const name = 'Ana';\nconsole.log('Hola ' + name);\nif (name.length &gt; 7) {\n  console.log('Qué nombre tan largo tienes!');\n} else {\n  console.log('Tu nombre no es muy largo');\n}\n\n// returns &gt; Hola Ana\n//           Tu nombre no es muy largo\n</code></pre>\n<p>Como ves, el resultado de este caso es similar al anterior, solo que si <code>name</code>\n<strong>no</strong> tiene una logitud mayor a 7, existe un \"mensaje alternativo\" que se\nejecuta.</p>\n<p>Como muestra el ejemplo a continuación, las sentencias <code>if ... else</code> son\nsimilares a las sentencias <code>if</code>, pero incluyen 2 cuerpos. Si la condición es\n<code>true</code>, se ejecutan las sentencias del primer cuerpo; de lo contrario, se\nejecutan las sentencias del segundo cuerpo.</p>\n<pre><code class=\"language-js\">if (condición) {\n  Sentencias a ejecutar si condición es VERDADERA\n} else {\n  Sentencias a ejecutar si condición es FALSA\n}\n</code></pre>\n<p>Si tenemos más de dos caminos a escoger, varios pares de <code>if...else</code> pueden ser\n\"encadenados\". Aquí hay un ejemplo:</p>\n<pre><code class=\"language-js\">const num = parseInt(prompt('Dame un número', '0'));\n\nif (num &lt; 10) {\n  alert('Diste un número Pequeño');\n} else if (num &lt; 100) {\n  alert('Diste un número Mediano');\n} else {\n  alert('Diste un número Grande');\n}\n</code></pre>\n<p>El programa primero revisará si <code>num</code> es menor que 10. Si lo es, escoge ese\ncamino, muestra 'Diste un número Pequeño' en un alert box y termina. Si no lo\nes, toma el camino del <code>else</code>, que en sí mismo contiene un segundo <code>if</code>. Si la\nsegunda condición (&lt; 100) se cumple, significa que el número está entre 10 y\n100, y se muestra 'Diste un número Mediano' en un alert box. Si no lo es, el\nsegundo y último <code>else</code> es escogido, mostrando 'Diste un número Grande'.</p>\n<p>El diagrama de flujo para este programa es algo así:</p>\n<p><img src=\"http://eloquentjavascript.net/img/controlflow-nested-if.svg\" alt=\"Flujo condicional\"></p>\n<p>Veamos otro ejemplo de la aplicación de la sentencia <code>if...else</code>. Esta vez, con\nun video de otra profesora estrella de Laboratoria, Alexandra :)</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/-rNwUIEQJnc?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"utilizando-switch\"><em>Utilizando Switch</em></h4>\n<p>Es común ver código así:</p>\n<pre><code class=\"language-js\">if (variable == 'valor1') {\n  accion1();\n} else if (variable == 'valor2') {\n  accion2();\n} else if (variable == 'valor3') {\n  accion3();\n} else {\n  accionDefault();\n}\n</code></pre>\n<p>Existe una estructura llamada <code>switch</code> que está hecha para \"despachar\" de un\nmodo más directo. Desafortunadamente, la sintaxis que JavaScript usa para esto\n(que es heredada de la línea de lenguajes de programación de C/Java) es un poco\nincómoda; una cadena de sentencias <code>if</code> a menudo luce mejor. Aquí hay un\nejemplo:</p>\n<pre><code class=\"language-js\">switch (prompt('¿Cómo está el clima?')) {\n  case 'lluvioso':\n    console.log('Recuerda llevar un paraguas.');\n    break;\n  case 'soleado':\n    console.log('Viste ligero.');\n  case 'nublado':\n    console.log('Sal a la calle.');\n    break;\n  default:\n    console.log('Tipo de Clima desconocido.');\n    break;\n}\n</code></pre>\n<p>Puedes poner cualquier cantidad de etiquetas <code>case</code> dentro del bloque <code>switch</code>.\nEl programa saltará a la etiqueta que corresponda al valor que se le dio al\n<code>switch</code> o al default si no se encuentra valor que corresponda. Se empiezan a\nejecutar las sentencias desde ahí, incluso si están bajo otra etiqueta, hasta\nque se llegue a una sentencia <code>break</code> (que en español significa \"detener\").</p>\n<p>En algunos casos, como en el caso de 'soleado' en el ejemplo, esto puede ser\nusado para compartir código entre casos (recomienda salir a la calle tanto para\nclima soleado como para nublado). Pero cuidado: es fácil olvidar el break, lo\ncuál causará que el programa ejecute código que no quieres que se ejecute.</p>\n<p>A continuación Michelle te ayuda a entender este caso un poco mejor:</p>\n<p><a href=\"https://www.youtube.com//watch?v=Aa0JhU6KZXs\" target=\"_blank\"><img src=\"https://img.youtube.com/vi/Aa0JhU6KZXs/0.jpg\" alt=\"ejemplo de Switch\"></a></p>\n<h3 id=\"3-flujo-repetitivo-bucles\">3. Flujo repetitivo: Bucles</h3>\n<p>Otra forma de modificar el flujo de un programa es estructuras repetitivas,\ntambién llamadas bucles (\"loops\" en inglés). Tal como hemos visto, los\ncondicionales permiten ejecutar un conjunto de sentencias una vez si una\ncondición <em><strong>es</strong></em> verdadera. Los bucles, permiten ejecutar un código varias\nveces, dependiendo de si una condición <em><strong>sigue siendo</strong></em> verdadera.</p>\n<p>Piensa en un programa que imprima todos los números pares del 1 al 12. Una\nmanera de escribirlo sería como sigue:</p>\n<pre><code class=\"language-js\">console.log(0);\nconsole.log(2);\nconsole.log(4);\nconsole.log(6);\nconsole.log(8);\nconsole.log(10);\nconsole.log(12);\n// → 0\n// → 2\n//   … etcetera\n</code></pre>\n<p>Eso funciona, pero la idea de escribir un programa es trabajar menos, no más. Si\nnecesitamos todos los números menores que 1,000, lo anterior sería imposible de\ntrabajar. Lo que necesitamos es una forma de repetir algo de código. Esta forma\nde <strong>control de flujo</strong> es llamada bucle. El control de flujo por bucles nos\npermite regresar a cierto punto en el programa en el que estuvimos antes y\nrepetirlo con nuestro estado actual, tal como lo describe el siguiente diagrama:</p>\n<p><img src=\"http://eloquentjavascript.net/img/controlflow-loop.svg\" alt=\"Flujo bucle\"></p>\n<h4 id=\"bucles-while\">Bucles <code>while</code></h4>\n<p>El bucle más sencillo es el bucle <code>while</code> (que significa \"mientras\" en español).\nUn bucle <code>while</code> ejecuta repetidamente una serie de sentencias hasta que una\ncondición particular deja de ser verdadera. Al escribir un bucle <code>while</code>, estás\ndiciendo: <em>\"Sigue haciendo esto mientras esta condición sea verdadera. Detente\ncuando la condición se vuelva falsa.\"</em></p>\n<p>Como muestra el ejemplo a continuación, una sentencia que comienza con el\nkeyword <code>while</code> crea un bucle. Después de <code>while</code> viene una expresión en\nparéntesis que representa la condición y después un conjunto de sentencias (muy\nparecido al caso del <code>if</code>). Sin embargo, a diferencia del <code>if</code>, el bucle ejecuta\nla sentencia mientras la condición produzca un valor que sea <code>true</code>. Por eso es\nmuy importante que el conjunto de sentencias incluya algo que <em>\"cambia\"</em> para\nque la condición eventualmente sea falsa. De lo contrario, terminarás con un\nciclo infinito que nunca se detendrá, y eso usualmente es malo.</p>\n<pre><code class=\"language-js\">while (condición) {\n  // Conjunto de sentencias, donde\n  // se incluye algo que \"cambia\" para\n  // que la condición eventualmente sea FALSA\n}\n</code></pre>\n<p>Regresemos al problema de imprimir todos los números pares del 1 al 12, y\ncreemos un programa que utilice un bucle <code>while</code>:</p>\n<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n// → 0\n// → 2\n//   … etcetera hasta 12\n</code></pre>\n<p>En este caso, como queremos imprimir los números pares del 1 al 12, creamos una\nvariable <code>number</code> (es importante preguntarse <em>¿cuántas veces necesitamos\n<strong>crear</strong> la variable number?</em>), la inicializamos con el valor <code>0</code>, y la\nutilizamos en la condición. Queremos que el bloque dentro del <code>while</code> corra\nmientras el valor de <code>number</code> sea igual o menor a <code>12</code>. El cuerpo del <code>while</code>\nincluye dos sentencias: la primera, imprime el número (con <code>console.log</code>), y la\nsegunda incrementa <code>number</code> en <code>2</code> (porque queremos imprimir los pares\núnicamente). La variable <code>number</code> demuestra la forma en que una variable puede\ndar seguimiento al progreso de un programa. Cada vez que el bucle se repite,\n<code>number</code> se incrementa en <code>2</code>. Entonces, al principio de cada repetición, el\nvalor de la variable <code>number</code> es comparado con el número 12 para decidir si el\nprograma ha hecho todo el trabajo que tenía que hacer. Es importante que\nentendamos que si no modificamos el valor de <code>number</code> con la segunda sentencia,\nla condición (<code>number &lt;= 12</code>) siempre será <code>true</code> y tendremos un ciclo infinito\nque nunca se detendrá. Esto puede causar que tu computadora tenga problemas y se\ncongele.</p>\n<p>Si creas un bucle infinito en uno de los ejemplos, usualmente se te preguntará\nsi quieres detener el script después de unos cuantos segundos. Si eso falla,\ntendrás que cerrar la pestaña en la que estás trabajando, o, en otros\nnavegadores, cerrar el navegador entero para recuperarte.</p>\n<p>Veamos algunas variantes de este mismo problema para asegurarnos que entendemos\nbien cómo funciona el ciclo <code>while</code>:</p>\n<ul>\n<li>¿Cómo hacemos para imprimir los números <strong>pares</strong> del 1 al 100?: Modificamos\nla condición para que el bucle corra mientras <code>number</code> sea &lt;= 100.</li>\n</ul>\n<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 100) {\n  console.log(number);\n  number = number + 2;\n}\n// → 0\n// → 2\n//   … etcetera hasta 100\n</code></pre>\n<ul>\n<li>¿Cómo hacemos para imprimir los números <strong>impares</strong> del 1 al 12?:\nInicializamos el valor de <code>number</code> con el valor de 1 (en lugar de 0).</li>\n</ul>\n<pre><code class=\"language-js\">let number = 1;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n// → 1\n// → 3\n//   … etcetera hasta 11\n</code></pre>\n<ul>\n<li>¿Cómo hacemos para imprimir todos los números <strong>pares</strong> e <strong>impares</strong> del 1 al\n12?: En la segunda sentencia del while, incrementamos <code>number</code> en 1 (en lugar\nde 2) cada ciclo.</li>\n</ul>\n<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 1;\n}\n// → 0\n// → 1\n// → 2\n//   … etcetera hasta 12\n</code></pre>\n<h4 id=\"bucles-do\">Bucles <code>do</code></h4>\n<p>El bucle <code>do</code> es una estructura de control similar al bucle <code>while</code>. Se\ndiferencia en sólo un punto: un bucle <code>do</code> siempre ejecuta su cuerpo <strong>por lo\nmenos una vez</strong> y empieza a verificar si debería parar sólo después de la\nprimera ejecución. Para reflejar esto, la condición aparece después del cuerpo\ndel bucle. Veamos un ejemplo:</p>\n<pre><code class=\"language-js\">do {\n  const yourName = prompt('¿Quién eres?');\n} while (!yourName);\n\nconsole.log('tu nombre es ' + yourName);\n</code></pre>\n<p>Este programa te obligará a introducir un nombre. Preguntará una y otra vez\nhasta que obtenga algo que no sea una cadena vacía. Aplicar el operador <code>!</code>\nconvierte un valor a <code>Boolean</code> negándolo y todas las cadenas excepto <code>''</code> se\nconvierten a <code>true</code>. Esto significa que el bucle continúa corriendo hasta que\ndes un nombre que no sea una cadena vacía.</p>\n<h4 id=\"bucles-for\"><em>Bucles <code>for</code></em></h4>\n<p>Muchos bucles siguen el patrón de los ejemplos previos del <code>while</code>. Primero, una\nvariable “contador” es creada para dar seguimiento al progreso del bucle. Luego\nviene el bucle <code>while</code>, cuya expresión condicional normalmente verifica si el\ncontador ha alcanzado cierto límite. El final del cuerpo del bucle, el contador\nes actualizado para dar seguimiento al progreso.</p>\n<p>Debido a que este patrón es tan común, JavaScript y otros lenguajes similares\nproveen una versión un poco más corta y más completa: el bucle <code>for</code>.</p>\n<pre><code class=\"language-js\">for (let number = 0; number &lt;= 12; number = number + 2) {\n  console.log(number);\n}\n// → 0\n// → 2\n//   … etc.\n</code></pre>\n<p>Este programa es exactamente equivalente al ejemplo previo de impresión de\nnúmeros pares. El único cambio es que todas las sentencias que están\nrelacionadas con el \"estado\" del bucle están agrupadas.</p>\n<p>Los paréntesis después del keyword <code>for</code> tienen que contener dos puntos y coma\n(<code>;</code>). La parte que está antes del primer punto y coma <em>inicializa</em> el bucle,\nnormalmente al definir una variable. La segunda parte es la expresión que\n<em>verifica</em> si el bucle tiene que continuar. La parte final <em>actualiza</em> el estado\ndel bucle antes de cada iteración. En la mayoría de los casos, esto es más corto\ny claro que una construcción con <code>while</code>.</p>\n<p>Aquí está un código que calcula 2^10 (2 exponencial 10), usando el bucle <code>for</code>:</p>\n<pre><code class=\"language-js\">let result = 1;\nfor (let counter = 0; counter &lt; 10; counter = counter + 1) {\n  result = result * 2;\n}\nconsole.log(result);\n// → 1024\n</code></pre>\n<p>La representación general del bucle <code>for</code> es la siguiente:</p>\n<pre><code class=\"language-js\">for (initial setup; condition; increment){\n  Bloque de código a ejecutar\n}\n</code></pre>\n<p>El <em>initial setup</em> (por ejemplo: let counter = 0) se ejecuta antes de que se\ninicie el bucle. Generalmente se usa para crear una variable que rastrea el\nnúmero de veces que se ha ejecutado el bucle. La <em>condition</em> (counter &lt; 10) se\ncomprueba antes de cada ejecución del cuerpo de bucle. Si la condición es\nverdadera, el cuerpo es ejecutado; si es falsa, el bucle se detiene. En este\ncaso, el bucle se detendrá una vez que counter ya no sea inferior a 10. El\n<em>increment</em> (counter = counter + 1) se ejecuta después de cada ejecución del\ncuerpo de bucle. Generalmente se utiliza para actualizar la variable de bucle.\nEn nuestro ejemplo, lo usamos para agregar 1 a counter cada vez que se ejecuta\nel bucle.</p>\n<p>A continuación Alexandra te ayuda a entender el flujo de un bucle <code>for</code> que\nimprime el texto 'Hola mundo!' varias veces:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/lKwx1RAxTfo?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"forzando-la-salida-de-un-bucle\"><em>Forzando la salida de un bucle</em></h4>\n<p>Hacer que la condición del bucle produzca <em>false</em> no es la única forma de que un\nbucle termine. Podemos usar la sentencia especial <code>break</code>, utilizada en\n<code>switch</code>, que tiene el efecto de salir inmediatamente del bucle que la esté\nencerrando.</p>\n<p>El siguiente programa ilustra el uso de la sentencia <code>break</code> para salir de un\nbucle. Queremos hacer un programa que encuentre el primer número que es más\ngrande o igual que 20 y divisible por 7.</p>\n<pre><code class=\"language-js\">for (let current = 20; ; current++) {\n  if (current % 7 == 0)\n    break;\n}\nconsole.log(current);\n// → 21\n</code></pre>\n<p>Usar el operador de sobrante o módulo (%) es una forma fácil de probar si un\nnúmero es divisible por otro. Si lo es, el sobrante de la división es cero.\nTambién recuerda que <code>current++</code> es lo mismo que <code>current = current + 1</code>.</p>\n<p>El <code>for</code> en este ejemplo no tiene la parte que verifica si el bucle debe\nterminar. Esto significa que el loop nunca terminará hasta que la sentencia\n<code>break</code> que está adentro sea ejecutada.</p>\n<p>Como, hemos visto, si dejaras afuera esa sentencia <code>break</code> o accidentalmente\nescribieras una condición que siempre produzca <code>true</code>, tu programa se quedaría\natorado en un bucle infinito.</p>\n<p>La palabra clave <code>continue</code> es similar a <code>break</code> en que influencia el progreso\ndel bucle. Cuando se encuentra <code>continue</code> en el cuerpo de un bucle, el control\nsale del curpo del bucle inmediatamente y continúa en la próxima iteración del\nbucle.</p>\n<p>A continuación Michelle te ayuda explica, con un ejemplo, las aplicaciones de\n<code>break</code> y <code>continue</code> dentro de un <code>for</code>:\n<div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/C5rIORzHOgg?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"diferencias-entre-for-y-while\"><em>Diferencias entre <code>for</code> y <code>while</code></em></h4>\n<p>Puntualmente, se usa el <code>for</code> cuando sabes <em>por adelantado</em> cuantas repeticiones\nvas a realizar y el <code>while</code> cuando no lo sabes.</p>\n<p>Si decimos, \"gira el ventilador 10 veces\", de ante mano sabes que vamos a girar\nel ventilador 10 veces, por tal, el <code>for</code> seria buena idea.</p>\n<p>Si decimos: \"mientras haga calor gira el ventilador\". En realidad no sabemos de\nante mano cuantas veces vamos a girar el ventilador por que no sabemos cuanto\ntiempo tendremos calor, por ende, usar un <code>while</code> sería buena idea.</p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-loops": {
          "title": "Bucles (Loops)",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"mecanismos-que-pueden-ser-usados-con-ciclosbucles\">Mecanismos que pueden ser usados con ciclos/bucles</h2>\n<p>Los siguientes mecanismos pueden ser usados con ciclos:</p>\n<h3 id=\"break-label\"><code>break [label]</code></h3>\n<p>Sale de un ciclo.</p>\n<h3 id=\"continue-label\"><code>continue [label]</code></h3>\n<p>Detiene la iteración actual e inmediatamente ejecuta la siguiente.</p>\n<h3 id=\"labels\"><code>Labels</code></h3>\n<p>Un <code>label</code>(etiqueta) es un identificador seguido por <code>:</code>. Al inicio de un ciclo,\nun label te permite hacer <code>break</code> o <code>continue</code> incluso si está dentro anidado de\notro ciclo anidado. Cuando está al inicio de un bloque, te permite salir del\nmismo con la sentencia <code>break</code>. En ambos casos, el nombre del label se convierte\nen un argumento de <code>break</code> o <code>continue</code>. Aquí un ejemplo de <code>break</code>:</p>\n<pre><code class=\"language-js\">const findEvenNumber = arr =&gt; {\n  loop: { // label\n    for (let i = 0, l = arr.length; i &lt; l; i++) {\n      let element = arr[i];\n      if (element % 2 === 0) {\n        console.log(`Found: ${element}`);\n        break loop;\n      }\n    }\n    console.log('No even number found.');\n  }\n  console.log('DONE');\n};\n</code></pre>\n<h2 id=\"tipos-de-bucles-loops\">Tipos de bucles (loops)</h2>\n<h3 id=\"while\">while</h3>\n<p>Un ciclo while:</p>\n<pre><code class=\"language-js\">while (condition) {\n  // statement\n}\n</code></pre>\n<p>Ejecuta <code>statement</code> tantas veces como la condición se cumpla. Si la condición es\nsiempre <code>true</code>, entonces entra en un <code>infinite loop</code> (ciclo infinito).</p>\n<pre><code class=\"language-js\">// infinite loop\nwhile (1 === 1) { }\n</code></pre>\n<p>En el siguiente ejemplo, eliminamos todos los elementos del arreglo y los\nmostramos en la consola:</p>\n<pre><code class=\"language-js\">const arr = ['a', 'b', 'c'];\n\nwhile (arr.length &gt; 0) {\n  console.log(arr.shift());\n}\n\n/*\n *\n * La salida de este código será:\n * a\n * b\n * c\n *\n */\n</code></pre>\n<h3 id=\"do-while\">do-while</h3>\n<p>Un ciclo do-while:</p>\n<pre><code class=\"language-js\">do {\n  // statements\n} while (condition);\n</code></pre>\n<p>Ejecuta los <code>statements</code> al menos una vez y luego tantas veces como se cumpla la\ncondición. Por ejemplo:</p>\n<pre><code class=\"language-js\">const pattern = /^[0-9]+$/;\nlet line;\ndo {\n  line = prompt('Enter a number:');\n} while(!pattern.test(line));\n</code></pre>\n<h3 id=\"for\">for</h3>\n<p>En un ciclo for:</p>\n<pre><code class=\"language-js\">for ([init]; [condition]; [post_iteration]) {\n  // statements\n}\n</code></pre>\n<p><code>init</code> es ejecuta una vez antes que inicie el ciclo, que ejecuta <code>statements</code>\ntantas veces como <code>condition</code> sea <code>true</code>. Puedes usar <code>let</code> para declarar\nvariables, pero el scope de dicha variable solo será dentro del cliclo.\n<code>post_iteration</code> se ejecuta luego de cada iteración. Por ejemplo:</p>\n<pre><code class=\"language-js\">const arr = ['a', 'b', 'c'];\n\nfor (let i = 0, l = arr.length; i &lt; l; i++) {\n  console.log(arr[i]);\n}\n\n/*\n *\n * El resultado de este código es:\n * a\n * b\n * c\n *\n */\n</code></pre>\n",
          "order": 2,
          "durationString": "15min"
        },
        "02-practical-cases": {
          "title": "Casos prácticos",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=jmKiCMKM33A",
              "id": "jmKiCMKM33A"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=ckaXH2IhUrw",
              "id": "ckaXH2IhUrw"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Al igual que hemos hecho antes, es hora de aplicar los conceptos aprendidos para\nresolver problemas.</p>\n<p>A continuación tendrás varios problemas que debemos resolver. Intenta\nresolverlos primero por tu cuenta. Más abajo encontrarás las soluciones de\nMichelle. Después de haberlo intentado, compara tus soluciones con las de\nMichelle.</p>\n<h3 id=\"1-fizzbuzz\">1. FizzBuzz</h3>\n<p>Escribe un programa que use <code>console.log</code> para imprimir todos los números del 1\nal 100, con dos excepciones:</p>\n<ul>\n<li>Para números divisibles por 3, imprime \"Fizz\" en vez del número</li>\n<li>Para números divisibles por 5 (pero no por 3), imprime \"Buzz\".</li>\n</ul>\n<p>Cuando tengas eso funcionando, modifica tu programa para imprimir \"FizzBuzz\"\npara los números que sean divisibles tanto por 3 como por 5 (y que siga\n  imprimiendo \"Fizz\" o \"Buzz\" para números divisibles por sólo uno de ellos).</p>\n<h3 id=\"2-tablero-de-ajedrez\">2. Tablero de Ajedrez</h3>\n<p>Crea un programa que cree un <code>string</code> que represente una cuadrícula de 8x8,\nusando el salto de línea como separador. En cada posición de la cuadrícula debe\nhaber un espacio o un carácter \"#\". Los caracteres deberían formar un tablero de\najedrez.</p>\n<p>Pasar ese <code>string</code> a console.log debería mostrar algo como esto:</p>\n<pre><code class=\"language-js\"> # # # #\n# # # #\n # # # #\n# # # #\n # # # #\n# # # #\n # # # #\n# # # #\n</code></pre>\n<p>Cuando tengas un programa que genere este patrón, define una variable <code>size</code> = 8\ny cambia el programa de tal manera que trabaje para cualquier tamaño, que sea\nproporcionado por un <code>prompt()</code> produciendo una cuadrícula del ancho y alto\ndado.</p>\n<h2 id=\"solucionarios\">Solucionarios</h2>\n<p>A continuación, Michelle te explica cómo resolvió cada uno de los ejercicios\nanteriores.</p>\n<h3 id=\"1-fizzbuzz-solucionario\">1. FizzBuzz: Solucionario</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/jmKiCMKM33A?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"2-tablero-de-ajedrez-solucionario\">2. Tablero de Ajedrez: Solucionario</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ckaXH2IhUrw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "1h"
        },
        "03-functions": {
          "title": "Funciones",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=Y0NgsjdumS8",
              "id": "Y0NgsjdumS8"
            }
          ],
          "body": "<p>El texto a continuación se basa en gran medida, con ciertos ajustes, en los\ncapítulos 2 y 3 de <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn\nHaverbeke, 2014. Traducción en <a href=\"http://hectorip.github.io/Eloquent-JavaScript-ES-online/chapters/01_values.html\" target=\"_blank\">Español</a>\ndisponible gracias a <a href=\"https://github.com/hectorip\" target=\"_blank\">hectorip</a>, y del capítulo 8 de\n<a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for kids</a>,\nNick Morgan, 2015;</p>\n<h2 id=\"dry\">DRY</h2>\n<p>En la programación existe un concepto que escucharás más de una vez. Dice así:\n<em>\"Don't Repeat Yourself\"</em>, y es comunmente conocido como <code>DRY</code>. En español\nsignifica <em>\"no te repitas\"</em>. Si estás copiando y pegando pedazos de código, o si\ntienes sentencias de código similares a lo largo de tu programa, significa que\nte estás repitiendo. Ya hemos visto este concepto en práctica con el uso de\n<code>estructuras repetitivas</code> (bucles): en lugar de tener un mismo bloque de código\nrepetido, puedes sustituirlo por un <code>for</code> o un <code>while</code>. Con las funciones puedes\nalcanzar el mismo objetivo. Veamos qué son las <code>funciones</code>, cómo usarlas y por\nqué son importantes.</p>\n<h2 id=\"¿qué-es-una-función\">¿Qué es una función?</h2>\n<p>Una función es una forma de agrupar código para que pueda ser reutilizado. Las\nfunciones nos permiten ejecutar la misma pieza de código en varios lugares de un\nprograma sin tener que copiar y pegar el código repetidamente. Dicho de otra\nmanera, una función es un <strong>pedazo de programa envuelto en un valor</strong>. Ese valor\npuede ser \"llamado\" varias veces, en diferentes lugares de tu programa, para que\nejecute el código que tiene dentro.</p>\n<p>A lo largo de este curso hemos venido utilizando funciones, solo que las venimos\nllamando <em>\"comandos\"</em>. Los comandos como <code>alert()</code>, <code>prompt()</code> y <code>console.log()</code>\nson realmente funciones.</p>\n<h2 id=\"funciones-en-javascript\">Funciones en JavaScript</h2>\n<p>Las funciones son el pan de cada día en la programación con JavaScript.</p>\n<p>La aplicación más obvia de las funciones es la de definir un nuevo vocabulario.\nCrear nuevas palabras en un lenguaje humano común (como el español o el inglés)\nes típicamente algo de mal gusto. Sin embargo, en la programación es\nindispensable.</p>\n<p>Un adulto promedio tiene unas 20,000 palabras en su vocabulario. Pocos lenguajes\nde programación tienen 20,000 comandos incorporados. Y el vocabulario que <em>sí</em>\nestá disponible tiende a ser definido de forma más precisa, y por ende menos\nflexible, que en un lenguaje humano. En consecuencia, usualmente <em>tenemos</em> que\nañadir algo de nuestro propio vocabulario para evitar repetirnos demasiado.</p>\n<p>Agrupando fragmentos de código en una función con un <strong>nombre fácil de\nentender</strong> (dado que será parte del vocabulario que estás construyendo) podemos\nestructurar mejor nuestro código. Esto porque nos enfocamos en organizar las\nfunciones, en lugar de cada línea de código que las componen. Al dividir nuestro\ncódigo en piezas más pequeñas - y por ende - más manejables, podemos tener una\nmirada más completa de lo que estamos haciendo. Nos permite elevarnos a un nivel\nsuperior de abstracción. Como dicen el refrán: podemos visualizar el bosque\ncompleto, viendo más allá de los árboles.</p>\n<h2 id=\"definiendo-una-función\">Definiendo una función</h2>\n<p>La definición de una función es simplemente una definición regular de una\nvariable, pero donde el valor dado a la variable es una función. Por ejemplo, el\nsiguiente código define la variable <code>square</code> para referirse a la <em>función</em> que\nproduce el cuadrado de un número dado:</p>\n<pre><code class=\"language-js\">const square = function (num) {\n  return num * num;\n};\n</code></pre>\n<p>La misma función usando la síntaxis de <em>función flecha</em> (arrow function):</p>\n<pre><code class=\"language-js\">const square = num =&gt; num * num;\n</code></pre>\n<p>Una función es creada por una expresión que empieza con el keyword <code>function</code>,\no alternativamente usando la síntaxis de <em>función flecha</em>. Las funciones tienen\nun conjunto de <em>parámetros</em> (en el ejemplo anterior solo tenemos <strong>un</strong>\nparámetro: <code>num</code>) y un <em>cuerpo</em>, que contiene las sentencias a ser ejecutadas.\nLos parámetros sirven para \"pasarle\" valores a la función y por ende, cambiar su\ncomportamiento según los valores brindados. Cuando declaramos una función usando\nel <em>keyword</em> <code>function</code> el cuerpo de la función tiene que estar siempre\nencerrado en llaves, incluso cuando consista de una sola instrucción (como en el\nejemplo previo), mientras que en las funciones flecha podemos hacer <em>retorno\nimplícito</em> cuando el cuerpo consta de solo una expresión (que será\nimplícitamente el valor de retorno).</p>\n<h2 id=\"llamando-una-función\">Llamando una función</h2>\n<p>Para correr el código dentro de una función, necesitamos <em>\"invocar, llamar, o\naplicar\"</em> la función. Esto se hace escribiendo el nombre de la función\ninmediatamente seguido por unos paréntesis <code>()</code>. Dentro de los paréntesis se\nincluye lo que le quieres \"pasar\" a la función para usar como parámetro. Los\nvalores que se pasan a la función para usar como parámetros son llamados\n<em>argumentos</em>.</p>\n<p>Agregando al ejemplo anterior un llamado a la función <code>square</code> pasando como\nargumento el valor <code>12</code> vemos que nos devuelve <code>144</code> (es decir, 12 al cuadrado).</p>\n<pre><code class=\"language-js\">const square = function (num) {\n  return num * num;\n};\n\nsquare(12);\n// → 144\n</code></pre>\n<h2 id=\"el-valor-de-retorno\">El valor de retorno</h2>\n<p>Así como los argumentos son los valores de \"entrada\" (input) que utiliza una\nfunción al ser llamada, el valor de retorno es el valor de salida (output) que\ndevuelve la función (el <code>144</code> del ejemplo anterior), y que puede ser utilizado\nen cualquier lugar del programa. Si una función no especifica el valor de\nretorno, entonces, la función retorna <code>undefined</code>.</p>\n<p>El valor de retorno se especifica con el <em>keyword</em> <code>return</code>. En el ejemplo\nanterior, se especifica que el valor de retorno es el parámetro multiplicado por\nsí mismo; es decir, el parámetro al cuadrado. El keyword <code>return</code> sin una\nexpresión después de él, también hará que la función devuelva <code>undefined</code>.</p>\n<p>Agreguemos una sentencia adicional al ejemplo anterior en la que se utilice el\nvalor de retorno de la función <code>square</code>:</p>\n<pre><code class=\"language-js\">const square = function (num) {\n  return num * num;\n};\n\nconsole.log('El cuadrado de 12 es ' + square(12));\n// → El cuadrado de 12 es 144\n</code></pre>\n<p>Con esta modificación sucede lo siguiente: el valor de retorno que se obtiene al\nllamar (o invocar) la función <code>square</code> con el valor <code>12</code> de argumento es: <code>144</code>.\nÉste se concatena con el texto <code>'El cuadrado de 12 es '</code> para formar\n<code>'El cuadrado de 12 es 144'</code>; lo cual, a su vez, se pasa como argumento a la\nfunción <code>console.log</code> para que lo imprima en la consola.</p>\n<h2 id=\"múltiples-parámetros\">Múltiples parámetros</h2>\n<p>Una función puede tener varios parámetros o puede no tener ninguno. En el\nsiguiente ejemplo <code>makeNoise</code> no tiene parámetros, mientras que <code>power</code> tiene\ndos:</p>\n<pre><code class=\"language-js\">const makeNoise = function () {\n  console.log('Pling!');\n};\n\nmakeNoise();\n// → Pling!\n\nconst power = function (base, exponent) {\n  let result = 1;\n  for (let count = 0; count &lt; exponent; count++) {\n    result *= base;\n  }\n  return result;\n};\n\nconsole.log(power(2, 10));\n// → 1024\n</code></pre>\n<p>A continuación Michelle te explica funciones con un ejemplo del libro JavaScript\nfor Kids.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/Y0NgsjdumS8?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"saliendo-de-una-función-con-return\">Saliendo de una función con <code>return</code></h2>\n<p>Cuando el intérprete JavaScript se topa con un <code>return</code> dentro de una función,\ninmediatamente salta fuera de la función actual y pasa el valor retornado al\ncódigo que la llamó. Es decir, cualquier sentencia que coloquemos <strong>después</strong>\ndel <code>return</code> en una función, <strong>no</strong> será ejecutada.</p>\n<p>Una forma común de utilizar <code>return</code> es para salir de la función de manera\ntemprana si alguno de los argumentos brindados no son válidos; es decir, si no\nson el tipo de argumentos que la función necesita para funcionar correctamente.\nPor ejemplo, la siguiente función devuelve una cadena que indica el quinto\ncaracter de tu nombre. Si el nombre pasado a la función tiene menos de cinco\ncaracteres, la función utiliza <code>return</code> para dejar la función inmediatamente.\nEsto significa que la declaración de devolución al final, que te dice la quinta\nletra de tu nombre, nunca se ejecuta.</p>\n<pre><code class=\"language-js\">const fifthLetter = function (name) {\n  if (name.length &lt; 5) {\n    return;\n  }\n  return 'La quinta letra de tu nombre es ' + name[4] + '.';\n};\n</code></pre>\n<h2 id=\"funciones-y-control-de-flujo\">Funciones y control de flujo</h2>\n<p>Las funciones también afectan el control de flujo de nuestro programa. Con\nfunciones podemos crear estructuras repetitivas (con algo que se llama\n<code>recursividad</code>) y estructuras condicionales (con, por ejemplo, múltiples valores\nde <code>return</code>). De hecho, las funciones son tan versátiles para armar la\nestructura de un programa que existe todo un <em>paradigma de programación</em> basado\nen funciones. Es decir, existe toda una manera de pensar en la programación\nbasada en funciones. Esto se llama el <strong>paradigma de programación funcional</strong>.\nMás adelante estudiaremos a mayor profundidad funciones y el paradigma de\nprogramación funcional. Por ahora, lo importante es entender que las funciones\nson una forma de agrupar código para que pueda ser reutilizado.</p>\n<p>Veamos un ejemplo de crear una estructura condicional con funciones:</p>\n<h2 id=\"utilizando-múltiples-return-en-lugar-de-if-else\">Utilizando múltiples <code>return</code> en lugar de <code>if... else</code></h2>\n<p>Podemos usar varios <code>return</code> dentro de diferentes sentencias <code>if</code> en el cuerpo\nde una función para que la función devuelva un valor diferente, dependiendo del\nargumento brindado. Por ejemplo, digamos que estás escribiendo un juego que\notorga medallas a los jugadores basándose en su puntuación. Una puntuación menor\na 3 es una medalla de bronce, una puntuación de 7 o más es oro, y lo que está en\nel medio es plata. Podrías utilizar una función como <code>medalForScore</code> para\nevaluar una puntuación y devolver el tipo de medalla, como se muestra aquí:</p>\n<pre><code class=\"language-js\">const medalForScore = function (score) {\n  if (score &lt; 3) {\n    return 'Bronze';\n  }\n  if (score &lt; 7) {\n    return 'Silver';\n  }\n  return 'Gold';\n};\n</code></pre>\n<p>Aunque estamos comprobando múltiples condiciones, no necesitamos usar sentencias\n<code>if ... else</code> encadenadas. Utilizamos las sentencias <code>if ... else</code> para\ngarantizar que sólo una de las sentencias se ejecute. Sin embargo, cuando cada\nuna de las opciones tiene su propia sentencia de <code>return</code>,  garantizamos que se\nejecute sólo una de las opciones --- porque, recuerda, <strong>las funciones sólo\npueden devolver una vez</strong>.</p>\n",
          "order": 4,
          "durationString": "30min"
        },
        "04-quiz-1": {
          "questions": [
            {
              "title": "1) ¿Cuáles de las siguientes permiten modificar el control flujo de un programa?",
              "description": "",
              "answers": [
                "únicamente estructuras condicionales y repetitivas",
                "únicamente funciones",
                "estructuras condicionales, estructuras repetitivas y funciones",
                "ninguna de las anteriores"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) ¿Qué forma de modificar el flujo de un programa muestra la figura a continuación?",
              "description": "<p><img src=\"http://eloquentjavascript.net/img/controlflow-nested-if.svg\" alt=\"Flujo condicional\"></p>",
              "answers": [
                "while",
                "do while",
                "for",
                "if",
                "if else",
                "if else \"anidado\" (nested)"
              ],
              "solution": [
                5
              ]
            },
            {
              "title": "3) Son ejemplos de DRY",
              "description": "",
              "answers": [
                "bucles y funciones",
                "solo bucles",
                "solo funciones",
                "ninguna de las anteriores"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) ¿Cuál es el problema con el código a continuación?",
              "description": "<pre><code class=\"language-js\">while (3 &gt; 2) {\n  console.log('Hello world');\n}\n</code></pre>",
              "answers": [
                "Tiene un error de sintaxis",
                "No utiliza buenas prácticas",
                "La variable no está bien declarada",
                "Genera un bucle infinito"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) Encuentra el error en la siguiente función",
              "description": "<pre><code class=\"language-js\">let result = 0;\n\nconst showSum = () =&gt; {\n  result = num1 + num2;\n  alert('El resultado es ' + result);\n};\n\nshowSum();\n</code></pre>",
              "answers": [
                "La función carece de parámetros y por lo tanto \"num1\" y \"num2\" no están definidos",
                "La función no está siendo invocada",
                "Tiene un error de sintaxis",
                "alert no es una función"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "6) Completa los espacios en blanco (ordenadamente)",
              "description": "<pre><code class=\"language-js\">const sum = _____ (num1, num2) {\n  ________ num1 + num2;\n}\n\n_______(2, 3);\n</code></pre>",
              "answers": [
                "return - function - sum",
                "function - sum - return",
                "function - return - sum",
                "for - return - while"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">let emoji = ':D';\n\nconst greet = (name) =&gt; {\n  emoji = ':)';\n  const myGreet = () =&gt; `Hola ${name} ${emoji}`;\n  return myGreet();\n};\n\nconsole.log(greet('Laboratoria'));\n</code></pre>",
              "answers": [
                "Hola Laboratoria :D",
                "Hola Laboratoria :)",
                "Hola Laboratoria",
                "undefined"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "8) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">let number = 0;\n\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n</code></pre>",
              "answers": [
                "imprime los números pares desde el 2 al 10 (inclusive)",
                "imprime los números pares desde el 2 al 12 (inclusive)",
                "imprime los números pares desde el 0 al 10 (inclusive)",
                "imprime los números pares desde el 0 al 12 (inclusive)"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "9) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">for (let number = 1; number &lt;= 8; number = number * 2) {\n  console.log(number);\n}\n</code></pre>",
              "answers": [
                "2, 4, 6, 8",
                "1, 2, 4, 6, 8",
                "1, 2, 4, 8",
                "0, 1, 2, 4, 8"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "10) Al siguiente switch le faltan algunos \"breaks\", sin embargo ¿Cuál sería el resultado de ejecutar el código así como está?",
              "description": "<pre><code class=\"language-js\">const weather = 'nublado';\n\nswitch (weather) {\n  case 'lluvioso':\n    console.log('Recuerda levar un paraguas.');\n    break;\n  case 'soleado':\n    console.log('Viste ligero.');\n  case 'nublado':\n    console.log('Sal a la calle');\n\n  default:\n    console.log('Tipo de clima desconocido');\n    break;\n}\n</code></pre>",
              "answers": [
                "Error de sintaxis",
                "Imprime 'Sal a la calle.'",
                "Imprime 'Tipo de Clima desconocido.'",
                "Imprime 'Sal a la calle.' y 'Tipo de Clima desconocido.'"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "11) ¿Qué diferencia un bucle \"do\" de un \"while\"?",
              "description": "",
              "answers": [
                "Un bucle \"do\" siempre ejecuta su cuerpo por lo menos una vez.",
                "El \"while\" puede generar un ciclo infinito, pero un \"do\" nunca lo hará.",
                "El \"do\" ejecuta una sola vez el cuerpo.",
                "No existe diferencias."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "12) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">for (let i = 0; i &lt;= 10; i++) {\n  if (i == 5) {\n    continue;\n  } else {\n    console.log(i);\n  }\n}\n</code></pre>",
              "answers": [
                "Imprime los números enteros del 1 al 10 (inclusive)",
                "Imprime los números enteros del 0 al 10 (inclusive) con excepción del número 5",
                "Imprime los números enteros del 0 al 10 (inclusive)",
                "Imprime los números enteros del 1 al 9 (inclusive) y luego imprime el número\n5 de nuevo"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "13) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">const medalForScore = (score) =&gt; {\n  if (score &lt; 3){\n    return 'Bronze';\n  }\n  if (score &lt; 7){\n    return 'silver';\n  }\n  return 'Gold';\n}\n\nconsole.log(medalForScore(7));\n</code></pre>",
              "answers": [
                "Bronze",
                "Silver",
                "Gold",
                "undefined"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "14) En el ejemplo a continuación",
              "description": "<pre><code class=\"language-js\">const square = num =&gt; num * num;\nsquare(12);\n//-&gt;144\n</code></pre>",
              "answers": [
                "num es un parámetro y 12 es el argumento",
                "num y 12 son parámetros",
                "num y 12 son argumentos",
                "num es un argumento y 12 es el parámetro"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz 1",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 5,
          "durationString": "30min"
        },
        "05-guided-exercises": {
          "title": "Ejercicios Guiados",
          "type": "practice",
          "format": "self-paced",
          "duration": 120,
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>A continuación tienes más problemas de práctica. Estos problemas serán\nresueltos, paso a paso, por tu equipo de profes en una clase presencial.</p>\n<p>Te sugerimos que intentes resolver los ejercicios por tu cuenta (o en equipo)\n<strong>antes</strong> de la sesión presencial. Así, ya vienes con dudas específicas y\nestarás familiarizada con los retos. Quizás, puedas tú presentar tu solución\nante el resto de la clase y así ayduar al resto de tus compañeras :)</p>\n<h3 id=\"1-funciones-matemáticas\">1. Funciones matemáticas</h3>\n<p>Crea dos funciones, <code>add</code> y <code>multiply</code>. Cada una debe tomar dos argumentos. La\nfunción <code>add</code> debe sumar sus argumentos y devolver el resultado. La funcion\n<code>multiply</code> debe multiplicar sus argumentos. Usando solamente estas dos\nfunciones, resuelva este simple problema matemático: 36325 * (9824 + 777).</p>\n<h3 id=\"2-ordenando-comida\">2. Ordenando comida</h3>\n<p>Imagina que estás pidiendo comida en un restaurante. Tu plato favorito es\n<code>ceviche</code>, así que lo elegirías si está en el menú. Si no hay <code>ceviche</code>,\nelegirías <code>tacos al pastor</code>. Si eso no está, te irías por <code>empanada chilena</code>.\nEn el caso raro que ninguna de esas opciones esté disponible, te irías por una\n<code>hamburguesa</code>. Escribe una función, que de acuerdo a la disponibilidad de los\nplatos en el menú, decidas qué ordenar.</p>\n<h3 id=\"3-edades-y-etapas\">3. Edades y etapas</h3>\n<p>Crea una web que pida, por medio de un <code>prompt()</code>, la edad de una persona, en\naños. Dependiendo del número brindado, la web debe dar un mensaje que clasifica\na la persona en: <code>toddler</code>, <code>preschooler</code>, <code>gradeschooler</code>, <code>teenager</code>,\n<code>young adult</code> and <code>adult</code>, según el criterio de esta\n<a href=\"https://www.healthychildren.org/English/ages-stages/Pages/default.aspx\" target=\"_blank\">página</a>.</p>\n<p>Si la persona ingresa un dato que <strong>no</strong> es un número entero (por ejemplo: un\n<code>string</code>, un número decimal, un cero, o un campo vacío), la web debe dar un\nmensaje de error. Revisa este <a href=\"https://stackoverflow.com/questions/3885817/how-do-i-check-that-a-number-is-float-or-integer\" target=\"_blank\">link</a>\nque tiene un par de tips interesantes relacionados a este proyecto.</p>\n<h3 id=\"4-contando-caracteres-y-espacios\">4. Contando caracteres y espacios</h3>\n<p>Crea una web que pida, por medio de un <code>prompt()</code>, una frase al usuario. La web\ndebe presentar un mensaje que diga: el número de caracteres y de espacios que\ncomponen el <code>string</code> ingresado. En la consola, debe aparecer cada caracter\nimpreso en una línea separada, en mayúscula. Si el usuario ingresa un campo\nvacío, la web debe dar un mensaje de error.</p>\n<p>Arma tu archivo JavaScript para que tenga 3 funciones:</p>\n<ul>\n<li>Una función que imprima todos los caracteres de un <code>string</code>, cada uno en una\nlínea separada, en mayúscula.</li>\n<li>Una función que cuente el número de caracteres de un <code>string</code> (¡sin utilizar\n<code>.length</code>!)</li>\n<li>Una función que cuente el número de espacios de un <code>string</code></li>\n</ul>\n",
          "order": 6,
          "durationString": "2h"
        },
        "06-code-challenges": {
          "title": "Retos de Código",
          "type": "practice",
          "format": "self-paced",
          "duration": 120,
          "exercises": {
            "01-power-of-two": {
              "title": "Potencia de 2",
              "env": "js",
              "body": "<p>Calcula la potencia de 2 elevado a un número específico. Debes de usar un loop\n(no <code>Math.pow()</code>).</p>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = powerOfTwo(10);\n\nconsole.log(ouput); // -&gt; 1024\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Potência de 2\n\n* Environment: `js`\n\n***\n\nCalcule a potência de 2 elevado a um número específico.\nDeve usar um loop (não usar `Math.pow()`).\n\nExemplo:\n\n```js\nconst output = powerOfTwo(10);\n\nconsole.log(ouput); // -> 1024\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "cG93ZXJPZlR3by5qcw==": "const powerOfTwo = (number) => {\n\n};\n\nmodule.exports = powerOfTwo;\n"
                },
                "c29sdXRpb24=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-param-reassign\": \"off\"\n  }\n}\n",
                  "cG93ZXJPZlR3by5qcw==": "const powerOfTwo = (number) => {\n  let result = 1;\n\n  while (number > 0) {\n    result *= 2;\n    number -= 1;\n  }\n\n  return result;\n};\n\nmodule.exports = powerOfTwo;\n"
                },
                "dGVzdA==": {
                  "cG93ZXJPZlR3by5zcGVjLmpz": "const Assert = require('chai').assert;\nconst powerOfTwo = require('../solution/powerOfTwo');\n\ndescribe('powerOfTwo()', () => {\n  it('debería regresar la potencia de 2 elevado al número ingresado cuando es positivo', () => {\n    const output = powerOfTwo(10);\n    Assert.deepEqual(output, 1024);\n  });\n\n  it('debería regresar 1 cuando el número ingresado es 0', () => {\n    const output = powerOfTwo(0);\n    Assert.deepEqual(output, 1);\n  });\n\n  it('debería regresar 1 cuando el número ingresado es negativo', () => {\n    const output = powerOfTwo(-5);\n    Assert.deepEqual(output, 1);\n  });\n});\n"
                }
              }
            },
            "02-reverse": {
              "title": "Invertir un arreglo",
              "env": "js",
              "body": "<p>Usar estructuras de control para invertir un arreglo de números. Como entrada\nrecibirás un arreglo de números u objetos y como salida se espera un arreglo con\nel orden invertido de los elementos.</p>\n<blockquote>\n<p>No es válido usar <code>arr.reverse()</code>.</p>\n</blockquote>\n<p>Ejemplo:</p>\n<pre><code class=\"language-javascript\">const output = reverse([1, 2, 3, 4]);\n\nconsole.log(ouput); // -&gt; [4, 3, 2, 1]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Inverter uma array\n\n* Environment: `js`\n\n***\n\nUse estruturas de controle para inverter uma array de inteiros.\nComo entrada receberá uma array de números ou objetos e como\nsaída é esperada uma array com a ordem dos elementos invertida.\n\n> Não é válido utilizar `arr.reverse()`.\n\nExemplo:\n\n```javascript\nconst output = reverse([1, 2, 3, 4]);\n\nconsole.log(ouput); // -> [4, 3, 2, 1]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "cmV2ZXJzZS5qcw==": "const reverse = (array) => {\n\n};\n\nmodule.exports = reverse;\n"
                },
                "c29sdXRpb24=": {
                  "cmV2ZXJzZS5qcw==": "const reverse = (array) => {\n  const result = [];\n\n  for (let i = array.length - 1; i >= 0; i -= 1) {\n    result.push(array[i]);\n  }\n\n  return result;\n};\n\nmodule.exports = reverse;\n"
                },
                "dGVzdA==": {
                  "cmV2ZXJzZS5zcGVjLmpz": "const Assert = require('chai').assert;\nconst reverse = require('../solution/reverse');\n\ndescribe('reverse()', () => {\n  it('debería regresar el arreglo invertido cuando es un arreglo de números', () => {\n    const output = reverse([1, 2, 3, 4]);\n    Assert.deepEqual(output, [4, 3, 2, 1]);\n  });\n\n  it('debería regresar el arreglo invertido cuando es un arreglo de caracteres', () => {\n    const output = reverse(['j', 'a', 'v', 'a', 's', 'c', 'r', 'i', 'p', 't']);\n    Assert.deepEqual(output, ['t', 'p', 'i', 'r', 'c', 's', 'a', 'v', 'a', 'j']);\n  });\n\n  it('debería regresar el arreglo invertido cuando es un arreglo de objetos', () => {\n    const output = reverse([{ country: 'Chile' }, { country: 'México' }, { country: 'Perú' }]);\n    Assert.deepEqual(output, [{ country: 'Perú' }, { country: 'México' }, { country: 'Chile' }]);\n  });\n\n  it('debería regresar el arreglo vacío cuando es un arreglo vacío', () => {\n    const output = reverse([]);\n    Assert.deepEqual(output, []);\n  });\n});\n"
                }
              }
            },
            "03-count-vowels": {
              "title": "Contar vocales",
              "env": "js",
              "body": "<p>Crea una función que cuente el número de vocales de un <code>string</code>. Sigue los pasos\na continuación para que completes el programa.</p>\n<ol>\n<li>Implementar la función <code>countVowels(str)</code> que retorne el número de vocales.</li>\n<li>Iniciar un contador en <code>counter = 0</code></li>\n<li>Iterar los caracteres de string, si el elemento actual es una vocal entonces\nincrementar el contador <code>counter</code>.</li>\n<li>Retornar <code>counter</code>, el cual contiene el número de vocales.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Contar vogais\n\n* Environment: `js`\n\n***\n\nCrie uma função que conte o número de vogais em uma `string`.\nSiga os passos a seguir para completar o programa.\n\n1. Implementar a função `countVowels(str)` que retorne o número de vogais.\n2. Iniciar um contador em `counter = 0`\n3. Iterar os caracteres da string; se o elemento atual é uma vogal\n  então incrementar o contador `counter`.\n4. Retornar `counter`, que contẽm o número de vogais.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y291bnRWb3dlbHMuanM=": "const countVowels = (str) => {\n\n\n};\n\nmodule.exports = countVowels;\n"
                },
                "c29sdXRpb24=": {
                  "Y291bnRWb3dlbHMuanM=": "const countVowels = (str) => {\n  const vowels = 'aeiou';\n  const lowercased = str.toLowerCase();\n  let counter = 0;\n\n  for (let i = 0; i < lowercased.length; i += 1) {\n    for (let j = 0; j < vowels.length; j += 1) {\n      if (lowercased[i] === vowels[j]) {\n        counter += 1;\n      }\n    }\n  }\n\n  return counter;\n};\n\nmodule.exports = countVowels;\n"
                },
                "dGVzdA==": {
                  "Y291bnRWb3dlbHMuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst countVowels = require('../solution/countVowels');\n\ndescribe('countVowels(string)', () => {\n  it('debería retornar cuantas vocales hay en un string', () => {\n    Assert.deepEqual(countVowels('murcielago'), 5);\n    Assert.deepEqual(countVowels('sol'), 1);\n    Assert.deepEqual(countVowels('abecedario'), 6);\n  });\n\n  it('debería retornar 0 si el string está vacío', () => {\n    Assert.deepEqual(countVowels(''), 0);\n  });\n});\n"
                }
              }
            },
            "04-even-or-odd": {
              "title": "Función par/impar",
              "env": "js",
              "body": "<p>Crea una función que compruebe si un número es par o impar.</p>\n<p>Sigue los pasos a continuación para que completes el programa.</p>\n<ol>\n<li>Implementa una función <code>comprobar(n)</code>. Nota: Puedes usar el operador modulo:\n<code>%</code>.</li>\n<li>Si el número es par retornar <code>0</code>.</li>\n<li>Si el número es impar  retornar <code>1</code>.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Funcão par/impar\n\n* Environment: `js`\n\n***\n\nCrie uma função que verifique se um número é par ou ímpar.\nSiga os passos a seguir para completar o programa.\n\n1. Declare uma função `comprobar(n)`. Nota: pode utilizar o\n  operador de módulo: `%`.\n2. Se o número é par, retornar `0`.\n3. Se o número é ímpar, retornar `1`.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZXZlbk9yT2RkLmpz": "const evenOrOdd = (n) => {\n\n};\n\nmodule.exports = evenOrOdd;\n"
                },
                "c29sdXRpb24=": {
                  "ZXZlbk9yT2RkLmpz": "module.exports = n => ((n % 2 === 0) ? 0 : 1);\n"
                },
                "dGVzdA==": {
                  "ZXZlbk9yT2RkLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst evenOrOdd = require('../solution/evenOrOdd');\n\ndescribe('evenOrOdd(n)', () => {\n  it('debería retornar si el número que se pasa como parámetro es par o impar', () => {\n    Assert.deepEqual(evenOrOdd(5), 1);\n    Assert.deepEqual(evenOrOdd(66), 0);\n    Assert.deepEqual(evenOrOdd(20), 0);\n    Assert.deepEqual(evenOrOdd(35), 1);\n  });\n});\n"
                }
              }
            },
            "05-max": {
              "title": "Número mayor que otro",
              "env": "js",
              "body": "<p>Implementa una función que determine si un número es mayor a otro.</p>\n<p>Sigue los pasos a continuación para que completes el programa:</p>\n<ol>\n<li>Retornar el numero mayor entre A, B y C</li>\n</ol>\n<p>Input: A = 10, B = 30, C = 5\nOutput: 30</p>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Número maior que outro\n\n* Environment: `js`\n\n***\n\nImplementa uma função que determine se um número é maior que outro.\n\nSiga os passos a seguir para completar o programa:\n\n1. Retornar o maior número entre A, B e C\n\nInput: A = 10, B = 30, C = 5\nOutput: 30\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "bWF4Lmpz": "const max = (A, B, C) => {\n\n\n};\n\nmodule.exports = max;\n"
                },
                "c29sdXRpb24=": {
                  "bWF4Lmpz": "const max = (A, B, C) => {\n  let maximo = A;\n\n  if (A > B) {\n    if (A > C) {\n      maximo = A;\n    } else {\n      maximo = C;\n    }\n  } else if (B > C) {\n    maximo = B;\n  } else {\n    maximo = C;\n  }\n\n  return maximo;\n};\n\nmodule.exports = max;\n"
                },
                "dGVzdA==": {
                  "bWF4LnNwZWMuanM=": "const Assert = require('chai').assert;\nconst max = require('../solution/max');\n\ndescribe('max()', () => {\n  it('debería retornar el número que sea mayor', () => {\n    Assert.deepEqual(max(5, 6, 7), 7);\n    Assert.deepEqual(max(66, 4, 6), 66);\n    Assert.deepEqual(max(20, 25, 10), 25);\n  });\n});\n"
                }
              }
            },
            "06-is-prime": {
              "title": "Determinar si un número es primo",
              "env": "js",
              "body": "<p>Crea una función que determine si un número es primo. En matemáticas, un número\nprimo es un número natural mayor que 1 que tiene únicamente dos divisores\ndistintos: él mismo y el 1.</p>\n<p>Tips:</p>\n<ol>\n<li>Utilizar el operador  modulo (<code>%</code>) para determinar si un número es divisor de\notro.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Determinar se um número é primo\n\n* Environment: `js`\n\n***\n\nCrie uma função que determine se um número é primo. Em matemática,\num número primo é um número natural maior que 1 que é divisível\nsomente por ele mesmo e 1.\n\nTips:\n\n1. Utilizar o operador módulo (`%`) para determinar se um número é\n  divisível por outro.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "aXNQcmltZS5qcw==": "const isPrime = (n) => {\n\n\n};\n\nmodule.exports = isPrime;\n"
                },
                "c29sdXRpb24=": {
                  "aXNQcmltZS5qcw==": "const isPrime = (n) => {\n  if (n === 1) {\n    return true;\n  }\n\n  for (let i = 2; i < n; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n\nmodule.exports = isPrime;\n"
                },
                "dGVzdA==": {
                  "aXNQcmltZS5zcGVjLmpz": "const Assert = require('chai').assert;\nconst isPrime = require('../solution/isPrime');\n\ndescribe('isPrime(n)', () => {\n  it('debería retornar si el número que se da como parámetro es primo o no', () => {\n    Assert.deepEqual(isPrime(5), true);\n    Assert.deepEqual(isPrime(6), false);\n    Assert.deepEqual(isPrime(23), true);\n    Assert.deepEqual(isPrime(35), false);\n  });\n});\n"
                }
              }
            },
            "07-can-drive-and-vote": {
              "title": "Puedes conducir y votar?",
              "env": "js",
              "body": "<p>Crea una función que determine si una persona puede manejar (16 años o más) y\nvotar (18 años o más)</p>\n<p>Sigue los pasos a continuación para que completes el programa:</p>\n<ol>\n<li>Implementar la función comprobar.</li>\n<li>Si cumple con la condición  (16 años o más) y votar (18 años o más)\n  entonces retornar true; en caso contrario retornar false.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Pode dirigir e votar?\n\n* Environment: `js`\n\n***\n\nCrie uma função que determine se uma pessoa pode dirigir nos EUA (16 anos ou mais)\ne votar (18 anos ou mais).\n\nSiga os passos a seguir para completar o programa:\n\n1. Implemente a função `comprobar`\n2. Se o valor cumpre a condição dirigir (16 anos ou mais)\n  e votar (18 anos ou mais), então retorna `true`; caso\n  contrário, retornar `false`\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y2FuRHJpdmVBbmRWb3RlLmpz": "const canDriveAndVote = (edad) => {\n\n\n};\n\nmodule.exports = canDriveAndVote;\n"
                },
                "c29sdXRpb24=": {
                  "Y2FuRHJpdmVBbmRWb3RlLmpz": "const canDriveAndVote = (edad) => {\n  if (edad >= 16 && edad >= 18) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = canDriveAndVote;\n"
                },
                "dGVzdA==": {
                  "Y2FuRHJpdmVBbmRWb3RlLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst canDriveAndVote = require('../solution/canDriveAndVote');\n\ndescribe('canDriveAndVote()', () => {\n  it('debería retornar true si cumple con ambas condiciones (16 años o más y 18 años o más), en caso contrario retornar false', () => {\n    Assert.deepEqual(canDriveAndVote(25), true);\n    Assert.deepEqual(canDriveAndVote(12), false);\n    Assert.deepEqual(canDriveAndVote(16), false);\n  });\n});\n"
                }
              }
            },
            "08-are-odd": {
              "title": "Determinar si dos números son pares",
              "env": "js",
              "body": "<p>Implementa una función que determine si dos número son pares.</p>\n<p>Sigue los pasos a continuación para que completes el programa:</p>\n<ol>\n<li>Si <code>n</code> y <code>m</code> son pares retornar <code>true</code>; en caso contrario retornar <code>false</code>.</li>\n</ol>\n<p>Tip: Usar el operador modulo (<code>%</code>)</p>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Determinar se dois números são pares\n\n* Environment: `js`\n\n***\n\nImplemente uma função que determina se dois números são pares.\n\nSiga os passos a seguir para completar o programa:\n\n1. Se `n` e `m` são pares retornar `true`; caso contrário retornar `false`.\n\nDica: Usar o operador módulo (`%`)\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YXJlT2RkLmpz": "const areOdd = (n, m) => {\n\n\n};\n\nmodule.exports = areOdd;\n"
                },
                "c29sdXRpb24=": {
                  "YXJlT2RkLmpz": "const areOdd = (n, m) => {\n  if (n % 2 === 0 && m % 2 === 0) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = areOdd;\n"
                },
                "dGVzdA==": {
                  "YXJlT2RkLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst areOdd = require('../solution/areOdd');\n\ndescribe('areOdd()', () => {\n  it('debería retornar true si ambos números son pares', () => {\n    Assert.deepEqual(areOdd(22, 10), true);\n    Assert.deepEqual(areOdd(12, 5), false);\n    Assert.deepEqual(areOdd(16, 8), true);\n    Assert.deepEqual(areOdd(33, 15), false);\n  });\n});\n"
                }
              }
            }
          },
          "order": 7,
          "durationString": "2h"
        },
        "07-quiz-2": {
          "questions": [
            {
              "title": "1) ¿Qué forma de modificar el flujo de un programa muestra la figura a continuación?",
              "description": "<p><img src=\"http://eloquentjavascript.net/img/controlflow-loop.svg\" alt=\"Flujo bucle\"></p>",
              "answers": [
                "while",
                "bucles en general",
                "if",
                "if else",
                "if else \"anidado\" (nested)"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) ¿Cuál es el problema con el siguiente código?",
              "description": "<pre><code class=\"language-js\">do {\n  console.log('Hello world');\n} while (2 &gt; 3);\n</code></pre>",
              "answers": [
                "Tiene un error de sintaxis",
                "No utiliza buenas prácticas",
                "La variable no está bien declarada",
                "Genera un bucle infinito",
                "Ninguno, funciona bien e imprime 'hello world' una vez en la consola"
              ],
              "solution": [
                4
              ]
            },
            {
              "title": "3) Encuentra el error en la siguiente función",
              "description": "<pre><code class=\"language-js\">let result = 0;\n\nconst showSum = (num1, num2) =&gt; {\n  result = num1 + num2;\n  alert('El resultado es ' + result);\n};\n\nshowSum(if, else);\n</code></pre>",
              "answers": [
                "La función no está siendo invocada",
                "Los parámetros no están siendo declarados",
                "alert no es una función",
                "Error de sintaxis. No se pueden utilizar keywords como argumentos"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "4) La diferencia entre undefined y null",
              "description": "",
              "answers": [
                "No existe, son lo mismo",
                "No importa",
                "<code>undefined</code> no tiene valor y <code>null</code> es un string vacio",
                "<code>undefined</code> significa que no se ha <em>asignado</em> un valor, mientras que <code>null</code>\nsignifica que hemos <em>asignado</em> el valor <code>null</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n</code></pre>",
              "answers": [
                "imprime los números pares desde el 0 al 10 (inclusive)",
                "imprime los números pares desde el 0 al 12 (inclusive)",
                "imprime los números pares desde el 2 al 10 (inclusive)",
                "imprime los números pares desde el 2 al 12 (inclusive)"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "6) El resultado de \"Hola\" + \"mundo\" es",
              "description": "",
              "answers": [
                "\"Hola Mundo\"",
                "\"Hola mundo\"",
                "\"Holamundo\"",
                "'HolaMundo'"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">for (let number = 1; number &lt; 8; number = number * 3) {\n  console.log(number);\n}\n</code></pre>",
              "answers": [
                "1",
                "1, 3, 9",
                "0, 1, 3, 9",
                "1, 3"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "8) Al siguiente switch le faltan algunos \"breaks\". ¿Cuál sería el resultado de ejecutar el código así como está?",
              "description": "<pre><code class=\"language-js\">const weather = 'soleado';\n\nswitch (weather) {\n  case 'lluvioso':\n    console.log('Recuerda levar un paraguas.');\n    break;\n  case 'soleado':\n    console.log('Viste ligero.');\n  case 'nublado':\n    console.log('Sal a la calle');\n\n  default:\n    console.log('Tipo de clima desconocido');\n    break;\n}\n</code></pre>",
              "answers": [
                "Imprime 'Sal a la calle.'",
                "Imprime 'Tipo de Clima desconocido.'",
                "Imprime 'Sal a la calle'\" y 'Tipo de Clima desconocido.'",
                "Imprime 'Viste ligero.', 'Sal a la calle.' y 'Tipo de Clima desconocido.'"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "9) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">for (let i = 0; i &lt;= 10; i++) {\n  if (i == 0) {\n    continue;\n  } else {\n    console.log(i);\n  }\n}\n</code></pre>",
              "answers": [
                "Imprime los números enteros del 0 al 10 (inclusive)",
                "Imprime los números enteros del 1 al 10 (inclusive)",
                "Imprime los números enteros del 0 al 10 (inclusive) y luego imprime el número\n0 de nuevo",
                "Imprime los números enteros del 1 al 10 (inclusive) y luego imprime el número\n0 de nuevo"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "10) Cuál es el resultado de",
              "description": "<pre><code class=\"language-js\">var medalForScore = function(score) {\n  if (score &lt; 3){\n    return 'Bronze';\n  }\n  if (score &lt; 7){\n    return 'silver';\n  }\n  return 'Gold';\n}\n\nconsole.log(medalForScore(3));\n</code></pre>",
              "answers": [
                "Bronze",
                "Silver",
                "Gold",
                "undefined"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "11) Una función puede retornar múltiples valores a la vez",
              "description": "",
              "answers": [
                "Verdadero",
                "Falso"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "12) Los comandos como alert(), prompt() y console.log() son realmente funciones",
              "description": "",
              "answers": [
                "Verdadero",
                "Falso"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz 2",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 8,
          "durationString": "30min"
        },
        "08-closing": {
          "title": "Cierre",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"respondamos-las-preguntas-del-opening\">Respondamos las preguntas del opening</h2>\n<ul>\n<li>¿Por qué quisiéramos modificar el control de flujo de un programa?</li>\n<li>¿Cuáles son las formas de modificar el flujo de un programa? Dibuja una\nrepresentación de cada una</li>\n<li>¿Qué significa <code>else</code> de una sentencia <code>if...else</code>? Dame un ejemplo</li>\n<li>¿Cuál es la diferencia entre un <code>while</code> y un <code>do</code>?</li>\n<li>¿Cuáles son las 3 partes (sentencias) esenciales de un <code>for</code>? Dame un ejemplo</li>\n<li>¿Para qué utilizamos <code>break</code> y <code>continue</code> en un <code>for</code>? Dame un ejemplo</li>\n<li>Explica, con una analogía y en tus propias palabras, qué es un <code>function</code> (una\nfunción). Dibuja el concepto de una función</li>\n<li>¿Por qué son importantes las funciones en la programación?</li>\n<li>¿Qué se entiende por <code>DRY</code>?</li>\n<li>¿Qué significa \"llamar\" a una función?</li>\n<li>¿Qué sería un \"input\" (entrada) para una función y qué sería el equivalente\ndel \"output\" (salida)?</li>\n<li>¿Cuál es la diferencia entre un parámetro y un argumento de una función?</li>\n<li>¿Qué significa el valor de <code>return</code> de una función?</li>\n<li>¿Qué sucede cuando una función tiene varios valores de <code>return</code>?</li>\n<li>¿Por qué podemos resolver problemas más complejos sabiendo\n<code>estructuras condicionales</code>,  <code>estructuras repetitivas</code> y <code>funciones</code>? Dame un\nejemplo</li>\n</ul>\n",
          "order": 9,
          "durationString": "5min"
        }
      },
      "order": 1,
      "stats": {
        "duration": 450,
        "durationString": "7.5h",
        "exerciseCount": 8,
        "partCount": 10
      }
    },
    "03-functions": {
      "title": "Funciones",
      "bonus": false,
      "description": "<p>En esta unidad, veremos en profundidad el tema de funciones, aprovechando que\nJavaScript está fuertemente influenciado por la programación funcional desde su\ndiseño, y nos ofrece características importantes como asignar funciones a una\nvariable, pasar como parámetro de otra función, cambiar el scope de variables,\nasignar como valor de una propiedad de un objeto, etc.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Apertura",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>En esta unidad, veremos en profundidad el tema de funciones, aprovechando que\nJavaScript está fuertemente influenciado por la programación funcional desde su\ndiseño, y nos ofrece características importantes como asignar funciones a una\nvariable, pasar como parámetro de otra función, cambiar el scope de variables,\nasignar como valor de una propiedad de un objeto, etc.</p>\n<p>Las funciones son bloques de construcción de aplicaciones que engloban múltiples\nsentencias de código. Son particularmente importantes en JavaScript porque\nsoporta características como <em>first-class functions</em>, <em>functions as objects</em>,\n<em>runtime function definition</em> y más que veremos en esta unidad.</p>\n<p>A continuación, se listan algunos principios que te ayudarán a escribir mejores\nfunciones:</p>\n<ul>\n<li><p><strong>Don't Repeat Yourself (DRY)</strong>: Es muy común que a lo largo del desarrollo de\nuna solución nos encontremos con un patrón que se va repitiendo a lo largo de\nnuestro código. Una vez identificado un patrón, es tiempo de escribir una\nfunción, objeto o módulo que encapsule dicho patrón para que sea fácilmente\nreusable. Esto ayuda también a que si encontramos algún bug o quisiéramos\nagregar funcionalidad, solo se tendría que hacer en un lugar. Además,\nescribiendo una función reusable te obliga a aislar el patrón del problema, lo\ncual ayuda a tener funcionalidad relacionada de manera agrupada.</p>\n</li>\n<li><p><strong>Do One Thing (DOT)</strong>: Cada función debe hacer solo una cosa y hacerlo lo\nmejor posible. Siguiendo este principio hará tu función más reusable, legible y\nfácil de depurar.</p>\n</li>\n<li><p><strong>Keep It Simple Stupid (KISS)</strong>: Si bien las funciones deben de hacer solo\nuna cosa, es mejor hacerlo súper claro manteniendo la sencillez y no agregando\ncomplejidad innecesaria para llevar a cabo una solución. Esto no quiere decir\nque la solución no sea óptima, sino que pueda ser legible para poder mantenerla\na lo largo del tiempo.</p>\n</li>\n<li><p><strong>Less Is More</strong>: Para alcanzar la mayor legibilidad posible y reducir la\ntentación de hacer más de una cosa, las funciones deben ser tan cortas como sea\nposible. Si la función se vuelve muy extensa, es bueno considerar separarlo en\nsubtareas y datos a lo largo de funciones y objetos.</p>\n</li>\n</ul>\n",
          "order": 0,
          "durationString": "15min"
        },
        "01-classic": {
          "title": "Funciones clásicas",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<h2 id=\"definiendo-una-función\">Definiendo una función</h2>\n<p>La definición de una función es simplemente la definición de una variable\nregular donde el valor dado a dicha variable resulta ser una función. Por\nejemplo, el siguiente código define la variable <code>square</code> para referirse a la\nfunción que devuelve el cuadrado de un número dado:</p>\n<pre><code class=\"language-js\">const square = function (x) {\n  return x * x;\n};\n\nconsole.log(square(12)); // =&gt; 144\n</code></pre>\n<hr>\n<p>Funciones son valores que pueden ser llamados. Una manera de definir una función\nes llamada una <code>function declaration</code> o <code>declaración de función</code>. Por ejemplo,\nel siguiente código define una función <code>id</code> que tiene un simple parámetro <code>x</code>:</p>\n<pre><code class=\"language-js\">function id(x) {\n  return x;\n}\n</code></pre>\n<p>La sentencia <code>return</code> retorna un valor de la función <code>id</code>. Puedes llamar una\nfunción a través de su nombre, seguido de sus <code>argumentos</code> entre paréntesis:</p>\n<pre><code class=\"language-js\">id('hello'); // =&gt; 'hello'\n</code></pre>\n<p>Si no se retorna nada de la función <code>undefined</code> es retornado (implícitamente):</p>\n<pre><code class=\"language-js\">function f() {}\nf(); // =&gt; undefined\n</code></pre>\n<p>Esta sección mostró solo una manera de definir y llamar una función. Otras\nformas serán mostradas luego.</p>\n<h2 id=\"los-3-roles-de-funciones-en-javascript\">Los 3 roles de funciones en JavaScript</h2>\n<p>Una vez definida una función, esta puede desarrollar diversos roles:</p>\n<h3 id=\"nonmethod-function-función-normal\">Nonmethod function (función normal)</h3>\n<p>Puedes llamar a una función directamente como visto hace un momento. Acá un\nejemplo de invocación:</p>\n<pre><code class=\"language-js\">id('hello');\n</code></pre>\n<p>Por convención, los nombres de estas funciones <em>normales</em> empiezan con minúscula\nsiguiendo el estilo <strong>lowerCamelCase</strong>.</p>\n<h3 id=\"constructor\">Constructor</h3>\n<p>Puedes invocar una función a través del operador <code>new</code>. Es usado para la\ncreación de objetos. Aquí un ejemplo de invocación:</p>\n<pre><code class=\"language-js\">new Date();\n</code></pre>\n<p>Por convención, los nombres de los constructores empiezan con mayúscula,\nsiguiendo el estilo <strong>UpperCamelCase</strong>.</p>\n<h3 id=\"método\">Método</h3>\n<p>Puedes almacenar una función en una propiedad de un objeto, lo que lo convierte\nen un <em>método</em>. Aquí un ejemplo de como invocar un método definido en un objeto\n<code>obj</code>:</p>\n<pre><code class=\"language-js\">obj.method();\n</code></pre>\n<p>Por convención, los nombres de los métodos siguen el estilo de las funciones\nnormales (<em>lowerCamelCase</em>).</p>\n<h2 id=\"terminología-parámetro-vs-argumento\">Terminología: \"Parámetro\" vs. \"Argumento\"</h2>\n<p>Los términos <code>parámetro</code> y <code>argumento</code> son a menudo usados para referirse a lo\nmismo ya que se logra enteder a lo que se refiere. Sin embargo, a continuación\nse muestra una regla para diferenciarlos:</p>\n<ul>\n<li><p><strong>Parámetros</strong> son usados para definir una función. En el siguiente ejemplo,\n<code>param1</code> y <code>param2</code> son parámetros:</p>\n<pre><code class=\"language-js\">function foo(param1, param2) {\n  // ...\n}\n</code></pre>\n</li>\n<li><p><strong>Argumentos</strong> son usados para invocar una función. En el siguiente ejemplo,\n<code>3</code> y <code>7</code> son argumentos:</p>\n<pre><code class=\"language-js\">foo(3, 7);\n</code></pre>\n</li>\n</ul>\n<h2 id=\"definición-de-funciones\">Definición de Funciones</h2>\n<p>En esta sección veremos 3 formas de crear una función:</p>\n<ul>\n<li>Mediante un <em>function expression</em> (función como expresión).</li>\n<li>Mediante un <em>function declaration</em> (declaración de una función).</li>\n<li>Mediante el constructor <code>Function()</code>.</li>\n</ul>\n<p>Todas las funciones son objetos, instancias de <code>Function</code>:</p>\n<pre><code class=\"language-js\">function id(x) {\n  return x;\n}\n\nconsole.log(id instanceof Function); // =&gt; true\n</code></pre>\n<p>Por lo tanto, las funciones obtienen sus métodos de <code>Function.prototype</code>.</p>\n<h3 id=\"function-expressions\">Function Expressions</h3>\n<p>Un <em>function expression</em> produce un valor - un objeto de función. Por ejemplo:</p>\n<pre><code class=\"language-js\">const add = function (x, y) {\n  return x + y;\n};\n\nconsole.log(add(2, 3)); // =&gt; 5\n</code></pre>\n<p>El código anterior asigna el resultado de una función como expresión a la\nvariable <code>add</code> y puede ser llamado a través de esta variable. En este tipo de\nfunción se puede asignar una función a una variable, pasar como parámetro de\notra función y más. Debido a que este tipo de funciones no tienen un nombre,\npueden ser llamadas <em>anonymous function expressions</em> (funciones anónimas).</p>\n<h4 id=\"named-function-expressions\">Named Function Expressions</h4>\n<p>Se puede poner nombre a una función como expresión. Los <em>named function\nexpressions</em> (funciones como expresión con nombre) permiten a la función poder\nreferirse a si misma, su utilidad se ve reflejada cuando se desea aplicar\nrecursividad por ejemplo:</p>\n<pre><code class=\"language-js\">const factorial = function fact(number) {\n  if (number &lt;= 1) {\n    return 1;\n  }\n  return number * fact(number - 1);\n};\n\nconsole.log(factorial(3)); // =&gt; 6\n</code></pre>\n<p><strong>Nota:</strong> Los nombres de las funciones como expresión con nombre solo son\naccesibles dentro de la función:</p>\n<pre><code class=\"language-js\">const repeat = function me(n, str) {\n  return n &gt; 0 ? str + me(n - 1, str) : '';\n};\n\nconsole.log(repeat(3, 'Yeah')); // =&gt; YeahYeahYeah\nconsole.log(me); // =&gt; ReferenceError: me is not defined\n</code></pre>\n<h3 id=\"function-declarations\">Function Declarations</h3>\n<p>La siguiente es una declaración de función:</p>\n<pre><code class=\"language-js\">function add(x, y) {\n  return x + y;\n}\n</code></pre>\n<p>El código anterior se parece al de una función como expresión, pero es una\nsentencia. De cierta forma, es equivalente al siguiente código:</p>\n<pre><code class=\"language-js\">const add = function (x, y) {\n  return x + y;\n};\n</code></pre>\n<p>En otras palabras, un <em>function declaration</em> consiste de la palabra clave\nreservada <em>function</em>, una lista de parámetros para la función, encerrados en\nparéntesis y separados por comas, y la sentencia JavaScript que define la\nfunción, encerrada por llaves.</p>\n<h3 id=\"function-constructor\">Function Constructor</h3>\n<p>El constructor <code>Function()</code> evalua código JavaScript almacenado en strings. Por\nejemplo, el siguiente código es equivalente a los ejemplos anteriores:</p>\n<pre><code class=\"language-js\">const add = new Function('x', 'y', 'return x + y');\n</code></pre>\n<p>Sin embargo, esta forma de definir una función es lenta y deja código en strings\n(inaccesible a herramientas, por ejemplo, al depurar con <em>Dev Tools</em>). Por lo\ntanto es mejor usar un <em>function expression</em> o un <em>function declaration</em> si es\nposible.</p>\n<h2 id=\"hoisting\">Hoisting</h2>\n<p><strong>Hoisting</strong> significa \"mover al inicio del ámbito\". <em>Function declarations</em> son\nelevadas (<em>hoisted</em>) completamente, mientras las declaraciones de variables solo\nparcialmente.</p>\n<p><em>Function declarations</em> son completamente elevadas, esto permite llamar a una\nfunción antes de que se hayan declarado:</p>\n<pre><code class=\"language-js\">welcome(); // =&gt; 'Welcome to Laboratoria'\nfunction welcome() { // esta función es elevada - hoisting\n  console.log('Welcome to Laboratoria');\n}\n</code></pre>\n<p>La razón por la cual el código anterior funciona es que el motor de JavaScript\nmueve la declaración de la función <code>welcome</code> al inicio del scope. Termina\nejecutándose como si estuviera escrito de la siguiente manera:</p>\n<pre><code class=\"language-js\">function welcome() { // esta función es elevada - hoisting\n  console.log('Welcome to Laboratoria');\n}\nwelcome(); // =&gt; 'Welcome to Laboratoria'\n</code></pre>\n<p>Las declaraciones de variables son elevadas también, pero solo las declaraciones\nmás no las asignaciones. Por lo tanto, definir una función como expresión\nasignándola a una variable termina en un error en el ejemplo anterior:</p>\n<pre><code class=\"language-js\">welcome(); // TypeError: undefined is not a function\nconst welcome = function welcome() {\n  console.log('Welcome to Laboratoria');\n};\n</code></pre>\n<p>Solo las declaraciones son elevadas. El motor de JavaScript ejecuta el código\nanterior como si estuviese escrito de la siguiente manera:</p>\n<pre><code class=\"language-js\">let welcome; // undefined\nwelcome(); // TypeError: undefined is not a function\nwelcome = function welcome() {\n  console.log('Welcome to Laboratoria');\n};\n</code></pre>\n",
          "order": 1,
          "durationString": "20min"
        },
        "02-arrow": {
          "title": "Arrow Functions",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"diferencias-entre-arrow-functions-y-funciones-clásicas\">Diferencias entre arrow functions y funciones clásicas</h2>\n<p>Una de las novedades más interesantes de ES6 son las denominadas <strong>funciones\nflecha</strong>, o <em>arrow functions</em>. Las funciones flecha son, como su\nnombre indica, definidas mediante una nueva sintaxis que utiliza una \"flecha\"\n(<code>=&gt;</code>). Las funciones flecha se comportan de forma sensiblemente distinta a las\nfunciones tradicionales de JavaScript, a continuación alguna de sus diferencias:</p>\n<ul>\n<li><strong>No pueden llamarse con <code>new</code></strong>: Al no tener un método constructor, no pueden\nser utilizadas como constructores. Las funciones flecha lanzarán un error\ncuando se utilicen con <code>new</code>.</li>\n<li><strong>No hay prototipo</strong>: Al no disponer de constructor, tampoco es necesario un\nprototipo. Por lo tanto, no existirá la propiedad <code>prototype</code> en una función\nflecha.</li>\n<li><strong>No crean un nuevo contexto</strong>. El valor de <code>this</code>, <code>super</code>, <code>arguments</code> y\n<code>new.target</code> dentro de la función será el mismo que el de la función\ntradicional (<em>non-arrow</em>) más cercana.</li>\n<li><strong>No puedes cambiar <code>this</code></strong>: El valor de <code>this</code> dentro de la función flecha\npermanece inmutable a lo largo de todo el ciclo de vida de la función.</li>\n<li><strong>No hay objeto <code>arguments</code></strong>: Tan solo es posible proporcionarle parámetros a\nuna función flecha mediante parámetros nombrados y <em>rest parameters</em>.</li>\n<li><strong>No es posible duplicar parámetros con el mismo nombre</strong>: Tanto en modo\nestricto como no estricto, a diferencia de las funciones clásicas, que no lo\npermiten tan solo en modo estricto.</li>\n</ul>\n<h2 id=\"sintáxis\">Sintáxis</h2>\n<p>El ejemplo más simple de <em>arrow function</em> es el siguiente, aunque veremos en los\nejemplos siguientes que existen diversas variaciones.</p>\n<pre><code class=\"language-js\">const echo = text =&gt; text;\n</code></pre>\n<p>Esta función sería equivalente a la siguiente:</p>\n<pre><code class=\"language-js\">const echo = function (text) {\n  return text;\n};\n</code></pre>\n<p>En ambos casos, la ejecución de la función daría la siguiente salida:</p>\n<pre><code class=\"language-js\">console.log(echo('Hola Mundo!')); // =&gt; Hola Mundo!\n</code></pre>\n<p>Como con cualquier función, podemos pasar tantos argumentos como queramos a la\nfunción:</p>\n<pre><code class=\"language-js\">const sum = (a, b) =&gt; a + b;\nconsole.log(sum(1, 1)); // =&gt; 2\n</code></pre>\n<p>O ninguno, claro:</p>\n<pre><code class=\"language-js\">const greet = () =&gt; 'Hola, forastero!';\nconsole.log(greet()); // =&gt; Hola, forastero!\n</code></pre>\n<p>Si queremos realizar operaciones más complicadas, podemos hacerlo con llaves y\ndefiniendo un valor de retorno:</p>\n<pre><code class=\"language-js\">const resize = ({x, y}, ratio) =&gt; {\n  return {\n    x: x * ratio,\n    y: y * ratio\n  };\n};\n\nconsole.log(resize({ x: 5, y: 15 }, 100)); // =&gt; { x: 500, y: 1500 }\n</code></pre>\n<p>Una función flecha no crea un nuevo contexto. Una de las mayores fuentes de\nerrores en JavaScript venía dada por la creación de distintos contextos en una\nfunción dependiendo de quien las esté ejecutando. Tomemos el siguiente ejemplo:</p>\n<pre><code class=\"language-js\">const randomWinner = function (drivers) {\n  const winner = Math.floor(Math.random() * (0 - drivers.length) + drivers.length);\n  return drivers[winner];\n};\n\nconst F1Race = {\n  drivers: [\n    'Alonso',\n    'Vettel',\n    'Button',\n    'Massa'\n  ],\n  init: function () {\n    console.log('Los siguientes pilotos van a comenzar la carrera:', this.drivers);\n    setTimeout((function () {\n      console.log('El ganador es', randomWinner(this.drivers));\n    }), 1000);\n  }\n};\n\nF1Race.init();\n</code></pre>\n<p><code>F1Race</code> es un objeto que lanza una carrera de Fórmula 1 mediante su función\n<code>init()</code>. Al cabo de un segundo, se ejecutará la función <code>randomWinner()</code>, que a\npartir de un array de conductores, seleccionará uno al azar.</p>\n<p>Cuando ejecutamos la función <code>init()</code>, el programa escribe por consola lo\nsiguiente:</p>\n<pre><code class=\"language-text\">Los siguientes pilotos van a comenzar la carrera: [ 'Alonso', 'Vettel', 'Button', 'Massa']\n</code></pre>\n<p>Esto es posible ya que la función <code>init</code> tiene como contexto el propio objeto\n<code>F1Race</code>. Sin embargo, la función da error tras un segundo, mientras intenta\ncalcular el ganador de forma aleatoria. ¿Cómo es posible?</p>\n<p>El motivo es que la función de callback que se le pasa a <code>setTimeout</code> crea un\nnuevo contexto, en el que no existe el array drivers.</p>\n<p>En ES5 podíamos solucionar este problema utilizando <code>bind(this)</code> para asignar\nel contexto de la función de callback al del objeto que la contiene, de la\nsiguiente forma:</p>\n<pre><code class=\"language-js\">init: function () {\n  console.log('Los siguientes pilotos van a comenzar la carrera:', this.drivers);\n  setTimeout((function () {\n    console.log('El ganador es', randomWinner(this.drivers));\n  }).bind(this), 1000);\n}\n</code></pre>\n<p>Con ES2015, podemos solucionar este contratiempo utilizando arrow functions de\nuna forma mucho más elegante, ya que al no crear un nuevo contexto, <code>this</code>\nsiempre vendrá determinado por la función que lo contiene:</p>\n<pre><code class=\"language-js\">init: function () {\n  console.log('Los siguientes pilotos van a comenzar la carrera:', this.drivers);\n  setTimeout(() =&gt; console.log('El ganador es', randomWinner(this.drivers)), 1000);\n}\n</code></pre>\n",
          "order": 2,
          "durationString": "15min"
        }
      },
      "order": 2,
      "stats": {
        "duration": 50,
        "durationString": "50min",
        "exerciseCount": 0,
        "partCount": 3
      }
    },
    "04-arrays": {
      "title": "Arrays (arreglos)",
      "bonus": false,
      "description": "<p>Para resolver problemas complejos necesitamos poder agrupar y manipular data de\nuna manera más interesante. Afortunadamente, un entorno JavaScript nos permite\nlograr esto brindándonos <code>arrays</code> y <code>objects</code>. En esta unidad nos concentraremos\nen los arreglos (<code>arrays</code>) para después pasar a los objetos en más detalle.</p>\n",
      "parts": {
        "01-arrays": {
          "title": "Arreglos",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=-hLSzYr3z44",
              "id": "-hLSzYr3z44"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Aprender qué son <code>arrays</code> y para qué sirven</li>\n<li>Aprender a crear, acceder y modificar la información de un <code>array</code></li>\n</ul>\n<hr>\n<p>El texto a continuación se basa en gran medida, con ciertos ajustes, en el\ncapítulo 4 de <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>, de Marijn\nHaverbeke, 2014. Traducción en <a href=\"http://hectorip.github.io/Eloquent-JavaScript-ES-online/chapters/01_values.html\" target=\"_blank\">Español</a>\ndisponible gracias a <a href=\"https://github.com/hectorip\" target=\"_blank\">hectorip</a>, y del capítulo 3\nde <a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for kids</a>,\nNick Morgan, 2015.</p>\n<hr>\n<h2 id=\"agrupando-y-manipulando-data\">Agrupando y manipulando data</h2>\n<p>Como hemos visto, gran parte de la programación consiste en agrupar y manipular\ndata. Esto nos permite transformar datos en información y utilizar esa información\npara resolver problemas. Hasta ahora hemos podido agrupar y manipular data haciendo\nuso de tipos de datos simples como: <code>numbers</code>,<code>booleans</code> y <code>strings</code>. Sobre ellos\nhemos creado una serie de programas sencillos. También hemos aprendido a modificar\nel control de flujo de estos programas, por medio de <code>estructuras repetitivas</code>,\n<code>estructuras condicionales</code> y <code>funciones</code>, lo cual nos ha permitido crear productos\nun poco más complejos. Sin embargo, nuestros programas han estado seriamente limitados\ndebido a que operan únicamente con <strong>tipos de datos simples</strong>. Para resolver problemas\nmás complejos necesitamos poder agrupar y manipular data de una manera más interesante.\nAfortunadamente, un entorno JavaScript nos permite lograr esto brindándonos <code>arrays</code>\ny <code>objects</code>.</p>\n<h2 id=\"¿por-qué-necesitamos-arrays\">¿Por qué necesitamos arrays?</h2>\n<p>Digamos, por poner un ejemplo, que queremos representar una colección de\nnúmeros: <code>2, 3, 5, 7 y 11</code>.</p>\n<p>Una opción para representar esto sería:</p>\n<pre><code class=\"language-js\">const firstNumber = 2;\nconst secondNumber = 3;\nconst thirdNumber = 5;\nconst fourthNumber = 7;\n</code></pre>\n<p>Esta lista es bien extraña y engorrosa. Implica tener una variable para cada\nelemento de nuestra lista. Cuando en realidad sólo deberíamos tener una sola\nvariable que \"contenga\" a cada una.¡Imagina que luego quieres tener una lista\nde 1,000 elementos!</p>\n<p>Otra opción -más creativa- sería utilizar un <code>string</code>. Después de todo, los\nstrings pueden ser de cualquier longitud, así que podemos poner mucha información\nen ellos. Podríamos usar un <code>string</code> con los números intercalados por un\nespacio, así:</p>\n<pre><code class=\"language-js\">const listOfNumbers = '2 3 5 7 11';\n</code></pre>\n<p>Sin embargo, esto también resulta engorroso. Tendríamos que buscar la manera de\nextraer cada elemento del <code>string</code> (contando los espacios entre ellos) y además,\ntendríamos que convertirlos de vuelta a <code>number</code> para acceder y manipular cada\nnúmero de manera individual.</p>\n<p>Afortunadamente, Javascript proporciona un tipo de dato específico para almacenar\nsecuencias de valores. Se llama <code>array</code> (arreglo en español) y se escribe como una\nlista de valores entre corchetes, separados por comas.</p>\n<pre><code class=\"language-js\">const listOfNumbers = [2, 3, 5, 7, 11];\n</code></pre>\n<p>Los <code>arrays</code> son tremendamente útiles para agrupar y manipular data. Es como\ncuando vamos al mercado y tenemos nuestra \"lista de compras\". Podríamos tener\nuna hoja de papel para cada artículo que queremos comprar. Por ejemplo, podríamos\ntener una hoja de papel que dice \"huevos\", otra hoja que dice \"pan\", y otra hoja\nque dice \"naranjas\". Sin embargo, la mayoría de la gente escribe la lista completa\nde cosas a comprar en <strong>una sola hoja de papel</strong>.</p>\n<h2 id=\"accediendo-información-de-un-array\">Accediendo información de un array</h2>\n<p>Antes de comenzar, vamos a generar una pequeña función utilitaria,\nque nos permita decir si dos string son iguales. La colocaremos\nen el <code>prototype</code> de <code>Array</code>.</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n\nconsole.assert(equal([1, 2, 3], [1, 2, 3]));\nconsole.assert(!equal([1, 2, 3], ['a', 'b', 'c']));\nconsole.assert(!equal([1, 2, 3], [3, 2, 1]));\n</code></pre>\n<p>Para obtener un elemento dentro de un <code>array</code>, se utiliza la notación con corchetes,\ncon el <em>index</em> (índice en español) del elemento que se desea. Veamos un ejemplo:</p>\n<pre><code class=\"language-js\">listOfNumbers = [2, 3, 5, 7, 11];\n\nconsole.assert(listOfNumbers[1] === 3);\nconsole.assert(listOfNumbers[1 - 1] === 2);\n</code></pre>\n<p>El <em>index</em> es el número que corresponde a (o que coincide con) el punto del <code>array</code>\ndonde se almacena el valor. Al igual que con los <code>strings</code>, el primer elemento\nde un <code>array</code> está en el <code>index 0</code>, el segundo está en el <code>index 1</code>, el tercero\nen el <code>index 2</code>, y así sucesivamente. Es por eso que pedir index <code>1 - 1</code>\n(es decir, 0) del array anterior devuelve el número <code>2</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/211721/40194836-51eebf22-59d1-11e8-8de8-8b29feb3bbf7.png\" alt=\"image\"></p>\n<p>Si no tienes antecedentes en programación, acostumbrarte a esta convención puede\ntomarte algún tiempo. Pero el conteo con base cero tiene una larga tradición en\ntecnología y mientras la convención se siga de manera consistente (que se ha hecho\nen Javascript), funciona bien.</p>\n<h2 id=\"definiendo-o-cambiando-los-elementos-de-un-array\">Definiendo o cambiando los elementos de un array</h2>\n<p>Podemos utilizar los <em>indexes</em> entre corchetes para establecer, cambiar o incluso\nagregar elementos a un <code>array</code>. Por ejemplo, para reemplazar el primer elemento del\narray <code>listOfNumbers</code> por el número 1, podríamos hacer lo siguiente:</p>\n<pre><code class=\"language-js\">listOfNumbers = [2, 3, 5, 7, 11];\nlistOfNumbers[0] = 1;\n\nconsole.assert(\n  equal(listOfNumbers, [1, 3, 5, 7, 11]),\n);\n</code></pre>\n<p>También podemos utilizar los <em>indexes</em> entre corchetes para agregar elementos en\nun <code>array</code>. Por ejemplo, para agregar el número 13 al array <code>listOfNumbers</code>,\nharíamos lo siguiente:</p>\n<pre><code class=\"language-js\">listOfNumbers = [2, 3, 5, 7, 11];\nlistOfNumbers[5] = 13;\n\nconsole.assert(\n  equal(listOfNumbers, [2, 3, 5, 7, 11, 13]),\n);\n</code></pre>\n<p>De hecho, podemos crear un <code>array</code> vacío y luego definir cada elemento de forma\nindividual, así:</p>\n<pre><code class=\"language-js\">listOfNumbers = [];\nlistOfNumbers[0] = 2;\nlistOfNumbers[1] = 3;\nlistOfNumbers[2] = 5;\nlistOfNumbers[3] = 7;\nlistOfNumbers[4] = 11;\n\nconsole.assert(\n  equal(listOfNumbers, [2, 3, 5, 7, 11]),\n);\n</code></pre>\n<h2 id=\"mezclando-tipos-de-datos-en-arrays\">Mezclando tipos de datos en arrays</h2>\n<p>Los elementos de un <code>array</code> no tienen que ser todos del mismo tipo de dato.\nPodemos, por ejemplo, tener un <code>array</code> que contenga un <code>number</code> (el número 3),\nun <code>string</code> (\"hola mundo\") y otro <code>number</code> (el número 3627.5):</p>\n<pre><code class=\"language-js\">const mixedArray = [3, 'hola mundo', 3627.5];\nconsole.assert(mixedArray[0] === 3);\nconsole.assert(mixedArray[1] === 'hola mundo');\nconsole.assert(mixedArray[2] === 3627.5);\n</code></pre>\n<p>Inclusive podemos tener un <code>array</code> dentro de otro <code>array</code> (algo que mucha gente\nllama arrays de 2 dimensiones). Por ejemplo, para organizar la data de preguntas\ny respuestas de un quiz, podemos utilizar un <code>array</code> en el que cada elemento es,\na su vez, un <code>array</code> que tiene dos elementos: una pregunta y una respuesta.</p>\n<pre><code class=\"language-js\">let questions = [\n  ['¿En cuántos países opera Laboratoria?', 4],\n  ['¿Cuál es la capital de Perú?', 'Lima'],\n  ['¿Cuál es baile típico Chileno?', 'Cueca'],\n  ['¿Cuál es la moneda de México?', 'Peso'],\n];\n</code></pre>\n<p>Para acceder a elementos individuales de los arrays internos simplemente se añade\nun nuevo par de corchetes con el index correspondiente. Por ejemplo, para obtener\nla respuesta a la pregunta '¿Cuál es la moneda de México?' haríamos:</p>\n<pre><code class=\"language-js\">questions = [\n  ['¿En cuántos países opera Laboratoria?', 4],\n  ['¿Cuál es la capital de Perú?', 'Lima'],\n  ['¿Cuál es baile típico Chileno?', 'Cueca'],\n  ['¿Cuál es la moneda de México?', 'Peso'],\n];\nconsole.assert(questions[3][1] === 'Peso');\n</code></pre>\n<p>Vamos a hacerlo de nuevo paso a paso</p>\n<pre><code class=\"language-js\">questions = [\n  ['¿En cuántos países opera Laboratoria?', 4],\n  ['¿Cuál es la capital de Perú?', 'Lima'],\n  ['¿Cuál es baile típico Chileno?', 'Cueca'],\n  ['¿Cuál es la moneda de México?', 'Peso'],\n];\nconst quest3 = questions[3];\nconsole.assert(\n  equal(quest3, ['¿Cuál es la moneda de México?', 'Peso']),\n);\nconsole.assert(quest3[1] === 'Peso');\n</code></pre>\n<p>A continuación Michelle nos explica los conceptos principales de <code>arrays</code> con un\nejemplo:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/-hLSzYr3z44?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 0,
          "durationString": "1h"
        },
        "02-array-proto": {
          "title": "Array.prototype",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<p>Los arreglos (arrays) en JavaScript están implementados como objetos, lo cual\npuede sonar un poco raro, pero en JavaScript casi todos los tipos de datos\n(<code>Number</code>, <code>String</code>, <code>Array</code>, ...) están implementados como objetos, y como\ntales, los valores de estos <em>tipos</em> van a tener una serie de <em>métodos</em> y\n<em>propiedades</em> asociados a ellos. Técnicamente heredan estos <em>métodos</em> y\n<em>propiedades</em> de un <em>prototipo</em>.</p>\n<p>En este curso no vamos a profundizar en el mecanismo de <em>herencia prototipal</em>\nen JavaScript, pero sí necesitamos saber que todo arreglo en JavaScript es una\n<em>instancia</em> del <em>constructor</em> <code>Array</code>, y por tanto hereda todos los <em>métodos</em> y\n<em>propiedades</em> definidas en <code>Array.prototype</code>.</p>\n<p>De hecho, todos los objetos tienen un <em>prototipo</em>... y por ejemplo, es a través\nde estos prototipos que nuestros strings mágicamente tienen una <em>propiedad</em>\n<code>length</code> o un método <code>toLowerCase()</code>. Los hereda de <code>String.prototype.length</code> y\n<code>String.prototype.toLowerCase</code>.</p>\n<p>Regresando a los arreglos... veamos un ejempo. Abre la consola del navegador y\nescribe <code>[].</code>. Automáticamente debería salir una lista con todos los <em>métodos</em> y\n<em>propiedades</em> que tiene nuestro arreglo vacío (<code>[]</code>).</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/37485550-c77d636e-2859-11e8-8b76-21fc103691e5.png\" alt=\"Array methods and props in browser console\"></p>\n<h2 id=\"propiedades-arrayprototype\">Propiedades <code>Array.prototype</code></h2>\n<p>Antes de comenzar, recordemos cómo era nuestra función\nque nos permitía comparar arrays</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n</code></pre>\n<p>La única propiedad que nos interesa por ahora de los arreglos es\n<code>Array.prototype.length</code>, que es una propiedad de sólo lectura que siempre nos\nmuestra la longitud actual del arreglo. Por ejemplo:</p>\n<pre><code class=\"language-js\">console.assert([].length === 0);\nconsole.assert(['a'].length === 1);\nconsole.assert([true, 0, 'foo'].length === 3);\n</code></pre>\n<h2 id=\"métodos-comunes-de-arrayprototype\">Métodos comunes de <code>Array.prototype</code></h2>\n<p>JavaScript nos ofrece un montón de métodos para manipular arreglos, para iterar\nsobre ellos, ... no te preocupes por memorizar la lista completa (no creo que\nnadie la sepa de memoria), poco a poco con el uso irás familiarizándote y\naprendiendo a apreciar sus beneficios. Recuerda que siempre tienes la\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">documentación oficial</a>\ndisponible, haz uso de ella, es la mejor referencia.</p>\n<p>Veamos algunos métodos comunes de los arreglos.</p>\n<h3 id=\"arrayprototypepush\"><code>Array.prototype.push</code></h3>\n<p>El método <code>Array.prototype.push</code> recibe un valor, lo agrega al final del\narreglo sobre el que se invocó y retorna la nueva longitud del arreglo.</p>\n<pre><code class=\"language-js\">let arr = [0, 0, 0];\nconsole.assert(arr.length === 3);\nconsole.assert(typeof arr.push === 'function');\nconsole.assert(arr.push(1) === 4);\nconsole.assert(equal(arr, [0, 0, 0, 1]));\n</code></pre>\n<p>En este caso, la funcionalidad del método <code>push()</code> puede replicarse usando una\nsimple asignación:</p>\n<pre><code class=\"language-js\">arr = [0, 0, 0];\nconsole.assert(arr.length === 3);\narr[arr.length] = 1;\nconsole.assert(equal(arr, [0, 0, 0, 1]));\n</code></pre>\n<p>La mayor diferencia es un tema de semántica y estilo/paradigma, quizás parezca\nsútil, pero creanme, más adelante verán lo valiosa que es. En programación\nmuchas veces veremos que hay más de una manera de hacer las cosas, lo cual puede\ncrear confusión y frustración, pero al final son el reflejo de diferentes formas\nde pensar en código, y cada una tiene su lugar. Por ejemplo, en <em>programación\nfuncional</em> que veremos más adelante en el Bootcamp, favorecemos el cómputo a\ntravés de la aplicación de argumentos a funciones y tratamos de evitar la\nasignación y mutación de valores. En ese contexto, y en particular en JavaScript\nmoderno, vamos a ver que los métodos de los arreglos nos van a permitir escribir\ncódigo más expresivo, conciso y, por qué no, bonito.</p>\n<h3 id=\"arrayprototypepop\"><code>Array.prototype.pop</code></h3>\n<p>Éste método no recibe ningún argumento, simplemente extrae el último elemento\ndel arreglo y lo retorna (modificando el arreglo directamente - <em>in place</em>).</p>\n<pre><code class=\"language-js\">arr = ['oh', 'my', 'god'];\nconsole.assert(arr.pop() === 'god');\nconsole.assert(equal(arr, ['oh', 'my']));\n</code></pre>\n<h3 id=\"arrayprototypeslice\"><code>Array.prototype.slice</code></h3>\n<p><code>Array.prototype.slice</code> crea un nuevo arreglo con una copia superficial\n(<em>shallow copy</em>) de una porción del arreglo obre el cual se invoca. Recibe dos\nargumentos, <code>begin</code> y <code>end</code>, que indican que porción del arreglo queremos\ncopiar. <code>begin</code> es el índice a partir del cual queremos empezar a copiar, y\n<code>end</code> hasta donde copiar (sin incluir el elemento con índice <code>end</code>).</p>\n<p>El arreglo original no se ve modificado.</p>\n<p>Ejecuta los siguientes ejemplos en la consola del navegador para que veas como\nse comporta el método <code>slice()</code>.</p>\n<pre><code class=\"language-js\">arr = [3, 2, 1];\nconsole.assert(\n  equal(arr.slice(0), [3, 2, 1]),\n);\nconsole.assert(\n  equal(arr.slice(1), [2, 1]),\n);\nconsole.assert(\n  equal(arr.slice(2), [1]),\n);\nconsole.assert(\n  equal(arr.slice(-1), [1]),\n);\nconsole.assert(\n  equal(arr.slice(0, 1), [3]),\n);\nconsole.assert(\n  equal(arr, [3, 2, 1]),\n);\n</code></pre>\n<h3 id=\"arrayprototypeindexof\"><code>Array.prototype.indexOf</code></h3>\n<p>El método <code>indexOf()</code> recibe un valor, y devuelve el índice que contenga ese\nvalor si lo encuentra, si no devuelve <code>-1</code>. Este método se usa de forma muy\ncomún para comprobar si un arreglo contiene un determinado valor.</p>\n<pre><code class=\"language-js\">arr = ['foo', 'bar', 'baz'];\nconsole.assert(arr.indexOf('foo') === 0);\nconsole.assert(arr.indexOf('hmmm') === -1);\n</code></pre>\n<h2 id=\"propiedades-y-métodos-heredados-de-objectprototype\">Propiedades y métodos heredados de Object.prototype</h2>\n<p>Cabe mencionar que los arreglos también heredan de <code>Object.prototype</code>\nindirectamente, al igual que todos los demás objetos en JavaScript, así que\nnuestros arreglos también tendrán métodos como <code>toString()</code> o <code>isPrototypeOf()</code>.\nEn la próxima unidad (y cursos posteriores) iremos explorando\n<code>Object.prototype</code>, el concepto de <em>herencia</em> y la cadena de prototipos.</p>\n<hr>\n<p>En esta lectura hemos visto algunos ejemplos de métodos que tienen todos los\narreglos, pero hay muchos más. Te recomendamos explorar la documentación oficial\nde <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\" target=\"_blank\">Array.prototype en MDN</a>,\nahí podrás ver todos los <em>métodos</em> y <em>propiedades</em> disponibles y sus interfaces\n(qué argumentos esperan, qué retornan, ...).</p>\n<h2 id=\"lecturas-complementarias\">Lecturas complementarias</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">Array en MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\">Object.prototype en MDN</a></li>\n<li><a href=\"https://javascript.info/array\" target=\"_blank\">Array en javascript.info</a></li>\n</ul>\n",
          "order": 1,
          "durationString": "30min"
        },
        "03-filter-map-sort-reduce": {
          "title": "`filter`, `map`,`sort` y`reduce`",
          "type": "read",
          "format": "self-paced",
          "duration": 45,
          "body": "<p>Ya vimos algunos de los métodos de uso más común de los arreglos,\npero <code>Array.prototype</code> provee mucho métodos más.</p>\n<p>Para facilitarte un poco la vida, los hemos dividido de la siguiente manera:</p>\n<ul>\n<li>para agregar y quitar elementos: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>,\n<code>splice</code> y <code>concat</code>.</li>\n<li>para buscar elementos dentro del array: <code>indexOf</code>, <code>lastIndexOf</code>, <code>includes</code>,\n<code>find</code>, <code>findIndex</code> y <code>filter</code>.</li>\n<li>para transformar el array: <code>map</code>,<code>reduce</code>, <code>sort</code>, <code>reverse</code>, <code>split</code> y <code>join</code>.</li>\n</ul>\n<p>Nosotros ahora nos enfocaremos en los 4 que consideramos un poco más utilizados:\n<code>filter</code>, <code>map</code> <code>sort</code> y <code>reduce</code>.</p>\n<p>Para conocer al detalle cada unos de estos métodos, visita la documentación en\n<a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array#M.C3.A9todos\" target=\"_blank\">MDN</a>,</p>\n<p>Como hasta ahora, apelamos a nuestra función para comparar arrays.</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n</code></pre>\n<p>Y a un conjunto de datos que utilizaremos como ejemplo para nuestros ejemplos</p>\n<pre><code class=\"language-js\">const inventors = [\n  {\n    first: 'Ada',\n    last: 'Lovelace',\n    year: 1815,\n    passed: 1852,\n  },\n  {\n    first: 'Lise',\n    last: 'Meitner',\n    year: 1878,\n    passed: 1968,\n  },\n  {\n    first: 'Caroline',\n    last: 'Herschel',\n    year: 1750,\n    passed: 1848,\n  },\n  {\n    first: 'Hanna',\n    last: 'Hammarström',\n    year: 1829,\n    passed: 1909,\n  },\n];\n</code></pre>\n<p>Ahora que tenemos todo, comencemos.</p>\n<h2 id=\"arrayprototypefilter\"><code>Array.prototype.filter</code></h2>\n<p><code>filter</code> nos permite obtener un subconjunto de los elementos\ndel array, que cumplan con cierta condición</p>\n<pre><code class=\"language-js\">const deadBeforeSXX = inventors.filter(inventor =&gt; (inventor.passed &lt; 1900));\nconsole.assert(\n  equal(deadBeforeSXX, [\n    {\n      first: 'Ada',\n      last: 'Lovelace',\n      year: 1815,\n      passed: 1852,\n    },\n    {\n      first: 'Caroline',\n      last: 'Herschel',\n      year: 1750,\n      passed: 1848,\n    },\n  ]),\n);\n</code></pre>\n<h2 id=\"arrayprototypemap\"><code>Array.prototype.map</code></h2>\n<p><code>map</code> nos permite visitar cada uno de los elementos del array,\nrecolectando en el proceso, un valor de retorno para cada\nelemento visitado</p>\n<p>Por ejemplo, supongamos que queremos un lista de nombre y apellido\nde nuestro dataset</p>\n<pre><code class=\"language-js\">const fullNames = inventors.map(inventor =&gt; `${inventor.first} ${inventor.last}`);\nconsole.assert(\n  equal(fullNames, [\n    'Ada Lovelace',\n    'Lise Meitner',\n    'Caroline Herschel',\n    'Hanna Hammarström',\n  ]),\n);\n</code></pre>\n<p>O los años que vivió cada una</p>\n<pre><code class=\"language-js\">const yearAlive = inventors.map(({\n  first, last, passed, year,\n}) =&gt; [`${first} ${last}`, passed - year]);\nconsole.assert(\n  equal(yearAlive, [\n    ['Ada Lovelace', 37],\n    ['Lise Meitner', 90],\n    ['Caroline Herschel', 98],\n    ['Hanna Hammarström', 80],\n  ]),\n);\n</code></pre>\n<h2 id=\"arrayprototypesort\"><code>Array.prototype.sort</code></h2>\n<p>Ordena el array <em>in place</em>.</p>\n<pre><code class=\"language-js\">let arr = [1, 2, 15];\narr.sort();\nconsole.assert(equal(arr, [1, 15, 2]));\n</code></pre>\n<p>Si te fijas bien, aquí hay algo raro, y es que por defecto sort ordena el array,\nconvirtiendo a todos los elementos en <code>Strings</code>,\nes por eso que <code>15</code> aparece antes que <code>2</code>.</p>\n<p>Cómo lo solucionamos?</p>\n<pre><code class=\"language-js\">const compareNumeric = (a, b) =&gt; {\n  if (a &gt; b) return 1;\n  if (a === b) return 0;\n  /* if (a &lt; b) */\n  return -1;\n};\narr = [1, 2, 15];\narr.sort(compareNumeric);\nconsole.assert(\n  equal(arr, [1, 2, 15]),\n);\n</code></pre>\n<p>Veamos unos ejemplos más interesantes</p>\n<h3 id=\"ordenar-de-mayor-a-menor-según-año-de-nacimiento\">Ordenar de mayor a menor según año de nacimiento</h3>\n<pre><code class=\"language-js\">let ordered = inventors.sort((a, b) =&gt; {\n  if (a.year &gt; b.year) {\n    return 1;\n  }\n  return -1;\n});\nconsole.assert(equal(\n  ordered,\n  [\n    {\n      first: 'Caroline',\n      last: 'Herschel',\n      year: 1750,\n      passed: 1848,\n    },\n    {\n      first: 'Ada',\n      last: 'Lovelace',\n      year: 1815,\n      passed: 1852,\n    },\n    {\n      first: 'Hanna',\n      last: 'Hammarström',\n      year: 1829,\n      passed: 1909,\n    },\n    {\n      first: 'Lise',\n      last: 'Meitner',\n      year: 1878,\n      passed: 1968,\n    },\n  ],\n));\n</code></pre>\n<p>Podríamos haber escrito la función de comparación con un operador\nternario y obtenido el mismo resultado.</p>\n<pre><code class=\"language-js\">ordered = inventors.sort((a, b) =&gt; (a.year &gt; b.year ? 1 : -1));\n</code></pre>\n<h3 id=\"ordenar-según-la-cantidad-de-años-vividos\">Ordenar según la cantidad de años vividos</h3>\n<pre><code class=\"language-js\">const moreYearsAlive = inventors.sort((a, b) =&gt; {\n  const last = a.passed - a.year;\n  const next = b.passed - b.year;\n  return last &gt; next ? -1 : 1;\n});\nconsole.assert(equal(\n  moreYearsAlive,\n  [\n    {\n      first: 'Caroline',\n      last: 'Herschel',\n      year: 1750,\n      passed: 1848,\n    },\n    {\n      first: 'Lise',\n      last: 'Meitner',\n      year: 1878,\n      passed: 1968,\n    },\n    {\n      first: 'Hanna',\n      last: 'Hammarström',\n      year: 1829,\n      passed: 1909,\n    },\n    {\n      first: 'Ada',\n      last: 'Lovelace',\n      year: 1815,\n      passed: 1852,\n    },\n  ],\n));\n</code></pre>\n<h2 id=\"arrayprototypereduce\"><code>Array.prototype.reduce</code></h2>\n<p>Cuando queremos iterar un array, usamos <code>forEach</code>.\nAhora bien, para hacer lo mismo pero recolectando una lista de valores,\ncon un valor de cada elemento, usamos <code>map</code>.</p>\n<p><code>reduce</code> es similar a map, pero lo usamos para iterar un array\ny obtener un <strong>único valor</strong> que contenga un consolidado de\ntodos los elementos.</p>\n<p>Su signatura es la siguiente:</p>\n<pre><code class=\"language-js\">let initial = 0;\nconst value = arr.reduce((previousValue, item, index, array) =&gt; {\n  /* aqui tu codigo */\n}, initial);\n</code></pre>\n<p>Donde</p>\n<ul>\n<li><p><code>item</code> -- es el elemento actual que estamos iterando</p>\n</li>\n<li><p><code>index</code> -- el índice actual</p>\n</li>\n<li><p><code>array</code> -- el array actual.</p>\n</li>\n</ul>\n<p>Hasta aquí todo mas o menos normal, pero se agrega un parámetro:</p>\n<ul>\n<li><code>previousValue</code> -- que es el resultado de la llamada anterior de la función.\nEn la primera llamada a la función, el valor de <code>previousValue</code> es <code>initial</code>.</li>\n</ul>\n<p>Veamos un ejemplo simple: Sumar todos los elementos de un array</p>\n<pre><code class=\"language-js\">arr = [1, 2, 3, 4, 5];\ninitial = 0;\nconst arrSum = arr.reduce((sum, current) =&gt; sum + current, initial);\nconsole.assert(arrSum === 15);\n</code></pre>\n<p>Aqui usamos la variante más común de <code>reduce</code>, que sólo utiliza los dos primeros\nargumentos.</p>\n<p>Veamos más detalle que está sucediendo:</p>\n<ol>\n<li>En la primera llamada, <code>sum</code> tiene el valor <code>initial</code> (el segundo argumento\nde <code>reduce</code>), que es <code>0</code>. Y <code>current</code> es el primer elemento del array, que es\n<code>1</code>. Entonces el resultado es <code>1</code>.</li>\n<li>En la segunda llamada, <code>sum === 1</code>, y sumamos el segundo elemento del array\n(<code>2</code>) y devolvemos.</li>\n<li>En la tercera llamada, <code>sum === 3</code> y sumamos al tercer elemento (<code>3</code>) ...</li>\n</ol>\n<p>Y así sigue:</p>\n<p><img src=\"https://user-images.githubusercontent.com/211721/40194646-c88004e4-59d0-11e8-8ba2-71e6afeef003.png\" alt=\"image\"></p>\n<p>Si lo pasamos a una tabla, donde cada fila representa una llamada a la función\nsobre el próximo elemento del array</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>sum</code></th>\n<th><code>current</code></th>\n<th><code>result</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>primera llamada</td>\n<td><code>0</code></td>\n<td><code>1</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td>segunda llamada</td>\n<td><code>1</code></td>\n<td><code>2</code></td>\n<td><code>3</code></td>\n</tr>\n<tr>\n<td>tercera llamada</td>\n<td><code>3</code></td>\n<td><code>3</code></td>\n<td><code>6</code></td>\n</tr>\n<tr>\n<td>cuarta llamada</td>\n<td><code>6</code></td>\n<td><code>4</code></td>\n<td><code>10</code></td>\n</tr>\n<tr>\n<td>quinta llamada</td>\n<td><code>10</code></td>\n<td><code>5</code></td>\n<td><code>15</code></td>\n</tr>\n</tbody></table>\n<p>Como se puede apreciar, el resultado de la llamada anterior, se convierte en el\nprimer parámetro de la próxima llamada.</p>\n<p>Y para terminar, solo decir que <code>reduceRight</code> hace lo mismo, pero comenzando por\nel final del array.</p>\n<p>Veamos ahora un par de ejemplos:</p>\n<h3 id=\"calcular-la-cantidad-de-años-vividos-de-todas-las-inventoras-sumadas\">Calcular la cantidad de años vividos, de todas las inventoras sumadas</h3>\n<pre><code class=\"language-js\">const totalYears = inventors.reduce(\n  (total, inventor) =&gt; total + (inventor.passed - inventor.year),\n  0,\n);\nconsole.assert(totalYears === 305);\n</code></pre>\n<h3 id=\"sumar-la-cantidad-de-apariciones-de-cada-medio-de-transporte\">Sumar la cantidad de apariciones de cada medio de transporte</h3>\n<p>Cambiamos de dataset</p>\n<pre><code class=\"language-js\">const transportationData = [\n  'car', 'car', 'truck', 'truck', 'bike', 'walk',\n  'car', 'van', 'bike', 'walk', 'car', 'van',\n  'car', 'truck',\n];\n\nconst transportReduceFn = (obj, item) =&gt; {\n  const result = {\n    ...obj,\n  };\n  /* si es la primera vez que encuentro este medio de transporte */\n  if (!obj[item]) {\n    result[item] = 0; /* inicializo en 0 */\n  }\n  result[item] += 1;\n  return result;\n};\n\nlet transportation = transportationData.reduce(transportReduceFn, {});\nconsole.assert(equal(\n  transportation,\n  {\n    car: 5, truck: 3, bike: 2, walk: 2, van: 2,\n  },\n));\n</code></pre>\n<h3 id=\"ahora-lo-mismo-pero-agregando-un-nuevo-medio-de-transporte-pogostick\">Ahora lo mismo, pero agregando un nuevo medio de transporte (pogostick)</h3>\n<pre><code class=\"language-js\">transportationData.push('pogostick');\ntransportation = transportationData.reduce(transportReduceFn, {});\nconsole.assert(equal(\n  transportation,\n  {\n    car: 5, truck: 3, bike: 2, walk: 2, van: 2, pogostick: 1,\n  },\n));\n</code></pre>\n<hr>\n<p>En esta lectura hemos visto algunos ejemplos de métodos de arrays que siempre al\ncomienzo, pero que una vez que uno aprende a dominarlos, son super útiles.</p>\n<h2 id=\"lecturas-complementarias\">Lecturas complementarias</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">Array en MDN</a></li>\n<li><a href=\"https://javascript.info/array-methods\" target=\"_blank\">Array methods en javascript.info</a></li>\n</ul>\n",
          "order": 2,
          "durationString": "45min"
        },
        "04-guided-exercises": {
          "title": "Ejercicios guiados",
          "type": "practice",
          "format": "self-paced",
          "duration": 80,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=U3CGMyjzlvM",
              "id": "U3CGMyjzlvM"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=BgcnOdIrUdo",
              "id": "BgcnOdIrUdo"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=JjcDSIShTm0",
              "id": "JjcDSIShTm0"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Al igual que hemos hecho antes, es hora de aplicar los conceptos aprendidos para\nresolver problemas.</p>\n<p>A continuación tendrás varios problemas que debemos resolver. Intenta\nresolverlos primero por tu cuenta. Más abajo encontrarás las soluciones de\nLourdes, otra instructora estrella de Laboratoria. Después de haberlo intentado,\ncompara tus soluciones con las de Lourdes.</p>\n<h3 id=\"1-reverse\">1. Reverse</h3>\n<p>Crea una función que invierta el orden de los elementos de un <code>array</code>. Completa\neste reto de dos maneras: en una, el <code>array</code> invertido es un <em>nuevo</em> <code>array</code>;\nen la segunda, modifica el mismo <code>array</code> que se proporciona como argumento.\nInvestiga sobre el método <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\"><code>reverse</code></a>.\n¿Qué puedes concluir?</p>\n<h3 id=\"2-search\">2. Search</h3>\n<p>Crea una función que busque un elemento en un <code>array</code>, devolviendo su posición\n(index) e imprima el valor en la consola. Tip: utiliza el <a href=\"https://en.wikipedia.org/wiki/Linear_search\" target=\"_blank\"><code>algoritmo de linear search</code></a>. Con este ejercicio\nintroducimos el concepto de <code>algoritmo</code>. Para entender qué es un algoritmo,\nrevisa los siguientes videos:</p>\n<ul>\n<li><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/U3CGMyjzlvM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></li>\n<li>[Kahn Academy: ¿Qué es un algoritmo y por qué debería importarte?]\n(<a href=\"https://es.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/v/what-are-algorithms\" target=\"_blank\">https://es.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/v/what-are-algorithms</a>)</li>\n</ul>\n<h2 id=\"solucionarios\">Solucionarios</h2>\n<p>A continuación, Lourdes te explica cómo resolvió cada uno de los ejercicios\nanteriores.</p>\n<h3 id=\"1-reverse-1\">1. Reverse</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/BgcnOdIrUdo?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"2-search-1\">2. Search</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/JjcDSIShTm0?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "1.3h"
        },
        "05-quiz": {
          "questions": [
            {
              "title": "1) Los elementos de un Array tienen que ser todos del mismo tipo de dato",
              "description": "",
              "answers": [
                "Verdadero",
                "Falso"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) ¿Para qué son útiles los Arrays?",
              "description": "",
              "answers": [
                "Para ya no usar strings",
                "Para iniciar tu programa",
                "Para ya no usar variables",
                "Para agrupar y manipular data"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "3) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [2, 3, 4, 5, 6];\n</code></pre><p>¿Qué resultado obtengo al realizar <code>console.log(listOfNumbers[3])</code> ?</p>",
              "answers": [
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>",
                "<code>6</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "4) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [2, 3, 4, 5, 6];\n</code></pre><p>Si realizo <code>listOfNumbers[3] = 1</code> ¿cuál sería el resultado del Array?</p>",
              "answers": [
                "<code>[1, 3, 4, 5, 6]</code>",
                "<code>[2, 1, 4, 5, 6]</code>",
                "<code>[2, 3, 1, 5, 6]</code>",
                "<code>[2, 3, 4, 1, 6]</code>",
                "<code>[2, 3, 4, 5, 1]</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const questions = [\n  ['¿En cuántos países opera Laboratoria?', 3],\n  ['¿Cuál es la capital de Perú?', 'Lima'],\n  ['¿Cuál es baile típico Chileno?', 'Cueca'],\n  ['¿Cuál es la moneda de México?', 'Peso'],\n];\n</code></pre><p>¿Cómo obtengo el dato <code>Lima</code>?</p>",
              "answers": [
                "<code>console.log(questions[1][1])</code>",
                "<code>console.log(questions[1][2])</code>",
                "<code>console.log(questions[2][1])</code>",
                "<code>console.log(questions[2][2])</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "6) Los elementos de un Array se almacenan en propiedades",
              "description": "",
              "answers": [
                "Verdadero",
                "Falso"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "7) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const coders = ['michelle', 'lourdes', 'ruth'];\n\ncoders.push('alejandra');\n</code></pre>",
              "answers": [
                "<code>['alejandra']</code>",
                "<code>['alejandra','michelle', 'lourdes', 'ruth']</code>",
                "<code>['michelle', 'lourdes', 'ruth', 'alejandra']</code>",
                "El código carece de argumentos."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const coders = ['michelle', 'lourdes', 'ruth'];\nconst removed = coders.shift();\n\nconsole.log('Elemento eliminado: ' + removed);\n</code></pre>",
              "answers": [
                "Elemento eliminado: michelle",
                "Elemento eliminado: lourdes",
                "Elemento eliminado: ruth",
                "undefined"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "9) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const courses = ['Intro JS', 'Intro UX', 'UX master'];\ncourses.unshift('JS master', 'English for Developers');\n\nconsole.log(courses.length);\n</code></pre>",
              "answers": [
                "<code>['JS master', 'English for Developers']</code>",
                "<code>['Intro JS', 'Intro UX', 'UX master', 'JS master', 'English for Developers']</code>",
                "<code>3</code>",
                "<code>5</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "10) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [];\n\nfor (let i = 0; i &lt;= 5; i += 1) {\n  listOfNumbers.push(i);\n}\n\nlistOfNumbers.pop();\n\nconsole.log(listOfNumbers.length);\n</code></pre>",
              "answers": [
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "11) En el siguiente código, completa el espacio",
              "description": "<pre><code class=\"language-js\">const course1 = 'Intro JS, ' ;\nconst course2 = 'Intro UX, ';\nconst course3 = 'UX master.';\n\nconst allCourses = ___________(course2, course3);\n\nconsole.log(allCourses);\n// → Intro JS, Intro UX, UX master.\n</code></pre>",
              "answers": [
                "<code>concat{course1}</code>",
                "<code>course1.concat</code>",
                "<code>concat(course1).</code>",
                "<code>concat + course1 +</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "12) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const courses = ['Intro JS', 'Intro UX', 'UX master', 'JS master'];\ncourses.pop();\ncourses.push('English for Developers');\n\ncourses.indexOf('English for Developers');\n</code></pre>",
              "answers": [
                "<code>1</code>",
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "13) En el siguiente código, ¿qué método debo usar para obtener el resultado solicitado?",
              "description": "<pre><code class=\"language-js\">const courses = ['Intro JS', 'Intro UX', 'UX master', 'JS master'];\ncourses.___________;\n\n// → 'Intro JS,Intro UX,UX master,JS master'\n</code></pre>",
              "answers": [
                "<code>concat()</code>",
                "<code>join()</code>",
                "<code>string()</code>",
                "<code>unshift()</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "14) En el siguiente código, ¿cuál sería el resultado?",
              "description": "<pre><code class=\"language-js\">const coders = ['michelle', 'lourdes', 'ruth', 'mariana'];\n\nif (coders.length &lt; 3) {\n  coders.push('alejandra');\n  coders.slice(1, 2);\n} else {\n  coders.pop();\n  coders.slice(1, 3);\n}\n</code></pre>",
              "answers": [
                "<code>['alejandra']</code>",
                "<code>['lourdes']</code>",
                "<code>['lourdes', 'ruth']</code>",
                "<code>['lourdes', 'ruth', 'mariana']</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "15) ¿Cuál sería el resultado en el siguiente código?",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [2, 12, 5, 8, 16, 12, 8];\nlistOfNumbers.lastIndexOf(12);\n</code></pre>",
              "answers": [
                "<code>1</code>",
                "<code>2</code>",
                "<code>5</code>",
                "<code>6</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "16) En el siguiente código, completa los espacios para que se invierta el orden de los elementos del array",
              "description": "<pre><code class=\"language-js\">const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (let i = 0; i &lt; array.length; i += 1) {\n  const item = array._________();\n  array._________(i, 0, item);\n}\n\nconsole.log(array);\n// → [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n</code></pre>",
              "answers": [
                "<code>pop</code> - <code>slice</code>",
                "<code>pop</code> - <code>splice</code>",
                "<code>push</code> - <code>slice</code>",
                "<code>push</code> - <code>splice</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "17) En el siguiente código, ¿qué debemos comparar? Completa los espacios",
              "description": "<pre><code class=\"language-js\">const search = (array, element) =&gt; {\n  for (let i = 0; i &lt; array.length; i += 1) {\n    if (_________ === _________) {\n      return i;\n    }\n  }\n};\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7], 2));\n// → 1\n</code></pre>",
              "answers": [
                "<code>array[i]</code> - <code>element</code>",
                "<code>length</code> - <code>array[i]</code>",
                "<code>i</code> - <code>element[i]</code>",
                "<code>element[i]</code> - <code>array</code>"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz 1",
          "type": "quiz",
          "format": "self-paced",
          "duration": 20,
          "order": 4,
          "durationString": "20min"
        },
        "06-practice": {
          "title": "Retos de código",
          "type": "practice",
          "format": "self-paced",
          "duration": 180,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>A continuación te presentamos una serie de retos que debes completar para\nponer tus conocimientos a prueba.</li>\n</ul>\n",
          "exercises": {
            "01-compute-average-length-of-words": {
              "title": "computeAverageLengthOfWords",
              "body": "<p>Escribe una función 'computeAverageLengthOfWords' que recibe dos strings y\ndevuelve el promedio de la longitud de ambos strings.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const output = computeAverageLengthOfWords('code', 'programs');\nconsole.log(output); // --&gt; 6\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# computeAverageLengthOfWords\n\nEscreva uma função `computeAverageLengthOfWords` que receba duas strings e\ndevolva o comprimento médio de ambas as strings.\n\nExemplo de entrada:\n\n```javascript\nconst output = computeAverageLengthOfWords('code', 'programs');\nconsole.log(output); // --> 6\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29tcHV0ZUF2ZXJhZ2VMZW5ndGhPZldvcmRzLmpz": "const computeAverageLengthOfWords = (word1, word2) => {\n  // your code here\n\n};\n\nmodule.exports = computeAverageLengthOfWords;\n"
                },
                "c29sdXRpb24=": {
                  "Y29tcHV0ZUF2ZXJhZ2VMZW5ndGhPZldvcmRzLmpz": "const computeAverageLengthOfWords = (word1, word2) => (word1.length + word2.length) / 2;\n\nmodule.exports = computeAverageLengthOfWords;\n"
                },
                "dGVzdA==": {
                  "Y29tcHV0ZUF2ZXJhZ2VMZW5ndGhPZldvcmRzLnNwZWMuanM=": "const { assert } = require('chai');\nconst computeAverageLengthOfWords = require('../solution/computeAverageLengthOfWords');\n\ndescribe('computeAverageLengthOfWords()', () => {\n  it('debería regresar  4, para  (\"A\", \"kamnjhs\")', () => {\n    assert.deepEqual(computeAverageLengthOfWords('A', 'kamnjhs'), 4);\n  });\n\n  it('debería regresar  12, para (\"Lalalalala\", \"Kekekekekekeke\")', () => {\n    assert.deepEqual(computeAverageLengthOfWords('Lalalalala', 'Kekekekekekeke'), 12);\n  });\n\n  it('debería regresar 5, para (\"Kemal\", \"Kemal\")', () => {\n    assert.deepEqual(computeAverageLengthOfWords('Kemal', 'Kemal'), 5);\n  });\n});\n"
                }
              }
            },
            "02-get-nth-element": {
              "title": "getNthElement",
              "body": "<p>Escribe una función llamada <code>getNthElement</code>.</p>\n<p>Dado un arreglo y un entero, <code>getNthElement</code> devuelve el valor según el entero\ndado, dentro del arreglo dado.</p>\n<p>Notas:</p>\n<ul>\n<li>Si el arreglo tiene una longitud de 0, debería devolver' <code>undefined</code>'.</li>\n</ul>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const output = getNthElement([1, 3, 5], 1);\nconsole.log(output); // --&gt; 3\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getNthElement\n\nEscreva uma função chamada `getNthElement`.\n\nDado um _array_ e um inteiro, `getNthElement` devolve o valor de acordo com o\ninteiro dado, dentro do array fornecido.\n\nNotas:\n\n* Se o array tiver um comprimento de `0`, ele deve retornar  `undefined`.\n\nExemplo de entrada:\n\n```javascript\nconst output = getNthElement([1, 3, 5], 1);\nconsole.log(output); // --> 3\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TnRoRWxlbWVudC5qcw==": "const getNthElement = (array, n) => {\n  // your code here\n};\n\nmodule.exports = getNthElement;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TnRoRWxlbWVudC5qcw==": "const getNthElement = (array, n) => array[n];\n\nmodule.exports = getNthElement;\n"
                },
                "dGVzdA==": {
                  "Z2V0TnRoRWxlbWVudC5zcGVjLmpz": "const { assert } = require('chai');\nconst getNthElement = require('../solution/getNthElement');\n\ndescribe('getNthElement()', () => {\n  it('debería regresar undefined, para array vacío', () => {\n    const arr = [];\n    assert.deepEqual(getNthElement(arr, 1), undefined);\n  });\n\n  it('debería regresar 2, para getNthElement([1, 2, 3, 4, 5, 6, 100, 7, 9], 1)', () => {\n    const arr = [1, 2, 3, 4, 5, 6, 100, 7, 9];\n    assert.deepEqual(getNthElement(arr, 1), 2);\n  });\n});\n"
                }
              }
            },
            "03-convert-double-space-to-single": {
              "title": "convertDoubleSpaceToSingle",
              "body": "<p>Escribe una función llamada <code>convertDoubleSpaceToSingle</code>.</p>\n<p>Dada una cadena, <code>convertDoubleSpaceToSingle</code> devuelve la cadena pasada en\ncadena con todos los espacios dobles convertidos a espacios simples.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const output = convertDoubleSpaceToSingle('string  with  double  spaces');\nconsole.log(output); // --&gt; \"string with double spaces\"\n</code></pre>\n<p>Notas:</p>\n<ul>\n<li>Para hacer este problema, debes estar familiarizada con <code>String.split</code>, y <code>Array.join</code>.</li>\n</ul>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# convertDoubleSpaceToSingle\n\nEscreva uma função chamada `convertDoubleSpaceToSingle`.\n\nDada uma _string_,  `convertDoubleSpaceToSingle` devolve essa cadeia de\ncaracteres com os espaços duplos convertidos em espaços simples.\n\nExemplo de entrada:\n\n```javascript\nconst output = convertDoubleSpaceToSingle(\"string  with  double  spaces\");\nconsole.log(output); // --> \"string with double spaces\"\n```\n\nNotas:\n\n* Para resolver esse problema, você deve estar familiarizado com `String.split`e\n  `Array.join`.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29udmVydERvdWJsZVNwYWNlVG9TaW5nbGUuanM=": "const convertDoubleSpaceToSingle = (str) => {\n  // your code here\n};\n\nmodule.exports = convertDoubleSpaceToSingle;\n"
                },
                "c29sdXRpb24=": {
                  "Y29udmVydERvdWJsZVNwYWNlVG9TaW5nbGUuanM=": "const convertDoubleSpaceToSingle = str => str.split('  ').join(' ');\n\nmodule.exports = convertDoubleSpaceToSingle;\n"
                },
                "dGVzdA==": {
                  "Y29udmVydERvdWJsZVNwYWNlVG9TaW5nbGUuc3BlYy5qcw==": "const { assert } = require('chai');\nconst convertDoubleSpaceToSingle = require('../solution/convertDoubleSpaceToSingle');\n\ndescribe('convertDoubleSpaceToSingle()', () => {\n  it(\"debería regresar '', para string vacío\", () => {\n    assert.deepEqual(convertDoubleSpaceToSingle(''), '');\n  });\n\n  it(\"debería regresar 'Messi is the greatest player ever', para 'Messi  is  the  greatest  player  ever'\", () => {\n    const output = convertDoubleSpaceToSingle('Messi  is  the  greatest  player  ever');\n    assert.deepEqual(output, 'Messi is the greatest player ever');\n  });\n});\n"
                }
              }
            },
            "04-are-valid-credentials": {
              "title": "areValidCredentials",
              "body": "<p>Escribe una función llamada <code>areValidCredentials</code>.</p>\n<p>Dando un nombre y una contraseña, <code>areValidCredentials</code>, devuelve <code>true</code> si el\nnombre es superior a 3 caracteres, Y, la contraseña tiene al menos 8 caracteres\nde longitud. De lo contrario, devuelve <code>false</code>.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const output = areValidCredentials('Ritu', 'mylongpassword');\nconsole.log(output); // --&gt; true\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# areValidCredentials\n\nEscreva uma função chamada `areValidCredentials`.\n\nDado um nome e uma senha, `areValidCredentials` retorna `true`se o nome contiver\nmais do que 3 caracteres e a senha, pelo menos 8 caracteres. Caso contrário,\nretorna `false`.\n\nExemplo:\n\n```javascript\nconst output = areValidCredentials('Ritu', 'mylongpassword');\nconsole.log(output); // --> true\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YXJlVmFsaWRDcmVkZW50aWFscy5qcw==": "const areValidCredentials = (name, password) => {\n  // your code here\n};\n\nmodule.exports = areValidCredentials;\n"
                },
                "c29sdXRpb24=": {
                  "YXJlVmFsaWRDcmVkZW50aWFscy5qcw==": "const areValidCredentials = (name, password) => (name.length > 3 && password.length >= 8);\n\nmodule.exports = areValidCredentials;\n"
                },
                "dGVzdA==": {
                  "YXJlVmFsaWRDcmVkZW50aWFscy5zcGVjLmpz": "const { assert } = require('chai');\nconst areValidCredentials = require('../solution/areValidCredentials');\n\ndescribe('areValidCredentials()', () => {\n  it('debería regresar true cuando las credenciales son válidas', () => {\n    const output = areValidCredentials('Kemal', 'testtesttest');\n    assert.deepEqual(output, true);\n  });\n\n  it('debería regresar false cuando el nombre es demasiado corto', () => {\n    const output = areValidCredentials('K', 'mylongpassword');\n    assert.deepEqual(output, false);\n  });\n\n  it('debería regresar false cuando la contraseña es demasiado corta', () => {\n    const output = areValidCredentials('Kemal', 'aah');\n    assert.deepEqual(output, false);\n  });\n});\n"
                }
              }
            },
            "05-find-pair-for-sum": {
              "title": "findPairForSum",
              "body": "<p>Dada una lista de números enteros no negativos y una suma objetivo, encuentra un\npar de números que sumen a la suma objetivo.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const pair = findPairForSum([3, 34, 4, 12, 5, 2], 9);\nconsole.log(pair); // --&gt; [4, 5]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# findPairForSum\n\nDada uma lista de inteiros não negativos e o resultado desejado de uma soma,\nencontre dois números na lista cuja soma seja o resultado desejado.\n\nExemplo de entrada:\n\n```javascript\nconst pair = findPairForSum([3, 34, 4, 12, 5, 2], 9);\nconsole.log(pair); // --> [4, 5]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFBhaXJGb3JTdW0uanM=": "const findPairForSum = (array, number) => {\n\n};\n\nmodule.exports = findPairForSum;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFBhaXJGb3JTdW0uanM=": "const findPairForSum = (array, number) => {\n  for (let i = 0; i < array.length; i += 1) {\n    for (let j = i + 1; j < array.length; j += 1) {\n      if ((array[i] + array[j]) === number) {\n        return [array[i], array[j]];\n      }\n    }\n  }\n\n  return [];\n};\n\nmodule.exports = findPairForSum;\n"
                },
                "dGVzdA==": {
                  "ZmluZFBhaXJGb3JTdW0uc3BlYy5qcw==": "const { assert } = require('chai');\nconst findPairForSum = require('../solution/findPairForSum');\n\ndescribe('findPairForSum()', () => {\n  it('debería regresar [0, 1], para ([0, 8, 1, 7, 19, 12, 4], 1)', () => {\n    const pair = findPairForSum([0, 8, 1, 7, 19, 12, 4], 1);\n    const hasil = [0, 1];\n\n    assert.deepEqual(pair, hasil);\n  });\n\n  it('debería regresar [2, 11], para  ([1, 2, 6, 8, 11, 10], 13)', () => {\n    const pair = findPairForSum([1, 2, 6, 8, 11, 10], 13);\n    const hasil = [2, 11];\n\n    assert.deepEqual(pair, hasil);\n  });\n\n\n  it('debería regresar [4, 5], para ([3, 34, 4, 12, 5, 2], 9)', () => {\n    const pair = findPairForSum([3, 34, 4, 12, 5, 2], 9);\n    const hasil = [4, 5];\n\n    assert.deepEqual(pair, hasil);\n  });\n});\n"
                }
              }
            },
            "06-filter-odd-elements": {
              "title": "filterOddElements",
              "body": "<p>Escribe una función llamada \"filterOddElements\".</p>\n<p>Dado un array de números,\"filterOddElements\" devuelve un array que contiene sólo\nlos números impares del array dado.</p>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = filterOddElements([1, 2, 3, 4, 5]);\nconsole.log(output); // --&gt; [1, 3, 5]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# filterOddElements\n\nEscreva uma função chamada `filterOddElements`.\n\nDado um vetor de números, `filterOddElements` retorna um _array_ que contém\napenas os números ímpares do vetor fornecido.\n\nExemplo:\n\n```javascript\nconst output = filterOddElements([1, 2, 3, 4, 5]);\nconsole.log(output); // --> [1, 3, 5]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmlsdGVyT2RkRWxlbWVudHMuanM=": "const filterOddElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = filterOddElements;\n"
                },
                "c29sdXRpb24=": {
                  "ZmlsdGVyT2RkRWxlbWVudHMuanM=": "const filterOddElements = (arr) => {\n  const ret = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] % 2 !== 0) {\n      ret.push(arr[i]);\n    }\n  }\n\n  return ret;\n};\n\nmodule.exports = filterOddElements;\n"
                },
                "dGVzdA==": {
                  "ZmlsdGVyT2RkRWxlbWVudHMuc3BlYy5qcw==": "const { assert } = require('chai');\nconst filterOddElements = require('../solution/filterOddElements');\n\ndescribe('filterOddElements()', () => {\n  it('Prueba: ([2, 4, 6, 8, 10]) => []', () => {\n    const arr = [2, 4, 6, 8, 10];\n    const hasil = [];\n    const call = filterOddElements(arr);\n\n    assert.deepEqual(call, hasil);\n  });\n\n  it('Prueba: ([69, 10, 6, 8, 22]) => [69]', () => {\n    const arr = [69, 10, 6, 8, 22];\n    const hasil = [69];\n    const call = filterOddElements(arr);\n\n    assert.deepEqual(call, hasil);\n  });\n\n\n  it('Prueba: ([1, 2, 3, 4, 5]) => [1, 3, 5]', () => {\n    const arr = [1, 2, 3, 4, 5];\n    const hasil = [1, 3, 5];\n    const call = filterOddElements(arr);\n\n    assert.deepEqual(call, hasil);\n  });\n});\n"
                }
              }
            },
            "07-find-shortest-word-among-mixed-elements": {
              "title": "findShortestWordAmongMixedElements",
              "body": "<p>Escribe una función llamada \"findShortestWordAmongMixedElements\".</p>\n<p>Dado un array, \"findShortestWordAmongMixedElements\" devuelve la cadena más corta\ndentro del array dado.</p>\n<p>Notas:</p>\n<ul>\n<li>Si hay vínculos, debería devolver el primer elemento que aparezca en el array\ndado.</li>\n<li>Espera que el array tenga otros valores además de las cuerdas.</li>\n<li>Si el array dado está vacío, debería devolver una cadena vacía.</li>\n<li>Si el array dado no contiene cadenas, debería devolver una cadena vacía.</li>\n</ul>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = findShortestWordAmongMixedElements([4, 'two', 2, 'three']);\nconsole.log(output); // --&gt; 'two'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# findShortestWordAmongMixedElements\n\nEscreva uma função chamada \"findShortestWordAmongMixedElements\".\n\nDado um _array_, \"findShortestWordAmongMixedElements\" devolve a string mais\ncurta encontrada no _array_ especificado.\n\nNotas:\n\n* Se houver repetições, você deve optar pelo primeiro elemento que aparece no\n  _array_ especificado.\n* Assuma que o array pode ter outros valores além de _strings_.\n* Se o _array_ informado estiver vazio, ela deve devolver uma _string_ vazia.\n* Se o _array_ informado não contiver _strings_, ela deverá retornar uma\n  _string_ vazia.\n\nExemplo:\n\n```javascript\nconst output = findShortestWordAmongMixedElements([4, 'two', 2, 'three']);\nconsole.log(output); // --> 'two'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFNob3J0ZXN0V29yZEFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const findShortestWordAmongMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = findShortestWordAmongMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFNob3J0ZXN0V29yZEFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const findShortestWordAmongMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  let min = 10000;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'string') {\n      if (arr[i].length < min) {\n        min = arr[i];\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return '';\n  }\n\n  return arr[index];\n};\n\nmodule.exports = findShortestWordAmongMixedElements;\n"
                },
                "dGVzdA==": {
                  "ZmluZFNob3J0ZXN0V29yZEFtb25nTWl4ZWRFbGVtZW50cy5zcGVjLmpz": "const { assert } = require('chai');\nconst findShortestWordAmongMixedElements = require('../solution/findShortestWordAmongMixedElements');\n\ndescribe('findShortestWordAmongMixedElements()', () => {\n  it(\"debería regresar '', para  ([3, 4, 5])\", () => {\n    const output = findShortestWordAmongMixedElements([3, 4, 5]);\n    assert.deepEqual(output, '');\n  });\n\n  it(\"debería regresar '', para ([])\", () => {\n    const output = findShortestWordAmongMixedElements([]);\n    assert.deepEqual(output, '');\n  });\n\n\n  it(\"debería regresar 'yes', para ([1, 2, 3, 'yes', 'one')\", () => {\n    const output = findShortestWordAmongMixedElements([1, 2, 3, 'yes', 'one']);\n    assert.deepEqual(output, 'yes');\n  });\n\n\n  it(\"debería regresar 'two', para [4, 'two', 2, 'three'])\", () => {\n    const output = findShortestWordAmongMixedElements([4, 'two', 2, 'three']);\n    assert.deepEqual(output, 'two');\n  });\n});\n"
                }
              }
            },
            "08-find-smallest-number-among-mixed-elements": {
              "title": "findSmallestNumberAmongMixedElements",
              "body": "<p>Escribe una función llamada \"findSmallestNumberAmongMixedElements\".</p>\n<p>Dado un arreglo de elementos mixtos, \"findSmallestNumberAmongMixedElements\"\ndevuelve el número más pequeño dentro del arreglo dado.</p>\n<p>Notas:</p>\n<ul>\n<li>Si el arreglo está vacío, debería devolver 0.</li>\n<li>Si el arreglo no contiene números, debería devolver 0.</li>\n</ul>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = findSmallestNumberAmongMixedElements([4, 'lincoln', 9, 'octopus']);\nconsole.log(output); // --&gt; 4\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# findSmallestNumberAmongMixedElements\n\nEscreva uma função chamada \"findSmallestNumberAmongMixedElements\".\n\nDado um array de elementos mistos, \"findSmallestNumberAmongMixedElements\"\ndevolve o menor número dentro do _array_ especificado.\n\nNotas:\n\n* Se o _array_ estiver vazio, ela deve devolver `0`.\n* Se  o _array_ não contiver números, deverá devolver `0`.\n\nExemplo:\n\n```javascript\nconst output = findSmallestNumberAmongMixedElements([4, 'lincoln', 9, 'octopus']);\nconsole.log(output); // --> 4\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFNtYWxsZXN0TnVtYmVyQW1vbmdNaXhlZEVsZW1lbnRzLmpz": "const findSmallestNumberAmongMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = findSmallestNumberAmongMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFNtYWxsZXN0TnVtYmVyQW1vbmdNaXhlZEVsZW1lbnRzLmpz": "const findSmallestNumberAmongMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  let min = 10000;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'number') {\n      if (arr[i] < min) {\n        min = arr[i];\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return '';\n  }\n\n  return arr[index];\n};\n\nmodule.exports = findSmallestNumberAmongMixedElements;\n"
                },
                "dGVzdA==": {
                  "ZmluZFNtYWxsZXN0TnVtYmVyQW1vbmdNaXhlZEVsZW1lbnRzLnNwZWMuanM=": "const { assert } = require('chai');\nconst findSmallestNumberAmongMixedElements = require('../solution/findSmallestNumberAmongMixedElements');\n\ndescribe('findSmallestNumberAmongMixedElements()', () => {\n  it(\"debería regresar 0, para  (['cat', 'is', 'cute', 'as', 'fuck'])\", () => {\n    const output = findSmallestNumberAmongMixedElements(['cat', 'is', 'cute', 'as', 'fuck']);\n    assert.equal(output, 0);\n  });\n\n  it('debería regresar 0, para ([])', () => {\n    const output = findSmallestNumberAmongMixedElements([]);\n    assert.equal(output, 0);\n  });\n\n\n  it(\"debería regresar 1, para ([10, 9, 'Yes', 'why', 1, 'ahh'])\", () => {\n    const output = findSmallestNumberAmongMixedElements([10, 9, 'Yes', 'why', 1, 'ahh']);\n    assert.equal(output, 1);\n  });\n});\n"
                }
              }
            },
            "09-get-longest-word-of-mixed-elements": {
              "title": "getLongestWordOfMixedElements",
              "body": "<p>Escribe una función llamada \"getLongestWordOfMixedElements\".</p>\n<p>Dado un arreglo de tipos mixtos, \"getLongestWordOfMixedElements\" devuelve la\ncadena más larga del arreglo dado.</p>\n<p>Notas:</p>\n<ul>\n<li>Si el arreglo está vacío, debería devolver una cadena vacía (\"\").</li>\n<li>Si el arreglo no contiene cadenas de texto, debería devolver una cadena vacía.</li>\n</ul>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = getLongestWordOfMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --&gt; 'word'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getLongestWordOfMixedElements\n\nEscreva uma função chamada \"getLongestWordOfMixedElements\".\n\nDado um array de tipos mistos, \"getLongestWordOfMixedElements\" devolve a\n_string_ mais longa do _array_ especificado.\n\nNotas:\n\n* Se o _array_ estiver vazio, ela deve devolver uma _string_ vazia \\(`\"\"`\\).\n* Se o _array_ não contiver cadeias de texto, ela deverá devolver uma _string_\n  vazia.\n\nExemplo:\n\n```javascript\nconst output = getLongestWordOfMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --> 'word'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TG9uZ2VzdFdvcmRPZk1peGVkRWxlbWVudHMuanM=": "const getLongestWordOfMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = getLongestWordOfMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TG9uZ2VzdFdvcmRPZk1peGVkRWxlbWVudHMuanM=": "const getLongestWordOfMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  let max = 0;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'string') {\n      if (arr[i].length > max) {\n        max = arr[i].length;\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return '';\n  }\n\n  return arr[index];\n};\n\nmodule.exports = getLongestWordOfMixedElements;\n"
                },
                "dGVzdA==": {
                  "Z2V0TG9uZ2VzdFdvcmRPZk1peGVkRWxlbWVudHMuc3BlYy5qcw==": "const { assert } = require('chai');\nconst getLongestWordOfMixedElements = require('../solution/getLongestWordOfMixedElements');\n\ndescribe('getLongestWordOfMixedElements()', () => {\n  it(\"debería regresar '', para  ([3, 4, 5, 6, 7])\", () => {\n    const output = getLongestWordOfMixedElements([3, 4, 5, 6, 7]);\n    assert.deepEqual(output, '');\n  });\n\n  it(\"debería regresar '', para ([])\", () => {\n    const output = getLongestWordOfMixedElements([]);\n    assert.deepEqual(output, '');\n  });\n\n\n  it(\"debería regresar 'word', para ([3, 'word', 5, 'up', 3, 1])\", () => {\n    const output = getLongestWordOfMixedElements([3, 'word', 5, 'up', 3, 1]);\n    assert.deepEqual(output, 'word');\n  });\n});\n"
                }
              }
            },
            "10-get-largest-number-among-mixed-elements": {
              "title": "getLargestNumberAmongMixedElements",
              "body": "<p>Escriba una función llamada \"getLargestNumberAmongMixedElements\".</p>\n<p>Dado cualquier arreglo, \"getLargestNumberAmongMixedElements\" devuelve el mayor\nnúmero en el arreglo dado.</p>\n<p>Notas:</p>\n<ul>\n<li>El arreglo puede contener valores de un tipo distinto a los números.</li>\n<li>Si el arreglo está vacío, debería devolver 0.</li>\n<li>Si el arreglo no contiene números, debería devolver 0.</li>\n</ul>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = getLargestNumberAmongMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --&gt; 5\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getLargestNumberAmongMixedElements\n\nEscreva uma função chamada \"getLargestNumberAmongMixedElements\".\n\nDado qualquer vetor, \"getLargestNumberAmongMixedElements\" retorna o maior número\ndo vetor especificado.\n\nNotas:\n\n* O _array_ pode conter valores de um tipo diferente de `number`.\n* Se o _array_ estiver vazio, ela deve retornar `0`.\n* Se o _array_ não contiver números, deverá retornar `0`.\n\nExemplo:\n\n```javascript\nconst output = getLargestNumberAmongMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --> 5\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TGFyZ2VzdE51bWJlckFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const getLargestNumberAmongMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = getLargestNumberAmongMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TGFyZ2VzdE51bWJlckFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const getLargestNumberAmongMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n\n  let max = 0;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'number') {\n      if (arr[i] > max) {\n        max = arr[i];\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return 0;\n  }\n\n  return arr[index];\n};\n\nmodule.exports = getLargestNumberAmongMixedElements;\n"
                },
                "dGVzdA==": {
                  "Z2V0TGFyZ2VzdE51bWJlckFtb25nTWl4ZWRFbGVtZW50cy5zcGVjLmpz": "const { assert } = require('chai');\nconst getLargestNumberAmongMixedElements = require('../solution/getLargestNumberAmongMixedElements');\n\ndescribe('getLargestNumberAmongMixedElements()', () => {\n  it(\"debería regresar 0, para  (['wat', 'no', true, true])\", () => {\n    const output = getLargestNumberAmongMixedElements(['wat', 'no', true, true]);\n    assert.deepEqual(output, 0);\n  });\n\n  it('debería regresar 0, para ([])', () => {\n    const output = getLargestNumberAmongMixedElements([]);\n    assert.deepEqual(output, 0);\n  });\n\n\n  it(\"debería regresar 5, para ([3, 'word', 5, 'up', 3, 1])\", () => {\n    const output = getLargestNumberAmongMixedElements([3, 'word', 5, 'up', 3, 1]);\n    assert.deepEqual(output, 5);\n  });\n});\n"
                }
              }
            },
            "11-compute-sum-of-all-elements": {
              "title": "computeSumOfAllElements",
              "body": "<p>Escribe una función llamada <code>computeSumOfAllElements</code>.</p>\n<p>Dado un array de números, <code>computeSumOfAllElements</code> devuelve la suma de todos\nlos elementos del array dado.</p>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">const output = computeSumOfAllElements([1, 2, 3]);\nconsole.log(output); // --&gt; 6\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# computeSumOfAllElements\n\nEscreva uma função chamada `computeSumOfAllElements`.\n\nDado um _array_ de números, `computeSumOfAllElements` devolve a soma de todos os\nelementos do _array_ dado.\n\nExemplo:\n\n```javascript\nconst output = computeSumOfAllElements([1, 2, 3]);\nconsole.log(output); // --> 6\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29tcHV0ZVN1bU9mQWxsRWxlbWVudHMuanM=": "const computeSumOfAllElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = computeSumOfAllElements;\n"
                },
                "c29sdXRpb24=": {
                  "Y29tcHV0ZVN1bU9mQWxsRWxlbWVudHMuanM=": "const computeSumOfAllElements = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'number') {\n      sum += arr[i];\n    }\n  }\n\n  return sum;\n};\n\nmodule.exports = computeSumOfAllElements;\n"
                },
                "dGVzdA==": {
                  "Y29tcHV0ZVN1bU9mQWxsRWxlbWVudHMuc3BlYy5qcw==": "const { assert } = require('chai');\nconst computeSumOfAllElements = require('../solution/computeSumOfAllElements');\n\ndescribe('computeSumOfAllElements()', () => {\n  it('debería regresar 0, para  ([1, 2, 3])', () => {\n    const output = computeSumOfAllElements([1, 2, 3]);\n    assert.deepEqual(output, 6);\n  });\n\n  it('debería regresar 169, para ([10, 90, 69])', () => {\n    const output = computeSumOfAllElements([10, 90, 69]);\n\n    assert.deepEqual(output, 169);\n  });\n\n\n  it('debería regresar 28, para ([4, 5, 10, 9])', () => {\n    const output = computeSumOfAllElements([4, 5, 10, 9]);\n    assert.deepEqual(output, 28);\n  });\n});\n"
                }
              }
            },
            "12-compute-sum-between": {
              "title": "computeSumBetween",
              "body": "<p>Escribe una función llamada \"computeSumBetween\".</p>\n<p>Dado 2 enteros, \"computeSumBetween\" devuelve la suma entre los dos enteros\ndados, comenzando en num1 y excluyendo num2.</p>\n<p>Notas:</p>\n<ul>\n<li>La suma entre 1 y 4 es 1 + 2 + 3 = 6.</li>\n<li>Si num2 no es mayor que num1, debe devolver 0.</li>\n</ul>\n<pre><code class=\"language-js\">const output = computeSumBetween (2, 5);\nconsole.log (salida); // -&gt; 9\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# computeSumBetween\n\nEscreva uma função chamada \"computeSumBetween\".\n\nCom 2 inteiros, por exemplo `num1` e `num2`, \"computeSumBetween\" devolve a soma\nde todos os números entre eles, começando em `num1` e excluindo `num2`.\n\nNotas:\n\n* A soma entre 1 e 4 é 1 + 2 + 3 = 6.\n* Se `num2` não for maior que `num1`, ela deve devolver 0.\n\n```javascript\nconst output = computeSumBetween (2, 5);\nconsole.log (salida); // -> 9\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29tcHV0ZVN1bUJldHdlZW4uanM=": "const computeSumBetween = (num1, num2) => {\n  // your code here\n};\n\nmodule.exports = computeSumBetween;\n"
                },
                "c29sdXRpb24=": {
                  "Y29tcHV0ZVN1bUJldHdlZW4uanM=": "const computeSumBetween = (num1, num2) => {\n  let sum = 0;\n\n  for (let i = num1; i < num2; i += 1) {\n    sum += i;\n  }\n\n  return sum;\n};\n\nmodule.exports = computeSumBetween;\n"
                },
                "dGVzdA==": {
                  "Y29tcHV0ZVN1bUJldHdlZW4uc3BlYy5qcw==": "const { assert } = require('chai');\nconst computeSumBetween = require('../solution/computeSumBetween');\n\ndescribe('computeSumBetween()', () => {\n  it(\"debería regresar [{a: 1, b: 2, c: true}, {a: 10, b: 20, c: false}], para [[['a', 1], ['b', 2], ['c', true]],[['a', 10], ['b', 20], ['c', false]]]\", () => {\n    const output = computeSumBetween(5, 5);\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar [{firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'}, {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}], para [[['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']],[['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']]]\", () => {\n    const output = computeSumBetween(2, 5);\n\n    assert.deepEqual(output, 9);\n  });\n});\n"
                }
              }
            },
            "13-get-longest-of-three-words": {
              "title": "getLongestOfThreeWords",
              "body": "<p>Escribe una función llamada <code>getLongestOfThreeWords</code>.</p>\n<p>Dado 3 palabras, <code>getLongestOfThreeWords</code> devuelve la más larga de tres\npalabras.</p>\n<p>Notas:</p>\n<ul>\n<li>Si hay un empate, debe devolver la primera palabra en el empate.</li>\n</ul>\n<pre><code class=\"language-js\">const output = getLongestOfThreeWords('estos', 'tres', 'palabras');\nconsole.log(output); // -&gt; 'estos'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getLongestOfThreeWords\n\nEscreva uma função chamada `getLongestOfThreeWords`.\n\nCom 3 palavras, `getLongestOfThreeWords` devolve a mais longa das três palavras.\n\nNotas:\n\n* Se houver um empate, você deve retornar a primeira palavra do empate.\n\n```javascript\nconst output = getLongestOfThreeWords('estas', 'três', 'palavras');\nconsole.log(output); // -> 'palabras'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TG9uZ2VzdE9mVGhyZWVXb3Jkcy5qcw==": "const getLongestOfThreeWords = (word1, word2, word3) => {\n  // your code here\n};\n\nmodule.exports = getLongestOfThreeWords;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TG9uZ2VzdE9mVGhyZWVXb3Jkcy5qcw==": "const getLongestOfThreeWords = (word1, word2, word3) => {\n  let strLong = word1;\n\n  if (strLong.length < word2.length) {\n    strLong = word2;\n  }\n\n  if (strLong.length < word3.length) {\n    strLong = word3;\n  }\n\n  return strLong;\n};\n\nmodule.exports = getLongestOfThreeWords;\n"
                },
                "dGVzdA==": {
                  "Z2V0TG9uZ2VzdE9mVGhyZWVXb3Jkcy5zcGVjLmpz": "const { assert } = require('chai');\nconst getLongestOfThreeWords = require('../solution/getLongestOfThreeWords');\n\ndescribe('getLongestOfThreeWords()', () => {\n  it(\"debería regresar 'these', para 'these', 'three', 'words'\", () => {\n    const output = getLongestOfThreeWords('these', 'three', 'words');\n\n    assert.deepEqual(output, 'these');\n  });\n\n  it(\"debería regresar 'three', para 'a', 'two', 'three', 'four'\", () => {\n    const output = getLongestOfThreeWords('a', 'two', 'three', 'four');\n\n    assert.deepEqual(output, 'three');\n  });\n});\n"
                }
              }
            },
            "14-find-shortest-of-three-words": {
              "title": "findShortestOfThreeWords",
              "body": "<p>Escribe una función llamada <code>findShortestOfThreeWords</code>.</p>\n<p>Dado 3 cadenas, <code>findShortestOfThreeWords</code> devuelve el más corto de las cadenas\ndadas.</p>\n<p>Notas:</p>\n<ul>\n<li>Si hay empate, debe devolver la primera palabra en la lista de parámetros.</li>\n</ul>\n<pre><code class=\"language-js\">const = findShortestOfThreeWords('a', 'dos', 'tres');\nconsole.log(salida); // -&gt; 'a'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# findShortestOfThreeWords\n\nEscreva uma função chamada `findShortestOfThreeWords`.\n\nCom 3 _strings_, `findShortestOfThreeWords` devolve a _string_ mais curta delas.\n\nNotas:\n\n* Se houver um empate, você deve retornar a primeira palavra da lista de\n  parâmetros.\n\n```javascript\nconst output = findShortestOfThreeWords('a', 'dos', 'tres');\nconsole.log(output); // -> 'a'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFNob3J0ZXN0T2ZUaHJlZVdvcmRzLmpz": "const findShortestOfThreeWords = (word1, word2, word3) => {\n  // your code here\n};\n\nmodule.exports = findShortestOfThreeWords;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFNob3J0ZXN0T2ZUaHJlZVdvcmRzLmpz": "const findShortestOfThreeWords = (word1, word2, word3) => {\n  let strShort = word1;\n\n  if (strShort.length > word2.length) {\n    strShort = word2;\n  }\n\n  if (strShort.length > word3.length) {\n    strShort = word3;\n  }\n\n  return strShort;\n};\n\nmodule.exports = findShortestOfThreeWords;\n"
                },
                "dGVzdA==": {
                  "ZmluZFNob3J0ZXN0T2ZUaHJlZVdvcmRzLnNwZWMuanM=": "const { assert } = require('chai');\nconst findShortestOfThreeWords = require('../solution/findShortestOfThreeWords');\n\ndescribe('findShortestOfThreeWords()', () => {\n  it(\"debería regresar 'b', para 'yes', 'b', 'a', 'two', 'three', 'four'\", () => {\n    const output = findShortestOfThreeWords('yes', 'b', 'a', 'two', 'three', 'four');\n\n    assert.deepEqual(output, 'b');\n  });\n\n  it(\"debería regresar 'a', para 'a', 'two', 'three'\", () => {\n    const output = findShortestOfThreeWords('a', 'two', 'three');\n\n    assert.deepEqual(output, 'a');\n  });\n});\n"
                }
              }
            },
            "15-calculate-bill-total": {
              "title": "calculateBillTotal",
              "body": "<p>Escribe una función llamada <code>calculateBillTotal</code>.</p>\n<p>Dado el pre impuesto y la cantidad antes de propina de una comida,\n<code>calculateBillTotal</code> devuelve la cantidad total debida después de impuestos y\npropina.</p>\n<p>Notas:</p>\n<ul>\n<li>Piensa que el impuesto de ventas es 9.5% y la propina es 15%.</li>\n<li>NO inclines el impuesto sobre las ventas, solo sobre la cantidad de propina.</li>\n</ul>\n<pre><code class=\"language-js\">const output = calculateBillTotal(20);\nconsole.log(output); // -&gt; 24,9\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# calculateBillTotal\n\nEscreva uma função chamada `calculateBillTotal`.\n\nDado o imposto e a quantia antes da gorjeta de uma refeição,\n`calculateBillTotal`devolve a quantia total devida depois de impostos e gorjeta.\n\nNotas:\n\n* Suponha que o imposto sobre vendas seja de 9,5% e a gorjeta seja de 15%.\n* NÃO aplique o imposto sobre a gorjeta, apenas sobre a venda.\n\n```js\nconst output = calculateBillTotal(20);\nconsole.log(output); // -> 24,9\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y2FsY3VsYXRlQmlsbFRvdGFsLmpz": "const calculateBillTotal = (preTaxAndTipAmount) => {\n  // your code here\n};\n\nmodule.exports = calculateBillTotal;\n"
                },
                "c29sdXRpb24=": {
                  "Y2FsY3VsYXRlQmlsbFRvdGFsLmpz": "module.exports = amount => amount + (amount * 0.095) + (amount * 0.15);\n"
                },
                "dGVzdA==": {
                  "Y2FsY3VsYXRlQmlsbFRvdGFsLnNwZWMuanM=": "const { assert } = require('chai');\nconst calculateBillTotal = require('../solution/calculateBillTotal');\n\ndescribe('calculateBillTotal()', () => {\n  it('debería regresar 62.25, para 50', () => {\n    const preTaxAndTipAmount = 50;\n    const tax = preTaxAndTipAmount * (0.095);\n    const tip = preTaxAndTipAmount * (0.15);\n    const total = preTaxAndTipAmount + tax + tip;\n\n    assert.deepEqual(calculateBillTotal(preTaxAndTipAmount), total);\n  });\n\n  it('debería regresar 24.9, para 20', () => {\n    const preTaxAndTipAmount = 20;\n    const tax = preTaxAndTipAmount * (0.095);\n    const tip = preTaxAndTipAmount * (0.15);\n    const total = preTaxAndTipAmount + tax + tip;\n\n    assert.deepEqual(calculateBillTotal(preTaxAndTipAmount), total);\n  });\n\n  it('debería regresar 41.085, para 33', () => {\n    const preTaxAndTipAmount = 33;\n    const tax = preTaxAndTipAmount * (0.095);\n    const tip = preTaxAndTipAmount * (0.15);\n    const total = preTaxAndTipAmount + tax + tip;\n\n    assert.deepEqual(calculateBillTotal(preTaxAndTipAmount), total);\n  });\n});\n"
                }
              }
            },
            "16-convert-score-to-grade": {
              "title": "convertScoreToGrade",
              "body": "<p>Escribe una función llamada <code>convertScoreToGrade</code>.</p>\n<p>Dada una puntuación, <code>convertScoreToGrade</code> devuelve una cadena que representa el\ngrado de letra correspondiente a la puntuación dada.</p>\n<p>Notas:</p>\n<ul>\n<li>(100 - 90) -&gt; 'A'</li>\n<li>(89 - 80) -&gt;' B '</li>\n<li>(79 - 70) -&gt; 'C'</li>\n<li>(69 - 60) -&gt; 'D'</li>\n<li>(59 - 0) -&gt; 'F'</li>\n<li>Si la puntuación dada es mayor que 100 o menor que 0, debe devolver\n'PUNTUACION INVALIDA'.</li>\n</ul>\n<pre><code class=\"language-js\">const output = convertScoreToGrade(91);\nconsole.log(output); // -&gt; 'A'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# convertScoreToGrade\n\nEscreva uma função chamada `convertScoreToGrade`.\n\nDada uma pontuação numérica, `convertScoreToGrade` devolve uma letra\n\\(_string_\\) que representa essa pontuação.\n\nNotas:\n\n* \\(100 - 90\\) -&gt; 'A'\n* \\(89 - 80\\) -&gt; 'B'\n* \\(79 - 70\\) -&gt; 'C'\n* \\(69 - 60\\) -&gt; 'D'\n* \\(59 - 0\\) -&gt; 'F'\n* Se a pontuação dada for maior que 100 ou menor que 0, você deve retornar\n  'INVALID SCORE'.\n\n```javascript\nconst output = convertScoreToGrade(91);\nconsole.log(output); // -> 'A'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29udmVydFNjb3JlVG9HcmFkZS5qcw==": "const convertScoreToGrade = (score) => {\n  // your code here\n};\n\nmodule.exports = convertScoreToGrade;\n"
                },
                "c29sdXRpb24=": {
                  "Y29udmVydFNjb3JlVG9HcmFkZS5qcw==": "const convertScoreToGrade = (score) => {\n  let str;\n\n  switch (true) {\n    case ((score <= 100) && (score >= 90)):\n      str = 'A';\n      break;\n    case ((score <= 89) && (score >= 80)):\n      str = 'B';\n      break;\n    case ((score <= 79) && (score >= 70)):\n      str = 'C';\n      break;\n    case ((score <= 69) && (score >= 60)):\n      str = 'D';\n      break;\n    case ((score <= 59) && (score >= 0)):\n      str = 'F';\n      break;\n    default:\n      str = 'PUNTUACION INVALIDA';\n      break;\n  }\n  return str;\n};\n\nmodule.exports = convertScoreToGrade;\n"
                },
                "dGVzdA==": {
                  "Y29udmVydFNjb3JlVG9HcmFkZS5zcGVjLmpz": "const { assert } = require('chai');\nconst convertScoreToGrade = require('../solution/convertScoreToGrade');\n\ndescribe('convertScoreToGrade()', () => {\n  it(\"debería regresar 'PUNTUACION INVALIDA', para 102\", () => {\n    const output = convertScoreToGrade(102);\n\n    assert.deepEqual(output, 'PUNTUACION INVALIDA');\n  });\n\n  it(\"debería regresar 'F', para 59\", () => {\n    const output = convertScoreToGrade(59);\n\n    assert.deepEqual(output, 'F');\n  });\n\n  it(\"debería regresar 'C', para 79\", () => {\n    const output = convertScoreToGrade(79);\n\n    assert.deepEqual(output, 'C');\n  });\n\n  it(\"debería regresar 'A', para 91\", () => {\n    const output = convertScoreToGrade(91);\n\n    assert.deepEqual(output, 'A');\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "3h"
        },
        "07-requiz": {
          "questions": [
            {
              "title": "1) En el siguiente ejemplo, el Array mixedArray presenta un error de syntaxis",
              "description": "<pre><code class=\"language-js\">const mixedArray = [3, hola mundo, 627.5];\n</code></pre>",
              "answers": [
                "Verdadero",
                "Falso"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "2) ¿Cuál de los siguientes enunciados NO es un método?",
              "description": "",
              "answers": [
                "<code>push</code>",
                "<code>concat</code>",
                "<code>length</code>",
                "<code>lastIndexOf</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [1, 2, 3, 4, 5, 6];\n</code></pre><p>¿Qué resultado obtengo al realizar <code>console.log(listOfNumbers[6])</code>?</p>",
              "answers": [
                "<code>''</code>",
                "<code>4</code>",
                "<code>5</code>",
                "<code>6</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                4
              ]
            },
            {
              "title": "4) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [1, 2, 3, 4, 5, 6];\n</code></pre><p>Si realizo <code>listOfNumbers[3] = 'hola'</code> ¿cuál sería el resultado del Array?</p>",
              "answers": [
                "<code>[1, 2, 'hola', 4, 5, 6]</code>",
                "<code>[1, 2, 3, 'hola', 5, 6]</code>",
                "<code>[1, 2, , 4, 5, 6]</code>",
                "<code>[1, 2, 3, , 5, 6]</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "5) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const questions = [\n  ['¿En cuántos países opera Laboratoria?', 3],\n  ['¿Cuál es la capital de Perú?', 'Lima'],\n  ['¿Cuál es baile típico Chileno?', 'Cueca'],\n  ['¿Cuál es la moneda de México?', 'Peso']\n];\n</code></pre><p>¿Cómo obtengo el dato <code>Peso</code>?</p>",
              "answers": [
                "<code>console.log(questions[1][3])</code>",
                "<code>console.log(questions[2][4])</code>",
                "<code>console.log(questions[3][1])</code>",
                "<code>console.log(questions[4][2])</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) En el siguiente ejemplo, ¿qué método debo usar para obtener el resultado solicitado?",
              "description": "<pre><code class=\"language-js\">const courses = ['Intro JS', 'Intro UX', 'UX master'];\nconst removed = courses.__________;\n\nconsole.log('Elemento eliminado: ' + removed);\n// → Elemento eliminado: Intro JS\n</code></pre>",
              "answers": [
                "<code>pop()</code>",
                "<code>push()</code>",
                "<code>shift()</code>",
                "<code>unshift()</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) En el siguiente ejemplo, ¿cuáles de los siguientes métodos podrías usar para obtener el resultado solicitado? Puedes elegir más de una opción",
              "description": "<pre><code class=\"language-js\">const courses = ['Intro JS', 'Intro UX', 'UX master'];\ncourses.__________('JS master', 'English for Developers');\n\nconsole.log(courses.length);\n// → 5\n</code></pre>",
              "answers": [
                "<code>pop()</code>",
                "<code>push()</code>",
                "<code>shift()</code>",
                "<code>unshift()</code>"
              ],
              "solution": [
                1,
                3
              ]
            },
            {
              "title": "8) En el siguiente ejemplo, ¿qué métodos debo usar para obtener el resultado solicitado?",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [];\nfor (let i = 1; i &lt;= 7; i += 1) {\n  listOfNumbers.__________(i);\n}\nlistOfNumbers.__________();\n\nconsole.log(listOfNumbers.length);\n// → 6\n</code></pre>",
              "answers": [
                "<code>join</code> - <code>search</code>",
                "<code>push</code> - <code>pop</code>",
                "<code>shift</code> - <code>unshift</code>",
                "<code>slice</code> - <code>splice</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "9) ¿Cuál sería el resultado en el siguiente código?",
              "description": "<pre><code class=\"language-js\">const coder1 = 'Michelle, ';\nconst coder2 = 'Lourdes, ';\nconst coder3 = 'Ruth.';\n\nconst allCoders = coder1.concat(coder2, coder3);\n\nconsole.log(allCoders);\n</code></pre>",
              "answers": [
                "<code>Michelle, Lourdes, Ruth.</code>",
                "<code>[Michelle, Lourdes, Ruth.]</code>",
                "<code>['Michelle', 'Lourdes', 'Ruth'.]</code>",
                "No hay resultado, debido a que el código está mal escrito."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "10) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const coders = ['Michelle', 'Lourdes', 'Ruth'];\ncoders.pop();\ncoders.indexOf('Lourdes');\n</code></pre>",
              "answers": [
                "<code>0</code>",
                "<code>1</code>",
                "<code>2</code>",
                "<code>3</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "11) En el siguiente código, ¿cuál sería el resultado?",
              "description": "<pre><code class=\"language-js\">const coders = ['Michelle', 'Lourdes', 'Ruth'];\ncoders.push('Alejandra');\ncoders.join();\n</code></pre>",
              "answers": [
                "<code>['Michelle,Lourdes,Ruth,Alejandra']</code>",
                "<code>['Michelle,Lourdes,Ruth']</code>",
                "<code>['Michelle', 'Lourdes', 'Ruth', 'Alejandra']</code>",
                "<code>'Michelle,Lourdes,Ruth,Alejandra'</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "12) En el siguiente ejemplo completa los espacios",
              "description": "<pre><code class=\"language-js\">const coders = ['michelle', 'lourdes', 'ruth', 'alejandra'];\ncoders.pop();\ncoders.slice(____,____);\n\n// → ['lourdes', 'ruth']\n</code></pre>",
              "answers": [
                "<code>1</code> - <code>3</code>",
                "<code>2</code> - <code>4</code>",
                "<code>1</code> - <code>2</code>",
                "<code>2</code> - <code>3</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "13) En el siguiente ejemplo, ¿qué método debo usar para obtener el resultado solicitado?",
              "description": "<pre><code class=\"language-js\">const listOfNumbers = [1, 2, 3, 1, 2, 3];\nlistOfNumbers.____________(2);\n\n// → 4\n</code></pre>",
              "answers": [
                "<code>pop()</code>",
                "<code>indexOf()</code>",
                "<code>unshift()</code>",
                "<code>lastIndexOf()</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "14) En el siguiente código, ¿cuál sería el resultado?",
              "description": "<pre><code class=\"language-js\">const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (let i = 0; i &lt; array.length; i += 1) {\n  const item = array.pop();\n  array.splice(i, 0, item);\n}\n\nconsole.log(array);\n</code></pre>",
              "answers": [
                "<code>[1, 2, 3, 4, 5]</code>",
                "<code>[6, 7, 8, 9, 10]</code>",
                "<code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>",
                "<code>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "15) En el siguiente código, ¿cuál sería el resultado?",
              "description": "<pre><code class=\"language-js\">function search(array, element) {\n  for (let i = 0; i &lt; array.length; i += 1) {\n    if (array[i] === element) {\n      return i;\n    }\n  }\n}\n\nconsole.log(search([7, 6, 5, 4, 3, 2, 1], 5));\n</code></pre>",
              "answers": [
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz 2",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 6,
          "durationString": "15min"
        }
      },
      "order": 3,
      "stats": {
        "duration": 430,
        "durationString": "7.2h",
        "exerciseCount": 16,
        "partCount": 7
      }
    },
    "05-objects": {
      "title": "Objects (objetos)",
      "bonus": false,
      "description": "<p>Qué son <code>objects</code> (objetos) y para qué sirven? Cómo crear, acceder y modificar\nla información de un <code>object</code>? Diferencias entre un <code>array</code> y un <code>object</code>.</p>\n",
      "parts": {
        "01-objects": {
          "title": "Objetos en JavaScript",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=J6U0gDzWsUg",
              "id": "J6U0gDzWsUg"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Aprender qué son <code>objects</code> y para qué sirven</li>\n<li>Aprender a crear, acceder y modificar la información de un <code>object</code></li>\n<li>Entender la diferencia entre un <code>array</code> y un <code>object</code></li>\n</ul>\n<hr>\n<p>El texto a continuación se basa en gran medida, con ciertos ajustes, en el\ncapítulo 4 de <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn\nHaverbeke, 2014. Traducción en <a href=\"http://hectorip.github.io/Eloquent-JavaScript-ES-online/chapters/01_values.html\" target=\"_blank\">Español</a>\ndisponible gracias a <a href=\"https://github.com/hectorip\" target=\"_blank\">hectorip</a>, y del capítulo 3\nde <a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for kids</a>,\nNick Morgan, 2015.</p>\n<hr>\n<h2 id=\"¿qué-es-un-object-en-javascript\">¿Qué es un object en JavaScript?</h2>\n<p>Los <code>objects</code> en JavaScript son muy similares a los <code>arrays</code>, pero con dos\nimportantes diferencias:</p>\n<ol>\n<li><p>Como hemos visto, para acceder a información dentro de un <code>array</code> utilizamos\nun número correspondiente al <em>index</em>; es decir, la posición en la que se\nubica el valor. Los <code>objects</code>, por su parte, utilizan <code>strings</code> en lugar de\nnúmeros para acceder a los diferentes elementos. Estos <code>strings</code> se denominan\n<em>keys</em> (llaves) o propiedades, y los elementos a los que apuntan son llamados\n<em>valores</em>. Juntas, estas piezas de información se llaman <em>pares key-value</em>.</p>\n</li>\n<li><p>Dado que en los <code>arrays</code> se requiere del <em>index</em> para acceder a la\ninformación, es importante mantener un determinado orden de los valores. En\nel caso de los <code>objects</code> los <em>pares key-value</em> de información pueden estar en\ncualquier orden.</p>\n</li>\n</ol>\n<p>Mientras que los <code>arrays</code> se utilizan sobre todo para representar listas de\ncosas múltiples, los objetos son a menudo usado para representar cosas simples\npero con <strong>múltiples características, o atributos</strong>. Por ejemplo, si quisiéramos\nagrupar los títulos de nuestras películas preferidas, utilizaríamos un <code>array</code>,\nasí:</p>\n<pre><code class=\"language-js\">const favoriteMovies = [\n  'The Big Fish',\n  'The Lord of the Rings',\n  'The Empire Strikes Back',\n  'The Artist',\n  'The Godfather',\n  'Back to the Future',\n];\n</code></pre>\n<p>¿Pero qué sucede si quisiéramos almacenar diferentes piezas de información sobre\nuna <strong>misma</strong> película? Aquí es donde entra la utilidad de un <code>object</code>.</p>\n<h2 id=\"creando-objetos\">Creando Objetos</h2>\n<p>Almacenemos diferentes piezas de información de la película <code>Back to the Future</code>\nen un solo lugar, por medio de un <code>object</code>:</p>\n<pre><code class=\"language-js\">let movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  plot: 'Marty McFly, a 17-year-old high school student, ' +\n    'is accidentally sent 30 years into the past in a time-traveling DeLorean ' +\n    'invented by his close friend, the maverick scientist Doc Brown.',\n  oscar: 1,\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n</code></pre>\n<p>En el ejemplo anterior hemos creado una variable llamada <code>movie</code> y le hemos\nasignado un objeto con 6 <em>pares key-value</em>. Para crear un objeto utilizamos las\nllaves <code>{}</code>, en lugar de los corchetes <code>[]</code> que usamos para crear <code>arrays</code>.\nDentro de las llaves colocamos los <em>pares key-value</em> separados por una coma.\nComo se muestra en el ejemplo, no necesitamos colocar una coma después del\núltimo par <em>key-value</em>.</p>\n<p>La sintaxis de cada par <em>key-value</em> es la siguiente:</p>\n<pre><code class=\"language-js\">{ key : value }\n</code></pre>\n<p>Cuando se crea un <code>object</code>, el <em>key</em> va antes de los dos puntos <code>:</code>, y el\n<em>value</em> va después. Los dos puntos actúan un poco como un signo igual (<code>=</code>); es\ndecir, los valores de la derecha se asignan a los nombres de la izquierda, al\nigual que cuando se crean variables.</p>\n<h3 id=\"keys-strings-con-o-sin-comillas\">Keys (strings) con o sin comillas</h3>\n<p>Como hemos visto, los <em>keys</em> son <code>strings</code>. Como muestra el ejemplo anterior, no\nes necesario colocar los <em>keys</em> entre comillas. Esto es porque Javascript sabe\nque los <em>keys</em> son <code>strings</code>. Sin embargo, es también válido colocar los <em>keys</em>\nentre comillas. Por ejemplo, el objeto a continuación también es válido:</p>\n<pre><code class=\"language-js\">const person = {\n  age: 18,\n  name: 'Michelle',\n  friends: ['Alexandra', 'Ana'],\n};\n</code></pre>\n<p>Si no colocamos las comillas, los <em>keys</em> deben seguir las mismas reglas de\nnombramiento de variables. Por ejemplo, no deben tener espacios. Pero si\ncolocamos los <em>keys</em> entre comillas, entonces sí podemos usar el nombre que\nqueramos. Por ejemplo, si queremos agregar un <em>key</em> del año en que salió la\npelícula ('year of release'), haríamos:</p>\n<pre><code class=\"language-js\">movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  plot: 'Marty McFly, a 17-year-old high school student, ' +\n    'is accidentally sent 30 years into the past in a time-traveling DeLorean ' +\n    'invented by his close friend, the maverick scientist Doc Brown.',\n  oscar: 1,\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n</code></pre>\n<p>Es importante resaltar que aunque los <em>keys</em> son siempre <code>strings</code>, los <em>values</em>\npueden ser cualquier valor JavaScript - inclusive pueden ser una variable que\ncontiene, o mejor dicho \"agarra\" (con sus tentáculos) un valor.</p>\n<h2 id=\"accediendo-información-de-un-object\">Accediendo información de un object</h2>\n<p>Podemos acceder a los valores de un <code>object</code> de dos maneras:</p>\n<ol>\n<li>La primera es usando los corchetes <code>[]</code>, tal como lo hacemos para los\n<code>arrays</code>. La única diferencia es que, en lugar de usar el <em>index</em> (un\n<code>number</code>), utilizamos el <em>key</em> (un <code>string</code>), siempre entre comillas.</li>\n<li>La segunda es usando el punto (<code>.</code>) con el nombre del <em>key</em> inmediatamente\ndespués, <strong>sin</strong> comillas. A esto se le llama <code>dot notation</code>. Al igual que en\nla declaración de los <em>keys</em>, si utilizamos <code>dot notation</code>, el <em>key</em> debe\nobligatoriamente cumplir con las reglas de nombres válidos (por ejemplo, no\ndeben contener espacios).</li>\n</ol>\n<p>Veamos algunos ejemplos para aclarar cuándo se usa una o la otra:</p>\n<pre><code class=\"language-js\">movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n};\n\nconsole.assert(movie['title'] === 'Back to the Future');\nconsole.assert(movie.title === movie['title']);\n</code></pre>\n<pre><code class=\"language-js\">let error = false;\ntry {\n  console.assert(movie[title] === 'Back to the Future');\n} catch (e) {\n  error = e.message;\n}\nconsole.assert(error === 'title is not defined');\n</code></pre>\n<pre><code class=\"language-js\">console.assert(movie.'title' === 'Back to the Future');\n// → Uncaught SyntaxError: Unexpected string\n</code></pre>\n<p>Analicemos los dos errores:</p>\n<ol>\n<li>Cuando utilizamos los corchetes <strong>sin</strong> comillas, JavaScript piensa que title\nes una variable y como en nuestro programa no existe una variable llamada\ntitle, se genera un error de referencia y JavaScript nos devuelve que title\nno está definida: <code>Uncaught ReferenceError: title is not defined</code></li>\n<li>Cuando utilizamos <code>dot notation</code> <strong>con</strong> comillas, JavaScript nos devuleve un\nerror de sintaxis, dado que <code>dot notation</code> no se debe utilizar con un\n<code>string</code>. Por eso nos devuelve: <code>Uncaught SyntaxError: Unexpected string</code>.</li>\n</ol>\n<p>¿Qué pasa cuando le pedimos un <em>key</em> que no tiene el <code>object</code>? JavaScript nos\ndevuelve <code>undefined</code>. Veamos un ejemplo:</p>\n<pre><code class=\"language-js\">movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  plot: 'Marty McFly, a 17-year-old high school student, ' +\n    'is accidentally sent 30 years into the past in a time-traveling DeLorean ' +\n    'invented by his close friend, the maverick scientist Doc Brown.',\n  oscar: 1,\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n\nconsole.assert(movie['producer'] === undefined);\n</code></pre>\n<p>¿Y cómo hacemos para obtener uno de los actores (stars) de la película? Para\nesto tenemos que entrar a la <em>key</em> <code>'stars'</code> del object <code>movie</code>, que nos va a\ndevolver un <code>array</code> y luego acceder a uno de los elementos del <code>array</code> a través\nde los corchetes <code>[]</code> y el <em>index</em>. Veamos un ejemplo:</p>\n<pre><code class=\"language-js\">movie = {\n  title: 'Back to the Future',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n};\n\nconsole.assert(movie.stars[0] === 'Michael J. Fox');\nconsole.assert(movie['stars'][1] === 'Christopher Lloyd');\nconsole.assert(movie.stars[2] === 'Lea Thompson');\n</code></pre>\n<p>Fíjate que hemos usado <code>movie.stars</code> y <code>movie['stars']</code> para hacer énfasis de\nque ambas maneras funcionan, como parte de la experiencia educativa. Pero\ncuidado, esto <strong>no</strong> es una buena práctica. Solo lo hemos hecho por dar el\nejemplo. Cuando escribamos programas, sean los retos de código, nuestros\nejercicios de clase o en proyectos personales, lo correcto es escoger una opción\ny ser consistente a lo largo del código. Recomendamos, en particular,\n<code>movie.stars</code> ya que es más corto y fácil de leer. Recuerda que lo mismo sucede\ncon las comillas de los <code>strings</code>, se pueden usar simples o dobles, pero de\nmanera consistente.</p>\n<h2 id=\"definiendo-o-cambiando-los-elementos-de-un-object\">Definiendo o cambiando los elementos de un object</h2>\n<p>Al igual que con los <code>arrays</code>, podemos añadir o cambiar los elementos de un\n<code>object</code> utilizando los corchetes y <em>keys</em> o <code>dot notation</code>.</p>\n<p>Veamos un ejemplo que empieza con un <code>object</code> vacío y se le va añadiendo y\nmodificando elementos.</p>\n<pre><code class=\"language-js\">/* creando un object vacío */\nconst student = {};\n\n/* añadiendo elementos al object con corchetes y comillas */\nstudent['name'] = 'Carolina';\nstudent['points'] = 2500;\n\n/* añadiendo elementos al object con dot notation */\nstudent.courses = ['Intro a JS', 'Intro a UX'];\nstudent.isActive = true;\n\n/* resucitamos nuestra función comparadora */\n\nconst equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n\nconsole.assert(equal(\n  student,\n  {\n    name: 'Carolina',\n    points: 2500,\n    courses: ['Intro a JS', 'Intro a UX'],\n    isActive: true,\n  },\n));\n\n/* actualizando los puntos */\nstudent['points'] = 3500;\n\nconsole.assert(equal(\n  student,\n  {\n    name: 'Carolina',\n    points: 3500,\n    courses: ['Intro a JS', 'Intro a UX'],\n    isActive: true,\n  },\n));\n</code></pre>\n<p>A continuación Michelle nos explica los conceptos principales de <code>objects</code> con\nun ejemplo:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/J6U0gDzWsUg?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 0,
          "durationString": "1h"
        },
        "02-object-proto": {
          "title": "Object.prototype",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Familiarizarse con <code>Object.prototype</code></li>\n</ul>\n<h2 id=\"objectprototype\"><code>Object.prototype</code></h2>\n<p>Todos los objetos en JavaScript provienen de <code>Object</code>, es decir que todos\nheredan los métodos y propiedades de <code>Object.prototype</code>, es decir que alterando\neste objeto, puedes alterar el comportamiento de <strong>todos</strong> los objetos.</p>\n<p>Entérate de más: <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/prototype\" target=\"_blank\">Object.prototype en MDN</a></p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "03-arrays-and-objects": {
          "title": "Combinando arrays con objects",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=M4vXJ62IIlI",
              "id": "M4vXJ62IIlI"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender, por medio de un ejemplo, cómo combinar las dos estructuras de datos\naprendidas en esta unidad: <code>arrays</code> y <code>objects</code></li>\n</ul>\n<hr>\n<p>El texto a continuación se basa en gran medida, con ciertos ajustes, en 4 de\n<a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for kids</a>,\nNick Morgan, 2015.</p>\n<hr>\n<h2 id=\"combinando-arrays-con-objects\">Combinando arrays con objects</h2>\n<p>Ya hemos visto el caso de tener un <code>array</code> como valor de una propiedad\n<strong>dentro</strong> de un <code>object</code> (por ejemplo, un <code>array</code> de los protagonistas de un\n<code>object</code> movie), pero otra combinación bastante común para agrupar data es\ntener un <code>array</code> <strong>de</strong> <code>objects</code>.Veamos un ejemplo:</p>\n<p>Imaginemos que tenemos data de 3 estudiantes de Laboratoria y queremos\nestructurarla en nuestro programa. Para cada estudiante, tenemos cierta data: su\n nombre, sus puntos, los cursos que ha completado y si la estudiante ha\nabandonado o sigue cursando el programa.</p>\n<p>Una manera de estructurar esta data sería crear un <code>object</code> para cada estudiante\n, cada uno con su información, y luego un <code>array</code> que contenga los 3 <code>objects</code>.</p>\n<p>Veamos:</p>\n<pre><code class=\"language-js\">\nconst michelle = {\n  name: 'Michelle',\n  points: 2000,\n  isActive: true,\n  courses: ['Intro JS', 'JS avanzado', 'JS master']\n};\n\nconst alexandra = {\n  name: 'Alexandra',\n  points: 4100,\n  isActive: true,\n  courses: ['Intro JS', 'Intro UX', 'UX master']\n};\n\nconst andrea = {\n  name: 'Andrea',\n  points: 800,\n  isActive: false,\n  courses: ['Intro JS', 'JS avanzado']\n};\n\nconst students = [michelle, alexandra, andrea];\n</code></pre>\n<p>Fíjate que para cada propiedad de los <code>objects</code> hemos utilizado un tipo de dato\ndiferente:</p>\n<ul>\n<li>El nombre es un <code>string</code></li>\n<li>Los puntos son un <code>number</code></li>\n<li>Para saber si está estudiando o ha abandonado el programa escogimos un\n<code>boolean</code>, donde <code>true</code> significa que está activa (es decir, estudiando)</li>\n<li>Los cursos que ha completado son un <code>array</code>.</li>\n</ul>\n<p>Qué lindo cuando ya vemos todo lo que hemos aprendido aplicado en un solo bloque\nde código, ¿no? :) Lo mejor de todo es que con esta estrutura podemos acceder a\nla data de manera sencilla.</p>\n<p>A continuación Michelle te explica cómo utilizar <code>funciones</code>, <code>estructuras repetitivas</code> y <code>estructuras condicionales</code> para imprimir en la consola:</p>\n<ol>\n<li>Los nombres de todas las estudiantes <strong>activas</strong></li>\n<li>Los puntos totales de la clase</li>\n<li>Los nombres de las estudiantes que han llevado el curso de <strong>'JS avanzado'</strong></li>\n</ol>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/M4vXJ62IIlI?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 2,
          "durationString": "1h"
        },
        "04-guided-exercises": {
          "title": "Ejercicios guiados",
          "type": "practice",
          "format": "self-paced",
          "duration": 40,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=41ZJrHO6BsE",
              "id": "41ZJrHO6BsE"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Entender, a través de casos prácticos, cómo aplicar los conceptos de\n<code>funciones</code>, <code>arrays</code> y <code>objetos</code> para la resolución de problemas</li>\n</ul>\n<hr>\n<h2 id=\"enunciados\">Enunciados</h2>\n<p>Al igual que hemos hecho antes, es hora de aplicar los conceptos aprendidos para\nresolver problemas.</p>\n<p>A continuación tendrás un problema que resolver. Intenta resolverlo primero por\ntu cuenta. Más abajo encontrarás la solución de Lourdes, otra instructora\nestrella de Laboratoria. Después de haberlo intentado, compara tus solución con\nla de Lourdes.</p>\n<h3 id=\"1-array-to-object\">1. Array to Object</h3>\n<p>Escribe una función que tome un array 2D y devuelva un objeto con cada par de\nelementos en el <code>array</code> como un par <em>key-value</em>. Por ejemplo:</p>\n<ul>\n<li>Input</li>\n</ul>\n<pre><code class=\"language-js\">[['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n</code></pre>\n<ul>\n<li>Output</li>\n</ul>\n<pre><code class=\"language-js\">{\n  make : 'Ford',\n  model : 'Mustang',\n  year : 1964\n}\n</code></pre>\n<p>También escribe una función que haga lo contrario. Transforme los pares\n<em>key-value</em> de un <code>object</code> en un <code>array 2D</code>.</p>\n<h2 id=\"solucionario\">Solucionario</h2>\n<p>A continuación, Lourdes te explica cómo resolvió el ejercicio:</p>\n<h3 id=\"1-array-to-object-1\">1. Array to Object</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/41ZJrHO6BsE?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "40min"
        },
        "05-quiz": {
          "questions": [
            {
              "title": "1) ¿Cuál de los siguientes enunciados sobre Objects NO es correcto?",
              "description": "",
              "answers": [
                "Los <em>Keys</em> de los Objects son equivalente a sus propiedades",
                "Podemos calcular su longitud con la propiedad <code>length</code>",
                "No es necesario colocar los <em>Keys</em> entre comillas",
                "Podemos incluir una función como propiedad"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) ¿Cómo podemos acceder a los valores de un Object? Puedes seleccionar una o más opciones",
              "description": "",
              "answers": [
                "Usando corchetes <code>[]</code>",
                "Usando paréntesis <code>()</code>",
                "Usando dos puntos <code>:</code>",
                "Usando punto <code>.</code>"
              ],
              "solution": [
                0,
                3
              ]
            },
            {
              "title": "3) Las propiedades generalmente _____________ algo sobre el valor asociado y los métodos usualmente _____________ algo sobre el valor asociado",
              "description": "",
              "answers": [
                "nos muestran - conservan",
                "conservan -  nos muestran",
                "nos dicen - hacen",
                "hacen - nos dicen"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "4) toUpperCase() es _____________ que hace la acción de transformar a mayúsculas el valor asociado, mientras que length es _____________ que nos dice la longitud del valor asociado",
              "description": "",
              "answers": [
                "un object - un array",
                "un array - un object",
                "una propiedad - un método",
                "un método - una propiedad"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi']\n};\n</code></pre><p>¿Cómo accedo a la propiedad <code>director</code>?</p>",
              "answers": [
                "<code>movie{director}</code>",
                "<code>director[0]</code>",
                "<code>movie.director</code>",
                "<code>return director</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) ¿Cuál es el error en el siguiente código?",
              "description": "<pre><code class=\"language-js\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson' ],\n  oscar: 1,\n  other awards: 'best sound',\n  tags: []\n};\n</code></pre>",
              "answers": [
                "El número <code>1</code> debe ir entre comillas",
                "Le faltan las comillas a la propiedad <code>other awards</code>",
                "La propiedad <code>tags</code> no puede estar vacía",
                "No hay ningún error"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "7) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n\nconsole.log(movie.stars[2]);\n</code></pre>",
              "answers": [
                "Michael J. Fox",
                "Christopher Lloyd",
                "Lea Thompson",
                "undefined"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) En el siguiente código",
              "description": "<pre><code class=\"language-js\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n</code></pre><p>¿cómo podemos acceder a la lista de <em>keys</em> del Objeto <code>movie</code>?</p>",
              "answers": [
                "<code>movie:keys</code>",
                "<code>movie.length</code>",
                "<code>Object.keys(movie)</code>",
                "<code>return keys(movie)</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "9) ¿Cuál es el error en el siguiente código?",
              "description": "<pre><code class=\"language-js\">const objectToArray = (object) =&gt; {\n  const items = Object.keys(object);\n  const newArray = [];\n\n  for (let i = 0; i &lt; items.length; i += 1) {\n    newArray.pop([items[i], object[items[i]]]);\n  }\n\n  return newArray;\n};\n\nconsole.log(objectToArray({make: 'Ford', model: 'Mustang', year: 1964}));\n// → [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n</code></pre>",
              "answers": [
                "La variable <code>newArray</code> no puede estar vacía",
                "La variable <code>i</code> debe empezar en <code>1</code>",
                "Se debe usar <code>push</code> en lugar de <code>pop</code>",
                "Se debe usar <code>console.log</code> en lugar de <code>return</code>"
              ],
              "solution": [
                2
              ]
            }
          ],
          "title": "Quiz 1",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 4,
          "durationString": "15min"
        },
        "06-practice": {
          "title": "Retos de código",
          "type": "practice",
          "format": "self-paced",
          "duration": 180,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>A continuación te presentamos una serie de retos que debes completar para\nponer tus conocimientos a prueba.</li>\n</ul>\n",
          "exercises": {
            "00-add-array-property": {
              "title": "addArrayProperty",
              "body": "<p>Escribe una función llamada <code>addArrayProperty(obj, key, array)</code>.</p>\n<p>Dado un objeto, una llave y un array, <code>addArrayProperty</code> asigna una nueva\npropiedad sobre el objeto en la lave dada, con el array dado como valor.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const myObj = {};\nconst myStr = 'myProperty';\nconst myArray = [1, 3];\n\naddArrayProperty(myObj, myStr, myArray);\nconsole.log(myObj.myProperty); // =&gt; [1, 3]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# addArrayProperty\n\nEscreva uma função chamada \"addArrayProperty\\(obj, key, array\\)\".\n\nDado um objeto, uma chave \\(_key_\\) e um array, \"addArrayProperty\" define uma\nnova propriedade no objeto na chave fornecida, com seu valor definido no _array_\nespecificado.\n\nExemplo de entrada:\n\n```javascript\nconst myObj = {};\nconst myStr = 'myProperty';\nconst myArray = [1 ,3 ];\n\naddArrayProperty(myObj, myStr, myArray);\nconsole.log(myObj.myProperty); // -> [1, 3]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YWRkQXJyYXlQcm9wZXJ0eS5qcw==": "const addArrayProperty = (obj, key, arr) => {\n  // your code here\n};\n\nmodule.exports = addArrayProperty;\n"
                },
                "c29sdXRpb24=": {
                  "YWRkQXJyYXlQcm9wZXJ0eS5qcw==": "const addArrayProperty = (obj, key, arr) => Object.assign(obj, { [key]: arr });\n\n\nmodule.exports = addArrayProperty;\n"
                },
                "dGVzdA==": {
                  "YWRkQXJyYXlQcm9wZXJ0eS5zcGVjLmpz": "const { assert } = require('chai');\nconst addArrayProperty = require('../solution/addArrayProperty');\n\ndescribe('addArrayProperty()', () => {\n  it('debería regresar [5, 8, 12], para addArrayProperty({}, \"key\", [5, 8, 12])', () => {\n    const myObj = {};\n    const myArray = [5, 8, 12];\n\n    addArrayProperty(myObj, 'key', myArray);\n    assert.deepEqual(myObj.key, myArray);\n  });\n});\n"
                }
              }
            },
            "01-object-properties-counter": {
              "title": "Contador de propiedades",
              "body": "<p>Dado un objeto como parámetro, contar la cantidad de propiedades que este\ncontiene y retornarlo.</p>\n<p>Ejemplo:</p>\n<pre><code class=\"language-javascript\">const output = objectPropertiesCounter({ 'name': 'John', 'lastname': 'Doe' });\n\nconsole.log(ouput); // =&gt; 2\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Contador de propriedades\n\nDado um objeto como parâmetro, contar a quantidade de propriedades que existem\nno objeto e retornar este valor.\n\nExemplo:\n\n```javascript\nconst output = objectPropertiesCounter({ 'name': 'John', 'lastname': 'Doe' });\n\nconsole.log(ouput); // => 2\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "b2JqZWN0UHJvcGVydGllc0NvdW50ZXIuanM=": "const objectPropertiesCounter = (obj) => {\n\n};\n\nmodule.exports = objectPropertiesCounter;\n"
                },
                "c29sdXRpb24=": {
                  "b2JqZWN0UHJvcGVydGllc0NvdW50ZXIuanM=": "const objectPropertiesCounter = obj => Object.keys(obj).length;\n\nmodule.exports = objectPropertiesCounter;\n"
                },
                "dGVzdA==": {
                  "b2JqZWN0UHJvcGVydGllc0NvdW50ZXIuc3BlYy5qcw==": "const { assert } = require('chai');\nconst objectPropertiesCounter = require('../solution/objectPropertiesCounter');\n\ndescribe('objectPropertiesCounter()', () => {\n  it('debería regresar la cantidad de propiedades cuando es un objeto simple', () => {\n    const obj = { name: 'John', lastname: 'Doe' };\n    const output = objectPropertiesCounter(obj);\n    assert.deepEqual(output, 2);\n  });\n\n  it('debería regresar la cantidad de propiedades cuando es un objeto con propiedades anidadas', () => {\n    const obj = {\n      name: 'Laboratoria',\n      cohorts: {\n        SCL: ['2017-1', '2017-2'],\n        CDMX: ['2017-1', '2017-2'],\n      },\n    };\n    const output = objectPropertiesCounter(obj);\n    assert.deepEqual(output, 2);\n  });\n\n  it('debería regresar 0 cuando es un objeto vacío', () => {\n    const obj = {};\n    const output = objectPropertiesCounter(obj);\n    assert.deepEqual(output, 0);\n  });\n});\n"
                }
              }
            },
            "02-remove-string-values-longer-than": {
              "title": "removeStringValuesLongerThan",
              "body": "<p>Escribe una función llamada <code>removeStringValuesLongerThan</code>.</p>\n<p>Dado un número y un objeto, <code>removeStringValuesLongerThan</code> elimina cualquier\npropiedad en el objeto dado cuyos valores son cadenas de texto más largas que el\nnúmero dado.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const obj = {\n  name: 'Montana',\n  age: 20,\n  location: 'Texas',\n};\n\nremoveStringValuesLongerThan(6, obj);\nconsole.log(obj); // =&gt; { age: 20, location: 'Texas' }\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# removeStringValuesLongerThan\n\nEscreva uma função chamada \"removeStringValuesLongerThan\".\n\nDado um número e um objeto, \"removeStringValuesLongerThan\" remove qualquer\npropriedade no objeto dado cujos valores são strings maiores que o número\nfornecido.\n\nExemplo de entrada:\n\n```javascript\nconst obj = {\n  name: 'Montana',\n  age: 20,\n  location: 'Texas',\n};\nremoveStringValuesLongerThan(6, obj);\nconsole.log(obj); // { age: 20, location: 'Texas' }\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "cmVtb3ZlU3RyaW5nVmFsdWVzTG9uZ2VyVGhhbi5qcw==": "const removeStringValuesLongerThan = (num, obj) => {\n  // your code here\n};\n\nmodule.exports = removeStringValuesLongerThan;\n"
                },
                "c29sdXRpb24=": {
                  "cmVtb3ZlU3RyaW5nVmFsdWVzTG9uZ2VyVGhhbi5qcw==": "const removeStringValuesLongerThan = (num, obj) => Object.keys(obj).reduce(\n  (memo, key) => (\n    (obj[key].length > num)\n      ? memo\n      : { ...memo, [key]: obj[key] }\n  ),\n  {},\n);\n\n\nmodule.exports = removeStringValuesLongerThan;\n"
                },
                "dGVzdA==": {
                  "cmVtb3ZlU3RyaW5nVmFsdWVzTG9uZ2VyVGhhbi5zcGVjLmpz": "const { assert } = require('chai');\nconst removeStringValuesLongerThan = require('../solution/removeStringValuesLongerThan');\n\ndescribe('removeStringValuesLongerThan()', () => {\n  it('Prueba: key-value mayor a 1', () => {\n    const obj = {\n      name: 'Montana',\n      age: 20,\n      location: 'Texas',\n    };\n\n    const num = 1;\n    const hasil = {\n      age: 20,\n    };\n    assert.deepEqual(removeStringValuesLongerThan(num, obj), hasil);\n  });\n\n  it('Prueba: key-value mayor a 6', () => {\n    const obj = {\n      name: 'Montana',\n      age: 20,\n      location: 'Texas',\n    };\n\n    const num = 6;\n    const hasil = {\n      age: 20,\n      location: 'Texas',\n    };\n    assert.deepEqual(removeStringValuesLongerThan(num, obj), hasil);\n  });\n});\n"
                }
              }
            },
            "03-get-element-of-array-property": {
              "title": "getElementOfArrayProperty",
              "body": "<p>Escriba una función llamada <code>getElementOfArrayProperty</code>.</p>\n<p>Dado un objeto, una llave (nombre de una propiedad) y un índice numérico,\n<code>getElementOfArrayProperty</code> devuelve el valor del elemento en el índice dado del\narreglo localizado dentro del objeto dado en la llave dada.</p>\n<p>Notas:</p>\n<ul>\n<li>Si el arreglo está vacío, debería devolver <code>undefined</code>.</li>\n<li>Si el índice dado está fuera de rango del arreglo ubicado en la llave dada,\ndebería devolver <code>undefined</code>.</li>\n<li>Si la propiedad en la llave dada no es un arreglo, debería devolver\n<code>undefined</code>.</li>\n<li>Si no hay ninguna propiedad en la llave, debería devolverse <code>undefined</code>.</li>\n</ul>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const obj = {\n key: ['Jamil', 'Albrey'],\n};\n\nconst output = getElementOfArrayProperty(obj, 'key', 0);\nconsole.log(output); // =&gt; 'Jamil'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getElementOfArrayProperty\n\nEscreva uma função chamada `getElementOfArrayProperty`.\n\nDado um objeto, uma chave e um índice numérico, `getElementOfArrayProperty`\nretorna o valor do elemento no índice fornecido do array localizado dentro do\nobjeto informado na chave especificada.\n\nNotas:\n\n* Se a matriz estiver vazia, ela deve devolver `undefined`.\n* Se o índice fornecido estiver fora do intervalo da matriz localizada na chave\n  especificada, ela deverá devolver `undefined`.\n* Se a propriedade na chave fornecida não for uma matriz, ela deve devolver\n  `undefined`.\n* Se não houver propriedade na chave, ela deve devolver `undefined`.\n\nExemplo de entrada:\n\n```javascript\nconst obj = {\n key: ['Jamil', 'Albrey'],\n};\n\nconst output = getElementOfArrayProperty(obj, 'key', 0);\nconsole.log(output); // --> 'Jamil'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0RWxlbWVudE9mQXJyYXlQcm9wZXJ0eS5qcw==": "const getElementOfArrayProperty = (obj, key, index) => {\n  // your code here\n};\n\nmodule.exports = getElementOfArrayProperty;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0RWxlbWVudE9mQXJyYXlQcm9wZXJ0eS5qcw==": "const getElementOfArrayProperty = (obj, key, index) => {\n  if (!obj[key]) {\n    return undefined;\n  }\n\n  if (!Array.isArray(obj[key])) {\n    return undefined;\n  }\n\n  if (!obj[key][index]) {\n    return undefined;\n  }\n\n  return obj[key][index];\n};\n\nmodule.exports = getElementOfArrayProperty;\n"
                },
                "dGVzdA==": {
                  "Z2V0RWxlbWVudE9mQXJyYXlQcm9wZXJ0eS5zcGVjLmpz": "const { assert } = require('chai');\nconst getElementOfArrayProperty = require('../solution/getElementOfArrayProperty');\n\ndescribe('getElementOfArrayProperty()', () => {\n  it(\"debería regresar undefined, para ({yey: [1, 3, 5, 7]}, 'key', 1)\", () => {\n    const obj = {\n      yey: [1, 3, 5, 7],\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 1);\n\n    assert.deepEqual(output, undefined);\n  });\n\n  it(\"debería regresar undefined, para  ({key: 'eyoooo'}, 'key', 1)\", () => {\n    const obj = {\n      key: 'eyoooo',\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 0);\n    assert.deepEqual(output, undefined);\n  });\n\n\n  it(\"debería regresar undefined, para ({key: ['Kemal', 'Mahmud']}, 'key', 2)\", () => {\n    const obj = {\n      key: ['Kemal', 'Mahmud'],\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 2);\n    assert.deepEqual(output, undefined);\n  });\n\n  it(\"debería regresar 3, para ({key: [1, 2, 3, 4, 5]}, 'key', 2)\", () => {\n    const obj = {\n      key: [1, 2, 3, 4, 5],\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 2);\n    assert.deepEqual(output, 3);\n  });\n});\n"
                }
              }
            },
            "04-greet-customer": {
              "title": "greetCustomer",
              "body": "<p>Escribe una función llamada <code>greetCustomer</code>.</p>\n<p>Dando un nombre, <code>greetCustomer</code> devuelve un saludo basado en cuántas veces ese\ncliente ha visitado el restaurante.  Consulte el objeto <code>customerData</code>.</p>\n<p>El saludo debe ser diferente, dependiendo del nombre de la reservación.</p>\n<p>Caso 1 - Cliente desconocido (el nombre no está presente en los datos de\ncliente):</p>\n<pre><code class=\"language-js\">console.log(greetCustomer('Terrance'));\n// =&gt; 'Welcome! Is this your first time?'\n</code></pre>\n<p>Caso 2 - Cliente que ha visitado sólo una vez (el valor de las visitas es 1)</p>\n<pre><code class=\"language-js\">console.log(greetCustomer('Joe'));\n// =&gt; 'Welcome back, Joe! We're glad you liked us the first time!'\n</code></pre>\n<p>Caso 3 - Repetir cliente: (valor de' visitas' es mayor que 1)</p>\n<pre><code class=\"language-js\">console.log(greetCustomer('Carol'));\n// --&gt; 'Welcome back, Carol! So glad to see you again!'\n</code></pre>\n<p>Notas:</p>\n<ul>\n<li>Tu función no debe alterar el objeto <code>customerData</code> para actualizar el número\nde visitas.</li>\n<li>No codificar los datos exactos de la muestra. Esto es una mala idea:</li>\n</ul>\n<pre><code class=\"language-js\">if (firstName === 'Joe') {\n  // do something\n}\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# greetCustomer\n\nEscreva uma função chamada `greetCustomer`.\n\nDado um nome, `greetCustomer` retorna uma saudação com base em quantas vezes o\ncliente visitou o restaurante. Consulte o objeto `customerData`.\n\nA saudação deve ser diferente, dependendo do nome da reserva.\n\nCaso 1 - Cliente desconhecido \\(o nome não está presente nos dados do cliente\\):\n\n```javascript\nconsole.log(greetCustomer('Terrance')); // --> 'Welcome! Is this your first time?'\n```\n\nCaso 2 - Cliente que visitou apenas uma vez \\(o valor das visitas é 1\\)\n\n```javascript\nconsole.log(greetCustomer('Joe')); // --> 'Welcome back, Joe! We're glad you liked us the first time!'\n```\n\nCaso 3 - Cliente repetido: \\(o valor de 'visitas' é maior que 1\\)\n\n```javascript\nconsole.log(greetCustomer('Carol')); // --> 'Welcome back, Carol! So glad to see you again!'\n```\n\nNotas:\n\n* Sua função não deve alterar o objeto `customerData` para atualizar o número de\n  visitas.\n* Não codifique os dados exatos da amostra. Esta é uma má ideia:\n\n```javascript\nif (firstName === 'Joe') {\n  // do something\n}\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z3JlZXRDdXN0b21lci5qcw==": "const customerData = {\n  Joe: {\n    visits: 1,\n  },\n  Carol: {\n    visits: 2,\n  },\n  Howard: {\n    visits: 3,\n  },\n  Carrie: {\n    visits: 4,\n  },\n};\n\nconst greetCustomer = (firstName) => {\n  const greeting = '';\n\n  // your code here\n\n  return greeting;\n};\n\nmodule.exports = greetCustomer;\n"
                },
                "c29sdXRpb24=": {
                  "Z3JlZXRDdXN0b21lci5qcw==": "const customerData = {\n  Joe: {\n    visits: 1,\n  },\n  Carol: {\n    visits: 2,\n  },\n  Howard: {\n    visits: 3,\n  },\n  Carrie: {\n    visits: 4,\n  },\n};\n\nconst greetCustomer = (firstName) => {\n  if (!customerData[firstName]) {\n    return 'Welcome! Is this your first time?';\n  }\n\n  if (customerData[firstName].visits === 1) {\n    return `Welcome back, ${firstName}! We're glad you liked us the first time!`;\n  }\n\n  if (customerData[firstName].visits > 1) {\n    return `Welcome back, ${firstName}! So glad to see you again!`;\n  }\n\n  return undefined;\n};\n\nmodule.exports = greetCustomer;\n"
                },
                "dGVzdA==": {
                  "Z3JlZXRDdXN0b21lci5zcGVjLmpz": "const { assert } = require('chai');\nconst greetCustomer = require('../solution/greetCustomer');\n\ndescribe('greetCustomer()', () => {\n  it(\"debería regresar 'Welcome back, Howard! So glad to see you again!', para  ('Howard')\", () => {\n    const pair = greetCustomer('Howard');\n    const hasil = 'Welcome back, Howard! So glad to see you again!';\n\n    assert.deepEqual(pair, hasil);\n  });\n\n  it(\"debería regresar'Welcome back, Joe! We're glad you liked us the first time!', para ('Joe')\", () => {\n    const pair = greetCustomer('Joe');\n    const hasil = \"Welcome back, Joe! We're glad you liked us the first time!\";\n\n    assert.deepEqual(pair, hasil);\n  });\n\n\n  it(\"debería regresar  'Welcome! Is this your first time?', para  ('Kemal')\", () => {\n    const pair = greetCustomer('Kemal');\n    const hasil = 'Welcome! Is this your first time?';\n\n    assert.deepEqual(pair, hasil);\n  });\n});\n"
                }
              }
            },
            "05-transform-first-and-last": {
              "title": "transformFirstAndLast",
              "body": "<p>Escribe una función <code>transformFirstAndLast</code> que toma un array y devuelve un\nobjeto con:</p>\n<ol>\n<li>el primer elemento del array como la llave del objeto, y</li>\n<li>el último elemento del array como valor de esa llave.</li>\n</ol>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']\n</code></pre>\n<p>Valor de retorno de la función (salida):</p>\n<pre><code class=\"language-js\">{\n  Queen: 'Beyonce'\n}\n</code></pre>\n<p>No cambies el array de entrada. Piensa que todos los elementos del array de\nentrada serán del tipo <code>string</code>.</p>\n<p>Ten en cuenta que el array de entrada puede tener un número variable de\nelementos. Tu código debería acomodarse de manera flexible.</p>\n<p>Ejemplo, debe manejar la entrada como:</p>\n<pre><code class=\"language-js\">['Kevin', 'Bacon', 'Amor', 'Hart', 'Costner', 'Spacey']\n</code></pre>\n<p>Valor de retorno de la función (salida):</p>\n<pre><code class=\"language-js\">{\n  Kevin: \"Spacey\"\n}\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# transformFirstAndLast\n\nEscreva uma função 'transformFirstAndLast' que receba um vetor e retorne um\nobjeto com:\n\n1. o primeiro elemento do vetor como a chave do objeto e\n2. o último elemento do vetor como o valor dessa chave.\n\nExemplo de entrada:\n\n```javascript\n['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']\n```\n\nValor de retorno da função \\(saída\\):\n\n```javascript\n{\n  Queen: 'Beyonce'\n}\n```\n\nNão altere o vetor de entrada. Suponha que todos os elementos do _array_ de\nentrada sejam do tipo `string`.\n\nObserve que o vetor de entrada pode ter um número variável de elementos. Seu\ncódigo deve responder de forma flexível.\n\nPor exemplo, você deve manipular entradas como:\n\n```javascript\n['Kevin', 'Bacon', 'Amor', 'Hart', 'Costner', 'Spacey']\n```\n\nSaída da função:\n\n```javascript\n{\n  Kevin: \"Spacey\"\n}\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "dHJhbnNmb3JtRmlyc3RBbmRMYXN0Lmpz": "const transformFirstAndLast = (array) => {\n  // your code here\n};\n\nmodule.exports = transformFirstAndLast;\n"
                },
                "c29sdXRpb24=": {
                  "dHJhbnNmb3JtRmlyc3RBbmRMYXN0Lmpz": "const transformFirstAndLast = (array) => {\n  const obj = {};\n\n  obj[array[0]] = array[array.length - 1];\n\n  return obj;\n};\n\nmodule.exports = transformFirstAndLast;\n"
                },
                "dGVzdA==": {
                  "dHJhbnNmb3JtRmlyc3RBbmRMYXN0LnNwZWMuanM=": "const { assert } = require('chai');\nconst transformFirstAndLast = require('../solution/transformFirstAndLast');\n\ndescribe('transformFirstAndLast()', () => {\n  it(\"debería regresar { King : 'Freddie' }, para ['King', 'Kemal', 'Freddie']\", () => {\n    assert.deepEqual(transformFirstAndLast(['King', 'Kemal', 'Freddie']), { King: 'Freddie' });\n  });\n\n  it(\"debería regresar { Queen : 'Beyonce' }, para ['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']\", () => {\n    assert.deepEqual(transformFirstAndLast(['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']), { Queen: 'Beyonce' });\n  });\n});\n"
                }
              }
            },
            "06-get-all-keys": {
              "title": "getAllKeys",
              "body": "<p>Escribe una función llamada <code>getAllKeys</code> que devuelve un array de todas las\nllaves del objeto de entrada.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">{\n&nbsp;&nbsp;name: 'Sam',\n  age: 25,\n&nbsp;&nbsp;hasPets: true\n}\n</code></pre>\n<p>Valor de retorno de la función (salida):</p>\n<pre><code class=\"language-js\">['name', 'age', 'hasPets']\n</code></pre>\n<p>Ten en cuenta que tu función debe ser capaz de manejar cualquier objeto pasado\nen ella.</p>\n<p>Por ejemplo, también debe manejar una entrada como:</p>\n<pre><code class=\"language-js\">{\n  a: 'a',\n  number: 11,\n  hungry: true,\n  grammyWins: 1\n}\n</code></pre>\n<p>Valor de retorno de la función (salida):</p>\n<pre><code class=\"language-js\">['a', 'number', 'hungry', 'grammyWins']\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getAllKeys\n\nEscreva uma função chamada \"getAllKeys\" que retorna um _array_ com todas as\nchaves do objeto de entrada.\n\nExemplo de entrada:\n\n```javascript\n{\n  name: 'Sam',\n  age: 25,\n  hasPets: true\n}\n```\n\nValor de retorno da função \\(saída\\):\n\n```javascript\n['name', 'age', 'hasPets']\n```\n\nTenha em mente que sua função deve ser capaz de manipular qualquer objeto\npassado nela.\n\nPor exemplo, você também deve tratar uma entrada como a seguinte:\n\n```javascript\n{\n  a: 'a',\n  number: 11,\n  hungry: true,\n  grammyWins: 1\n}\n```\n\nSaída da função:\n\n```javascript\n['a', 'number', 'hungry', 'grammyWins']\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0QWxsS2V5cy5qcw==": "const getAllKeys = (obj) => {\n  // your code here\n};\n\nmodule.exports = getAllKeys;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0QWxsS2V5cy5qcw==": "const getAllKeys = obj => Object.keys(obj);\n\nmodule.exports = getAllKeys;\n"
                },
                "dGVzdA==": {
                  "Z2V0QWxsS2V5cy5zcGVjLmpz": "const { assert } = require('chai');\nconst getAllKeys = require('../solution/getAllKeys');\n\ndescribe('getAllKeys()', () => {\n  it(\"debería regresar ['tes', 'ini', 'berhasil'], para { tes : 'tes', ini : 'apa',berhasil : 10 }\", () => {\n    const hasil = ['tes', 'ini', 'berhasil'];\n    const obj = {\n      tes: 'tes',\n      ini: 'apa',\n      berhasil: 10,\n    };\n\n    assert.deepEqual(getAllKeys(obj), hasil);\n  });\n\n  it(\"debería regresar ['a', 'number', 'hungry', 'grammyWins'], para { a: 'a', number: 11, hungry: true, grammyWins: 1 }\", () => {\n    const hasil = ['a', 'number', 'hungry', 'grammyWins'];\n    const obj = {\n      a: 'a',\n      number: 11,\n      hungry: true,\n      grammyWins: 1,\n    };\n\n    assert.deepEqual(getAllKeys(obj), hasil);\n  });\n});\n"
                }
              }
            },
            "07-from-list-to-object": {
              "title": "fromListToObject",
              "body": "<p>Escribe una función <code>fromListToObject</code> que toma un array de matrices, y\ndevuelve un objeto con cada par de elementos en la array como un par\nllave-valor.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">[['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n</code></pre>\n<p>Valor de retorno de la función (salida):</p>\n<pre><code class=\"language-js\">{\n  make: 'Ford'\n  model: 'Mustang',\n  year: 1964\n}\n</code></pre>\n<p>No cambies la cadena de entrada. Piensa que todos los elementos del array serán\ndel tipo <code>string</code>.</p>\n<p>Ten en cuenta que la entrada puede tener un número diferente de elementos que\nla muestra dada. Por ejemplo, si la entrada tenía 6 valores en lugar de 4, tu\ncódigo debería adaptarse de manera flexible.</p>\n",
              "files": {
                "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                "UkVBRE1FLnB0LUJSLm1k": "# fromListToObject\n\nEscreva uma função `fromListToObject` que receba um _array_ de _arrays_ e\nretorne um objeto com cada par de elementos do _array_ como um par de\nchave-valor.\n\nExemplo de entrada:\n\n```javascript\n[['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n```\n\nSaída função:\n\n```javascript\n{\n  make: 'Ford'\n  model: 'Mustang',\n  year: 1964\n}\n```\n\nNão mude a string de entrada. Suponha que todos os elementos do _array_ sejam do\ntipo `string`.\n\nObserve que a entrada pode ter um número diferente de elementos do que a amostra\nfornecida. Por exemplo, se a entrada tiver 6 valores em vez de 4, seu código\ndeve se adaptar de maneira flexível.\n",
                "Ym9pbGVycGxhdGU=": {
                  "ZnJvbUxpc3RUb09iamVjdC5qcw==": "const fromListToObject = (array) => {\n  // your code here\n};\n\nmodule.exports = fromListToObject;\n"
                },
                "c29sdXRpb24=": {
                  "ZnJvbUxpc3RUb09iamVjdC5qcw==": "const fromListToObject = (array) => {\n  const obj = {};\n\n  for (let i = 0; i < array.length; i += 1) {\n    /* eslint-disable-next-line prefer-destructuring */\n    obj[array[i][0]] = array[i][1];\n  }\n\n  return obj;\n};\n\nmodule.exports = fromListToObject;\n"
                },
                "dGVzdA==": {
                  "ZnJvbUxpc3RUb09iamVjdC5zcGVjLmpz": "const { assert } = require('chai');\nconst fromListToObject = require('../solution/fromListToObject');\n\ndescribe('fromListToObject()', () => {\n  it(\"debería regresar { make: 'Ford', model: 'Mustang', year: 1964, quality: 'eeehhh' }, para [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964], ['quality', 'eeehhh']]\", () => {\n    const array = [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964], ['quality', 'eeehhh']];\n    const hasil = {\n      make: 'Ford',\n      model: 'Mustang',\n      year: 1964,\n      quality: 'eeehhh',\n    };\n    assert.deepEqual(fromListToObject(array), hasil);\n  });\n\n  it(\"debería regresar { make : 'Ford', model : 'Mustang', year : 1964 }, para [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\", () => {\n    const array = [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]];\n    const hasil = {\n      make: 'Ford',\n      model: 'Mustang',\n      year: 1964,\n    };\n    assert.deepEqual(fromListToObject(array), hasil);\n  });\n\n  it(\"debería regresar { Kemal: 'Mahmud' }, para [['Kemal', 'Mahmud']]\", () => {\n    const array = [['Kemal', 'Mahmud']];\n    const hasil = {\n      Kemal: 'Mahmud',\n    };\n    assert.deepEqual(fromListToObject(array), hasil);\n  });\n});\n"
                }
              }
            },
            "08-list-all-values": {
              "title": "listAllValues",
              "body": "<p>Escribe una función llamada <code>listAllValues</code> que devuelve un array de todos los\nvalores del objeto de entrada.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">{\n  name: 'Krysten',\n  age: 33,\n&nbsp;&nbsp;hasPets: false\n}\n</code></pre>\n<p>Valor de retorno de la función (salida):</p>\n<pre><code class=\"language-js\">['Krysten', 33, false]\n</code></pre>\n<p>Ten en cuenta que la entrada puede tener un número diferente de llaves y\nvalores que la muestra dada.</p>\n<p>Por ejemplo, también debe manejar una entrada como:</p>\n<pre><code class=\"language-js\">{\n&nbsp;&nbsp;a: 'a',\n  number: 11,\n  hungry: true,\n&nbsp;&nbsp;grammyWins: 1\n}\n</code></pre>\n<p>Valor de retorno de la función (salida):</p>\n<pre><code class=\"language-js\">['a', 11, true, 1]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# listAllValues\n\nEscreva uma função chamada `listAllValues` que retorna um _array_ de todos os\nvalores do objeto de entrada.\n\nExemplo de entrada:\n\n```javascript\n{\n  name: 'Krysten'\n  age: 33,\n  hasPets: false\n}\n```\n\nValor devolvido pela função \\(saída\\):\n\n```javascript\n['Krysten', 33, false]\n```\n\nObserve que a entrada pode ter um número diferente de chaves e valores que a\namostra fornecida. Por exemplo, você também deve manipular uma entrada como:\n\n```javascript\n{\n  a: 'a',\n  number: 11 ,\n  hungry: true,\n  grammyWins: 1\n}\n```\n\nValor devolvido pela função \\(saída\\):\n\n```javascript\n['a', 11, true, 1]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "bGlzdEFsbFZhbHVlcy5qcw==": "const listAllValues = (obj) => {\n  // your code here\n};\n\nmodule.exports = listAllValues;\n"
                },
                "c29sdXRpb24=": {
                  "bGlzdEFsbFZhbHVlcy5qcw==": "const listAllValues = (obj) => {\n  const arr = [];\n  const arrKeys = Object.keys(obj);\n\n  for (let i = 0; i < arrKeys.length; i += 1) {\n    arr.push(obj[arrKeys[i]]);\n  }\n\n  return arr;\n};\n\nmodule.exports = listAllValues;\n"
                },
                "dGVzdA==": {
                  "bGlzdEFsbFZhbHVlcy5zcGVjLmpz": "const { assert } = require('chai');\nconst listAllValues = require('../solution/listAllValues');\n\ndescribe('listAllValues()', () => {\n  it('debería regresar [1, 2, 3, false, false], para { a: 1, b: 2, c: 3, d: false, e: false }', () => {\n    const obj = {\n      a: 1,\n      b: 2,\n      c: 3,\n      d: false,\n      e: false,\n    };\n    const hasil = [1, 2, 3, false, false];\n\n    assert.deepEqual(listAllValues(obj), hasil);\n  });\n\n  it(\"debería regresar ['a', 11, true, 1], para { a: 'a', number: 11, hungry: true, grammyWins: 1 }\", () => {\n    const obj = {\n      a: 'a',\n      number: 11,\n      hungry: true,\n      grammyWins: 1,\n    };\n    const hasil = ['a', 11, true, 1];\n\n    assert.deepEqual(listAllValues(obj), hasil);\n  });\n\n  it(\"debería regresar ['yes'], para { tez: 'yes' }\", () => {\n    const obj = {\n      tez: 'yes',\n    };\n    const hasil = ['yes'];\n\n    assert.deepEqual(listAllValues(obj), hasil);\n  });\n});\n"
                }
              }
            },
            "09-transform-employee-data": {
              "title": "transformEmployeeData",
              "body": "<p>Escribe una función llamada <code>transformEmployeeData</code> que transforma algunos\ndatos de los empleados de un formato a otro.</p>\n<p>El argumento se verá así:</p>\n<pre><code class=\"language-js\">[\n  [\n&nbsp;&nbsp;  ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']\n  ],\n  [\n    ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']\n  ]\n]\n</code></pre>\n<p>Dado que la entrada, el valor devuelto debe verse como esto:</p>\n<pre><code class=\"language-js\">[\n&nbsp;&nbsp;&nbsp;&nbsp;{firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'},\n&nbsp;&nbsp;&nbsp;&nbsp;{firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}\n]\n</code></pre>\n<p>Tenga en cuenta que la entrada puede tener un número diferente de filas o llaves\ndiferentes de la muestra dada.</p>\n<p>Por ejemplo, digamos que el departamento de recursos humanos agrega un campo\n\"tshirtSize\" a cada registro de empleado. Su código debería acomodarse de manera\nflexible.</p>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# transformEmployeeData\n\nEscreva uma função chamada \"transformEmployeeData\" que transforma alguns dados\nde funcionários de um formato para outro.\n\nO argumento ficará assim:\n\n```javascript\n[\n  [\n    ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']\n  ]\n  [\n    ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36 ], ['role', 'manager']\n  ]\n]\n```\n\nDada a entrada, o valor de retorno deve ficar assim:\n\n```javascript\n[\n    {firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'},\n    {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}\n]\n```\n\nObserve que a entrada pode ter um número diferente de linhas ou chaves\ndiferentes da amostra fornecida.\n\nPor exemplo, digamos que o departamento de recursos humanos inclua um campo\n\"tshirtSize\" em cada registro de funcionário. Seu código deve ser flexível para\ntratar essa situação.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "dHJhbnNmb3JtRW1wbG95ZWVEYXRhLmpz": "const transformEmployeeData = (array) => {\n  // your code here\n};\n\nmodule.exports = transformEmployeeData;\n"
                },
                "c29sdXRpb24=": {
                  "dHJhbnNmb3JtRW1wbG95ZWVEYXRhLmpz": "const transformEmployeeData = (array) => {\n  const arrayMain = [];\n\n  for (let i = 0; i < array.length; i += 1) {\n    const arr = array[i];\n    const obj = {};\n\n    for (let j = 0; j < arr.length; j += 1) {\n      /* eslint-disable-next-line prefer-destructuring */\n      obj[arr[j][0]] = arr[j][1];\n    }\n\n    arrayMain.push(obj);\n  }\n\n  return arrayMain;\n};\n\nmodule.exports = transformEmployeeData;\n"
                },
                "dGVzdA==": {
                  "dHJhbnNmb3JtRW1wbG95ZWVEYXRhLnNwZWMuanM=": "const { assert } = require('chai');\nconst transformEmployeeData = require('../solution/transformEmployeeData');\n\ndescribe('transformEmployeeData()', () => {\n  it(\"debería regresar [{a: 1, b: 2, c: true}, {a: 10, b: 20, c: false}], para [[['a', 1], ['b', 2], ['c', true]],[['a', 10], ['b', 20], ['c', false]]]\", () => {\n    const array = [\n      [\n        ['a', 1], ['b', 2], ['c', true],\n      ],\n      [\n        ['a', 10], ['b', 20], ['c', false],\n      ],\n    ];\n    const hasil = [\n      { a: 1, b: 2, c: true },\n      { a: 10, b: 20, c: false },\n    ];\n    assert.deepEqual(transformEmployeeData(array), hasil);\n  });\n\n  it(\"debería regresar [{firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'}, {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}], para [[['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']],[['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']]]\", () => {\n    const array = [\n      [\n        ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk'],\n      ],\n      [\n        ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager'],\n      ],\n    ];\n    const hasil = [\n      {\n        firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk',\n      },\n      {\n        firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager',\n      },\n    ];\n    assert.deepEqual(transformEmployeeData(array), hasil);\n  });\n});\n"
                }
              }
            },
            "10-convert-object-to-list": {
              "title": "convertObjectToList",
              "body": "<p>Escribe una función llamada <code>convertObjectToList</code> que convierte un objeto\nliteral en una array de arrays, como esto:</p>\n<p>Argumento:</p>\n<pre><code class=\"language-js\">{\n&nbsp;&nbsp;name: 'Holly',\n&nbsp;&nbsp;edad: 35,\n&nbsp;&nbsp;papel: 'productor'\n}\n</code></pre>\n<p>Valor de retorno:</p>\n<pre><code class=\"language-js\">[['name', 'Holly'], ['edad', 35], ['rol', 'productor']]\n</code></pre>\n<p>Ten en cuenta que tu función debe ser capaz de manejar cualquier objeto como\neste, no sólo la muestra exacta proporcionada anteriormente.</p>\n<p>Por ejemplo, también debería ser capaz de manejar esto, o cualquier otro objeto\nque contiene pares llave-valor simples.</p>\n<pre><code class=\"language-js\">{\n&nbsp;&nbsp;species: 'canino',\n&nbsp;&nbsp;name: 'Bowser',\n&nbsp;&nbsp;weight: 45\n}\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# convertObjectToList\n\nEscreva uma função chamada \"convertObjectToList\" que converte um objeto literal\nem um vetor de vetores, como neste exemplo:\n\nArgumento:\n\n```javascript\n{\n  name: 'Holly',\n  edad: 35,\n  papel: 'productor'\n}\n```\n\nValor devolvido:\n\n```javascript\n[['name', 'Holly'], ['edad', 35], ['rol', 'productor']]\n```\n\nTenha em mente que sua função deve ser capaz de manipular qualquer objeto como\neste, não apenas a amostra exata fornecida acima.\n\nPor exemplo, você também deve conseguir manipular a entrada abaixo ou qualquer\noutro objeto que contenha pares de chave-valor simples.\n\n```javascript\n{\n  species: 'canino',\n  name: 'Bowser',\n  weight: 45\n}\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29udmVydE9iamVjdFRvTGlzdC5qcw==": "const convertObjectToList = (obj) => {\n  // your code here\n};\n\nmodule.exports = convertObjectToList;\n"
                },
                "c29sdXRpb24=": {
                  "Y29udmVydE9iamVjdFRvTGlzdC5qcw==": "const convertObjectToList = (obj) => {\n  const arr = [];\n  const arrKeys = Object.keys(obj);\n\n  for (let i = 0; i < arrKeys.length; i += 1) {\n    arr.push([arrKeys[i], obj[arrKeys[i]]]);\n  }\n\n  return arr;\n};\n\nmodule.exports = convertObjectToList;\n"
                },
                "dGVzdA==": {
                  "Y29udmVydE9iamVjdFRvTGlzdC5zcGVjLmpz": "const { assert } = require('chai');\nconst convertObjectToList = require('../solution/convertObjectToList');\n\ndescribe('convertObjectToList()', () => {\n  it(\"debería regresar [['a', 1], ['b', 'c'], ['d', true], ['e', 10]], para { a: 1, b: 'c', d: true, e: 10 }\", () => {\n    const obj = {\n      a: 1,\n      b: 'c',\n      d: true,\n      e: 10,\n    };\n    const hasil = [['a', 1], ['b', 'c'], ['d', true], ['e', 10]];\n\n    assert.deepEqual(convertObjectToList(obj), hasil);\n  });\n\n  it(\"debería regresar [['name', 'Holly'], ['age', 35], ['role', 'producer']], para { name: 'Holly', age: 35, role: 'producer' }\", () => {\n    const obj = {\n      name: 'Holly',\n      age: 35,\n      role: 'producer',\n    };\n    const hasil = [['name', 'Holly'], ['age', 35], ['role', 'producer']];\n\n    assert.deepEqual(convertObjectToList(obj), hasil);\n  });\n});\n"
                }
              }
            },
            "11-get-sum-of-all-elements-at-property": {
              "title": "getSumOfAllElementsAtProperty",
              "body": "<p>Escribe una función llamada <code>getSumOfAllElementsAtProperty</code>.</p>\n<p>Dado un objeto y una key, <code>getSumOfAllElementsAtProperty</code> devuelve la suma de\ntodos los elementos del array.</p>\n<p>Notas:</p>\n<ul>\n<li>Si el array está vacío, debe devolver <code>0</code>.</li>\n<li>Si la propiedad en la key dada no es un array, debe devolver <code>0</code>.</li>\n<li>Si no hay ninguna propiedad en la key dada, debe devolver <code>0</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const obj = {\n&nbsp;&nbsp;key: [4, 1, 8],\n};\n\nconst output = getSumOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // =&gt; 13\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getSumOfAllElementsAtProperty\n\nEscreva uma função chamada \"getSumOfAllElementsAtProperty\".\n\nDado um objeto e uma chave, \"getSumOfAllElementsAtProperty\" devolve a soma de\ntodos os elementos da matriz.\n\nNotas:\n\n* Se o _array_ estiver vazio, ela deve devolver 0.\n* Se a propriedade na chave fornecida não for um _array_, ela deverá devolver 0.\n* Se não houver nenhuma propriedade na chave fornecida, ela deverá devolver 0.\n\n```javascript\nconst obj = {\n  key: [4, 1, 8],\n};\n\nconst output = getSumOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // -> 13\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0U3VtT2ZBbGxFbGVtZW50c0F0UHJvcGVydHkuanM=": "const getSumOfAllElementsAtProperty = (obj, key) => {\n  // your code here\n};\n\nmodule.exports = getSumOfAllElementsAtProperty;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0U3VtT2ZBbGxFbGVtZW50c0F0UHJvcGVydHkuanM=": "const getSumOfAllElementsAtProperty = (obj, key) => {\n  let sum = 0;\n  const array = obj[key];\n\n  if (Array.isArray(array) && (array.length > 0)) {\n    [sum] = array;\n\n    for (let i = 1; i < array.length; i += 1) { sum += array[i]; }\n  }\n\n  return sum;\n};\n\nmodule.exports = getSumOfAllElementsAtProperty;\n"
                },
                "dGVzdA==": {
                  "Z2V0U3VtT2ZBbGxFbGVtZW50c0F0UHJvcGVydHkuc3BlYy5qcw==": "const { assert } = require('chai');\nconst getSumOfAllElementsAtProperty = require('../solution/getSumOfAllElementsAtProperty');\n\ndescribe('getSumOfAllElementsAtProperty()', () => {\n  it(\"debería regresar 0, para { key: Badddlyyyy } y 'key'\", () => {\n    const obj = {\n      koy: 'Badddlyyyy',\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { koy: 'nope' } y 'key'\", () => {\n    const obj = {\n      koy: [],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { key: [] } y 'key'\", () => {\n    const obj = {\n      key: [],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 35, para { key: [10, 11, 15, -1] } y 'key'\", () => {\n    const obj = {\n      key: [10, 11, 15, -1],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 35);\n  });\n\n  it(\"debería regresar 13, para { key: [4, 1, 8] } y 'key'\", () => {\n    const obj = {\n      key: [4, 1, 8],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 13);\n  });\n});\n"
                }
              }
            },
            "12-get-product-of-all-elements-at-property": {
              "title": "getProductOfAllElementsAtProperty",
              "body": "<p>Escribe una función llamada <code>getProductOfAllElementsAtProperty</code>.</p>\n<p>Dado un objeto y una key, <code>getProductOfAllElementsAtProperty</code> devuelve el\nproducto de todos los elementos del array.</p>\n<p>Notas:</p>\n<ul>\n<li>Si el array está vacío, debe devolver 0.</li>\n<li>Si la propiedad en la key dada no es un array, debe devolver 0.</li>\n<li>Si no hay ninguna propiedad en la key dada, debe devolver 0.</li>\n</ul>\n<pre><code class=\"language-js\">const obj = {\n&nbsp;&nbsp;key: [1, 2, 3, 4],\n};\n\nconst output = getProductOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // =&gt; 24\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# getProductOfAllElementsAtProperty\n\nEscreva uma função chamada `getProductOfAllElementsAtProperty`.\n\nDado um objeto e uma chave, `getProductOfAllElementsAtProperty` retorna o\nproduto de todos os elementos do _array_.\n\nNotas:\n\n* Se o _array_ estiver vazio, ela deve devolver 0.\n* Se a propriedade na chave fornecida não for um _array_, ela deverá devolver 0.\n* Se não houver nenhuma propriedade na chave fornecida, ela deverá devolver 0.\n\n```javascript\nconst obj = {\n  key: [1, 2, 3, 4],\n};\n\nconst output = getProductOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // -> 24\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0UHJvZHVjdE9mQWxsRWxlbWVudHNBdFByb3BlcnR5Lmpz": "const getProductOfAllElementsAtProperty = (obj, key) => {\n  // your code here\n};\n\nmodule.exports = getProductOfAllElementsAtProperty;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0UHJvZHVjdE9mQWxsRWxlbWVudHNBdFByb3BlcnR5Lmpz": "const getProductOfAllElementsAtProperty = (obj, key) => {\n  let product = 0;\n  const array = obj[key];\n\n  if (Array.isArray(array) && (array.length > 0)) {\n    [product] = array;\n\n    for (let i = 1; i < array.length; i += 1) { product *= array[i]; }\n  }\n\n  return product;\n};\n\nmodule.exports = getProductOfAllElementsAtProperty;\n"
                },
                "dGVzdA==": {
                  "Z2V0UHJvZHVjdE9mQWxsRWxlbWVudHNBdFByb3BlcnR5LnNwZWMuanM=": "const { assert } = require('chai');\nconst getProductOfAllElementsAtProperty = require('../solution/getProductOfAllElementsAtProperty');\n\ndescribe('getProductOfAllElementsAtProperty()', () => {\n  it(\"debería regresar 0, para { koy: [1, 2, 3] } y 'key'\", () => {\n    const obj = {\n      koy: [1, 2, 3],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { key: 'nope' } y 'key'\", () => {\n    const obj = {\n      key: 'nope',\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { key: [] } y 'key'\", () => {\n    const obj = {\n      key: [],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 24, para { key: [1, 2, 3, 4] } y 'key'\", () => {\n    const obj = {\n      key: [1, 2, 3, 4],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 24);\n  });\n\n  it(\"debería regresar 60, para { key: [1, 5, 6, 2, 1] } y 'key'\", () => {\n    const obj = {\n      key: [1, 5, 6, 2, 1],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 60);\n  });\n});\n"
                }
              }
            },
            "13-add-object-property": {
              "title": "addObjectProperty",
              "body": "<p>Escribe una función llamada <code>addObjectProperty</code>.</p>\n<p>Dado dos objetos y una llave, <code>addObjectProperty</code> establece una nueva propiedad\nen el primer objeto en la llave dada. El valor de esta nueva propiedad es el\nsegundo objeto completo.</p>\n<pre><code class=\"language-js\">const person1 = {\n  name: 'Joe Blow',\n  role: 'schlub',\n};\n\nconst person2 = {\n  name: 'Mr. Burns',\n  role: 'supervisor',\n};\n\naddObjectProperty(person1, 'manager', person2);\nconsole.log(person1.manager); // =&gt; { name: 'Mr. Burns', role: 'supervisor' }\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# addObjectProperty\n\nEscreva uma função chamada \"addObjectProperty\".\n\nDados dois objetos e uma chave, \"addObjectProperty\" define uma nova propriedade\nno primeiro objeto na chave determinada. O valor dessa nova propriedade é o\nsegundo objeto completo.\n\n```javascript\nconst person1 = {\n  name: 'Joe Blow',\n  role: 'schlub',\n};\n\nconst person2 = {\n  name: 'Mr. Burns',\n  role: 'supervisor',\n};\n\naddObjectProperty(person1, 'manager', person2);\nconsole.log(person1.manager);\n// --> { name: 'Mr. Burns', role: 'supervisor' }\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YWRkT2JqZWN0UHJvcGVydHkuanM=": "const addObjectProperty = (obj1, key, obj2) => {\n  // your code here\n};\n\nmodule.exports = addObjectProperty;\n"
                },
                "c29sdXRpb24=": {
                  "YWRkT2JqZWN0UHJvcGVydHkuanM=": "const addObjectProperty = (obj1, key, obj2) => Object.assign(obj1, { [key]: obj2 });\n\nmodule.exports = addObjectProperty;\n"
                },
                "dGVzdA==": {
                  "YWRkT2JqZWN0UHJvcGVydHkuc3BlYy5qcw==": "const { assert } = require('chai');\nconst addObjectProperty = require('../solution/addObjectProperty');\n\ndescribe('addObjectProperty(obj1, key, obj2)', () => {\n  it('debería asignar obj2 en obj1[key]', () => {\n    const person1 = { name: 'Medina', role: 'Euuuuhhh' };\n    const person2 = { name: 'Fadel', role: 'Aaaahhhh' };\n\n    addObjectProperty(person1, 'bawahan', person2);\n\n    assert.deepEqual(person1.bawahan, person2);\n  });\n});\n"
                }
              }
            },
            "14-add-full-name-property": {
              "title": "addFullNameProperty",
              "body": "<p>Escribe una función llamada <code>addFullNameProperty(person)</code>.</p>\n<p>Dado un objeto <code>person</code> con una propiedad <code>firstName</code> y una propiedad\n<code>lastName</code>, <code>addFullNameProperty(person)</code> debe retornar un nuevo objeto con las\nmismas propiedades que el objeto recibido pero con una propiedad más <code>fullName</code>,\ncuyo valor debe ser una cadena (string) con el nombre y el apellido separados\npor un espacio.</p>\n<pre><code class=\"language-js\">const person = {\n  firstName: 'Jade',\n  lastName: 'Smith',\n};\n\nconst personWithFullName = addFullNameProperty(person);\n\nconsole.log(personWithFullName.fullName); // =&gt; 'Jade Smith'\nconsole.log(personWithFullName.firstName); // =&gt; 'Jade'\nconsole.log(personWithFullName.lastName); // =&gt; 'Smith'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# addFullNameProperty\n\nEscreva uma função chamada \"addFullNameProperty\".\n\nDado um objeto que tem uma propriedade `firstName` e uma propriedade `lastName`,\n`addFullNameProperty(person)` retorna um novo objeto com as mesmas propriedades\nque o objeto recebido, mas com mais uma propriedade `fullName` cujo valor é\numa string com o nome e sobrenome separados por um espaço.\n\n```javascript\nconst person = {\n  firstName: 'Jade',\n  lastName: 'Smith',\n};\n\nconst personWithFullName = addFullNameProperty(person);\n\nconsole.log(personWithFullName.fullName); // => 'Jade Smith'\nconsole.log(personWithFullName.firstName); // => 'Jade'\nconsole.log(personWithFullName.lastName); // => 'Smith'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YWRkRnVsbE5hbWVQcm9wZXJ0eS5qcw==": "const addFullNameProperty = (obj) => {\n  // your code here\n};\n\nmodule.exports = addFullNameProperty;\n"
                },
                "c29sdXRpb24=": {
                  "YWRkRnVsbE5hbWVQcm9wZXJ0eS5qcw==": "const addFullNameProperty = obj => ({\n  ...obj,\n  fullName: `${obj.firstName} ${obj.lastName}`,\n});\n\nmodule.exports = addFullNameProperty;\n"
                },
                "dGVzdA==": {
                  "YWRkRnVsbE5hbWVQcm9wZXJ0eS5zcGVjLmpz": "const { assert } = require('chai');\nconst addFullNameProperty = require('../solution/addFullNameProperty');\n\ndescribe('addFullNameProperty()', () => {\n  it('debería regresar \"Kemal Mahmud\", para {firstName: \"Kemal\", lastName: \"Mahmud\"}', () => {\n    const person = { firstName: 'Kemal', lastName: 'Mahmud' };\n    const personWithFullName = addFullNameProperty(person);\n\n    assert.ok(personWithFullName !== person);\n    assert.equal(personWithFullName.firstName, 'Kemal');\n    assert.equal(personWithFullName.lastName, 'Mahmud');\n    assert.equal(personWithFullName.fullName, 'Kemal Mahmud');\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "3h"
        },
        "07-requiz": {
          "questions": [
            {
              "title": "1) ¿Para qué son útiles los Objects?",
              "description": "",
              "answers": [
                "Para dejar de usar arrays y variables",
                "Para poder utilizar repositorios en <code>Git</code>",
                "Para almacenar diferentes piezas de información sobre sí mismo",
                "Para guardar mi información en la nube y posteriormente compartirla"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) ¿Cuál de los siguientes enunciados sobre Objects SÍ es correcto? Puedes seleccionar una o más opciones",
              "description": "",
              "answers": [
                "Las propiedades deben estar siempre entre comillas",
                "No debemos incluir un array como propiedad",
                "Podemos incluir una función como propiedad",
                "Los <em>keys</em> de los Objects son equivalente a sus propiedades"
              ],
              "solution": [
                2,
                3
              ]
            },
            {
              "title": "3) Podemos acceder a los valores de un Object usando corchetes [ ] o usando punto .",
              "description": "",
              "answers": [
                "Verdadero",
                "Falso"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Los métodos son _____________ que contienen _____________",
              "description": "",
              "answers": [
                "propiedades - funciones",
                "funciones - propiedades",
                "elementos - objetos",
                "objetos - elementos"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) ¿Cuál es el resultado del siguiente código?",
              "description": "<pre><code class=\"language-js\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n\nconsole.log(movie.tags[1]);\n</code></pre>",
              "answers": [
                "Adventure",
                "Comedy",
                "Sci-Fi",
                "undefined"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "6) ¿Cuál es el error en el siguiente código?",
              "description": "<pre><code class=\"language-js\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox'; 'Christopher Lloyd'; 'Lea Thompson'],\n  oscar: 1,\n  'other awards': 'best sound',\n  tags: [],\n};\n</code></pre>",
              "answers": [
                "La propiedad <code>tags</code> no puede estar vacía",
                "Le sobran las comillas <code>' '</code> a la propiedad <code>other awards</code>",
                "En la propiedad <code>stars</code>, deben ir comas <code>,</code> en lugar de puntos y comas <code>;</code>",
                "No hay ningún error"
              ],
              "solution": [
                2
              ]
            }
          ],
          "title": "Quiz 2",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 6,
          "durationString": "15min"
        }
      },
      "order": 4,
      "stats": {
        "duration": 400,
        "durationString": "6.7h",
        "exerciseCount": 15,
        "partCount": 7
      }
    },
    "06-strings": {
      "title": "Strings (cadenas de caracteres)",
      "bonus": false,
      "description": "<p>En JavaScript, los tipos de dato <em>texto</em>, se guardan como <em>tiras de caracteres</em>,\nmás popularmente conocidas como <code>strings</code>.</p>\n",
      "parts": {
        "01-strings": {
          "title": "Strings",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Aprender las posibilidades y flexibilidad que ofrecen los <code>strings</code></li>\n</ul>\n<p>Esta lección es una traducción casi literal de\n<a href=\"https://javascript.info/string\" target=\"_blank\">https://javascript.info/string</a>,\naquí el <a href=\"https://github.com/iliakan/javascript-tutorial-en/blob/master/1-js/05-data-types/03-string/article.md\" target=\"_blank\">fuente</a></p>\n<hr>\n<p>En JavaScript, los tipos de dato <em>texto</em>, se guardan como <em>tiras de caracteres</em>,\nmás popularmente conocidas como <code>strings</code>.</p>\n<h2 id=\"comillas-quotes\">Comillas (<em>Quotes</em>)</h2>\n<p>Recordemos los tipos de comillas que tenemos.</p>\n<p>Los <code>Strings</code> pueden encerrarse en comillas simples (<em>single quotes</em>),\ndobles (<em>doble quotes</em>)\no tildes invertidas (<em>backticks</em>):</p>\n<pre><code class=\"language-js\">const single = 'single-quoted';\nconst double = \"double-quoted\";\nconst backticks = `backticks`;\n</code></pre>\n<p>Las comillas simples y dobles, son básicamente lo mismo.\nLas tildes invertidas en cambio,\nnos permiten embeber (interpolar) cualquier expresión dentro de un string:</p>\n<pre><code class=\"language-js\">const greeting = 'Mundo';\nconsole.assert(`Hola ${greeting}` === 'Hola Mundo');\n\nconst sqrt = Math.sqrt(7);\nconsole.assert(`sqrt(7) ~ ${sqrt.toFixed(2)}` === 'sqrt(7) ~ 2.65');\n\nconst sum = (a, b) =&gt; a + b;\nconsole.assert(`1 + 2 = ${sum(1, 2)}` === '1 + 2 = 3');\n\nconsole.assert(`${'Hola'.concat(` ${'Mun'.concat('do')}`)}!` === 'Hola Mundo!');\n</code></pre>\n<p>Otra ventaja de usar tildes invertidas, es que nos permiten\ndefinir textos multi línea:</p>\n<pre><code class=\"language-js\">const guestList = `Guests:\n * John\n * Pete\n * Mary\n`;\n\nconsole.assert(guestList === 'Guests:\\n * John\\n * Pete\\n * Mary\\n');\n</code></pre>\n<p>Si intentamos usar comillas simples o dobles para hacer lo mismo,\nhabrá un error</p>\n<pre><code class=\"language-js\">let guestList = \"Guests:  // Error: Unexpected token ILLEGAL\n* John\";\n</code></pre>\n<p>Las comillas simples y dobles las hemos heredado de\nlos lenguajes tradicionales, donde no se contemplaban\nla interpolación de variables o los strings de más\nde una línea.</p>\n<p>Las tildes invertidas aparecieron mucho después y por lo tanto\nson más versátiles.</p>\n<h2 id=\"caracteres-especiales\">Caracteres especiales</h2>\n<p>Como vimos antes, es posible crear un <em>multiline string</em>\nusando comillas simples, gracias a un caracter especial, llamado\n<em>\"newline character\"</em>, que se representa asi <code>\\n</code>,\ny representa un salto de línea:</p>\n<pre><code class=\"language-js\">console.assert(\n  `Guests:\n * John\n * Pete\n * Mary` === 'Guests:\\n * John\\n * Pete\\n * Mary',\n);\n\nconsole.assert(\n  `Hello\nWorld` === 'Hello\\nWorld',\n);\n</code></pre>\n<p>Hay otros caracteres especiales, que no son tan comunes. Aca la lista:</p>\n<table>\n<thead>\n<tr>\n<th>Caracter</th>\n<th>Descripción</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\'</code></td>\n<td>Single quote</td>\n</tr>\n<tr>\n<td><code>\\\"</code></td>\n<td>Double quote</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>Backslash</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>Backspace</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>Form feed</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>Newline</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>Carriage return</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>Horizontal tab</td>\n</tr>\n<tr>\n<td><code>\\ddd</code></td>\n<td>Secuencia octal (3 digitos: ddd)</td>\n</tr>\n<tr>\n<td><code>\\xdd</code></td>\n<td>Secuencia hexadecimal (2 digitos: dd)</td>\n</tr>\n<tr>\n<td><code>\\uNNNN</code></td>\n<td>Símbolo unicode con código hexadecimal</td>\n</tr>\n</tbody></table>\n<p>Algunos ejemplos con Unicode:</p>\n<pre><code class=\"language-js\">console.assert('\\u00A9' === '©');\nconsole.assert('\\u{1F60D}' === '😍');\n</code></pre>\n<p>Todos los caracteres especiales, comienzan con la barra invertida <code>\\</code>.\nTambién se la llama <em>\"escape character\"</em>.</p>\n<pre><code class=\"language-js\">console.assert('I\\'m the Walrus!' === \"I'm the Walrus!\");\n</code></pre>\n<p>Ten cuenta que sólo usamos la barra invertida para que el intérprete de\nJavaScript entienda lo que le queremos decir. Una vez en memoria, el <code>\\</code>\ndesaparece.</p>\n<p>¿Qué hacemos si necesitamos mostras una barra invertida? Usamos <code>\\\\</code>:</p>\n<pre><code class=\"language-js\">alert( `The backslash: \\\\` ); // The backslash: \\\n</code></pre>\n<h2 id=\"stringlength\"><code>String.length</code></h2>\n<p>La propiedad <code>length</code> guarda la longitud del <code>String</code>:</p>\n<pre><code class=\"language-js\">console.assert('My\\n'.length === 3);\n</code></pre>\n<p>Nota que los caracteres especiales, a pesar de estar compuestos por 2\ncaracteres, cuentan como un sólo caracter.</p>\n<h2 id=\"accediendo-caracteres-específicos\">Accediendo caracteres específicos</h2>\n<p>Para obtener el caracter de la posición <code>pos</code>, usamos corchetes <code>[pos]</code> o el\nmétodo <code>str.charAt(pos)</code>.</p>\n<pre><code class=\"language-js\">let str = `Hello`;\n\nconsole.assert(str[0] === 'H');\nconsole.assert(str.charAt(0) === 'H');\nconsole.assert(str[1000] === undefined);\nconsole.assert(str.charAt(1000) === '');\n\n/* el último caracter */\nconsole.assert(str[str.length - 1] === 'o');\n</code></pre>\n<h2 id=\"immutabilidad\">Immutabilidad</h2>\n<p>En JavaScript, a los <code>Strings</code> <strong>no se puede modificar su valor</strong>.\nInclusive si lo intentamos, no podremos.</p>\n<pre><code class=\"language-js\">str = 'Hi';\nstr[0] = 'P';\nconsole.assert(str[0] === 'H'); /* No cambió */\n</code></pre>\n<p>La forma usual de lograr esto es creando un nuevo string\npisando al anterior:</p>\n<pre><code class=\"language-js\">str = 'Hi';\nstr = `P${str[1]}`; /* replazamos */\n\nconsole.assert(str === 'Pi');\n</code></pre>\n<h2 id=\"mayúsculas--minúsculas\">Mayúsculas / minúsculas</h2>\n<pre><code class=\"language-js\">console.assert('Interface'.toUpperCase() === 'INTERFACE');\nconsole.assert('Interface'.toLowerCase() === 'interface');\nconsole.assert('Interface'[0].toLowerCase() === 'i');\n</code></pre>\n<h2 id=\"substrings\">Substrings</h2>\n<h3 id=\"strindexof\">str.indexOf</h3>\n<pre><code class=\"language-js\">str = 'Widget with id';\n\nconsole.assert(str.indexOf('Widget') === 0);\nconsole.assert(str.indexOf('widget') === -1);\nconsole.assert(str.indexOf('id') === 1);\n</code></pre>\n<p><code>String.indexOf</code> funciona de manera análoga a <code>Array.indexOf</code>:\nrecibe un segundo parámetro opcional, que nos permite comenzar\nla búsqueda a partir de una posición en particular.</p>\n<pre><code class=\"language-js\">console.assert(str.indexOf('id', 2) === 12);\n</code></pre>\n<p>Veamos como sería si queremos todas las ocurrencias:</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n\nstr = 'As sly as a fox, as strong as an ox';\n\nconst target = 'as'; // texto a buscar\nconst result = [];\n\nlet pos = 0;\nwhile (true) {\n  const foundPos = str.indexOf(target, pos);\n  if (foundPos === -1) break; // ya no hay mas ocurrencias\n\n  result.push(foundPos);\n  pos = foundPos + 1; // siguiente posición\n}\n\nconsole.assert(equal(\n  result,\n  [7, 17, 27],\n));\n</code></pre>\n<p>Asi como en <code>Arrays</code>, también existen los métodos <code>lastIndexOf(pos)</code>\ny <code>lastIndexOf</code>.</p>\n<h3 id=\"includes-startswith-endswith\"><code>includes</code>, <code>startsWith</code>, <code>endsWith</code></h3>\n<pre><code class=\"language-js\">console.assert('Widget with id'.includes('Widget'));\nconsole.assert(!'Hello'.includes('Bye'));\n</code></pre>\n<p>También cuenta con un segundo parámetro opcional</p>\n<pre><code class=\"language-js\">console.assert('Midget'.includes('id'));\nconsole.assert(!'Midget'.includes('id', 3));\nconsole.assert('Widget'.startsWith('Wid'));\nconsole.assert('Widget'.endsWith('get'));\n</code></pre>\n<h2 id=\"obteniendo-substrings\">Obteniendo substrings</h2>\n<p>Hay 3 métodos en Javascript que nos permiten obtener substrings:\n<code>substring</code>, <code>substr</code> and <code>slice</code>.</p>\n<p><code>str.slice(start [, end])</code>\n: Devuelve parte del string comenzando en <code>start</code>\nhasta (pero sin incluir) <code>end</code>.</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.slice(1, 4) === 'tri');\nconsole.assert(str.slice(0, 1) === 's');\n</code></pre>\n<p>Si no hay segundo parámetro, corre hasta el final del string.</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.slice(2) === 'ringify');\n</code></pre>\n<p>Valores negativos para <code>start/end</code> también son posibles.\nQuiere decir que la posición se cuenta comenzando por el final:</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.slice(-4, -1) === 'gif');\n</code></pre>\n<p><code>str.substring(start [, end])</code>\n: Devuelve el substring <em>entre</em> <code>start</code> y <code>end</code>.</p>\n<p>Es casi idéntico a <code>slice</code>, pero permite valores\nde <code>start</code> mayores que <code>end</code>.</p>\n<pre><code class=\"language-js\">str = 'stringify';\n\nconsole.assert(str.substring(2, 6) === 'ring');\nconsole.assert(str.substring(6, 2) === 'ring');\n</code></pre>\n<p>Con <code>slice</code> no funciona:</p>\n<pre><code class=\"language-js\">console.assert(str.slice(2, 6) === 'ring');\nconsole.assert(str.slice(6, 2) === '');\n</code></pre>\n<p><code>str.substr(start [, length])</code>\n: Devuelve parte del string comenzando desde <code>start</code>, <code>length</code> caracteres.</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.substr(2, 4) === 'ring');\n</code></pre>\n<p>El primer argumento puede ser negativo,\npara contar desde el final:</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.substr(-4, 2) === 'gi');\n</code></pre>\n<p>En resumen:</p>\n<table>\n<thead>\n<tr>\n<th>método</th>\n<th>selecciona...</th>\n<th>argumentos negativos</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>slice(start, end)</code></td>\n<td>desde <code>start</code> hasta <code>end</code> (excluye <code>end</code>)</td>\n<td>permite negativos</td>\n</tr>\n<tr>\n<td><code>substring(start, end)</code></td>\n<td>entre <code>start</code> y <code>end</code></td>\n<td>los interpreta como <code>0</code></td>\n</tr>\n<tr>\n<td><code>substr(start, length)</code></td>\n<td>desde <code>start</code>, <code>length</code> caracteres</td>\n<td>permite <code>start</code> negativo</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Todos los anteriores realizan la misma tarea, pero debemos tener en cuenta que\n<code>substr</code> no es parte de las especificación del <code>core</code> de JavaScript, sino del\n<em>Anexo</em> B, que cubre funcionalidades exclusivas de los navegadores. Pero en la\npráctica funciona en todos los entornos.</p>\n</blockquote>\n<h2 id=\"comparando-strings\">Comparando strings</h2>\n<p>Los strings son comparados caracter por caracter en orden alfabético.</p>\n<p>Pero existen algunos casos raros:</p>\n<ol>\n<li><p>Las minúsculas son siempre <em>\"mayores\"</em> que las mayúsculas:</p>\n<pre><code class=\"language-js\">console.assert('a' &gt; 'Z');\n</code></pre>\n</li>\n<li><p>Los caracteres con signos diacríticos, son mayores que todos los otros\ncaracteres:</p>\n<pre><code class=\"language-js\">console.assert('Ñandu' &gt; 'Zebra');\n</code></pre>\n</li>\n</ol>\n<p>Para entender lo que sucede, veamos un poco como se representan internamente\nlos strings en JavaScript</p>\n<p>Los strings se codifican usando <a href=\"https://en.wikipedia.org/wiki/UTF-16\" target=\"_blank\">UTF-16</a>.\nEsto quiere decir que a cada caracter, le corresponde un código numérico.\nContamos con métodos especiales que nos permite ir y venir entre un caracter\ny el código que lo representa.</p>\n<p><code>str.codePointAt(pos)</code>: Devuelve el código del caracter en la posición <code>pos</code>:</p>\n<pre><code class=\"language-js\">console.assert('z'.codePointAt(0) === 122);\nconsole.assert('Z'.codePointAt(0) === 90);\n</code></pre>\n<p><code>String.fromCodePoint(code)</code>: Crea un string a partir del <code>code</code> numérico:</p>\n<pre><code class=\"language-js\">console.assert(String.fromCodePoint(90) === 'Z');\n</code></pre>\n<p>Ahora veamos cuáles son los caracteres con códigos entre <code>65..220</code> (el\nalfabeto):</p>\n<pre><code class=\"language-js\">let alphabet = '';\nfor (let i = 65; i &lt;= 122; i += 1) {\n  alphabet += String.fromCodePoint(i);\n}\n\nconsole.assert(\n  alphabet === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz',\n);\n</code></pre>\n<p>Ahora se ve claro por qué <code>a &gt; Z</code>.</p>\n<h2 id=\"resumen\">Resumen</h2>\n<ul>\n<li>Hay 3 tipos de comillas. Las tildes invertidas no permiten definir strings\nmultilineales e interpolar valores.</li>\n<li>Los Strings en JavaScript se codifican usando UTF-16.</li>\n<li>Existen caracteres especiales como <code>\\n</code>.</li>\n<li>Para obtener un caracter espec[ifico usamos: <code>[]</code>.</li>\n<li>Para obtener un substring, usamos: <code>slice</code> o <code>substring</code>.</li>\n</ul>\n<p>Quedan varios métodos bien útiles:</p>\n<ul>\n<li><code>str.trim()</code> -- quita espacios extras del comienzo y fin del string.</li>\n<li><code>str.repeat(n)</code> -- repite el string <code>n</code> veces.</li>\n<li>... mucho más. chequea <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/String\" target=\"_blank\">Strings en MDN</a>\npara más detalles.</li>\n</ul>\n<p>Los <code>Strings</code> además tienen métodos para buscar y reemplazar usando <em>expresiones\nregulares</em>, pero eso queda para otra oportunidad.</p>\n<hr>\n<h2 id=\"recursos-sugeridos\">Recursos sugeridos</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/UTF-16\" target=\"_blank\">UTF-16</a></li>\n<li><a href=\"https://ascii.cl/es/\" target=\"_blank\">ASCII</a></li>\n<li><a href=\"https://javascript.info/string#internals-unicode\" target=\"_blank\">Js Strings Internals y Unicode</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/template_strings\" target=\"_blank\">Usos de las tildes invertidas</a></li>\n</ul>\n",
          "order": 0,
          "durationString": "30min"
        },
        "02-practice": {
          "title": "Retos de código",
          "type": "practice",
          "format": "self-paced",
          "duration": 15,
          "exercises": {
            "01-currency-amount": {
              "title": "Montos sin moneda",
              "env": "js",
              "body": "<p>Dado un arreglo de montos en distintas monedas, retornar solo los valores sin\nimportar la moneda.</p>\n<blockquote>\n<p>Las monedas participantes solo son pesos chilenos ($ CLP), pesos mexicanos\n($ MXN) y soles (S/. PEN).</p>\n</blockquote>\n<p>Ejemplo:</p>\n<pre><code class=\"language-javascript\">const output = currencyAmount([ '$ 600 CLP', '$ 1000 MXN', 'S/. 200 PEN' ]);\n\nconsole.log(ouput); // -&gt; [ 600, 1000, 200 ]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Montantes sem moeda\n\n* Environment: `js`\n\n***\n\nDado um `array` de valores em diferentes moedas, retorne apenas os valores sem\nimportar a moeda.\n\n> As moedas participantes são apenas pesos chilenos ($ CLP), pesos mexicanos\n> ($ MXN) e soles (S/. PEN).\n\nExemplo:\n\n```javascript\nconst output = currencyAmount([ '$ 600 CLP', '$ 1000 MXN', 'S/. 200 PEN' ]);\n\nconsole.log(ouput); // -> [ 600, 1000, 200 ]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y3VycmVuY3lBbW91bnQuanM=": "const currencyAmount = (amounts) => {\n\n};\n\nmodule.exports = currencyAmount;\n"
                },
                "c29sdXRpb24=": {
                  "Y3VycmVuY3lBbW91bnQuanM=": "const currencyAmount = amounts => amounts.map(amount => Number(amount.replace(/(\\$|S\\/\\.)|(CLP|MXN|PEN)/g, '')));\n\nmodule.exports = currencyAmount;\n"
                },
                "dGVzdA==": {
                  "Y3VycmVuY3lBbW91bnQuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst currencyAmount = require('../solution/currencyAmount');\n\ndescribe('currencyAmount()', () => {\n  it('debería regresar los montos cuando es un arreglo de montos enteros en monedas variadas', () => {\n    const amounts = ['$ 600 CLP', '$ 1000 MXN', 'S/. 200 PEN'];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, [600, 1000, 200]);\n  });\n\n  it('debería regresar los montos cuando es un arreglo de montos reales en monedas variadas', () => {\n    const amounts = ['$ 825.50 CLP', '$ 999.99 MXN', 'S/. 500.25 PEN'];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, [825.50, 999.99, 500.25]);\n  });\n\n  it('debería regresar los montos cuando es un arreglo de montos reales con una sola moneda', () => {\n    const amounts = ['$ 600 MXN', '$ 100.50 MXN', '$ 1349.99 MXN'];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, [600, 100.50, 1349.99]);\n  });\n\n  it('debería regresar un arreglo vacío cuando es un arreglo vacíơ', () => {\n    const amounts = [];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, []);\n  });\n});\n"
                }
              }
            },
            "02-first-and-last-to-upper": {
              "title": "Convertir a Mayúsculas",
              "env": "js",
              "body": "<p>Implementa una función que capitalice la primera y última letra de un <em>string</em>.</p>\n<p>Sigue los pasos a continuación para que completes el programa.</p>\n<ol>\n<li>Seleccione la primera y ultima letra y utilice la función\n<code>String.prototype.toUpperCase</code>.</li>\n<li>Componer la nueva cadena y retornarla.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# Conversor de Maiúsculas\n\n* Environment: `js`\n\n***\n\nImplemente uma função de capitalize a primeira e a última letra de uma _string_.\n\nSiga os passos abaixo para completar o programa:\n\n1. Selecione a primeira e a última letra e utilize a função\n   `String.prototype.toUpperCase`.\n2. Componha a nova `string` e devolva-a.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Zmlyc3RBbmRMYXN0VG9VcHBlci5qcw==": "const firstAndLastToUpper = (str) => {\n\n};\n\nmodule.exports = firstAndLastToUpper;\n"
                },
                "c29sdXRpb24=": {
                  "Zmlyc3RBbmRMYXN0VG9VcHBlci5qcw==": "const firstAndLastToUpper = (str) => {\n  const firstLetter = str.charAt(0).toUpperCase();\n  const length = str.length - 1;\n  const lastletter = str.charAt(length).toUpperCase();\n  const result = firstLetter + str.slice(1, length) + lastletter;\n  return result;\n};\n\nmodule.exports = firstAndLastToUpper;\n"
                },
                "dGVzdA==": {
                  "Zmlyc3RBbmRMYXN0VG9VcHBlci5zcGVjLmpz": "const Assert = require('chai').assert;\nconst firstAndLastToUpper = require('../solution/firstAndLastToUpper');\n\ndescribe('firstAndLastToUpper()', () => {\n  it('debería retornar en mayúsculas la primer y última letra de un string', () => {\n    Assert.deepEqual(firstAndLastToUpper('murcielago'), 'MurcielagO');\n    Assert.deepEqual(firstAndLastToUpper('sol'), 'SoL');\n    Assert.deepEqual(firstAndLastToUpper('abecedario'), 'AbecedariO');\n  });\n\n  it('debería retornar \"\" si no se le ingresa ningún parametro', () => {\n    Assert.deepEqual(firstAndLastToUpper(''), '');\n  });\n});\n"
                }
              }
            }
          },
          "order": 1,
          "durationString": "15min"
        }
      },
      "order": 5,
      "stats": {
        "duration": 45,
        "durationString": "45min",
        "exerciseCount": 2,
        "partCount": 2
      }
    },
    "07-built-ins": {
      "title": "Built-ins (standard library)",
      "bonus": false,
      "description": "<p>Existen algunos objetos y funciones especiales que vienen con JavaScript pero\nque no son parte del lenguaje en sí. Se conocen como la <em>librería estándar</em>\n(standard library) ya que siempre podemos contar con ellos.</p>\n",
      "parts": {
        "01-intro": {
          "title": "Objetos preconstruidos",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h3 id=\"javascript-indagando-en-el-núcleo-del-lenguaje\">JavaScript, indagando en el núcleo del lenguaje</h3>\n<p>Todos los lenguajes de programación tienen objetos preconstruidos (built-in)\nque ofrecen funcionalidad común más allá de lo que es el lenguaje en sí. Los\nobjetos preconstruidos nos permiten ahorrar tiempo con funcionalidad disponible\ncomo parte del entorno del lenguaje.</p>\n<p>JavaScript tiene muchos <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales\" target=\"_blank\">objetos preconstruidos</a>.\nEl término \"objetos globales\" (u objetos preconstruidos estándar) no debe\nconfundirse con el objeto global en sí. Aquí, los objetos globales se refieren a\nobjetos en el <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/global_scope\" target=\"_blank\">ámbito global</a>.\nEstos objetos y funciones que vienen con JavaScript pero que no son parte del\nlenguaje en sí, también se conocen como la <em>librería estándar</em> (standard\nlibrary) ya que siempre podemos contar con ellos. Son librerías que no tenemos\nque importar y siempre están disponibles, independientemente del entorno donde\nse ejecute nuestro código (navegador, node, ...).</p>\n<h3 id=\"¿por-qué-usar-la-librería-estándar\">¿Por qué usar la librería estándar?</h3>\n<p>Hay muchas funciones disponibles para ayudarte a escribir un programa bueno\ny eficiente. Como desarrolladores de software, nuestro trabajo es encontrar\nla solución más simple a un problema. \"Más simple\" es un poco vago, así que\nvamos a definirlo como \"funciona, es eficiente (suficiente), es relativamente\nfácil de entender y no tarda demasiado en implementarse\".</p>\n<p>¿Cuánto tardarías en escribir una función que corte una cadena o verifique si\nun número es positivo? Muchas funciones que encontraras en una librería\nestándar son probablemente triviales por naturaleza, pero tener un estándar\nacordado para hacer las cosas acelerará la implementación del código (habrá\nmenos instancias de \"¿hay una función para esto o debería codificarla yo\nmismo?\") Además otras personas que leen tu código pueden concentrarse en\naprender sobre las dependencias que realmente importan y no invertir su tiempo\nen entender librerías que consumes para una sola línea de código.</p>\n<h3 id=\"ventajas-más-importantes-de-usar-funciones-de-librería-estándar\">Ventajas más importantes de usar funciones de librería estándar</h3>\n<ul>\n<li><p>Funcionan</p>\n<p>  Una de las razones más importantes por las que debes usar las funciones de\n  la librería estándar es simplemente porque funcionan, ya han pasado por\n  múltiples pruebas rigurosas y son fáciles de usar.</p>\n</li>\n<li><p>Están optimizadas para el rendimiento</p>\n<p>  Un grupo dedicado de desarrollo las mejora constantemente. En el proceso,\n  estos equipos pueden crear el código más eficiente y optimizado para\n  obtener el máximo rendimiento.</p>\n</li>\n<li><p>Ahorran un considerable tiempo de desarrollo</p>\n<p>  Dado que las funciones generales como imprimir en una pantalla, calcular la\n  raíz cuadrada y muchas más ya están escritas. No debes preocuparte por\n  crearlas una vez más. Ahorrarás un tiempo valioso, además que tu código\n  puede no ser siempre el más eficiente.</p>\n</li>\n<li><p>Son soportadas en la mayoría de los navegadores</p>\n<p>  Con las cambiantes necesidades del mundo real, se espera que tu aplicación\n  funcione siempre, en cualquier lugar, en cualquier dispositivo.\n  Estas funciones de la biblioteca te ayudan a que tu aplicación funcione\n  igual en todos los dispositivos. Esto ahorra tiempo, esfuerzo y hace que tu\n  programa sea compatible con otros navegadores.</p>\n</li>\n</ul>\n<h3 id=\"ejemplo\">Ejemplo</h3>\n<p>Supongamos que quieres encontrar la raíz cuadrada de un número. Siempre puedes\nescribir tu propia pieza de código para encontrar la raíz cuadrada, pero este\nproceso lleva tiempo y puede no ser el más eficiente.</p>\n<p>Sin embargo, en la programación javascript puedes encontrar la raíz cuadrada\nsimplemente usando la función <code>Math.sqrt()</code>.</p>\n<h3 id=\"algunos-de-los-objetos-preconstruidos-más-utilizados\">Algunos de los objetos preconstruidos más utilizados</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array\" target=\"_blank\">Array</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object\" target=\"_blank\">Object</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Function\" target=\"_blank\">Function</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Boolean\" target=\"_blank\">Boolean</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Number\" target=\"_blank\">Number</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Math\" target=\"_blank\">Math</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Date\" target=\"_blank\">Date</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/String\" target=\"_blank\">String</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/RegExp\" target=\"_blank\">RegExp</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/JSON\" target=\"_blank\">JSON</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Symbol\" target=\"_blank\">Symbol</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Error\" target=\"_blank\">Error</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/EvalError\" target=\"_blank\">EvalError</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/InternalError\" target=\"_blank\">InternalError</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/RangeError\" target=\"_blank\">RangeError</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/ReferenceError\" target=\"_blank\">ReferenceError</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/SyntaxError\" target=\"_blank\">SyntaxError</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/TypeError\" target=\"_blank\">TypeError</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/URIError\" target=\"_blank\">URIError</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/DataView\" target=\"_blank\">DataView</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Proxy\" target=\"_blank\">Proxy</a></li>\n</ul>\n",
          "order": 0,
          "durationString": "15min"
        }
      },
      "order": 6,
      "stats": {
        "duration": 15,
        "durationString": "15min",
        "exerciseCount": 0,
        "partCount": 1
      }
    },
    "08-async": {
      "title": "Asincronía",
      "bonus": false,
      "description": "<p>JavaScript es un lenguaje que por naturaleza se presta para manejar asincronía\nsin bloque del proceso, gracias a sus higher order functions y la propia\narquitectura de los motores de JavaScript.</p>\n<p>Todo lo que sea interacción con usuarios, acceso de red, acceso a disco duro,\n... serán siempre operaciones asíncronas, done el resultado de una invocación no\nretorna immediatamente, sino después de un tiempo.</p>\n<p>Manipular el HTML a través del DOM es genial, sin embargo, en el desarrollo de\naplicaciones web, estas alteraciones se realizan luego de cierta interacción\npor parte del usuario a través de <code>eventos</code>. En esta lección nos enfocaremos en\nentender aspectos importantes del comportamiento de eventos y como manejarlos.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Apertura",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"¿por-qué-aprender-esto\">¿Por qué aprender esto?</h2>\n<p>Entender el concepto de <em>asincronía</em> y cómo manejar procesos asíncronos es\nfundamental para toda desarrollodora web. Todas las interacciones con el\nusuario, operaciones de red, eventos del navegador, ... son asíncronas. Esto\nquiere decir que tienen que <em>esperar</em> (a que ocurra un evento, a que recibamos\nuna respuesta por http, ...) para poder completar su trabajo.</p>\n<p>JavaScript es un lenguaje que permite manejar <em>asincronía</em> de una manera\nelegante gracias a su implementación de funciones y su naturaleza <em>non-blocking</em>\n(que no bloquea el hilo - thread - mientras espera a que se complete una tarea\nasíncrona). En esta unidad veremos <strong>callbacks</strong>, <strong>eventos</strong> y <strong>promesas</strong>\ncomo maneras de trabajar con tareas asíncronas.</p>\n<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\nque debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a medida\nque avanzas para validar que estás avanzando en la dirección correcta. Que te\nsirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<ul>\n<li>Qué es una tarea asíncrona?</li>\n<li>Qué significa bloquear el <em>hilo</em> o <em>thread</em></li>\n<li>Qué es un <em>callback</em></li>\n<li>Qué es un <em>evento</em></li>\n<li>Cómo escuchar <em>eventos</em></li>\n<li>Cómo dejar de escuchar <em>eventos</em></li>\n<li>Qué es una promesa?</li>\n<li>Cómo usar promesas?</li>\n<li>Cómo implementar promesas nuevas</li>\n<li>Cómo encadenar promesas</li>\n</ul>\n",
          "order": 0,
          "durationString": "5min"
        },
        "01-callbacks": {
          "title": "Callbacks",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>En los diferentes lenguajes y estilos de programación siempre ha habido un\nproblema con el tiempo que toman las cosas en realizarse, quizá no en el sentido\nhumano, pero sí para una computadora, que puede ejecutar varios miles de\noperaciones por segundo. En especial esto sucede con operaciones como ir a\nbuscar cosas al disco duro, buscar información en alguna API de internet, o\nincluso esperar a que el usuario haga algo. Un estilo que triunfó en el pasado\nes el <code>síncrono</code> :</p>\n<pre><code class=\"language-js\">const fs = require('fs');\nconst contents = fs.readFileSync('assets/ajson.json').toString();\nconsole.log(contents);\n</code></pre>\n<p>En este estilo vemos que para imprimir el contenido del archivo, se debe esperar\na que <code>readFileSync</code> termine de leer, no muy eficiente desde el punto de vista\ndel usuario, que tiene que esperar que se complete la lectura para empezar\na ver algo en la pantalla, pero sí desde el punto de vista del programador, que\nsolo tiene que ocuparse de que esto funcione, y que con 3 lineas consigue\nobtener los datos, ... y que cada linea se ejecuta después de la otra, por lo\nque es fácil seguir mentalmente el programa.</p>\n<p>Con la llegada de Javascript, también se hizo popular un nuevo estilo de\nprogramación, llamado <code>asíncrono</code>:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nfs.readFile('assets/ajson.json', (err, buf) =&gt; {\n  console.log(buf.toString());\n});\n\nconsole.log('Espera mientras leemos el archivo...');\n</code></pre>\n<p>Con esta forma de programar no nos preocupamos de esperar los datos, podemos\nhacer otras cosas mientras, tales como informar al usuario de nuestro programa\nque algo se está haciendo a través de un mensaje (o barra de progreso si es que\nestamos en una página web). Para esto creamos una función, a la que comúnmente\nse le llama <em>callback</em>, que será la que se ejecute una vez que lleguen los datos\ndel proceso lento.</p>\n<h2 id=\"lecturas-complementarias\">Lecturas complementarias</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\" target=\"_blank\">Callback function - MDN</a></li>\n</ul>\n",
          "order": 1,
          "durationString": "15min"
        },
        "05-promises": {
          "title": "Promesas",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>Hasta ahora hemos visto el uso de <em>callbacks</em> para manejar tareas asíncronas. En\nesta lectura introducimos un tipo de dato nuevo (<code>Promise</code>), que está\nespecíficamente diseñado para encapsular operaciones asíncronas y poder\nencadenarlas.</p>\n<p>Cuando usamos <em>callbacks</em>, es común que nos encontremos con situaciones donde\nuna operación asícrona depende de que otra se haya completado, y así vamos\nanidando callbacks y es fácil perder el hilo de lo que se está\nejecutando en un momento determinado. Más aun si en la vida real comienzan a\nexistir <em>callbacks</em> para todo:</p>\n<pre><code class=\"language-js\">unProcesoLento(\n  (datos) =&gt; {\n    otroProcesoLento(\n      (otrosDatos) =&gt; {\n        yAunOtroProcesoLento(\n          (masDatos) =&gt; {\n            /*\n             * podemos seguir anidando callbacks...\n             */\n          }\n        );\n      }\n    );\n  }\n);\n</code></pre>\n<p>A esto se le llama el <strong>callback hell</strong> y ocurre cuando procesos lentos dependen\ndel resultado de los anteriores por lo que terminamos anidando una dentro de\notra las funciones que esperan por los datos que traen tales procesos.</p>\n<p>Para esto es que desde ES6 se crearon las <code>promesas</code> (<em>Promises</em> en inglés), que\nestán diseñadas para representar a esos datos que están, estarán en el futuro o\nsimplemente nunca llegarán (en caso de que haya alguna falla). Veamos un ejemplo\nde ellas:</p>\n<pre><code class=\"language-js\">const readFiles = require('read-files-promise');\n\nreadFiles([\n  'path/to/file0',\n  'path/to/file1',\n], { encoding: 'utf8' })\n  .then((buffers) =&gt; {\n    buffers;\n  })\n  .catch((error) =&gt; {\n    console.log('Falló este proceso muy lento');\n  });\n</code></pre>\n<p>Mucho mejor, aunque se vean más lineas hay grandes diferencias con el\nacercamiento de <em>callbacks</em>, el primero es que hay un espacio para la función\nque recibirá los datos y otro para la que ejecutará el código de emergencia en\ncaso de falla, pero la principal es que las promesas pueden anidarse como lo\nveremos en el siguiente ejemplo :</p>\n<pre><code class=\"language-js\">const readFiles = require('read-files-promise');\n\nreadFiles(['path/to/file0'], { encoding: 'utf8' })\n  .then((buffers) =&gt; {\n    buffers; // [ContenidoDeArchivo0]\n\n    return readFiles(['path/to/file1'], { encoding: 'utf8' });\n  })\n  .then((buffers) =&gt; {\n    buffers; // [ContenidoDeArchivo1]\n  })\n  .catch((error) =&gt; {\n    console.log(\"Fallamos al leer archivos\")\n  });\n</code></pre>\n<p>Ahora si, mucho más ordenado, claro y manteniendo la funcionalidad, en donde el\notroProcesoLento depende de los datos del primer proceso lento. Notar que\nmantenemos solo una función de emergencia en caso de error para ambos procesos\nlo que ayuda en reducir el código basura y de estar pendientes de qué función en\nla cadena falló, cosa que tendría que haberse replicado en cada uno de los\n<em>callbacks</em> del <strong>callback hell</strong>.</p>\n<p>Ahora que sabemos el por qué de las promesas, veamos su creación y uso más\ndetallado.</p>\n<h2 id=\"creación-de-promises\">Creación de Promises</h2>\n<p>En esta sección nos ponemos del lado del programador de procesos lentos, por lo\nque necesitamos una forma de ordenar nuestro trabajo para que los otros\nprogramadores usen nuestro proceso lento. Veamos\nuna promesa cualquiera por dentro y analicemos las partes que la componen, para\nasí entender cómo crearlas nosotros mismos.</p>\n<pre><code class=\"language-js\">let procesoLento = new Promise((resolve, reject) =&gt; {\n  let datos = {};\n  //...\n  //muchas lineas de código\n  //...\n  if (error) {\n    //uh oh, las cosas no salieron tan bien\n    reject(new Error('Fallamos, lo siento'));\n  }\n  //...\n  resolve(datos);\n});\n</code></pre>\n<h3 id=\"new-promise\">new Promise</h3>\n<p>Lo primero es la creación de una promesa a través del código\n<code>new Promise(...)</code>, como puedes ver es un objeto que representa a este dato\nque puede estar inmediatamente, en el futuro o simplemente no estar. Este objeto\npara ser creado recibe un <em>callback</em>, pero no como todos, sino que uno especial\nque tiene dos parámetros que veremos a continuación.</p>\n<h4 id=\"parámetro-resolve\">Parámetro resolve</h4>\n<p>El primer parámetro del <em>callback</em> la promesa es una función especial que\nllamaremos cuando el trabajo lento que hacemos se termina. Con esto se da por\nterminada la promesa y los datos que queramos retornar se ponen como parámetros\nde <code>resolve</code>.</p>\n<h4 id=\"parámetro-reject\">Parámetro reject</h4>\n<p>Nuestro trabajo lento puede fallar, es obvio que todo puede fallar (muchas\ngracias Murphy), por esto tenemos que tener una forma de comunicar que nuestro\nproceso lento tuvo un error. Las promesas vienen al rescate y nos proveen de\n<code>reject</code>, una función que podemos llamar en caso de error y que recibe como\nparámetro... si ya lo adivinaron, un error de javascript.</p>\n<h2 id=\"uso-de-promesas\">Uso de promesas</h2>\n<p>El uso común es tal cuál como mostramos en el ejemplo anterior de código, pero\nahora que estamos viendo con más detalle, expliquemos cada uno de los\ncomponentes del uso de la promesa que vimos con nuestro <em>procesoLento</em> y\n<em>otroProcesoLento</em>.</p>\n<h3 id=\"then\">then</h3>\n<p><code>then</code> es una función que el usuario de la promesa provee para cuando el proceso\nlento terminó de ejecutarse correctamente. El número de parámetros que recibe\nson variables y dependen del creador (es muy importante la comunicación entre\nustedes programadoras), generalmente retornan un único parámetro con los datos\nresultantes.\nSi queremos anidar promesas, tal como vimos anteriormente, es importante al\nfinal de esta función retornar otra promesa. Si en cambio queremos retornar un\nvalor para el siguiente paso, lo haremos de la siguiente forma:</p>\n<pre><code class=\"language-js\">  //... mucho código antes ...\n  return Promise.resolve(dato);\n}.then(\n  (dato) =&gt; {\n    // Acá podemos usar el dato que retornamos en el then anterior\n  }\n);\n</code></pre>\n<h3 id=\"catch\">catch</h3>\n<p><code>catch</code> en tanto, es una función que será ejecutada en caso de que <strong>en\ncualquier paso de la cadena de then haya una falla</strong>. Esto es muy importante,\npuesto que concentra todo el manejo de errores en solo una parte, aliviando a la\nprogramadora de tener que manejar errores en cada uno de los <em>callbacks</em>.</p>\n<h2 id=\"estado-de-promesas\">Estado de promesas</h2>\n<p>Una promesa puede encontrarse en estos estados:</p>\n<ul>\n<li><strong>pending</strong>: Estado inicial, ni terminada exitosamente o rechazada.</li>\n<li><strong>fulfilled</strong>: operación exitosa.</li>\n<li><strong>rejected</strong>: operación fallida o rechazada.</li>\n<li><strong>settled</strong>: la Promise ha sido exitosa o rechazada, pero no está pendiente.</li>\n</ul>\n<h2 id=\"lecturas-complemenentarias\">Lecturas complemenentarias</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/primers/promises\" target=\"_blank\">Promises - Jake Archibald - Google Developers</a></li>\n</ul>\n",
          "order": 2,
          "durationString": "15min"
        },
        "08-closing": {
          "title": "Cierre",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"resumen\">Resumen</h2>\n<p>Llegamos al final de la unidad ;-)</p>\n<h2 id=\"respondamos-juntxs-las-preguntas-de-la-apertura\">Respondamos juntxs las preguntas de la apertura</h2>\n<ul>\n<li>Qué es una tarea asíncrona?</li>\n<li>Qué significa bloquear el <em>hilo</em> o <em>thread</em></li>\n<li>Qué es un <em>callback</em></li>\n<li>Qué es un <em>evento</em></li>\n<li>Cómo escuchar <em>eventos</em></li>\n<li>Cómo dejar de escuchar <em>eventos</em></li>\n<li>Qué es una promesa?</li>\n<li>Cómo usar promesas?</li>\n<li>Cómo implementar promesas nuevas</li>\n<li>Cómo encadenar promesas</li>\n</ul>\n",
          "order": 3,
          "durationString": "5min"
        }
      },
      "order": 7,
      "stats": {
        "duration": 40,
        "durationString": "40min",
        "exerciseCount": 0,
        "partCount": 4
      }
    },
    "09-errors": {
      "title": "Errores",
      "bonus": false,
      "description": "<p>El manejo de errores es importante dentro de todo desarrollo de software, y más\naún cuando se piensa en construir un producto que se espera sea reusable y\nmantenible. En esta unidad veremos cómo manejar errores en las diversas partes\nde nuestro código.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Apertura",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"¿por-qué-aprender-esto\">¿Por qué aprender esto?</h2>\n<p>El manejo de errores quizás no sea el tema más sexy dentro de la programación,\npero es sin duda uno de los más importantes. Un buen manejo de errores no solo\nnos garantiza mejor uso de nuestro código sino que nos debería ayudar a entender\nexcepciones, dónde ocurrieron y por qué.</p>\n<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\nque debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a medida\nque avanzas para validar que estás avanzando en la dirección correcta. Que te\nsirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<ul>\n<li>Qué es el modo estricto en JavaScript</li>\n<li>Qué es un <code>Error</code> y tipos de errores</li>\n<li>Cómo usar <code>try...catch</code> para manejar errores</li>\n<li>Cómo manejar errores en callbacks</li>\n<li>Cómo manejar errores en promesas</li>\n</ul>\n",
          "order": 0,
          "durationString": "5min"
        },
        "01-strict-mode": {
          "title": "Modo Estricto",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>El modo estricto realiza cambios en la semántica normal de javascript. Un\naspecto importante es que el modo estricto elimina errores silenciosos, lo que\nobligó a escribir un código mejor y no cometer errores.</p>\n<p>La directiva <code>use strict</code> es una directiva que no supone una instrucción de\ncódigo, sino que indica el modo en que el navegador debe ejecutar el código\nJavaScript.</p>\n<p>Podríamos hablar de dos modos de ejecución JavaScript: <code>normal mode</code>, que es el\nque hemos estudiado hasta ahora, y el <code>strict mode</code>, que vamos a explicar.</p>\n<h2 id=\"invocando-el-modo-estricto\">Invocando el modo estricto</h2>\n<p>Para invocar el modo estricto, sólo tienes que escribir <code>'use strict';</code> en tu\narchivo JavaScript. Por ejemplo:</p>\n<pre><code class=\"language-js\">'use strict';\n</code></pre>\n<p>Ahora que ya sabe cómo invocar el modo estricto, vamos a ver un ejemplo rápido.</p>\n<pre><code class=\"language-js\">'use strict';\nfoo = 'Alexandra'; // Uncaught ReferenceError: foo is not defined\n</code></pre>\n<p>Ahora que estamos usando el <em>modo estricto</em> esto resulta en un error, que nos\ndice que <code>foo</code> no está definida. Es necesario declarar la variable antes de\nusarla.</p>\n<pre><code class=\"language-js\">'use strict';\nconst foo = 'Guilherme'; // It works!\n</code></pre>\n<p>El modo estricto cambia la sintáxis y el comportamiento en tiempo de ejecución.\nLos cambios generalmente caen dentro de estas categorías: cambios que convierten\nerratas en errores (como errores de sintáxis o en tiempo de ejecución), cambios\nque simplifican como una variable particular es calculada, cambios que\nsimplifian el uso de eval y arguments, cambios que hacen más fácil escribir\nJavaScript \"seguro\", y cambios que anticipan la evolución futura de EMACScript.</p>\n<h2 id=\"convirtiendo-erratas-en-errores\">Convirtiendo erratas en errores</h2>\n<p>El modo estricto cambia algunos errores de sintáxis tolerados en modo no\nestricto y los convierte en errores.  JavaScript fue diseñado de modo que fuera\nfácil para programadores novatos, y puede haber operaciones que deberían ser\nerrores pero son tratadas como libres de error. A veces esto sirve para\nsolucionar el problema en el momento, pero puede crear problemas más graves\nen el futuro. El modo estricto trata las erratas como errores, para que puedan\nser descubiertas y subsanadas inmediatamente.</p>\n<p>En primer lugar, el modo estricto hace imposible crear variables globales por\naccidente. En JavaScript no estricto, si se escribe mal una variable en una\nasignación, se creará una nueva propiedad en el objeto globlal y el código\ncontinuará \"trabajando\" como si nada (aunque es posible que el código así\nescrito falle en el futuro, en concreto, en JavaScript más moderno). En modo\nestricto, cualquier asignación que produzca variables globales por accidente\nlanzará un error.</p>\n<p>En segundo lugar, el modo estricto lanza una excepción en asignaciones que de\notro modo fallarían silenciosamente. Por ejemplo, NaN es una variable que no\npuede ser asignada. En un código normal, asignar a <code>NaN</code> un valor no tiene\nefectos; el programador no recibe ningún mensaje de error. En cambio, en modo\nestricto, si se intenta asignar un valor a <code>NaN</code>, el programador recibirá una\nexepción. Cualquier asignación que falle silenciosamente en código normal\n(asignaciones a una propiedad de no escritura, asignaciones a una propiedad get,\nasignaciones a una nueva propiedad o a un objecto no extendible) lanzará una\nexcepción en modo estricto:</p>\n<pre><code class=\"language-js\">'use strict';\n// Asignación a un no-escritura global\nvar undefined = 5; // TypeError: \"undefined\" is read-only\nvar Infinity = 5; // TypeError: \"Infinity\" is read-only\n\n// Asignación a una propiedad de no-escritura\nconst obj1 = {};\nObject.defineProperty(obj1, 'x', { value: 42, writable: false });\nobj1.x = 9; // lanza un TypeError\n\n// Asignación a una propiedad de tipo getter\nconst obj2 = { get x() { return 17; } };\nobj2.x = 5; // lanza un TypeError\n\n// Asignación a una nueva propiedad en un objeto no-extendible\nconst fixed = {};\nObject.preventExtensions(fixed);\nfixed.newProp = 'ohai'; // lanza un TypeError\n</code></pre>\n<p>En tercer lugar, el modo estricto lanza una excepción al intentar eliminar\npropiedades no eliminables (mientra que en código normal el intento no tendría\nningún efecto):</p>\n<pre><code class=\"language-js\">'use strict';\ndelete Object.prototype; // lanza TypeError\n</code></pre>\n",
          "order": 1,
          "durationString": "15min"
        },
        "02-try-catch": {
          "title": "Try...catch",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>JavaScript soporta un conjunto compacto de sentencias específicamente para el\nmanejo de flujo, que pueden ser utilizadas para incorporar mayor interactividad\na tus aplicaciones.</p>\n<p>La guía de referencia de JavaScript contiene detalles exhaustivos sobre las\nsentencias mencionadas en este capítulo. El punto y coma (<code>;</code>) se utiliza para\nseparar sentencias de código JavaScript.</p>\n<p>En Javascript cualquier expresión es también una sentencia. Una sentencia\ncondicional es un conjunto de comandos que se ejecutan si una condición es\nverdadera. JavaScript soporta dos sentencias condicionales: <code>if...else</code> y\n<code>switch</code>.</p>\n<p>A través de toda la formación que a este minuto has recibido, ya sabes cuáles\nson las sentencias condicionales, además conoces los bucles o loops, que\npertenecen a toda el área de control de flujo en JavaScript, en ésta parte me\ngustaría más contarte a cerca de las sentencias de manejo de excepciones.\nPrácticamente cualquier objeto puede ser lanzado (<em>thrown</em> en inglés) en\nJavaScript. Sin embargo, no todos los objetos lanzados son creados igual.\nMientras que es bastante común lanzar números o strings como errores,\nfrecuentemente es más efectivo utilizar uno de los tipos de excepciones\nespecíficamente creados para este proposito:</p>\n<h2 id=\"sentencia-throw\">Sentencia throw</h2>\n<p>Utiliza la sentencia throw para lanzar una excepción. Cuando lanzas un\nexcepción, se especifica la expresión que contiene el valor para ser lanzado:</p>\n<pre><code class=\"language-js\">throw expresión;\n</code></pre>\n<p>Puedes lanzar cualquier expresión, no solo expresiones de un tipo especifico. En\nel siguente código lanzamos varias excepciones de varios tipos:</p>\n<pre><code class=\"language-js\">throw \"Error2\";   // Tipo string\nthrow 42;         // Tipo número\nthrow true;       // Tipo booleano\nthrow {toString: function() { return \"¡Soy un objeto!\"; } };\n</code></pre>\n<p>Puedes especificar un objeto cuando lanzas una excepción. A continuación, puedes\nhacer referencia a las propiedades del objeto en un bloque catch. En el\nsiguiente ejemplo se crea un objeto myUserException del tipo UserException y lo\nusa en la sentencia throw.</p>\n<pre><code class=\"language-js\">// Crear un tipo de objeto UserException\nfunction UserException (aviso){\n  this.aviso=aviso;\n  this.nombre=\"UserException\";\n}\n\n// Make the exception convert to a pretty string when used as a string\n// (e.g. by the error console)\nUserException.prototype.toString = function () {\n  return this.nombre + ': \"' + this.aviso + '\"';\n}\n\n// Create an instance of the object type and throw it\nthrow new UserException(\"Value too high\");\n</code></pre>\n<h2 id=\"trycatch\">try...catch</h2>\n<p>La sentencia <code>try...catch</code> marca un bloque de instrucciones a intentar que\npueden causar alguna excepción, y declarar una o más respuestas en caso de que\nuna excepción sea arrojada. Si una excepción es arrojada, la sentencia\n<code>try...catch</code> se encarga de atraparla.</p>\n<p>La sentencia <code>try...catch</code> consiste en un bloque <code>try</code>, el cuál contiene una o\nmás instrucciones, y ninguno o varios bloques <code>catch</code>, conteniendo sentencias\nque especifican que hacer si una excepción es arrojada en un bloque <code>try</code>. Se\ndesea que las instrucciones dentro del bloque <code>try</code> se ejecuten con éxito, de\ncaso contrario caerán en el bloque <code>catch</code> para ser controladas. Si ninguna\ninstrucción dentro del bloque <code>try</code> (o en una función llamada dentro del bloque\ntry) arroja una excepción, el control pasa inmediatamente al bloque <code>catch</code>. Si\nninguna excepción es arrojada en el bloque <code>try</code>, el bloque <code>catch</code> es ignorado.\nPor último se ejecuta el bloque <code>finally</code> luego de que los bloques <code>try</code> y\n<code>catch</code> hayan sido ejecutados, pero antes de las instrucciones que se encuentren\nluego de la sentencia <code>try...catch</code>.</p>\n<p>El siguiente ejemplo usa la sentencia <code>try...catch</code>. El ejemplo llama a una\nfunción que retorna el nombre de un mes desde un arreglo basado en un valor\npasado como argumento a la función. Si el valor no corresponde con el número de\nun mes (entre <code>1</code> y <code>12</code>), una excepción es arrojada con el valor\n<code>'InvalidMonthNo'</code> y las instrucciones en el bloque catch le asignarán a la\nvariable <code>monthName</code> el valor de <code>'unknown'</code>.</p>\n<pre><code class=\"language-js\">function getMonthName (mo) {\n  mo = mo - 1; // Ajusta el indice del arreglo para el arreglo de meses (1=Jan, 12=Dec)\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  if (months[mo] != null) {\n    return months[mo];\n  } else {\n    throw 'InvalidMonthNo'; //Arroja la palabra \"InvalidMonthNo\" al ocurrir una excepción\n  }\n}\n\ntry { // instrucciones a probar\n  monthName = getMonthName(myMonth); // La función puede arrojar una excepción\n}\ncatch (e) {\n  monthName = 'unknown';\n  logMyErrors(e); // Pasa el objeto de la excepción a un manejador de errores\n}\n</code></pre>\n<h2 id=\"el-bloque-catch\">El bloque catch</h2>\n<p>Un bloque <code>catch</code> es usado para manejar todas las excepciones que pueden ser\ngeneradas en el bloque <code>try</code>.</p>\n<p>El bloque <code>catch</code> especifica un identificar (catchID en la sintaxis anterior)\nque mantiene el valor especificado por la sentencia <code>throw</code>; puedes usar este\nidentificador para obtener información acerca de la excepción que fue arrojada.\nJavaScript crea este identificador cuando ha entrado en el bloque <code>catch</code>; el\nidentificador dura mientras dure el bloque <code>catch</code>; después de que el bloque\n<code>catch</code> termine su ejecución, el identificador ya no está disponible.</p>\n<p>Por ejemplo, el siguiente código arroja una excepción. Cuando la excepción\nocurre, el control es transferido al bloque <code>catch</code>.</p>\n<pre><code class=\"language-js\">try {\n  throw \"myException\" // genera una excepción\n}\ncatch (e) {\n  // instrucciones para manejar cualquier excepción generada\n  logMyErrors(e) // Pasa el objeto de excepción a un manejador de errores\n}\n</code></pre>\n",
          "order": 2,
          "durationString": "15min"
        },
        "03-callbacks": {
          "title": "Errores en callbacks",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>En la lectura anterior hemos visto como la sentencia <code>try...catch</code> nos permite\nenvolver código que podría resultar en una excepción y así evitar que la\nexcepción haga que se termine la ejecución de nuestro programa.</p>\n<p>Pero qué pasa cuando ocurre un error en una operación asíncrona? Veamos un\nejemplo. Imaginemos que en un script escrito para Node.js tenemos una función\nque se llama <code>getLatestNodeInfo()</code>, y que esta función es asíncrona (tiene que\nhacer una consulta por HTTP para ver cuál es la versión más reciente de\nNode.js), así que recibe un <em>callback</em> como argumento.</p>\n<pre><code class=\"language-js\">getLatestNodeInfo((err, data) =&gt; {\n  if (err) {\n    return console.error(err);\n  }\n\n  console.log(data);\n});\n</code></pre>\n<p>En el mundo de Node.js es muy común que los callbacks tengan esta firma\n<code>(err, data)</code>, dónde el primer argumento es un error (en caso de que haya\nocurrido uno) y el segundo argumento es la <code>data</code> o el <em>resultado</em> en caso de\nque la operación se complete satisfactoriamente.</p>\n<p>A la hora de implementar funciones asíncronas, donde vamos a comunicar el\n<em>resultado</em> a través de un <em>callback</em>, evitamos arrojar errores con <code>throw</code> y en\nvez los comunicamos como argumento a una función callback. Esto va a permitir\n\"atrapar\" un error asíncrono (que ha ocurrido en otro contexto de ejecución) y\nmanejar errores que de otra forma no podríamos.</p>\n<p>Considera la siguiente implementación de la función <code>getLatestNodeInfo()</code>:</p>\n<pre><code class=\"language-js\">const http = require('http');\n\nconst getLatestNodeInfo = (cb) =&gt;\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      throw new Error(`Request Failed. Status Code: ${statusCode}`);\n    }\n\n    // ...\n\n  }).on('error', cb);\n</code></pre>\n<p>En esta implementación (incompleta todavía - e incorrecta por ahora) estamos\nlanzando un error con <code>throw</code> dentro de un <em>callback</em>. Viendo esta sentencia\n<code>throw</code> unx podría pensar que podemos usar <code>try...catch</code> para atrapar el error.\nAlgo así:</p>\n<pre><code class=\"language-js\">// intento fallido de atrapar error lanzado con `throw` dentro de un callback\ntry {\n  getLatestNodeInfo(() =&gt; {\n    // ...\n  });\n} catch (err) {\n  console.log('error atrapado con try...catch', err);\n}\n</code></pre>\n<p>En este caso, si se da la condición del error (puedes cambiar\n<code>statusCode !== 200</code> a <code>statusCode === 200</code> temporalmente para probar el error),\nveremos que la excepción NO es atrapada en el bloque <code>catch</code>, sino que termina\nla ejecución de nuestro programa sin que tengamos la oportunidad de manejar el\nerror. Esto es porque la excepción se está arrojando desde un callback que se\nejecuta en otro contexto, más adelante en el tiempo. Este <code>try...catch</code> solo\natraparía errores que pudieran ocurrir en la parte síncrona de la función, antes\nde hacer el request.</p>\n<p>Es por esto que las funciones asíncronas evitan arrojar errores con <code>throw</code> y\nsiempre comunican errores a través de argumentos pasados a <em>callbacks</em>, ya sea\nen un <em>callback</em> con varios argumentos donde el primero es el posible error, o\nen <em>callbacks</em> dedicados, como por ejemplo el <em>handler</em> que le pasamos a request\nen el ejemplo anterior:</p>\n<pre><code class=\"language-js\">http\n  .get(url, successCallback)\n  .on('error', errorCallback);\n</code></pre>\n<p>Ahora sí, completemos nuestra implementación de <code>getLatestNodeInfo()</code>, pero esta\nvez pasando los errores a través del <em>callback</em> recibido del usuario en vez de\nusar <code>throw</code>. Nótese también que la implementación hace uso de <code>try...catch</code>\ninternamente para atrapar errores que pudieran ocurrir durante el <em>parseado</em> de\nla data recibida (usando <code>JSON.parse()</code>), lo cual es una operación síncrona y\nqueremos evitar que arroje un error, ya que no podría manejarse desde fuera de\nnuestra función. Para solucionar esto, primero atrapamos el error y después lo\ndevlolvemos como argumento al <em>callback</em>.</p>\n<pre><code class=\"language-js\">const getLatestNodeInfo = (cb) =&gt;\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      return cb(new Error(`Request Failed. Status Code: ${statusCode}`));\n    } else if (!/^application\\/json/.test(headers['content-type'])) {\n      return cb(new Error(`Bad content-type. Expected application/json but got ${contentType}`));\n    }\n\n    let rawData = '';\n    resp.setEncoding('utf8');\n    resp.on('data', (chunk) =&gt; { rawData += chunk; });\n    resp.on('end', () =&gt; {\n      try {\n        const parsedData = JSON.parse(rawData);\n        cb(null, parsedData.shift());\n      } catch (err) {\n        cb(err);\n      }\n    });\n  }).on('error', cb);\n</code></pre>\n<p>Esta nueva implementación nos asegura que los errores que puedan ocurrir en\nnuestra función siempre se pasen como argumentos al <em>callback</em> recibido por el\nusuario.</p>\n",
          "order": 3,
          "durationString": "15min"
        },
        "04-promises": {
          "title": "Errores en promesas",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>A partir de ECMAScript 6, JavaScript incluye objetos <code>Promise</code> que nos permiten\ncontrolar el flujo de operaciones diferidas y asíncronas.</p>\n<p>Al igual que con los <em>callbacks</em>, a la hora de implementar <em>promesas</em> también\nevitamos arrojar errores con <code>throw</code>. En el caso de las promesas tenemos una\nserie de funciones dedicadas especícamente a manejar errores. Desde el punto de\nvista de la implementación de <em>promesas</em>, tenemos la función <code>reject</code> y en el\ncaso del consumo de promesas tenemos el método <code>promise.catch()</code>, así como la\nopción de un segundo argumento al método <code>promise.then(onSuccess, onError)</code>.</p>\n<p>Continuando con el ejemplo de la lectura anterior, modifiquemos nuestra\nimplementación de <code>getLatestNodeInfo()</code> para que retorne una promesa en vez de\nusar un simple <em>callback</em>:</p>\n<pre><code class=\"language-js\">const http = require('http');\n\nconst getLatestNodeInfo = () =&gt; new Promise((resolve, reject) =&gt; {\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      return reject(new Error(`Request Failed. Status Code: ${statusCode}`));\n    } else if (!/^application\\/json/.test(headers['content-type'])) {\n      return reject(new Error(`Bad content-type. Expected application/json but got ${contentType}`));\n    }\n\n    let rawData = '';\n    resp.setEncoding('utf8');\n    resp.on('data', (chunk) =&gt; { rawData += chunk; });\n    resp.on('end', () =&gt; {\n      try {\n        const parsedData = JSON.parse(rawData);\n        resolve(parsedData.shift());\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }).on('error', reject);\n});\n</code></pre>\n<p>En esta nueva implementación hemos reemplazado la invocaciones a <code>cb()</code> (el\n<em>callback</em> que recibíamos como argumento) con invocaciones a <code>reject()</code> (en los\ncasos de error) y <code>resolve()</code> (en caso de que completemos la tarea con éxito).\nEsto nos permitiría ahora invocar nuestra función <code>getLatestNodeInfo()</code> de la\nsiguiente manera:</p>\n<pre><code class=\"language-js\">getLatestNodeInfo()\n  .then(data =&gt; console.log(`Versión más reciente de Node.js: ${data.version}`))\n  .catch(err =&gt; console.error(err));\n</code></pre>\n<p>De forma equivalente podríamos haber escrito:</p>\n<pre><code class=\"language-js\">getLatestNodeInfo().then(\n  data =&gt; console.log(`Versión más reciente de Node.js: ${data.version}`),\n  err =&gt; console.error(err)\n);\n</code></pre>\n<h2 id=\"manejo-de-errores-en-promesas-encadenadas\">Manejo de errores en promesas encadenadas</h2>\n<p>Una de las grandes ventajas de las promesas es que podemos encadenarlas. Esto\nquiere decir que cuando invocamos el método <code>promise.then()</code> podemos retornar</p>\n<ul>\n<li>o un valor al que resuelve la promesa</li>\n<li>u otra promesa, que resolverá a otro valor</li>\n</ul>\n<p>El método <code>promise.then()</code> a su vez retorna una promesa sobre la cual podemos\nvolver a invocar <code>then</code> y recibe como argumento el valor al que haya resuelto\nel <code>then</code> anterior.</p>\n<p>Para ilustrar este concepto, modifiquemos otra vez nuestra implementación de\n<code>getLatestNodeInfo()</code> para que haga un poco menos de trabajo, y en vez de\nparsear el texto recibido con <code>JSON.parse</code> y de ahí seleccionar la última\nversión, hagamos que directamente devuelva el texto recibido. Aprovechamos a\ncambiarle el nombre a la función, ya que ahora ya no devuelve la última version\nsino info sobre todos los releases (en texto JSON sin parsear):</p>\n<pre><code class=\"language-js\">const getNodeReleases = () =&gt; new Promise((resolve, reject) =&gt; {\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      return reject(new Error(`Request Failed. Status Code: ${statusCode}`));\n    } else if (!/^application\\/json/.test(headers['content-type'])) {\n      return reject(new Error(`Bad content-type. Expected application/json but got ${contentType}`));\n    }\n\n    let rawData = '';\n    resp.setEncoding('utf8');\n    resp.on('data', (chunk) =&gt; { rawData += chunk; });\n    resp.on('end', () =&gt; resolve(rawData));\n  }).on('error', reject);\n});\n</code></pre>\n<p>Invoquemos nuestra nueva función <code>getNodeReleases()</code>:</p>\n<pre><code class=\"language-js\">getNodeReleases()\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(err));\n</code></pre>\n<p>Si no ocurre ningún error de red, esto debería resultar en que se invoque la\nfunción pasada a <code>.then()</code> con el texto recibido del request y no la pasada a\n<code>catch()</code>. El output debería ser algo así:</p>\n<pre><code class=\"language-text\">[\n{\"version\":\"v9.4.0\",\"date\":\"2018-01-10\",\"files\":[\"aix-ppc64\",\"headers\",\"linux-arm64\",\"linux-armv6l\",\"linux-armv7l\",\"linux-ppc64le\",\"linux-x64\",\"linux-x86\",\"osx-x64-pkg\",\"osx-x64-tar\",\"src\",\"sunos-x64\",\"sunos-x86\",\"win-x64-7z\",\"win-x64-exe\",\"win-x64-msi\",\"win-x64-zip\",\"win-x86-7z\",\"win-x86-exe\",\"win-x86-msi\",\"win-x86-zip\"],\"npm\":\"5.6.0\",\"v8\":\"6.2.414.46\",\"uv\":\"1.18.0\",\"zlib\":\"1.2.11\",\"openssl\":\"1.0.2n\",\"modules\":\"59\",\"lts\":false},\n{\"version\":\"v9.3.0\",\"date\":\"2017-12-12\",\"files\":[\"aix-ppc64\",\"headers\",\"linux-arm64\",\"linux-armv6l\",\"linux-armv7l\",\"linux-ppc64le\",\"linux-x64\",\"linux-x86\",\"osx-x64-pkg\",\"osx-x64-tar\",\"src\",\"sunos-x64\",\"sunos-x86\",\"win-x64-7z\",\"win-x64-exe\",\"win-x64-msi\",\"win-x64-zip\",\"win-x86-7z\",\"win-x86-exe\",\"win-x86-msi\",\"win-x86-zip\"],\"npm\":\"5.5.1\",\"v8\":\"6.2.414.46\",\"uv\":\"1.18.0\",\"zlib\":\"1.2.11\",\"openssl\":\"1.0.2n\",\"modules\":\"59\",\"lts\":false},\n...\n]\n</code></pre>\n<p>Ahora para recuperar la funcionalidad que teníamos antes, podemos encadenar\ninvocaciones a <code>.then()</code>, dónde cada una representa una transformación, que\npuede ser síncrona (simplemente retornando un valor) o asíncrona (retornando una\npromesa).</p>\n<pre><code class=\"language-js\">getNodeReleases()\n  .then(data =&gt; JSON.parse(data))\n  .then(data =&gt; data.shift())\n  .then(data =&gt; console.log(`Versión más reciente de Node.js: ${data.version}`))\n  .catch(err =&gt; console.error(err));\n</code></pre>\n<p>Lo interesante desde el punto de vista del manejo de errores es que solo\nnecesitamos un <code>.catch()</code>. Si cualquiera de los <code>.then()</code> retorna un error una\npromesa que resuelva a un error, directamente pasamos al <code>.catch()</code> (se hace\nun <em>corto circuito</em> que impide que los siguientes <code>.then()</code> se ejecuten).</p>\n<p>Para completar el ejemplo, re-implementemos la función <code>getLatestNodeInfo()</code>,\npero esta vez haciendo uso de nuestra nueva función <code>getNodeReleases()</code> y\nencadenando promesas.</p>\n<pre><code class=\"language-js\">const getLatestNodeInfo = () =&gt;\n  getNodeReleases()\n    .then(data =&gt; JSON.parse(data))\n    .then(data =&gt; data.shift());\n</code></pre>\n<p>Esta nueva implementación simplemente encadena un par de transformaciones a\ntravés de promesas que resuelven directamente a un valor y retorna una promesa\nnueva, lo cual nos va a permitir usar la función <code>getLatestNodeInfo()</code> de la\nmisma manera que en el primer ejemplo de esta lectura:</p>\n<pre><code class=\"language-js\">getLatestNodeInfo()\n  .then(data =&gt; console.log(`Versión más reciente de Node.js: ${data.version}`))\n  .catch(err =&gt; console.error(err))\n</code></pre>\n<hr>\n<h2 id=\"lecturas-complemenentarias\">Lecturas complemenentarias</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/primers/promises\" target=\"_blank\">Promises - Jake Archibald - Google Developers</a></li>\n</ul>\n",
          "order": 4,
          "durationString": "15min"
        },
        "05-practice": {
          "title": "Ejercicios",
          "type": "practice",
          "format": "self-paced",
          "duration": 30,
          "exercises": {
            "01-validate-string": {
              "title": "validateString",
              "body": "<p>Escribe una función que reciba un string como argumento y arroje los siguientes\nerrores:</p>\n<ul>\n<li><code>TypeError</code> con mensaje <code>El argumento str debe ser un string</code> cuando el\nargumento recibido no es de tipo <code>string</code>.</li>\n<li><code>RangeError</code> con mensaje <code>El argumento str debe tener al menos 4 caracteres</code>\ncuando el argumento recibido es un <code>string</code> de menos de 4 caracteres.</li>\n<li><code>RangeError</code> con mensaje\n<code>El argumento str debe tener un máximo de 10 caracteres</code> cuando el argumento\nrecibido tiene más de 10 caracteres.</li>\n</ul>\n<p>Ejemplo:</p>\n<pre><code class=\"language-js\">// TypeError: El argumento str debe ser un string\nvalidateString();\n\n// RangeError: El argumento str debe tener al menos 4 caracteres\nvalidateString('');\nvalidateString('abc');\n\n// RangeError: El argumento str debe tener un máximo de 10 caracteres\nvalidateString('abcdefghijk');\nvalidateString('hola mundo cruel');\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# validateString\n\nEscreva uma função que receba uma string como argumento e lance os seguintes\nerros:\n\n* `TypeError` com a mensagem `O argumento str deve ser uma string` quando o\n  argumento recebido não for do tipo `string`.\n* `RangeError` com a mensagem `O argumento str deve ter pelo menos 4 caracteres`\n  quando o argumento recebido for uma `string` de menos de 4 caracteres.\n* `RangeError` com a mensagem `O argumento str deve ter no máximo 10 caracteres`\n  quando o argumento recebido tiver mais de 10 caracteres.\n\nExemplo:\n\n```js\n// TypeError: O argumento str deve ser uma string\nvalidateString();\n\n// RangeError: O argumento str deve ter pelo menos 4 caracteres\nvalidateString('');\nvalidateString('abc');\n\n// RangeError: O argumento str deve ter no máximo 10 caracteres\nvalidateString('abcdefghijk');\nvalidateString('olá mundo cruel');\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "dmFsaWRhdGVTdHJpbmcuanM=": "module.exports = (str) => {\n  // ...\n};\n"
                },
                "c29sdXRpb24=": {
                  "dmFsaWRhdGVTdHJpbmcuanM=": "module.exports = (str) => {\n  if (typeof str !== 'string') {\n    throw new TypeError('El argumento str debe ser un string');\n  }\n\n  if (str.length < 4) {\n    throw new RangeError('El argumento str debe tener al menos 4 caracteres');\n  }\n\n  if (str.length > 10) {\n    throw new RangeError('El argumento str debe tener un máximo de 10 caracteres');\n  }\n\n  return str;\n};\n"
                },
                "dGVzdA==": {
                  "dmFsaWRhdGVTdHJpbmcuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst validateString = require('../solution/validateString');\n\n\ndescribe('validateString()', () => {\n  it('debería ser una función', () => {\n    Assert.equal(typeof validateString, 'function');\n  });\n\n  it('debería arrojar TypeError cuando argumento no es srting', () => {\n    Assert.throws(\n      () => validateString(),\n      TypeError,\n      'El argumento str debe ser un string',\n    );\n  });\n\n  it('debería arrojar RangeError cuando srting tiene menos de 4 caracteres', () => {\n    Assert.throws(\n      () => validateString(''),\n      RangeError,\n      'El argumento str debe tener al menos 4 caracteres',\n    );\n  });\n\n  it('debería arrojar RangeError cuando srting tiene más de 10 caracteres', () => {\n    Assert.throws(\n      () => validateString('abcdefghijk'),\n      RangeError,\n      'El argumento str debe tener un máximo de 10 caracteres',\n    );\n  });\n});\n"
                }
              }
            },
            "02-parse-json": {
              "title": "parseJson",
              "body": "<p>Implementa una función que reciba un string (en formato JSON) y retorne el JSON\nparseado (usando <code>JSON.parse</code>). La función no debe arrojar excepciones, a pesar\nde que <code>JSON.parse</code> puede arrojarlas. Si ocurriera una excepción al parsear el\nstring JSON, debemos evitar que se arroje el error y en vez hay que devolverlo\ncomo valor de retorno.</p>\n<h2 id=\"ejemplo\">Ejemplo</h2>\n<pre><code class=\"language-js\">const result = parseJson('bad JSON');\nif (result instanceof Error) {\n  console.log('Ocurrión un error', err.message);\n}\n\n\nconst json = parseJson('{ \"foo\": true, \"bar\": \"baz\" }');\nconsole.log(json);\n// =&gt; { foo: true, bar: 'baz' }\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# parseJson\n\nImplementa uma função que receba uma string (no formato JSON) e retorne o JSON\nparseado (usando `JSON.parse`). A função não deve lançar exceções, porém\n`JSON.parse` poderá lançá-las. Se ocorrer uma exceção ao parsear a string JSON,\ndevemos evitar que seja lançado um erro, e sim devolvê-lo como valor de retorno.\n\n## Exemplo\n\n```js\nconst result = parseJson('bad JSON');\nif (result instanceof Error) {\n  console.log('Ocorreu um erro', err.message);\n}\n\nconst json = parseJson('{ \"foo\": true, \"bar\": \"baz\" }');\nconsole.log(json);\n// => { foo: true, bar: 'baz' }\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "cGFyc2VKc29uLmpz": "const parseJson = () => {\n  // Tu código acá\n};\n\nmodule.exports = parseJson;\n"
                },
                "c29sdXRpb24=": {
                  "cGFyc2VKc29uLmpz": "const parseJson = (str) => {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return err;\n  }\n};\n\nmodule.exports = parseJson;\n"
                },
                "dGVzdA==": {
                  "cGFyc2VKc29uLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst parseJson = require('../solution/parseJson');\n\ndescribe('parseJson()', () => {\n  it('debería ser una función', () => {\n    Assert.equal(typeof parseJson, 'function');\n  });\n\n  it('debería devolver un error en vez de arrojarlo con JSON inválido', () => {\n    const result = parseJson();\n    Assert.ok(result instanceof Error);\n    Assert.ok(/Unexpected token/i.test(result.message));\n  });\n\n  it('debería devolver JSON parseado cuando formato del string es ok', () => {\n    const result = parseJson('{ \"foo\": true, \"bar\": \"baz\" }');\n    Assert.deepEqual(result, { foo: true, bar: 'baz' });\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "30min"
        },
        "07-closing": {
          "title": "Cierre",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"resumen\">Resumen</h2>\n<p>Llegamos al final de la unidad ;-)</p>\n<h2 id=\"respondamos-juntxs-las-preguntas-de-la-apertura\">Respondamos juntxs las preguntas de la apertura</h2>\n<ul>\n<li>Qué es el modo estricto en JavaScript</li>\n<li>Qué es un <code>Error</code> y tipos de errores</li>\n<li>Cómo usar <code>try...catch</code> para manejar errores</li>\n<li>Cómo manejar errores en callbacks</li>\n<li>Cómo manejar errores en promesas</li>\n</ul>\n",
          "order": 6,
          "durationString": "5min"
        }
      },
      "order": 8,
      "stats": {
        "duration": 100,
        "durationString": "1.7h",
        "exerciseCount": 2,
        "partCount": 7
      }
    },
    "10-debugging": {
      "title": "Depuración (debugging)",
      "bonus": false,
      "description": "<p>La depuración es un aspecto importante en programación, trata de encontrar y\ncorregir diferentes tipos de errores que pueden suceder al momento de programar.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Apertura: Debugging",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>En esta unidad aprenderemos sobre depuración (<code>debugging</code>):</p>\n<ul>\n<li>Por qué es importante saber depurar</li>\n<li>Qué debemos tener en cuenta para depurar código en JavaScript</li>\n<li>Qué herramienta del navegador nos puede ayudar a depurar código</li>\n</ul>\n<h2 id=\"por-qué-aprender-debugging\">Por qué aprender <code>debugging</code></h2>\n<p>La depuración es un aspecto importante en programación, trata de encontrar y\ncorregir diferentes tipos de errores que pueden suceder al momento de programar.</p>\n<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\nque debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a medida\nque avanzas para validar que estás avanzando en la dirección correcta. Que te\nsirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<ul>\n<li>¿Por qué es importante la depuración?</li>\n<li>¿Qué tipos de errores podemos encontrar en el desarrollo de software?</li>\n<li>¿Por qué es importante reconocer los mensajes de error? Identifica algunos\nque te hayan sucedido</li>\n<li>¿Qué es el Dev Tools?</li>\n<li>¿Qué son los breakpoints?</li>\n<li>¿Cómo depurar en el Dev Tools?</li>\n</ul>\n",
          "order": 0,
          "durationString": "10min"
        },
        "01-intro": {
          "title": "¿Qué es debugging?",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Representar gráficamente las distintas etapas de un proceso y sus iteraciones,\nfacilitando la comprensión de su funcionamiento.</li>\n<li>Conocer la utilidad  de los diagramas de flujo para analizar el proceso,\nproponer ideas, representar los controles, etc.</li>\n</ul>\n<hr>\n<p>Debugging es un proceso de identificación y resolución de errores (bugs). ¿A\nveces te has encontrado con la situación de realizar todo el código de un\nproyecto o script, luego lo pruebas y te das cuenta de que no funciona como\nesperabas? El paso siguiente, es volver a tu código y buscar la línea en la que\npuede estar fallando, ¿cierto?. Pues, dicho proceso es considerado <em>depuración</em>,\nencontrar ¿cuál es el error?, ¿porqué falla?, ¿cómo fue que falló?, ¿estará\nafectando otra parte del código?.</p>\n<p>Y su importancia, ya vista implícitamente, es que nos permite identificar\nerrores para ser solucionados, además de no ser víctimas de memes como:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*S6iw5QmBC2v_NbUzbrhwMw.jpeg\" alt=\"Curly Brace Bug\"></p>\n<h2 id=\"tipos-de-errores\">Tipos de Errores</h2>\n<p>Cuando hablamos de depuración, estamos hablando de errores y cuando programamos\nes muy probable que ocurran 2 tipos de errores: <em>errores de sintaxis</em> y\n<em>errores lógicos</em>.</p>\n<blockquote>\n<p>Un <strong>error de sintaxis</strong> se produce al escribir, incorrectamente, alguna parte\ndel código fuente de un programa. De forma que, dicho error impedirá, tanto al\ncompilador como al intérprete, traducir dicha instrucción, ya que, ninguno de\nlos dos entenderá qué le está diciendo el programador. — Wikipedia</p>\n</blockquote>\n<pre><code class=\"language-javascript\">/*\n * Errores de sintaxis\n */\n\n// Nombre de variable empezando con número\nconst 1cosa = 10;\n\n/*\n *\n * Error de operador:\n * = es asignación, mientras, == es comparación, y, === es comparación estricta\n *\n */\nif (numero = 0) {\n  console.log('Cero');\n} else if (numero &gt; 0) {\n  /*\n   *\n   * Positivo debe de ir entre comillas debido a que es un string,\n   * y no una variable definida anteriormente\n   *\n   */\n  console.log(Positivo);\n} else {\n  /*\n   *\n   * `lo` no es un método del objeto `console`, el método deseado en este\n   * snippet es `console.log`\n   * Este tipo de errores que ocurren al momento de escribir es conocido\n   * como un `typo`\n   *\n   */\n  console.lo('Negativo');\n}\n</code></pre>\n<blockquote>\n<p>Los <strong>errores lógicos</strong> son errores que impiden que su programa haga lo que\nestaba previsto. Su código puede compilarse y ejecutarse sin errores, pero el\nresultado de una operación puede generar un resultado no esperado. — Microsoft\nDeveloper Network</p>\n</blockquote>\n<pre><code class=\"language-javascript\">/*\n * Error lógico\n */\n\n// Función que espera 2 números como parámetros para devolver la suma de ambos\nconst suma = (num1, num2) =&gt; num1 + num2;\n\n// Imaginemos que el número 1 es 6\nconst num1 = prompt('Ingrese el número 1');\n\n// Imaginemos que el número 2 es 4\nconst num2 = prompt('Ingrese el número 2');\n\nconst resultado = suma(num1, num2);\n\n// Resultado esperado: 10\n// Resultado obtenido: \"64\"\nconsole.log(resultado);\n\n/*\n *\n * El error que ocurre en este snippet es que todo lo que ingresa el usuario\n * mediante un prompt es un string, y debemos de considerarlo para obtener el\n * resultado que esperamos.\n * En este caso, tendríamos que convertir el tipo de dato de string a número.\n *\n */\n</code></pre>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-error-messages": {
          "title": "Mensajes de error",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Conocer los tipos diferentes de mensajes de error y el vocabulario en esos\nmensajes para resolver problemas en el código.</li>\n</ul>\n<hr>\n<p>Todos comenten errores, incluso programadores con mucha experiencia.\nAfortunadamente, la consola del Dev Tools te dirá cuando tienes un error.\nPor otro lado, estos mensajes pueden ser difícil de comprender, y a veces\nno es tan obvio que significan. El propósito de este lectura es explorar algunos\nerrores comunes y sus significados, y así resuelvas problemas en el código.</p>\n<h2 id=\"errores-comunes\">Errores Comunes</h2>\n<p>Hay muchos tipos de errores, pero hay algunos que son muy comunes. Lee estas\nreferencias para comprender los errores más comunes.</p>\n<h3 id=\"referenceerror-x-is-not-defined\">ReferenceError: \"x\" is not defined</h3>\n<p><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Errors/Not_defined\" target=\"_blank\">ReferenceError: \"x\" is not defined - MDN</a></p>\n<h3 id=\"syntaxerror-unexpected-token\">SyntaxError: Unexpected token</h3>\n<p>Un \"token\" es una pieza pequeña del código. Por ejemplo, variables, funciones,\noperadores, y palabras claves (como <code>if</code> o <code>while</code>), todos son tokens.</p>\n<p>La palabra \"unexpected\" significa \"inesperado\", entonces si tienes un token\ninesperado, significa que el navegador estaba leyendo el código hasta que llegó\na algo que no debe estar ahí. Usualmente, esto significa que algo hace falta\n(como una coma o un <code>+</code>) justo antes del token inesperado.</p>\n<p><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Errors/Unexpected_token\" target=\"_blank\">SyntaxError: Unexpected token - MDN</a></p>\n<p>Ejemplos:</p>\n<pre><code class=\"language-javascript\">const foo = 'Nicole's code';\n// SyntaxError: unexpected token: identifier\n</code></pre>\n<pre><code class=\"language-javascript\">const list = [1, 2,\n\nconst instruments = [\n  'Ukulele',\n  'Guitar',\n  'Piano'\n};\n// SyntaxError: expected expression, got keyword 'const'\n</code></pre>\n<pre><code class=\"language-javascript\">const data = [{foo: 'bar'} {bar: 'foo'}];\n// SyntaxError: missing ] after element list\n</code></pre>\n<p>A veces, en lugar de \"Unexpected Token\", verás algo como \"Unexpected Identifier\"\no \"Unexpected Number\". Estos son errores similares, y también casi siempre\nsignifica que olvidaste agregar algo justo antes del\ntoken inesperado. Afortunadamente, Chrome DevTools te dirá el número de la linea\ndonde tengas el error, y repl.it no solo te dirá el número de la linea, sino\ntambién te dirá el número de la columna.</p>\n<p><img src=\"img-line-number.png\" alt=\"repl.it screenshot\"></p>\n<h3 id=\"typeerror-x-is-not-a-function\">TypeError: \"x\" is not a function</h3>\n<p><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Errors/Not_a_function\" target=\"_blank\">TypeError: \"x\" is not a function - MDN</a></p>\n<h3 id=\"syntaxerror-missing--after-argument-list\">SyntaxError: missing ) after argument list</h3>\n<p><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\" target=\"_blank\">SyntaxError: missing ) after argument list - MDN</a></p>\n<h3 id=\"assignment-in-conditional-expression\">Assignment in Conditional Expression</h3>\n<p>\"Assignment in Conditional Expression\" no es un mensaje de error, es un mensaje\nde advertencia en repl.it.</p>\n<p>Significa que hay un operador de asignación (<code>=</code>) en una condicional, pero debe\nser un operador de comparación (<code>===</code>).</p>\n<p>Por ejemplo,</p>\n<pre><code class=\"language-javascript\">if (x = 5) {\n  console.log('x es 5.');\n}\n</code></pre>\n<h3 id=\"otras-notas\">Otras notas</h3>\n<p>Es importante tener en cuenta que los mensajes de error pueden variar entre\nnavegadores. La guía de referencia MDN describe mensajes de Firefox - los\nmensajes de error en otros navegadores son similares, pero no exactamente el\nmismo. En este lectura, nos enfocamos en los mensajes de Chrome y repl.it.</p>\n<p><a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Errors\" target=\"_blank\">Referencia MDN de Errores</a></p>\n",
          "order": 2,
          "durationString": "1h"
        },
        "03-code-challenges": {
          "title": "Retos de código",
          "type": "practice",
          "format": "self-paced",
          "duration": 60,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>A continuación te presentamos una serie de retos que debes completar para\nponer tus conocimientos a prueba.</li>\n</ul>\n",
          "exercises": {
            "01-say-hello": {
              "title": "sayHello",
              "body": "<p>Corrige los errores en la función y explique cuál fue el problema en un\ncomentario.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-javascript\">sayHello(); // --&gt; 'Hola'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# sayHello\n\nCorrija os erros na função e explique em um comentário qual foi o problema.\n\nExemplo de entrada:\n\n```javascript\nsayHello(); // --> 'Olá'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "c2F5SGVsbG8uanM=": "const sayHello = () => {\n  console.log(Hola);\n};\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = sayHello;\n"
                },
                "c29sdXRpb24=": {
                  "c2F5SGVsbG8uanM=": "const sayHello = () => {\n  console.log('Hola');\n};\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * A la palabra 'hola' le faltaban comillas.\n */\n\nmodule.exports = sayHello;\n"
                },
                "dGVzdA==": {
                  "c2F5SGVsbG8uc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst sayHello = require('../solution/sayHello');\n\ndescribe('sayHello()', () => {\n  it('debería regresar undefined, para ()', () => {\n    Assert.deepEqual(sayHello(), undefined);\n  });\n});\n"
                }
              }
            },
            "02-create-array": {
              "title": "createArray",
              "body": "<p>Corrige los errores en la función y explique cuál fue el problema en un\ncomentario.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const a = createArray();\nconsole.log(a); // --&gt; [1, 2, 3]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# createArray\n\nCorrija os erros na função e explique em um comentário qual foi o problema.\n\nExemplo de entrada:\n\n```javascript\nconst a = createArray();\nconsole.log(a); // --> [1, 2, 3]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "Y3JlYXRlQXJyYXkuanM=": "function createArray() {\n  const data = [1 2 3];\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = createArray;\n"
                },
                "c29sdXRpb24=": {
                  "Y3JlYXRlQXJyYXkuanM=": "function createArray() {\n  const data = [1, 2, 3];\n  return data;\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * Al arreglo le faltaban dos comas.\n */\n\nmodule.exports = createArray;\n"
                },
                "dGVzdA==": {
                  "Y3JlYXRlQXJyYXkuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst createArray = require('../solution/createArray');\n\ndescribe('createArray()', () => {\n  it('debería regresar [1, 2, 3], para ()', () => {\n    Assert.deepEqual(createArray(), [1, 2, 3]);\n  });\n});\n"
                }
              }
            },
            "03-calculate-tip": {
              "title": "ReferenceError: calculateTip",
              "body": "<p>Corrige los errores en la función y explique cuál fue el problema en un\ncomentario.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const tip = calculateTip(100);\nconsole.log(tip); // --&gt; 15\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# ReferenceError: calculateTip\n\nCorrija os erros na função e explique em um comentário qual foi o problema.\n\nExemplo de entrada:\n\n```javascript\nconst tip = calculateTip(100);\nconsole.log(tip); // --> 15\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "Y2FsY3VsYXRlVGlwLmpz": "/* Regresa num1 por ciento de num2. */\nconst percent = (num1, num2) => num1 * 100 / num2;\n\nconst calculateTip = billAmount => percent(15, billAmount);\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = calculateTip;\n"
                },
                "c29sdXRpb24=": {
                  "Y2FsY3VsYXRlVGlwLmpz": "/* Regresa num1 por ciento de num2. */\nconst percent = (num1, num2) => num1 * num2 / 100;\n\nconst calculateTip = billAmount => percent(15, billAmount);\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * La variable en la línea 11 tiene el mismo nombre que la función en la línea\n * 2.\n */\n\nmodule.exports = calculateTip;\n"
                },
                "dGVzdA==": {
                  "Y2FsY3VsYXRlVGlwLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst calculateTip = require('../solution/calculateTip');\n\ndescribe('calculateTip()', () => {\n  it('debería regresar 15, para (100)', () => {\n    Assert.deepEqual(calculateTip(100), 15);\n  });\n\n  it('debería regresar 4.5, para (30)', () => {\n    Assert.deepEqual(calculateTip(30), 4.5);\n  });\n\n  it('debería regresar 0, para (0)', () => {\n    Assert.deepEqual(calculateTip(0), 0);\n  });\n\n  it('debería regresar 7.5, para (50)', () => {\n    Assert.deepEqual(calculateTip(50), 7.5);\n  });\n});\n"
                }
              }
            },
            "04-tell-fortune": {
              "title": "tellFortune",
              "body": "<p>Corrige los errores en la función y explique cuál fue el problema en un\ncomentario.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-javascript\">tellFortune('scientist', 'Boston');\n// --&gt; 'In the year 2025, you will be a scientist and live in Boston.'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# tellFortune\n\nCorrija os erros na função e explique em um comentário qual foi o problema.\n\nExemplo de entrada:\n\n```javascript\ntellFortune('scientist', 'Boston');\n// --> 'In the year 2025, you will be a scientist and live in Boston.'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "dGVsbEZvcnR1bmUuanM=": "function tellFortune(job, location) {\n  return 'In the year 2025, you will be a ' + job ' and live in ' + location + '.';\n}\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = tellFortune;\n"
                },
                "c29sdXRpb24=": {
                  "dGVsbEZvcnR1bmUuanM=": "function tellFortune(job, location) {\n  return 'In the year 2025, you will be a ' + job + ' and live in ' + location + '.';\n}\n/**\n * ¿Cuál fue el problema con el código?\n *\n * A la linea 2 le faltaba un plus.\n */\n\nmodule.exports = tellFortune;\n"
                },
                "dGVzdA==": {
                  "dGVsbEZvcnR1bmUuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst tellFortune = require('../solution/tellFortune');\n\ndescribe('tellFortune()', () => {\n  it('debería regresar \"In the year 2025, you will be a programmer and live in Lima.\", para (\"programmer\", \"Lima\")', () => {\n    Assert.deepEqual(tellFortune('programmer', 'Lima'), 'In the year 2025, you will be a programmer and live in Lima.');\n  });\n\n  it('debería regresar \"In the year 2025, you will be a scientist and live in Boston.\", para (\"scientist\", \"Boston\")', () => {\n    Assert.deepEqual(tellFortune('scientist', 'Boston'), 'In the year 2025, you will be a scientist and live in Boston.');\n  });\n\n  it('debería regresar \"In the year 2025, you will be a singer and live in Madrid.\", para (\"singer\", \"Madrid\")', () => {\n    Assert.deepEqual(tellFortune('singer', 'Madrid'), 'In the year 2025, you will be a singer and live in Madrid.');\n  });\n\n  it('debería regresar \"In the year 2025, you will be a farmer and live in Fiji.\", para (\"farmer\", \"Fiji\")', () => {\n    Assert.deepEqual(tellFortune('farmer', 'Fiji'), 'In the year 2025, you will be a farmer and live in Fiji.');\n  });\n});\n"
                }
              }
            },
            "05-what-to-wear": {
              "title": "ReferenceError: whatToWear",
              "body": "<p>Corrige los errores en la función y explique cuál fue el problema en un\ncomentario.</p>\n<p>Ejemplo de entrada:</p>\n<pre><code class=\"language-js\">const winterClothes = whatToWear('winter');\nconsole.log(winterClothes); // --&gt; 'Bring a hat and gloves.'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLnB0LUJSLm1k": "# ReferenceError: whatToWear\n\nCorrija os erros na função e explique em um comentário qual foi o problema.\n\nExemplo de entrada:\n\n```js\nconst winterClothes = whatToWear('winter');\nconsole.log(winterClothes); // --> 'Bring a hat and gloves.'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "d2hhdFRvV2Vhci5qcw==": "function whatToWear(season) {\n  if (season = 'spring') {\n    return 'Bring an umbrella.';\n  } else if (season = 'summer') {\n    return 'Wear sunglasses.';\n  } else if (season = 'autumn') {\n    return 'Wear a light jacket.';\n  } else if (season = 'winter') {\n    return 'Bring a hat and gloves.';\n  } else {\n    return 'Please enter a valid season.';\n  }\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = whatToWear;\n"
                },
                "c29sdXRpb24=": {
                  "d2hhdFRvV2Vhci5qcw==": "function whatToWear(season) {\n  if (season === 'spring') {\n    return 'Bring an umbrella.';\n  } else if (season === 'summer') {\n    return 'Wear sunglasses.';\n  } else if (season === 'autumn') {\n    return 'Wear a light jacket.';\n  } else if (season === 'winter') {\n    return 'Bring a hat and gloves.';\n  } else {\n    return 'Please enter a valid season.';\n  }\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * Usaba operador de asignación en vez de comparación.\n */\n\nmodule.exports = whatToWear;\n"
                },
                "dGVzdA==": {
                  "d2hhdFRvV2Vhci5zcGVjLmpz": "\nconst Assert = require('chai').assert;\nconst whatToWear = require('../solution/whatToWear');\n\ndescribe('whatToWear()', () => {\n  it('debería regresar \"Bring an umbrella.\", para (\"spring\")', () => {\n    Assert.deepEqual(whatToWear('spring'), 'Bring an umbrella.');\n  });\n\n  it('debería regresar \"Wear sunglasses.\", para (\"summer\")', () => {\n    Assert.deepEqual(whatToWear('summer'), 'Wear sunglasses.');\n  });\n\n  it('debería regresar \"Wear a light jacket.\", para (\"autumn\")', () => {\n    Assert.deepEqual(whatToWear('autumn'), 'Wear a light jacket.');\n  });\n\n  it('debería regresar \"Bring a hat and gloves.\", para (\"winter\")', () => {\n    Assert.deepEqual(whatToWear('winter'), 'Bring a hat and gloves.');\n  });\n\n  it('debería regresar \"Please enter a valid season.\", para (\"foo\")', () => {\n    Assert.deepEqual(whatToWear('foo'), 'Please enter a valid season.');\n  });\n});\n"
                }
              }
            }
          },
          "order": 3,
          "durationString": "1h"
        },
        "04-breakpoints": {
          "title": "¿Cómo debuggear en JS?",
          "type": "read",
          "format": "self-paced",
          "duration": 40,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Aprender a depurar a través del Dev Tools</li>\n<li>Aprender a usar el <code>debugger statement</code></li>\n</ul>\n<hr>\n<p>Para depurar en JavaScript podemos hacer uso de 2 herramientas: DevTools del\nnavegador y el debugger statement.</p>\n<h2 id=\"devtools\">DevTools</h2>\n<p>El DevTools (así se llama en Chrome pero existe lo mismo en otros navegadores)\nes una herramienta usada para la inspección y depuración de todo lo que ocurre\nen nuestra aplicación web.</p>\n<p>Para acceder a ella existen diversos métodos, uno de los más sencillos es abrir\nla web app que deseas depurar, dar clic derecho en cualquier parte de dicha\npágina y seleccionar la opción <em>Inspect</em> o <em>Inspeccionar</em>.</p>\n<p>Por defecto, abrirá en una pestaña llamada Elements o Elementos; sin embargo,\npara hacer debug de nuestro código JavaScript debemos de cambiar a la pestaña\n<em>Sources</em> o <em>Fuente</em>.</p>\n<p>Probablemente, al ver el contenido de la pestaña <em>Sources</em>, solo verás un\narchivo HTML y ningún archivo JS por más que sepamos que si se está usando. Para\npoder visualizar los archivos JS que usa nuestra web app, solo es necesario\nrecargar la página.</p>\n<p>¿No te quedó claro lo anterior? No te preocupes, a continuación verás un GIF en\nel cual muestra todo lo mencionado anteriormente.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*JhVFiJNoGZAAmlnk00y6TA.gif\" alt=\"Chrome Dev Tools: Sources\"></p>\n<p>Para la depuración del código JS, podemos hacer uso de <strong>breakpoints</strong>, que son\npuntos donde queremos que nuestro código se detenga en tiempo de ejecución.</p>\n<p>En el siguiente ejemplo, tenemos un código que verifica si el número ingresado\npor un usuario es cero, positivo o negativo.</p>\n<pre><code class=\"language-javascript\">let number = prompt('Ingrese un número');\nnumber = Number(numero);\n\nif (number === 0) {\n  alert('Cero');\n} else if (number &gt; 0) {\n  alert('Positivo');\n} else {\n  alert('Negativo');\n}\n</code></pre>\n<p>Para poner un breakpoint en el DevTools solo tienes que dar clic en el número\nque indica la línea de código donde queremos detener el script. Una vez puesto\nel breakpoint debemos de recargar la página para que se detenga donde le\nindicamos.</p>\n<p>Una vez detenido, la línea de código donde pusimos el breakpoint se sombreará,\nmientras que la web se pondrá opaco y mostrará un mensaje <em>Paused in debugger</em>\njunto a 2 botones, el primero (color azul) llamado <em>Resume Script Execution</em>\nhace referencia a seguir la ejecución hasta un siguiente breakpoint o hasta que\ntermine el script, y el segundo (color gris) llamado <em>Step over next function call</em>\nrefiere a seguir el flujo de ejecución del programa.</p>\n<p>A continuación puedes ver lo mencionado en un GIF:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DbS6jAUYz3mPJjyv8MMU-w.gif\" alt=\"Chrome Dev Tools: Breakpoints\"></p>\n<p>Un par de botones que nos ayudan a depurar nuestro código son:\n<em>Step into next function call</em> y <em>Step out of current function</em>. El primero lo\nque nos permite es ingresar al código de una función que usamos en tiempo de\nejecución, mientras que el segundo nos permite salir de la función en la que\nnos encontramos depurando.</p>\n<p>En el siguiente ejemplo, si tuviéramos un breakpoint en la línea 8, y usáramos\nel botón de <em>Step over next function</em>, se iría hacia la línea 9; no obstante, si\nusamos el botón de <em>Step into next function call</em>, ingresaría a la línea de\ncódigo número 2 ya que es el código que está dentro de nuestra función.</p>\n<p>Es momento de probarlo:</p>\n<pre><code class=\"language-javascript\">function factorial(number) {\n  if (number === 1) {\n    return 1;\n  }\n  return number * factorial(number - 1);\n}\n\nconst result = factorial(5);\nconsole.log(result);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*C3k9ZTu-q9i8GFB2P47muQ.gif\" alt=\"Chrome Dev Tools: Debugging\"></p>\n<h2 id=\"debugger-statement\">Debugger Statement</h2>\n<p>El segundo método para depurar un código es usando una palabra reservada en JS\nllamada <code>debugger</code>. Esta sentencia lo que nos permite es especificar en el\ncódigo la línea exacta donde queremos que se detenga nuestra aplicación web para\nser depurada.</p>\n<blockquote>\n<p>Nota: Para que el script se detenga en la sentencia debugger debemos de tener\nel Dev Tools abierto y luego recargar la página.</p>\n</blockquote>\n<p>A continuación una demostración usando el siguiente script:</p>\n<pre><code class=\"language-javascript\">const number = parseInt(prompt('Ingresa un número (del 1 al 10):'));\nconst randomNumber = Math.floor(Math.random() * 10);\n\ndebugger;\nif (randomNumber === number) {\n    console.log('Adivinaste!');\n} else {\n    console.log('Perdiste! El número es ' + randomNumber);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*RcPHfLBSK1Bh8FzfqJlqpQ.gif\" alt=\"Debugger statement\"></p>\n<h2 id=\"ahora-es-tu-turno\">Ahora es tu turno</h2>\n<p>Para poner en práctica esta lectura, puedes depurar el siguiente código:</p>\n<pre><code class=\"language-javascript\">/*\n * Corrige el siguiente código de tal forma que obtengas el resultado esperado,\n * usa las técnicas de depuración que conoces para encontrar y solucionar\n * el error.\n */\n\nconst reverse = (text) =&gt; {\n  let reversedText = '';\n  const textLength = text.length;\n\n  for (let i = textLength; i &gt; 0; i--) {\n    reversedText += text.charAt(i);\n  }\n\n  return reversedText;\n};\n\nconst result = reverse('Laboratoria');\n// Resultado actual: airotaroba\n// Resultado esperado: airotarobaL\nconsole.log(result);\n\n// HINT: Son 2 cambios para que quede correctamente ;)\n</code></pre>\n<p>Así que a partir de ahora…</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*znr2Wn2kXro7XkimgplRCg.jpeg\" alt=\"Debug all the things\"></p>\n",
          "order": 4,
          "durationString": "40min"
        },
        "05-closing": {
          "title": "Cierre: Debugging",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<h2 id=\"agenda\">Agenda</h2>\n<h3 id=\"1-responde-a-las-preguntas-del-opening\">1. Responde a las preguntas del opening</h3>\n<ul>\n<li>¿Por qué es importante la depuración?</li>\n<li>¿Qué tipos de errores podemos encontrar en el desarrollo de software?</li>\n<li>¿Por qué es importante reconocer los mensajes de error? Identifica algunos\nque te hayan sucedido</li>\n<li>¿Qué es el Dev Tools?</li>\n<li>¿Qué son los breakpoints?</li>\n<li>¿Cómo depurar en el Dev Tools?</li>\n</ul>\n<h3 id=\"2-sigue-practicando\">2. Sigue practicando</h3>\n<p><img src=\"http://s2.quickmeme.com/img/32/3231c171a34d1b88ab1768b1ba5ef9f0e9b035f523e197f2b99f83b7856826e3.jpg\" alt=\"Debugging is done\"></p>\n",
          "order": 5,
          "durationString": "10min"
        }
      },
      "order": 9,
      "stats": {
        "duration": 210,
        "durationString": "3.5h",
        "exerciseCount": 5,
        "partCount": 6
      }
    },
    "11-testing": {
      "title": "Testing / Pruebas",
      "bonus": false,
      "description": "<p>Probar tu código es importante para garantizar que funcione como unx espera,\npero no solo eso, si no que escribir pruebas/tests desde el principio nos ayuda\na diseñar mejor nuestro código.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Apertura",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"¿por-qué-aprender-esto\">¿Por qué aprender esto?</h2>\n<p>Probar tu código es importante para garantizar que funcione como unx espera,\npero no solo eso, si no que escribir pruebas/tests desde el principio nos ayuda\na diseñar mejor nuestro código.</p>\n<p>Escribimos tests para:</p>\n<ol>\n<li>Encontrar problemas en la implementación</li>\n<li>Para evitar que problemas/bugs lleguen a producción</li>\n<li>Para probar/demostrar que un programa no tiene fallas</li>\n<li>Para averiguar la fiabilidad de nuestro código</li>\n<li>Para asegurar que un <em>producto</em> se comporte como esperamos</li>\n<li>Para detectar problemas pronto, lo que permite reducir el costo de\nmodificaciones</li>\n</ol>\n<p>En este curso pondremos especial énfasis en el diseño orientado a pruebas (<a href=\"https://en.wikipedia.org/wiki/Test-driven_development\" target=\"_blank\">Test\nDriven Development - TDD</a>).\nEn esta unidad podrás seguir los pasos necesarios para escribir tus primeros\ntests y entender el valor tan grande que aportan.</p>\n<p>A lo largo del curso usaremos tests no solo en el <em>proyecto final</em> sino como\nherramienta para demostrar las diferentes características del lenguaje según\nvayamos avanzando.</p>\n<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\nque debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a medida\nque avanzas para validar que estás avanzando en la dirección correcta. Que te\nsirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<ul>\n<li>Qué es un test?</li>\n<li>Qué es un framework de testing?</li>\n<li>Cómo escribir tests usando la interfaz BDD (<code>describe()</code>, <code>it()</code>, ...) de\n<code>mocha</code>.</li>\n<li>Cómo usar la librería standard de Node.js para aserciones con el módulo\n<code>assert</code>.</li>\n<li>Cómo usar las aserciones de <code>chai</code>.</li>\n<li>Cómo correr tests en un entorno de navegador de forma automatizada con\n<code>karma</code>.</li>\n</ul>\n",
          "order": 0,
          "durationString": "5min"
        },
        "01-basics": {
          "title": "Qué es un test?",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<p>Cuando hablamos de <strong>tests</strong> (pruebas), podríamos ponernos a pensar en\nherramientas de testing, como <code>Mocha</code>, <code>Jest</code>, <code>Jasmine</code>, ... o metodologías de\ndesarrollo como TDD o BDD. Todo esto puede ser super confuso. En esta unidad\ntrataremos de desmitificar un poco este tema empezando desde el principio. Para\nello pensemos en pruebas simplemente como el acto de ejecutar algo en la\ncomputadora y después comprobar que efectivamente ocurrió lo que esperábamos.</p>\n<p>El test más sencillo posible:</p>\n<pre><code class=\"language-js\">const a = 5;\nconsole.log(a);\n</code></pre>\n<p>Podríamos decir que nuestro amigo <code>console.log</code> es la herramienta de testing más\nbásica de todas. Al imprimir un valor a la consola, lo podemos ver con nuestros\nojos y <em>comprobar</em> qué es ese valor (de una forma visual). Estamos probando (o\ncomprobando) que efectivamente la variable <code>a</code> tomó el valor <code>5</code>, que era\nexactamente lo que esperábamos.</p>\n<p>Este proceso nos permite ir viendo qué está ocurriendo en el código mientras lo\nescribimos. Usa <code>console.log</code>, y úsalo mucho. Pero obviamente tiene sus\nlimitaciones. En este caso dependemos de que una persona ejecute el comando, vea\nel <em>output</em> (salida) y en su cabeza haga la comprobación. Muy útil para uno\nmismo, pero no es automatizable ni escalable.</p>\n<p>Por suerte, somos programadorxs, así que podemos escribir un poco de código (y/o\nusar código de otrxs) para atacar estos problemas :rocket:</p>\n<hr>\n<p>Para seguir esta unidad, te recomendamos que crees una carpeta en algún lugar de\ntu computadora y vayas creando los archivos y codeando mientras avanzamos. Todo\nel código de esta lección lo puedes ejecutar con <code>node</code>.</p>\n<hr>\n<p>Ahora imaginemos que queremos una función que dado un caracter, nos diga si es\nuna vocal o no (debería retornar <code>true</code> para las vocales y <code>false</code> para\ncualquier otro caracter). Antes de implementar la función podríamos plantear\nunos <em>tests</em>. Crea un archivo con el nombre <code>isVowel.spec.js</code> y escribe el\nsiguiente código:</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`:\n\nconst isVowel = require('./isVowel');\n\nconsole.log('debería devolver true para letra a');\nif (isVowel('a') === true) {\n  console.log('✓ ok');\n} else {\n  console.error('✗ fail');\n}\n\nconsole.log('debería devolver false para letra b');\nif (isVowel('b') === false) {\n  console.log('✓ ok');\n} else {\n  console.error('✗ fail');\n}\n</code></pre>\n<p>Ejecutemos nuestros tests con <code>node</code> en la línea de comando:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\nmodule.js:557\n    throw err;\n    ^\n\nError: Cannot find module './isVowel'\n    at Function.Module._resolveFilename (module.js:555:15)\n    at Function.Module._load (module.js:482:25)\n    at Module.require (module.js:604:17)\n    at require (internal/module.js:11:18)\n    at Object.&lt;anonymous&gt; (/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:1:79)\n    at Module._compile (module.js:660:30)\n    at Object.Module._extensions..js (module.js:671:10)\n    at Module.load (module.js:573:32)\n    at tryModuleLoad (module.js:513:12)\n    at Function.Module._load (module.js:505:3)\n</code></pre>\n<p>Como vemos recibimos un error: <code>Error: Cannot find module './isVowel'</code>. Los\nerrores pueden ser un poco crípticos al principio, y hay que aprender a\n<em>leerlos</em>. El mensaje de error en sí dice que no se pudo encontrar el módulo\n<code>./isVowel</code>, y debajo tenemos una serie de líneas con el\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\" target=\"_blank\">stack trace</a>,\nque nos muestra la pila de llamadas donde ocurrió el error. En este caso podemos\nver que se menciona nuestro script (<code>/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:1:79</code>),\ny al final de la ruta al archivo vemos que aparecen dos números separados por\ndos puntos (<code>:</code>). Estos números nos dicen en qué línea y qué columna (posición\ndentro de la línea) está el código en cuestión. La línea <code>1</code> contiene\n<code>require('./isVowel')</code>, que es la responsable del error.</p>\n<p>Esto es porque hemos tratado de importar un modulo del archivo <code>./isVowel.js</code> en\nel mismo directorio que nuestro script con los tests, pero obviamente no existe,\nasí que creémoslo y declaremos una función con el nombre <code>isVowel</code>:</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.js`\n\nconst isVowel = function (char) {\n  // ...\n};\n</code></pre>\n<p>Si volvemos a ejecutar los tests, ahora el output mostrado en la consola debería\nverse algo así:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\ndebería devolver true para letra a\n/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:4\nif (isVowel('a') !== true) {\n    ^\n\nTypeError: isVowel is not a function\n    at Object.&lt;anonymous&gt; (/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:6:5)\n    at Module._compile (module.js:660:30)\n    at Object.Module._extensions..js (module.js:671:10)\n    at Module.load (module.js:573:32)\n    at tryModuleLoad (module.js:513:12)\n    at Function.Module._load (module.js:505:3)\n    at Function.Module.runMain (module.js:701:10)\n    at startup (bootstrap_node.js:194:16)\n    at bootstrap_node.js:618:3\n</code></pre>\n<p>Esto quiere decir que ahora sí se ha podido cargar el módulo (el error de antes\nya no aparece), pero ahora recibimos un nuevo error: <code>TypeError: isVowel is not a function</code>. Si nos fijamos en la línea justo abajo del mensaje de error, vemos\nque el error se produjo en el archivo <code>isVowel.spec.js</code> en la línea <code>6</code> y\ncolumna <code>5</code>). Si nos fijamos en el código, veremos que línea <code>6</code> y columna <code>5</code>\nes donde está <code>isVowel('a')</code>. En esta línea es la primera vez que invocamos la\nfunción <code>isVowel</code>, y parece que no es lo que esperábamos (una función, doh!).</p>\n<p>El motivo por el que vemos este error es porque a pesar de que hemos creado el\narchivo <code>isVowel.js</code> y hemos declarado una función con el nombre <code>isVowel</code>, no\nla hemos <em>exportado</em>.</p>\n<p>Más adelante veremos más detalles sobre como <em>exportar</em> usando tanto CommonJS\n(<code>require</code>, <code>module</code>, <code>module.exports</code>) como módulos de ES6 (<code>import</code>,\n<code>export</code>). Por ahora no vamos a detenernos con estos detalles. Lo importante por\nahora es saber que estamos ejecutando nuestro código con <code>node</code>, con lo cual\nvamos a usar el sistema de módulos de <code>node</code> (CommonJS). Cuando usamos este\nsistema, podemos <em>exportar</em> cualquier valor asignándolo a la propiedad <code>exports</code>\ndel objeto global <code>module</code> (<code>module.exports</code>). <code>Node.js</code> se encarga de que el\nobjeto <code>module</code> exista en el ámbito global.</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.js`\n\nconst isVowel = function (char) {\n  // ...\n};\n\nmodule.exports = isVowel;\n</code></pre>\n<p>Ejecutemos los <em>tests</em> una vez más:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\ndebería devolver true para letra a\n✗ fail\ndebería devolver false para letra b\n✗ fail\n</code></pre>\n<p>Yay! Finalmente nuestro script de tests corre sin <em>errores</em>, pero vemos que la\nimplementación de <code>isVowel()</code> todavía no pasa ninguno de los dos tests que\nescribimos.</p>\n<p>Ahora sí, implementamos la funcionalidad esperada en <code>isVowel()</code>:</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.js`\n\nconst isVowel = function (char) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(char) &gt; -1;\n};\n\nmodule.exports = isVowel;\n</code></pre>\n<p>Y volvemos a ejecutar los tests una vez más:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\ndebería devolver true para letra a\n✓ ok\ndebería devolver false para letra b\n✓ ok\n</code></pre>\n<hr>\n<!--\n... pedacitos chiquitos que puedan ser probados de forma aislada...\n-->\n\n<h2 id=\"lecturas-complementarias\">Lecturas complementarias</h2>\n<p><a href=\"https://martinfowler.com/bliki/UnitTest.html\" target=\"_blank\">Unit Test - Martin Fowler</a></p>\n",
          "order": 1,
          "durationString": "20min"
        },
        "02-frameworks": {
          "title": "Frameworks",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<p>Ya hemos visto un poco de qué hacemos cuando testeamos y por qué lo hacemos.\nAhora vamos a ir introduciendo algunas herramientas para facilitar ese proceso\nde tener que ejecutar algo y comprobar si ha ocurrido lo que esperábamos.</p>\n<p>Hay un montón de frameworks y librerías buenísimas de testing para JavaScript:\n<a href=\"https://mochajs.org/\" target=\"_blank\">Mocha</a>, <a href=\"https://facebook.github.io/jest/\" target=\"_blank\">Jest</a>,\n<a href=\"https://jasmine.github.io/\" target=\"_blank\">Jasmine</a>, <a href=\"https://github.com/substack/tape\" target=\"_blank\">Tape</a>,\n... por mencionar algunas de las más populares.</p>\n<blockquote>\n<p>Unit testing involves breaking your program into pieces, and subjecting each\npiece to a series of tests.</p>\n<p>Usually tests are run as separate programs, but the method of testing varies,\ndepending on the language, and type of software (GUI, command-line, library).</p>\n<p>Most languages have unit testing frameworks, you should look into one for\nyours.</p>\n<p>Tests are usually run periodically, often after every change to the source\ncode. The more often the better, because the sooner you will catch problems.</p>\n<p>Fuente: <a href=\"https://stackoverflow.com/a/652309/374331\" target=\"_blank\">Stack Overflow</a></p>\n</blockquote>\n<p>En este curso nos vamos a concentrar en <strong>Mocha</strong>, y en particular en la\ninterfaz <a href=\"https://mochajs.org/#bdd\" target=\"_blank\">BDD</a>, que implementa una API para hacer\n<a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\">Behavior-driven development</a>.</p>\n<h2 id=\"instalando-mocha\">Instalando Mocha</h2>\n<p>Para empezar instalemos <code>mocha</code> globalmente usando <code>npm</code>.</p>\n<pre><code class=\"language-sh\">npm install --global mocha\n</code></pre>\n<p>Alternativamente, si te gustan las abreviaciones, puedes usar este otro comando,\nque hace exactamente lo mismo que el anterior, pero usando todos los atajos.</p>\n<pre><code class=\"language-sh\">npm i -g mocha\n</code></pre>\n<p>Si recibes un error que dice algo como <code>Error: EACCES: permission denied ...</code>,\nesto probablemente significa que no tienes permisos sobre la carpeta donde está\ninstalado <code>Node.js</code> globalmente. En ese caso puedes probar a ejecutar el comando\nusando <code>sudo</code>:</p>\n<pre><code class=\"language-sh\">sudo npm i -g mocha\n</code></pre>\n<p>Si todo ha ido bien, ya deberías tener <code>mocha</code> instalado como un comando que\npuedes ejecutar en tu terminal. Podemos usar el comando <code>which</code> para ver si se\nencuentra el ejecutable:</p>\n<pre><code class=\"language-sh\">$ which mocha\n/usr/local/bin/mocha\n</code></pre>\n<p>Si <code>mocha</code> no estuviera instalado en tu <code>PATH</code> el comando <code>which</code> no mostraría\nnada. Por otro lado, ahora que sabemos que tenemos el ejecutable de <code>mocha</code>\ndisponible, podemos ver la ayuda del comando ejecutando <code>mocha --help</code>:</p>\n<pre><code class=\"language-sh\">$ mocha --help\n\n  Usage: mocha [debug] [options] [files]\n\n\n  Options:\n\n    -V, --version                           output the version number\n    -A, --async-only                        force all tests to take a callback (async) or return a promise\n    -c, --colors                            force enabling of colors\n    -C, --no-colors                         force disabling of colors\n    -G, --growl                             enable growl notification support\n    -O, --reporter-options &lt;k=v,k2=v2,...&gt;  reporter-specific options\n    -R, --reporter &lt;name&gt;                   specify the reporter to use\n    -S, --sort                              sort test files\n    -b, --bail                              bail after first test failure\n    ...\n\n\n  Commands:\n\n    init &lt;path&gt;  initialize a client-side mocha setup at &lt;path&gt;\n</code></pre>\n<h2 id=\"nuestros-primeros-tests-con-la-interfaz-bdd\">Nuestros primeros tests con la interfaz BDD</h2>\n<p>Ahora que ya tenemos instalado <code>mocha</code>, podemos usar el comando para ejecutar\nscripts con nuestros tests, usando todo lo que nos ofrece la librería.</p>\n<p>Para comenzar nos vamos a limitar a dos funciones que <code>mocha</code> inyecta en el\nentorno: <code>describe()</code> e <code>it()</code>. Estas dos funciones nos va a permitir construir\nla estructura de qué queremos testear.</p>\n<p>En el ejemplo que venimos viendo, nuestros test dicen algo como: comprueba que\n<em>isVowel()</em>:</p>\n<ul>\n<li>retorna <code>true</code> cuando se invoca con el valor <code>a</code> (<code>isVowel('a') === true</code>)</li>\n<li>retorna <code>false</code> cuando se invoca con el valor <code>b</code> (<code>isVowel('b') === false</code>)</li>\n</ul>\n<p>Esta lógica la podemos expresar usando <code>describe()</code> e <code>it()</code>. Con <code>describe()</code>\nvamos a decir qué cosa estamos testeando, y con <code>it()</code> vamos a ir especificando\nque características o comportamientos queremos comprobar/afirmar.</p>\n<p>Reescribamos nuestros tests usando esta API (<code>describe</code> e <code>it</code>). El primer paso\nes indicar qué queremos testear (la función <code>isVowel()</code> en nuestro caso) usando\nuna llamada a <code>describe()</code>, que recibe dos argumentos, un string informativo\npara darle un nombre al grupo de tests y una función que contendrá todos los\ntests y aserciones para esta cosa que estamos testeando.</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`\n\ndescribe('isVowel()', () =&gt; {\n  // Acá van los tests que describen el compartamiento de `isVowel()`\n});\n</code></pre>\n<p>Salva esto en el archivo <code>isVowel.spec.js</code> y ejecútalo con <code>mocha</code>:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  0 passing (2ms)\n</code></pre>\n<p>No recibimos ningún error pero tampoco pasa nada interesante... solo vemos que\n<code>0</code> tests pasaron. A la hora de escribir tests (ya sea antes o después de\nimplementar el código que queremos testear), es muy común plantear tests sin\ndarles una implementación todavía. En nuestro caso, sabemos que queremos probar\nque <code>isVowel()</code>:</p>\n<ul>\n<li>retorna <code>true</code> cuando se invoca con el valor <code>a</code></li>\n<li>retorna <code>false</code> cuando se invoca con el valor <code>b</code></li>\n</ul>\n<p>Esto traducido a la semántica de BDD en Mocha, lo podemos expresar así:</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`\n\ndescribe('isVowel()', () =&gt; {\n  it('debería devolver true para letra a');\n  it('debería devolver false para letra b');\n});\n</code></pre>\n<p>Volvamos a ejecutar los tests con el comando <code>mocha</code>:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n    - debería devolver true para letra a\n    - debería devolver false para letra b\n\n\n  0 passing (5ms)\n  2 pending\n</code></pre>\n<p>Verás de que todavía no hemos especificado cómo hacer las comprobaciones, pero\nhemos ido igualmente describiendo el comportamiento esperado, y más tarde\npodemos ir rellenando la implementación según avancemos. Esto es super útil\ntanto para <em>documentar</em> el comportamiento de nuestro código, como para ver el\nnivel de completitud de la implementación y qué casos tiene en cuenta (o no).</p>\n<p>En el snippet anterior invocamos <code>it()</code> con un string que nos permite describir\nla característica o comportamiento esperado. Lo más común es que estos strings\ncomiencen con la palabra <em>debería...</em>. De es forma se va articulando la\nsemántica que después <em>leeremos</em> como <em>is isVowel() debería ....</em>.</p>\n<p>Mocha nos muestra los tests que añadimos con <code>it()</code> pero nos dice que están\n<em>pendientes</em>. Esto es porque les dimos un nombre, pero no les dimos una\nimplementación. Para añadir el código que de verdad ejecuta la prueba en sí,\n<code>it()</code> recibe un segundo argumento, una función que será invocada para ejecutar\nel test en cuestión.</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`\n\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('debería devolver true para letra a', () =&gt; {\n    // Acá invocamos `isVowel()` y verificamos el resultado\n  });\n\n  it('debería devolver false para letra b', () =&gt; {\n    // Acá invocamos `isVowel()` y verificamos el resultado\n  });\n\n});\n</code></pre>\n<p>Bueno, ya tenemos una estructura lista para implementar nuestros tests. Para\ncontinuar gradualmente con el ejemplo, simplemente copia las comprobaciones que\nhacíamos en la primera versión de los tests (lectura anterior) dentro de nuestra\nnueva estructura:</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`\n\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('debería devolver true para letra a', () =&gt; {\n    if (isVowel('a') !== true) {\n      console.error('✗ fail');\n    } else {\n      console.log('✓ ok');\n    }\n  });\n\n  it('debería devolver false para letra b', () =&gt; {\n    if (isVowel('b') !== false) {\n      console.error('✗ fail');\n    } else {\n      console.log('✓ ok');\n    }\n  });\n\n});\n</code></pre>\n<p>Ejecutemos los tests otra vez:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n✓ ok\n    ✓ debería devolver true para letra a\n✓ ok\n    ✓ debería devolver false para letra b\n\n\n  2 passing (6ms)\n</code></pre>\n<p>Hmmm... como puedes ver se ejecutaron nuestras comprobaciones, pero Mocha y\nnuestro código no parecen estar comunicándose. Eso es porque Mocha espera que\nhagamos las comprobaciones usando <em>aserciones</em>, que puedan comunicar si una\ncomprobación pasó o no a mocha para que este pueda manejar los resultados, en\nvez de tener que <em>manualmente</em> imprimir mensajes a la consola.</p>\n<p>En la siguiente lectura veremos como usar <em>aserciones</em> en tus tests, tanto en\nversión vanilla, con <code>assert</code> de Node.js y con <code>Chai.assert</code>.</p>\n",
          "order": 2,
          "durationString": "30min"
        },
        "03-assertions": {
          "title": "Aserciones",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<p>En las lecturas anteriores hemos visto como usar <code>mocha</code> para construir la\nestructura de qué queremos probar/testear, pero todavía nos falta hacer las\ncomprobaciones/aserciones que nos permitan verificar si el código que estamos\nprobando se comporta como esperamos.</p>\n<p>Para hacer esto usamos las <em>aserciones</em>. Una <em>aserción</em> no es más que un\npedacito de código que comprueba si un valor es el esperado, y en caso de que no\nlo sea lo reporte. De esta forma, si en el futuro cambiara algo en el\ncomportamiento del código, los tests nos permitirían ver exactamente qué.</p>\n<h2 id=\"vanilla\">Vanilla</h2>\n<p>Empecemos por implementar nuestra propia <em>aserción</em> de igualdad. Esto no es más\nque una función que compara dos valores para ver si son iguales, y en caso de\nque no lo sean bota un error con un mensaje informativo.</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`\n\nconst isVowel = require('./isVowel');\n\nconst assertEqual = (value, expected) =&gt; {\n  if (value !== expected) {\n    throw new Error(`Expected '${value}' to equal '${expected}'`);\n  }\n};\n\ndescribe('isVowel()', () =&gt; {\n\n  it('debería devolver true para letra a', () =&gt; {\n    assertEqual(isVowel('a'), true);\n  });\n\n  it('debería devolver false para letra a', () =&gt; {\n    assertEqual(isVowel('b'), false);\n  });\n\n});\n</code></pre>\n<p>Ejecutemos los tests otra vez.</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n    ✓ debería devolver true para letra a\n    ✓ debería devolver false para letra a\n\n\n  2 passing (8ms)\n</code></pre>\n<p>Ahora todo el output que vemos es producido por Mocha (ya no hay output que\nprovenga de nuestros <code>console.log</code>s), y vemos que ambos tests pasan.</p>\n<p>Solo para probar (y valga la redundancia) modifiquemos (mejor dicho rompamos) la\nimplementación de <code>isVowel</code> para ver que nuestros tests efectivamente reporten\nlos problemas.</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.js`\n\nconst isVowel = function (char) {\n  return ['b', 'e', 'i', 'o', 'u'].indexOf(char) &gt; -1;\n};\n\nmodule.exports = isVowel;\n</code></pre>\n<p>Hemos cambiado la <code>a</code> por una <code>b</code>. Y nuestros tests ahora debería mostrar output\ncomo:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n    1) debería devolver true para letra a\n    2) debería devolver false para letra b\n\n\n  0 passing (7ms)\n  2 failing\n\n  1) isVowel()\n       debería devolver true para letra a:\n     Error: Expected 'false' to equal 'true'\n      at assertEqual (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:7:11)\n      at Context.it (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:14:5)\n\n  2) isVowel()\n       debería devolver false para letra b:\n     Error: Expected 'true' to equal 'false'\n      at assertEqual (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:7:11)\n      at Context.it (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:18:5)\n</code></pre>\n<p>Como vemos los tests se comportan como esperábamos!</p>\n<p>Este ejemplo es ilustrativo, pero en el mundo real probablemente no vas a querer\nimplementar tu propio código de aserciones (no solo de igualdad, si no todo tipo\nde comparaciones). Lo más común es usar una dependencia externa (una librería o\nmódulo) como veremos en los próximos ejemplos.</p>\n<h2 id=\"módulo-assert-de-nodejs\">Módulo assert de Node.js</h2>\n<p>Node.js incluye su propio módulo de aserciones sin necesidad de tener que\ninstalar ninguna dependencia. Si estás corriendo tus tests en Node.js, es muy\ncomún usar este módulo (<code>assert</code>), a menos de que la librería o framework que\nestés usando ya incluya su propio sistema de aserciones (por ejemplo <code>Jest</code>).</p>\n<p>Reemplacemos nuestra función <code>assertEqual</code> con el módulo <code>assert</code> de Node.js:</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`\n\nconst assert = require('assert');\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('debería devolver true para letra a', () =&gt; {\n    assert.equal(isVowel('a'), true);\n  });\n\n  it('debería devolver false para letra a', () =&gt; {\n    assert.equal(isVowel('b'), false);\n  });\n\n});\n</code></pre>\n<p><a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\">Assert - Node.js Documentation</a></p>\n<h2 id=\"chaiassert\">Chai.assert</h2>\n<p>Mocha no incluye una interfaz para aserciones, y en el navegador no tenemos el\nmódulo <code>assert</code> de Node.js. Así que es muy común usar Mocha en conjunto con\n<code>Chai</code>, que es una librería de aserciones que nos ofrece varias interfaces,\nentre ellas una muy parecida al <code>assert</code> de Node.js:</p>\n<pre><code class=\"language-js\">// Archivo `isVowel.spec.js`\n\nconst { assert } = require('chai');\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('debería devolver true para letra a', () =&gt; {\n    assert.equal(isVowel('a'), true);\n  });\n\n  it('debería devolver false para letra a', () =&gt; {\n    assert.equal(isVowel('b'), false);\n  });\n\n});\n</code></pre>\n<p><a href=\"http://chaijs.com/\" target=\"_blank\">Chai - Documentación oficial</a></p>\n<h2 id=\"lecturas-complementarias\">Lecturas complementarias</h2>\n<ul>\n<li><a href=\"https://medium.com/@hbarcelos/bdd-made-simple-in-node-js-with-mocha-and-chai-3a3ce44ecce2\" target=\"_blank\">BDD made simple in Node.JS with Mocha and Chai - @hbarcelos en medium.com</a></li>\n</ul>\n",
          "order": 3,
          "durationString": "30min"
        },
        "04-browser": {
          "title": "Tests en el navegador",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>Hasta este punto hemos estado ejecutando nuestros tests con Node.js, pero como\nfront-end developers nos interesa también poder ejcutar nuestros tests en un\nentorno de navegador, con un <code>window</code> y un <code>DOM</code> de verdad. Esto nos va a\npermitir automatizar tests así como hacer <em>cross-browser</em> testing y probar\nnuestro código en distintos navegadores.</p>\n<p>Imagina que tienes una página web con una lista no ordenada (<code>ul</code>), algo así:</p>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li&gt;Betty Snyder Holberton&lt;/li&gt;\n  &lt;li&gt;Jean Jennings Bartik&lt;/li&gt;\n  &lt;li&gt;Kathleen McNulty Mauchly Antonelli&lt;/li&gt;\n  &lt;li&gt;Marlyn Wescoff Meltzer&lt;/li&gt;\n  &lt;li&gt;Ruth Lichterman Teitelbaum&lt;/li&gt;\n  &lt;li&gt;Frances Bilas Spence&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Y los usuarios te han estado pidiendo un <em>feature</em> para que los textos que\naparecen en la lista salgan con todas las vocales en mayúscula. Es una petición\nun poco extraña, pero la vida misma es muy extraña...</p>\n<p>Para implementar este <em>feature</em> acuerdas con tu equipo que necesitan una función\nque reciba un string y retorne otro string en el cual se hayan reemplazado todas\nlas vocales en minúsculas por mayúsculas. Necesitamos una función con la\nsiguiente firma (<em>signature</em>):</p>\n<pre><code class=\"language-js\">string makeVowelsUpperCase(string)\n</code></pre>\n<p>Si esta función existiera, sabemos que podríamos seleccionar los nodos que\nqueremos (los <code>&lt;li&gt;</code>) y remplazar su contenido con lo que retorne\n<code>makeVowelsUpperCase()</code> pasándole el contenido original.</p>\n<pre><code class=\"language-js\">[...document.querySelectorAll('li')]\n  .forEach(el =&gt; el.innerHTML = makeVowelsUpperCase(el.innerHTML));\n</code></pre>\n<p>Antes de asignarle a nadie la implementación de esta función, decidimos escribir\nalgunos tests para que sirvan de guía y describan el comportamiento esperado. En\nuna carpeta nueva, crea un archivo con el nombre <code>makeVowelsUpperCase.spec.js</code> y\nañade los siguientes tests:</p>\n<pre><code class=\"language-js\">describe('makeVowelsUpperCase()', () =&gt; {\n\n  it('debería convertir \"hola mundo\" en \"hOlA mUndO\"', () =&gt; {\n    assert.equal(makeVowelsUpperCase('hola mundo'), 'hOlA mUndO');\n  });\n\n  it('debería convertir \"Betty Snyder Holberton\" en \"BEtty SnydEr HOlbErtOn\"', () =&gt; {\n    assert.equal(\n      makeVowelsUpperCase('Betty Snyder Holberton'),\n      'BEtty SnydEr HOlbErtOn'\n    );\n  });\n\n});\n</code></pre>\n<p>Como punto de partida de la implementación, por ahora simplemente creemos un\narchivo con el nombre <code>makeVowelsUpperCase.js</code> en la misma carpeta donde creaste\nel archivo anterior con los tests. En este archivo por ahora solo vamos a\ndeclarar una función que recibe un argumento y retorna el argumento tal y como\nlo recibió.</p>\n<pre><code class=\"language-js\">const makeVowelsUpperCase = function (string) {\n  return string;\n};\n</code></pre>\n<p>Para poder ejecutar los tests en el navegador empecemos por crear un archivo\nHTML con el nombre <code>test.html</code>.</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=utf-8&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"mocha\"&gt;&lt;/div&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/chai/4.1.2/chai.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"./makeVowelsUpperCase.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      const { assert } = chai;\n      mocha.setup('bdd');\n    &lt;/script&gt;\n    &lt;script src=\"./makeVowelsUpperCase.spec.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;mocha.run();&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Este archivo HTML hace lo siguiente:</p>\n<ol>\n<li><p>Añade la hoja de estilos de <code>mocha</code> desde el CDN de <a href=\"https://cdnjs.com/\" target=\"_blank\">cdnjs</a></p>\n<pre><code class=\"language-html\">&lt;link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.css\"\n/&gt;\n</code></pre>\n</li>\n<li><p>Añade un <code>&lt;div&gt;</code> con <code>id=\"mocha\"</code> para que mocha escriba los resultados</p>\n<pre><code class=\"language-html\">&lt;div id=\"mocha\"&gt;&lt;/div&gt;\n</code></pre>\n</li>\n<li><p>Añade <code>mocha</code> y <code>chai</code> desde CDN de <a href=\"https://cdnjs.com/\" target=\"_blank\">cdnjs</a></p>\n<pre><code class=\"language-html\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/chai/4.1.2/chai.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>Incluímos el código que queremos testear (el archivo\n<code>makeVowelsUpperCase.js</code>) que acabamos de crear.</p>\n<pre><code class=\"language-html\">&lt;script src=\"./makeVowelsUpperCase.js\"&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>Guardamos una referencia a <code>chai.assert</code> en la constante <code>assert</code> en entorno\nglobal para poder usar directamente <code>assert</code> en los tests (en vez de\n<code>chai.assert</code>);</p>\n<pre><code class=\"language-js\">const { assert } = chai;\n</code></pre>\n</li>\n<li><p>Inicializa la interfaz BDD de <code>mocha</code></p>\n<pre><code class=\"language-js\">mocha.setup('bdd');\n</code></pre>\n</li>\n<li><p>Incluimos todos los tests que queramos correr</p>\n<pre><code class=\"language-html\">&lt;script src=\"./makeVowelsUpperCase.spec.js\"&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>Finalmente ejecutamos los tests.</p>\n<pre><code class=\"language-js\">mocha.run();\n</code></pre>\n</li>\n</ol>\n<p>Ya tenemos un entorno donde ejecutar los tests en el navegador. Abre el archivo\n<code>test.html</code> en tu navegador y deberías ver algo así:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/34898926-a840563a-f7c3-11e7-8872-c3f3a1f5339d.png\" alt=\"Output de Mocha en navegador\"></p>\n<p>Esto nos muestra que nuestros tests han corrido, pero la implementación actual\nde <code>makeVowelsUpperCase</code> no pasa los tests ya que no retorna los valores\nesperados.</p>\n<p>Ya estamos listos para asignarle el trabajo de implementar la función a una\ncompañera, quien tendrá clara cuál es la intención de la función y su\ncomportamiento esperado. Los tests le permitirán saber si la implementación se\najusta o no a los requerimientos.</p>\n<p>Continuemos imaginando... digamos que han pasado unos días y Pepita, una\ncompañera, nos envía una implementación de <code>makeVowelsUpperCase</code> para que la\nrevisemos. Antes de siquiera leer su código, primero vamos a ejecutar los tests.\nAsegúrate de reemplazar el código en el archivo <code>makeVowelsUpperCase.js</code> con el\nde Pepita:</p>\n<pre><code class=\"language-js\">const isVowel = function (char) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n  for (let i = 0; i &lt; vowels.length; i++) {\n    if (char === vowels[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst makeVowelsUpperCase = function (string) {\n  let result = '';\n\n  for (let i = 0; i &lt; string.length; i++) {\n    if (isVowel(string[i])) {\n      result += string[i].toUpperCase();\n    } else {\n      result += string[i];\n    }\n  }\n\n  return result;\n};\n</code></pre>\n<p>Si ahora abrimos otra vez el archivo <code>test.html</code> veremos lo siguiente.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/34899917-c8f6d402-f7c9-11e7-9e69-c00ed149d0e0.png\" alt=\"Output de Mocha en navegador con tests aprobados\"></p>\n<p>Parece que el código de Pepita pasa todos los tests :tada:</p>\n<hr>\n<p>Pero ahí no termina la historia... han pasado unos días, el código de Pepita ya\nestá en producción, y recibimos un reporte de un <em>bug</em>: las vocales con acento\nno se están transformando a mayúsculas! Gracias a que tenemos tests para esta\nfunción, podemos rápidamente escribir un nuevo test para replicar y confirmar\nel problema reportado, así que añadimos el siguiente test a nuestro archivo\n<code>makeVowelsUpperCase.spec.js</code>:</p>\n<pre><code class=\"language-js\">it('debería convertir vocales con acento', () =&gt; {\n  assert.equal(makeVowelsUpperCase('cómo estás?'), 'cÓmO EstÁs?');\n});\n</code></pre>\n<p>Si volvemos a ejecutar los test podemos ver que efectivamente el nuevo test no\npasa:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/34906409-37ba7ecc-f83b-11e7-9500-10b5d1b49842.png\" alt=\"image\"></p>\n<p>En la siguiente lectura veremos como arreglar esto.</p>\n",
          "order": 4,
          "durationString": "15min"
        },
        "10-closing": {
          "title": "Cierre",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"resumen\">Resumen</h2>\n<p>Llegamos al final de la unidad ;-)</p>\n<h2 id=\"respondamos-juntxs-las-preguntas-de-la-apertura\">Respondamos juntxs las preguntas de la apertura</h2>\n<ul>\n<li>Qué es un test?</li>\n<li>Qué es un framework de testing?</li>\n<li>Cómo escribir tests usando la interfaz BDD (<code>describe()</code>, <code>it()</code>, ...) de\n<code>mocha</code>.</li>\n<li>Cómo usar la librería standard de Node.js para aserciones con el módulo\n<code>assert</code>.</li>\n<li>Cómo usar las aserciones de <code>chai</code>.</li>\n</ul>\n",
          "order": 5,
          "durationString": "5min"
        }
      },
      "order": 10,
      "stats": {
        "duration": 105,
        "durationString": "1.8h",
        "exerciseCount": 0,
        "partCount": 6
      }
    }
  },
  "grades": "",
  "contributors": "",
  "books": "<ul>\n<li><a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a>, Marijn Haverbeke, 2014</li>\n<li><a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\">JavaScript for kids</a>,\nNick Morgan, 2015</li>\n<li><a href=\"http://shop.oreilly.com/product/9780596517748.do\">JavaScript: The Good Parts</a>,\nDouglas Crockford, O&#39;Reilly Media</li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">You Don&#39;t Know JS</a>, Kyle Simpson,\nO&#39;Reilly Media</li>\n<li><a href=\"https://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182/ref=as_li_ss_tl?ie=UTF8&amp;redirect=true&amp;linkCode=ll1&amp;tag=eejs-20&amp;linkId=4c5500843ce7dc958e290bdaeebd739b\">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a>,\nDavid Herman, 2013</li>\n<li><a href=\"http://shop.oreilly.com/product/9780596805531.do\">JavaScript: The Definitive Guide</a>,\nDavid Flanagan, O&#39;Reilly Media</li>\n</ul>\n",
  "benchmarks": "",
  "references": "",
  "repo": "Laboratoria/bootcamp",
  "path": "topics/javascript",
  "version": "4.0.0",
  "parserVersion": "3.1.0",
  "track": "js",
  "locale": "es-ES",
  "stats": {
    "duration": 2100,
    "durationString": "35h",
    "exerciseCount": 50,
    "unitCount": 11,
    "partCount": 59
  }
}
