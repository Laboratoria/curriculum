{
  "slug": "browser",
  "createdAt": "2022-03-14T14:32:06.404Z",
  "title": "Browser JavaScript",
  "description": "<p>Este <em>tópico</em> cubre JavaScript en el contexto del navegador.</p>\n",
  "tags": {
    "secondary": {},
    "primary": {}
  },
  "targetAudience": "<p>...</p>\n",
  "dependencies": "<p>...</p>\n",
  "learningObjectives": "<ul>\n<li>...</li>\n<li>Qué es un Browser API y como utilizarlas</li>\n<li>Qué es un API y qué APIs nos ofrece HTML5</li>\n<li>...</li>\n</ul>\n",
  "product": "",
  "syllabus": {
    "02-dom": {
      "title": "DOM",
      "bonus": false,
      "description": "<p>...</p>\n",
      "parts": {
        "00-opening": {
          "title": "Opening: Haciendo tu sitio web interactivo",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>En esta unidad aprenderemos:</p>\n<ul>\n<li>¿Qué es el DOM y para qué nos sirve manipularlo?</li>\n<li>¿Qué es el BOM y para qué nos sirve manipularlo?</li>\n<li>¿Qué es un evento y cuál es su utilidad?</li>\n</ul>\n<h2 id=\"¿por-qué-aprender-esto\">¿Por qué aprender esto?</h2>\n<p>Cuando estamos construyendo sitios web, llega un momento en donde necesitamos\ndarle funcionalidad dinámica a nuestra página (que cambie conforme pasa el\ntiempo). Puede ser alguna animación, el tamaño de un texto, la visibilidad de\nuna imagen, etc.</p>\n<p>El DOM, BOM y eventos nos permiten hacer esas manipulaciónes si sabemos\nutilizarlos.</p>\n<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\na los que debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a medida\nque avanzas para validar que estás avanzando en la dirección correcta. Que te\nsirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<h3 id=\"dom\">DOM</h3>\n<ul>\n<li>¿Qué es el DOM?</li>\n<li>¿Qué es un selector?</li>\n<li>¿Cuál es la diferencia entre document.getElementById\ndocument.getElementsByClassName?</li>\n<li>¿Cómo preguntamos por los hijos de un elemento usando el DOM?</li>\n<li>¿Cómo preguntamos por el padre de un elemento usando el DOM?</li>\n<li>¿Qué atributos CSS de un elemento se pueden modificar usando el DOM?</li>\n<li>¿Cómo podemos simular animación entre elementos HTML?</li>\n</ul>\n<h3 id=\"bom\">BOM</h3>\n<ul>\n<li>¿Qué es el BOM?</li>\n<li>¿En qué se relaciona el DOM con el BOM?</li>\n<li>¿Cuáles son algunos usos comunes del BOM?</li>\n</ul>\n<h3 id=\"modificando-el-dom\">Modificando el DOM</h3>\n<ul>\n<li>¿Se pueden crear nuevos nodos usando el DOM?</li>\n<li>¿Qué es un nodo?</li>\n<li>¿Cuántos tipos de nodos existen?</li>\n<li>¿Por qué decimos que el DOM tiene nodos?</li>\n<li>¿Por qué decimos que el DOM tiene nodos de objetos?</li>\n<li>¿Cómo accedemos a la propiedad style de body usando el DOM?</li>\n<li>¿Cuál es el nodo origen en el DOM?</li>\n<li>¿Cuál es el nodo origen en el BOM?</li>\n<li>¿Cuál es la diferencia entre nodo y elemento?</li>\n</ul>\n<h3 id=\"eventos\">Eventos</h3>\n<ul>\n<li>¿Qué es un evento?</li>\n<li>¿Cuáles son los eventos más utilizados en un navegador?</li>\n<li>¿Cómo detectamos un \"click\" del usuario?</li>\n<li>¿Cómo detectamos una entrada de texto del usuario?</li>\n<li>¿Cómo detectamos el envío de un formulario?</li>\n<li>¿Podemos usar el evento submit a un input text?</li>\n<li>¿De que nos sirve la palabra reservada \"event\" o \"e\"?</li>\n<li>¿Cómo podemos almacenar o pasar información entre elementos HTML?</li>\n<li>¿Qué es event delegation?</li>\n<li>¿Qué es event propagation?</li>\n<li>¿Cómo definimos eventos propios?</li>\n<li>¿Cuál es la diferencia entre onClick y addEventListener(\"click\")?</li>\n</ul>\n",
          "order": 0,
          "durationString": "20min"
        },
        "01-dom": {
          "title": "Document Object Model (DOM)",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=D93IP_n6kj8",
              "id": "D93IP_n6kj8"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>En esta unidad aprenderemos:</p>\n<ul>\n<li>¿Qué es el DOM y para qué nos sirve?</li>\n<li>¿Qué es un nodo?</li>\n<li>¿Qué es el árbol de nodos?</li>\n<li>Conocer las propiedades para identificar los diferentes tipos de nodos del DOM:<ul>\n<li><code>nodeName</code></li>\n<li><code>nodeType</code></li>\n<li><code>nodeValue</code></li>\n</ul>\n</li>\n<li>Conocer las siguientes propiedades para navegar a través de los nodos del DOM (Traversing):<ul>\n<li><code>parentNode</code></li>\n<li><code>childNodes</code></li>\n<li><code>firstChild</code></li>\n<li><code>lastChild</code></li>\n<li><code>previousSibling</code></li>\n<li><code>previousElementSibling</code></li>\n<li><code>nextSibling</code></li>\n<li><code>nextElementSibling</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"¿qué-es-el-dom\">¿Qué es el DOM?</h2>\n<p>La creación del Document Object Model o <code>DOM</code> es una de las innovaciones\nque más ha influido en el desarrollo de las páginas web dinámicas y de las\naplicaciones web más complejas.</p>\n<p><code>DOM</code> es una herramienta que permite a los programadores web acceder y manipular\nlas páginas XHTML como si fueran documentos XML. De hecho, DOM se diseñó\noriginalmente para manipular de forma sencilla los documentos XML.</p>\n<p>A pesar de sus orígenes, <code>DOM</code> se ha convertido en una utilidad disponible para\nla mayoría de lenguajes de programación (Java, PHP, JavaScript) y cuyas únicas\ndiferencias se encuentran en la forma de implementarlo.</p>\n<p>Una de las tareas habituales en la programación de aplicaciones web con\nJavaScript consiste en la manipulación de las páginas web. De esta forma,\nes habitual obtener el valor almacenado por algunos elementos (por ejemplo\nlos elementos de un formulario), crear un elemento (párrafos, <code>&lt;div&gt;</code>, etc.)\nde forma dinámica y añadirlo a la página, aplicar una animación a un elemento\n(que aparezca/desaparezca, que se desplace, etc.).</p>\n<p>Todas estas tareas habituales son muy sencillas de realizar gracias a <code>DOM</code>, sin\nembargo, para poder realizar dichas tareas es necesario <code>\"transformar\"</code> la\npágina original.</p>\n<p>Una página HTML no es más que una sucesión de caracteres, por lo que es un\nformato muy difícil de manipular por esta razón, los navegadores web (Chrome,\nMozilla, IE, etc) transforman automáticamente todas las páginas web en una\nestructura más eficiente de manipular.</p>\n<p>Esta transformación la realizan todos los navegadores de forma automática y nos\npermite utilizar las herramientas de <code>DOM</code> de forma muy sencilla.</p>\n<p><code>DOM</code> transforma todos los documentos XHTML en un conjunto de elementos llamados\n<code>nodos</code>, que están interconectados y que representan el contenido de la página\nweb y la relacion entre ellos. Por su aspecto, la unión de todos los nodos se\nllama <code>\"árbol de nodos\"</code> tal y como se muestra en la imagen.</p>\n<table>\n<thead>\n<tr>\n<th>Página Web (1)</th>\n<th>Árbol de Nodos DOM (2)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>![Página web][x]</td>\n<td>![DOM][y]</td>\n</tr>\n</tbody></table>\n<h2 id=\"tipos-de-nodos\">Tipos de Nodos</h2>\n<p>La transformación automática de la página en un árbol de nodos siempre sigue las\nmismas reglas.</p>\n<ul>\n<li><code>Las etiquetas XHTML se transforman en dos nodos</code></li>\n</ul>\n<blockquote>\n<p>El primero es la propia etiqueta y el segundo nodo es hijo del primero y\nconsiste en el contenido textual de la etiqueta.</p>\n</blockquote>\n<ul>\n<li><code>Si una etiqueta XHTML se encuentra dentro de otra</code></li>\n</ul>\n<blockquote>\n<p>Se sigue el mismo procedimiento anterior, pero los nodos generados serán\nnodos hijo de su etiqueta padre.</p>\n</blockquote>\n<p>Como se puede suponer, las páginas XHTML habituales producen árboles con\nmiles de nodos. Aun así, el proceso de transformación es rápido y automático,\nsiendo las funciones proporcionadas por DOM (que se verán más adelante) las\núnicas que permiten acceder a cualquier nodo de la página de forma sencilla\ne inmediata.</p>\n<p>La especificación completa de <code>DOM</code> define 12 tipos de nodos, los cuales se\ndetallan a continuación:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Nombre del Nodo</th>\n<th align=\"center\">Significado</th>\n<th align=\"right\">Tipo de Nodo</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ELEMENT_NODE</td>\n<td align=\"center\">Nodo del tipo <code>Element</code></td>\n<td align=\"right\">1</td>\n</tr>\n<tr>\n<td align=\"left\">ATTRIBUTE_NODE</td>\n<td align=\"center\">Nodo del tipo <code>Attr</code></td>\n<td align=\"right\">2</td>\n</tr>\n<tr>\n<td align=\"left\">TEXT_NODE</td>\n<td align=\"center\">Nodo del tipo <code>Text</code></td>\n<td align=\"right\">3</td>\n</tr>\n<tr>\n<td align=\"left\">CDATA_SECTION_NODE</td>\n<td align=\"center\">Nodo del tipo <code>CDATASection</code></td>\n<td align=\"right\">4</td>\n</tr>\n<tr>\n<td align=\"left\">ENTITY_REFERENCE_NODE</td>\n<td align=\"center\">Nodo del tipo <code>EntityReference</code></td>\n<td align=\"right\">5</td>\n</tr>\n<tr>\n<td align=\"left\">ENTITY_NODE</td>\n<td align=\"center\">Nodo del tipo <code>Entity</code></td>\n<td align=\"right\">6</td>\n</tr>\n<tr>\n<td align=\"left\">PROCESSING_INSTRUCTION_NODE</td>\n<td align=\"center\">Nodo del tipo <code>ProcessingInstruction</code></td>\n<td align=\"right\">7</td>\n</tr>\n<tr>\n<td align=\"left\">COMMENT_NODE</td>\n<td align=\"center\">Nodo del tipo <code>Comment</code></td>\n<td align=\"right\">8</td>\n</tr>\n<tr>\n<td align=\"left\">DOCUMENT_NODE</td>\n<td align=\"center\">Nodo del tipo <code>Document</code></td>\n<td align=\"right\">9</td>\n</tr>\n<tr>\n<td align=\"left\">DOCUMENT_TYPE_NODE</td>\n<td align=\"center\">Nodo del tipo <code>DocumentType</code></td>\n<td align=\"right\">10</td>\n</tr>\n<tr>\n<td align=\"left\">DOCUMENT_FRAGMENT_NODE</td>\n<td align=\"center\">Nodo del tipo <code>DocumentFragment</code></td>\n<td align=\"right\">11</td>\n</tr>\n<tr>\n<td align=\"left\">NOTATION_NODE</td>\n<td align=\"center\">Nodo del tipo <code>Notation</code></td>\n<td align=\"right\">12</td>\n</tr>\n</tbody></table>\n<p> Aunque las páginas XHTML que manejaremos se pueden manipular manejando\n solamente cuatro o cinco tipos de estos nodos:</p>\n<ul>\n<li><p><code>DOCUMENT_NODE</code>, nodo raíz del que derivan todos los demás nodos del árbol.</p>\n</li>\n<li><p><code>ELEMENT_NODE</code>, representa cada una de las etiquetas XHTML. Se trata del único\nnodo que puede contener atributos y el único del que pueden derivar otros nodos.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n\n3 nodo del tipo Element --&gt; html, head y body\n</code></pre>\n</li>\n<li><p><code>ATTRIBUTE_NODE</code>, se define un nodo de este tipo para representar cada uno de\nlos atributos de las etiquetas XHTML, es decir, uno por cada par atributo=valor.</p>\n<pre><code class=\"language-html\">&lt;img src=\"images/logo.png\" alt=\"Logo Laboratoria\" /&gt;\n\n1 nodo tipo Element --&gt; etiqueta img\n2 nodo tipo Attr --&gt; src y alt\n</code></pre>\n</li>\n<li><p><code>TEXT_NODE</code>, nodo que contiene el texto encerrado por una etiqueta XHTML.</p>\n<pre><code class=\"language-html\">&lt;h1&gt;Seré una futura developer de Laboratoria&lt;/h1&gt;\n&lt;h2&gt;¿Qué debo hacer?&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;li&gt;Mentalidad de crecimiento&lt;/li&gt;\n  &lt;li&gt;Practicar mucho&lt;/li&gt;\n  &lt;li&gt;Autoaprender y preguntar siempre&lt;/li&gt;\n&lt;/ul&gt;\n\n6 nodos tipo Element --&gt; etiquetas h1, h2, ul, li,\n5 nodos tipo Text --&gt; 'Seré una futura developer de Laboratoria', '¿Qué debo\n  hacer?','Mentalidad de crecimiento','Practicar mucho', 'Autoaprender y\n  preguntar siempre'\n</code></pre>\n</li>\n<li><p><code>COMMENT_NODE</code>, representa los comentarios incluidos en la página XHTML.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Página Sencilla&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- Hola Esto es un comentario--&gt;\n    &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;!--Por favor coloca una imagen--&gt;\n    &lt;img src=\"images/logo.png\" alt=\"Logo Laboratoria\"/&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n6 nodos Element --&gt; etiqueta html, head, title, body, h1, img\n2 nodos Text --&gt; 'Página Sencilla', 'Hola Mundo'\n2 nodos Attr --&gt; src y alt\n2 nodos Comment --&gt; &lt;!--Hola esto es un comentario--&gt;\n&lt;!--Por favor coloca una imagen--&gt;\n</code></pre>\n</li>\n</ul>\n<p>Los otros tipos de nodos existentes que no se van a considerar son\n<code>DocumentType</code>, <code>CDataSection</code>, <code>DocumentFragment</code>, <code>Entity</code>, <code>EntityReference</code>,\n<code>ProcessingInstruction</code> y <code>Notation</code>.</p>\n<h2 id=\"relación-entre-nodos\">Relación entre Nodos</h2>\n<p>Los nodos del DOM se relacionan entre sí teniendo en cuenta quien es el nodo\npadre, los nodos hermanos e hijos. Así como tú tienes hermanos,padre o hijos,\n<strong>los nodos del DOM también tienen una relación familiar</strong>.</p>\n<h3 id=\"analicemos-esta-imagen\">Analicemos esta imagen</h3>\n<p><img src=\"https://www.w3schools.com/js/pic_htmltree.gif\" alt=\"DOM Tree\"></p>\n<ul>\n<li><p>La raíz del árbol de nodos de cualquier página web siempre es la misma:\n<strong>un nodo llamado document</strong> que es el objeto <code>padre</code> de los objetos\nrestantes.</p>\n</li>\n<li><p>El nodo <strong>html</strong> es el <code>padre</code> de los objetos o nodos <strong>head</strong> y <strong>body</strong>\n(pero <strong>hijo</strong> del nodo <strong>document</strong>).</p>\n</li>\n<li><p>El objeto o nodo <strong>body</strong> es el <code>padre</code> del <strong>a</strong> y el <strong>h1</strong>, por lo\ntanto estas etiquetas son <code>hijos</code> del  nodo <strong>body</strong>.</p>\n</li>\n<li><p>El nodo de texto <strong>My header</strong> es <code>hijo</code> del nodo <strong>h1</strong>.</p>\n</li>\n</ul>\n<h4 id=\"relación-hermanos\">Relación hermanos</h4>\n<p>Analizando la misma imagen de arriba:</p>\n<ul>\n<li><p>Los nodos <code>hermanos</code> hacen referencia a los nodos que tiene el mismo padre, es\ndecir, son nodos del mismo nivel en el árbol del DOM.</p>\n</li>\n<li><p>Los objetos o nodos <strong>head</strong> y <strong>body</strong> son <code>hermanos</code>, cuyo padre es el\nobjeto o nodo <strong>html</strong>.</p>\n</li>\n<li><p>El nodo de texto <strong>My link</strong> y el nodo <strong>attribute</strong> son nodos <code>hermanos</code>,\ncuyo padre es el objeto o nodo <strong>a</strong>. (En la imagen parece que <strong>attribute</strong>\nes hermano del nodo <strong>a</strong> pero <strong>a</strong> es padre de <strong>attribute</strong>.)</p>\n</li>\n</ul>\n<h2 id=\"propiedades-de-los-nodos\">Propiedades de los nodos</h2>\n<p>Primero, cada vez que hablemos de <code>nodos</code> en realidad nos estamos refiriendo a\nun <strong>objeto</strong> y como recordarás, los objetos tienen <strong>propiedades y métodos</strong>.\nPor lo tanto los <code>nodos</code> tienen propiedades y métodos que te ayudarán a\nidentificarlos.</p>\n<p>A continuación te presentamos tres propiedades de los nodos las cuales te\nayudarán a identificar su nombre, tipo y valor.</p>\n<ul>\n<li><strong>nodeName</strong>, indica el nombre del nodo.</li>\n<li><strong>nodeType</strong>, es un número entero que describe el tipo de nodo: <code>1</code> para\nlas etiquetas HTML, <code>3</code> para los nodos tipo texto, <code>8</code> para los nodos tipo\ncomentarios, <code>9</code> para el nodo tipo document, etc.</li>\n<li><strong>nodeValue</strong>, es el texto contenido dentro de un nodo de texto. Esta\npropiedad solo se utiliza para los nodos tipo texto <code>3</code> y nodos tipo\ncomentarios <code>8</code>.</li>\n</ul>\n<h2 id=\"recapitulando\">Recapitulando</h2>\n<p>Prepara tu editor de código, replica lo que realiza Lulú en el siguiente video y\nrefuerza lo aprendido.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/D93IP_n6kj8?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-bom": {
          "title": "Browser Object Model (BOM)",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>En esta lectura aprenderemos:</p>\n<ul>\n<li>¿Para qué usamos el BOM?</li>\n<li>¿Qué elementos podemos modificar en el BOM?</li>\n<li>¿Cuál es la relación entre el BOM y el DOM?</li>\n<li>¿De qué nos sirve el objeto window?</li>\n</ul>\n<p><img src=\"http://librosweb.es/img/ajax/f0501.gif\" alt=\"nodo tipo texto - nodo tipo elemento\"></p>\n<h2 id=\"bom\">BOM</h2>\n<p>El BOM es muy similar al DOM, solo que se enfoca en diferentes objetivos.\nLa siguiente <a href=\"http://librosweb.es/libro/ajax/capitulo_5.html\" target=\"_blank\">lectura</a>\nnos muestra qué es el BOM y para qué nos sirve.</p>\n<h2 id=\"el-objeto-window\">El objeto window</h2>\n<p>El objeto window es parte del BOM y nos sirve para controlar cosas directamente\ndel navegador.\nLa siguiente <a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_window.html\" target=\"_blank\">lectura</a>\nnos muestra cuales.</p>\n<h2 id=\"relación-entre-el-bom-y-el-dom\">Relación entre el BOM y el DOM</h2>\n<p>Como podemos observar en las lecturas anteriores, el BOM es muy similar al DOM,\ntanto en sintaxis como en estructura. Sin embargo, uno se enfoca en acceder al\nHTML que se muestra en el navegador y el otro se enfoca en modificar\ndirectamente el navegador y sus propiedades.</p>\n<p>Algunas de esas propiedades a modificar por el BOM son las siguientes:</p>\n<ul>\n<li><p>El objeto <a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_location.html\" target=\"_blank\">Location</a></p>\n</li>\n<li><p>El objeto <a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_navigator.html\" target=\"_blank\">Navigator</a></p>\n</li>\n<li><p>El objeto <a href=\"http://librosweb.es/libro/ajax/capitulo_5/el_objeto_screen.html\" target=\"_blank\">screen</a></p>\n</li>\n</ul>\n",
          "order": 2,
          "durationString": "30min"
        },
        "03-1-dom-methods-selection": {
          "title": "Manipulación del DOM",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=7iHu7s54vIk",
              "id": "7iHu7s54vIk"
            }
          ],
          "body": "<h2 id=\"selección-de-nodos-del-dom\">Selección de nodos del DOM</h2>\n<p>Una vez construido automáticamente el árbol completo de nodos DOM, ya es\nposible utilizar las funciones DOM para acceder de forma directa a cualquier\nnodo del árbol.</p>\n<p>Como acceder a un nodo del árbol es equivalente a acceder a\n\"un trozo\" de la página, una vez construido el árbol, ya es posible manipular\nde forma sencilla la página: acceder al valor de un elemento, establecer el\nvalor de un elemento, mover un elemento de la página, crear y añadir nuevos\nelementos, etc.</p>\n<p>DOM proporciona dos métodos alternativos para acceder a un nodo específico:\nacceso a través de sus nodos padre y acceso directo.</p>\n<p>Las funciones que proporciona DOM para acceder a un nodo a través de sus nodos\npadre consisten en acceder al nodo raíz de la página y después a sus nodos\nhijos y a los nodos hijos de esos hijos y así sucesivamente hasta el último\nnodo de la rama terminada por el nodo buscado. Sin embargo, cuando se quiere\nacceder a un nodo específico, es mucho más rápido acceder directamente a ese\nnodo y no llegar hasta él descendiendo a través de todos sus nodos padre.</p>\n<p>Por ese motivo, no se van a presentar las funciones necesarias para el acceso\njerárquico de nodos y se muestran solamente las que permiten acceder de forma\ndirecta a los nodos.</p>\n<p>Es importante recordar que el acceso a los nodos, su modificación\ny su eliminación solamente es posible cuando el árbol DOM ha sido construido\ncompletamente, es decir, después de que la página XHTML se cargue por\ncompleto. Más adelante se verá cómo asegurar que un código JavaScript\nsolamente se ejecute cuando el navegador ha cargado entera la página XHTML.</p>\n<p>Por último, te recomendamos que pruebes los siguientes métodos replicando el\ncódigo en tu editor favorito.</p>\n<h3 id=\"getelementbyid\"><strong>getElementById()</strong></h3>\n<p>La función <code>getElementById()</code> es la más utilizada cuando se desarrollan\naplicaciones web dinámicas. Se trata de la función preferida para acceder\ndirectamente a un nodo y poder leer o modificar sus propiedades.</p>\n<p>La función <code>getElementById()</code> devuelve el elemento XHTML cuyo atributo <code>id</code>\ncoincide con el parámetro indicado en la función. Como el atributo id debe ser\núnico para cada elemento de una misma página, la función devuelve únicamente\nel nodo deseado.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hola Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hola Mundo&lt;/h2&gt;\n &lt;h2&gt;Mis Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Bailar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Ver peliculas&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">const firstItem = document.getElementById(\"highlight\");\n</code></pre>\n<h3 id=\"getelementsbyclassname\"><strong>getElementsByClassName()</strong></h3>\n<p>La función <code>getElementsByClassName()</code> devuelve una <a href=\"http://www.etnassoft.com/2011/08/09/las-listas-de-nodos-y-los-arrays-en-javascript/\" target=\"_blank\">lista de nodos</a>\n XHTML cuyo atributo <code>class</code>coincide con el parámetro indicado en la función.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hola Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hola Mundo&lt;/h2&gt;\n &lt;h2&gt;Mis Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Bailar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Ver peliculas&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">const items = document.getElementsByClassName(\"bolded\");\n</code></pre>\n<h3 id=\"getelementsbytagname\"><strong>getElementsByTagName()</strong></h3>\n<p>Como sucede con todas las funciones que proporciona DOM, la función\n<code>getElementsByTagName()</code> tiene un nombre muy largo, pero que lo hace\nautoexplicativo.</p>\n<p>La función <code>getElementsByTagName(nombreEtiqueta)</code> obtiene una <a href=\"http://www.etnassoft.com/2011/08/09/las-listas-de-nodos-y-los-arrays-en-javascript/\" target=\"_blank\">lista de nodos</a>.\nde la página XHTML cuya etiqueta sea igual que el parámetro que se le pasa a la\nfunción.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hola Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hola Mundo&lt;/h2&gt;\n &lt;h2&gt;Mis Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Bailar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Ver peliculas&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">const titles = document.getElementsByTagName('h2');\n\nconsole.log(titles[0]);\nconsole.log(titles[1]);\nconsole.log(titles[2]);\n\nconst listItems = document.getElementsByTagName('li');\nconsole.log(listItems[0]);\nconsole.log(listItems[1]);\nconsole.log(listItems[2]);\n</code></pre>\n<h3 id=\"queryselector\"><strong>querySelector()</strong></h3>\n<p>Función que retorna el primer elemento que coincide con el selector CSS dado\ncomo parámetro.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hola Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hola Mundo&lt;/h2&gt;\n &lt;h2&gt;Mis Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Bailar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Ver peliculas&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - id\nconst item = document.querySelector('#highlight');\nconsole.log(item);\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - class\nconst item = document.querySelector('.bolded');\nconsole.log(item);\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - etiqueta\nconst title = document.querySelector('h2');\nconsole.log(title);\n</code></pre>\n<h3 id=\"queryselectorall\"><strong>querySelectorAll()</strong></h3>\n<p>Función que retorna una <a href=\"http://www.etnassoft.com/2011/08/09/las-listas-de-nodos-y-los-arrays-en-javascript/\" target=\"_blank\">lista de nodos</a>\nque coinciden con el selector CSS dado como parámetro.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n &lt;h2&gt;Hola Laboratoria&lt;/h2&gt;\n &lt;h2&gt;Hola Mundo&lt;/h2&gt;\n &lt;h2&gt;Mis Hobbies&lt;/h2&gt;\n &lt;ul&gt;\n  &lt;li id=\"highlight\"&gt;Programar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Bailar&lt;/li&gt;\n  &lt;li class=\"bolded\"&gt;Ver peliculas&lt;/li&gt;\n &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - etiqueta\nconst titles = document.querySelectorAll('h2');\nconsole.log(titles);\n</code></pre>\n<pre><code class=\"language-js\">// Selector css - etiqueta\nconst items = document.querySelectorAll('.bolded');\nconsole.log(items);\n</code></pre>\n<h2 id=\"recapitulando\">Recapitulando</h2>\n<p>Prepara tu editor de código, replica lo que realiza Lulú en el siguiente video y\nrefuerza lo aprendido.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/7iHu7s54vIk?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>También tenemos el <a href=\"https://developer.mozilla.org/es/docs/Referencia_DOM_de_Gecko/Introducci%C3%B3n#Qu.C3.A9_es_el_DOM.3F\" target=\"_blank\">link</a>\nde la documentación oficial de Mozilla de qué es el DOM.</p>\n<p>Otro <a href=\"https://developer.mozilla.org/es/docs/Referencia_DOM_de_Gecko/Introducci%C3%B3n#C.C3.B3mo_se_accede_al_DOM.3F\" target=\"_blank\">link</a>\nde cómo acceder a elementos del DOM con JS de la documentación oficial.</p>\n",
          "order": 3,
          "durationString": "1h"
        },
        "03-2-dom-methods-crud": {
          "title": "Modificando el DOM",
          "type": "read",
          "format": "self-paced",
          "duration": 120,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=KpiYwPLGEWs&list=PLhSj3UTs2_yVC0iaCGf16glrrfXuiSd0G&index=16",
              "id": "KpiYwPLGEWs"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=b-ZWMiqsAeU&list=PLhSj3UTs2_yVC0iaCGf16glrrfXuiSd0G&index=14",
              "id": "b-ZWMiqsAeU"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=yQdi_8nh9HE&index=15&list=PLhSj3UTs2_yVC0iaCGf16glrrfXuiSd0G",
              "id": "yQdi_8nh9HE"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>En esta unidad aprenderemos:</p>\n<ul>\n<li>Cómo manipular los nodos del DOM.</li>\n<li>Cómo crear, añadir y eliminar Nodos al DOM.<ul>\n<li><code>document.createTextNode()</code></li>\n<li><code>document.createElement()</code></li>\n<li><code>.appendChild()</code></li>\n<li><code>.removeChild()</code></li>\n</ul>\n</li>\n<li>Conocer sobre las siguientes propiedades:<ul>\n<li><code>.innerHTML</code></li>\n<li><code>.textContent</code></li>\n<li><code>.innerText</code></li>\n<li><code>.value</code></li>\n</ul>\n</li>\n<li>Conocer sobre los siguientes métodos:<ul>\n<li><code>.replaceChild()</code></li>\n<li><code>.insertBefore()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"modificando-elementos-y-contenido-del-dom\">Modificando elementos y contenido del DOM</h2>\n<p>En el tema anterior vimos qué es el DOM y cómo seleccionar nodos utilizando\nJavaScript. En esta ocasión vamos a utilizar el DOM para modificar el\ndocumento HTML utilizando JavaScript.</p>\n<h2 id=\"creación-de-nodos\">Creación de nodos</h2>\n<p>El DOM nos ofrece una serie de métodos para añadir nodos al árbol de un\ndocumento, pero los más básicos son <code>.createElement()</code>, que crea un elemento, y\n<code>.createTextNode()</code>, que crea un nodo de texto.</p>\n<p>Crear y añadir a la página un nuevo elemento XHTML sencillo consta de cuatro\npasos diferentes:</p>\n<ol>\n<li>Creación de un nodo de tipo Element que represente al elemento.</li>\n<li>Creación de un nodo de tipo Text que represente el contenido del elemento.</li>\n<li>Añadir el nodo Text como nodo hijo del nodo Element.</li>\n<li>Añadir el nodo Element a la página, en forma de nodo hijo de el nodo\nexistente en el HTML, en el cual se quiere insertar.</li>\n</ol>\n<p>Este proceso de creación de nuevos nodos implica la utilización de tres\nfunciones DOM:</p>\n<ol>\n<li><p><code>createElement(etiqueta)</code></p>\n<p>Crea un nodo de tipo Element que representa al elemento XHTML cuya etiqueta\nse pasa como parámetro.</p>\n</li>\n<li><p><code>createTextNode(contenido)</code></p>\n<p>Crea un nodo de tipo Text que almacena el contenido textual de los elementos\nXHTML.</p>\n</li>\n<li><p><code>nodoPadre.appendChild(nodoHijo)</code></p>\n<p>Añade un nodo como hijo de otro nodo. Si se ocupa esta función para añadir el\nnodo <code>Text</code> como hijo del nodo <code>Element</code> y a su vez este nodo <code>Element</code> como\nhijo del nodo existente en el HTML, <code>appendChild</code> se utiliza al menos dos\nveces. Con esta función el nuevo nodo se incluye inmediatamente después de\nlos hijos ya existentes.</p>\n</li>\n</ol>\n<p>De este modo, si se quiere añadir un párrafo simple al final de una página\nXHTML, es necesario incluir el siguiente código JavaScript.</p>\n<pre><code class=\"language-js\">// Crear nodo de tipo Element\nconst paragraph = document.createElement(\"p\");\n// Crear nodo de tipo Text\nconst content = document.createTextNode(\"Hola Mundo!\");\n// Añadir el nodo Text como hijo del nodo Element\nparagraph.appendChild(content);\n// Añadir el nodo Element como hijo de la pagina\ndocument.body.appendChild(parrafo);\n</code></pre>\n<p>Hay que recordar que el DOM es la interfaz que conecta el documento HTML con\nJavaScript. Es por eso que, al utilizar <code>.createElement()</code>, el nodo no será\nvisible, ya que hasta este momento no es más que una especie de fantasma que\nexiste en el documento, pero hasta que no se le asigne una posición en el árbol\nno se mostrará al usuario. De la misma manera, con la función\n<code>.createTextNode()</code> el texto existe, pero en ninguna parte mas. Es necesario\nconvertir cualquiera de estos nodos en hijo de otro nodo existente por medio de\nla función <code>.appendChild()</code>.</p>\n<h2 id=\"eliminar-nodos-del-dom\">Eliminar nodos del DOM</h2>\n<p>Dado que podemos incluir nuevos hijos en un nodo, tiene sentido que podamos\neliminarlos. Para ello existe el siguiente método:</p>\n<h3 id=\"removechild\"><code>removeChild()</code></h3>\n<p>Para quitar un nodo del documento tenemos que seleccionar el padre del nodo, y\ndesde ahí, remover el nodo deseado.</p>\n<p>Si no conocemos el padre del nodo podemos seleccionar directamente el nodo,\nobtener el padre, con <code>.parentNode</code>, para después utilizar <code>.removeChild()</code>\ny eliminarlo.</p>\n<ul>\n<li><p>Sintaxis:</p>\n<pre><code class=\"language-js\">padre.removeChild(nodoAEliminar);\n</code></pre>\n</li>\n</ul>\n<pre><code class=\"language-js\">const container = document.getElementById('container');\nconst paragraph = document.getElementById('paragraph');\ncontainer.removeChild(paragraph);\n\n/*\n * Con el nodo seleccionado utilizamos `.parentNode`\n * para seleccionar el padre. Desde el padre utilizamos\n * `.removeChild()` para eliminar el nodo seleccionado.\n */\n\nconst paragraph = document.getElementById('paragraph');\nparagraph.parentNode.removeChild(paragraph);\n</code></pre>\n<p>Cuando se elimina un nodo, también se eliminan automáticamente todos los nodos\nhijos que tenga, por lo que no es necesario borrar manualmente cada nodo hijo.</p>\n<h2 id=\"más-funciones-para-manipulación-de-dom\">Más funciones para manipulación de DOM</h2>\n<p>Aquí arriba te hemos mostrado algunas funciones con las cuales puedes empezar a\nguiarte, pero es importante mencionar que a la hora de programar no hay una\núnica solución posible y la solución que uno como desarrollador puede ofrecer\ndepende mucho de las necesidades de cada proyecto, así que te presentaremos\notros métodos y propiedades que puedes comenzar a probar.</p>\n<p>Comencemos por <code>.textContent</code> y <code>.innerHTML</code> que funcionan como propiedades para\nobtener y establecer el valor de un elemento específico.</p>\n<h3 id=\"textcontent\"><code>textContent</code></h3>\n<p>Al utilizar textContent sobre un nodo, se va a mostrar el contenido del texto\nque exista en el nodo y en los hijos del mismo. Si hay etiquetas HTML, son\nignoradas. Si se le asigna un valor, va a reemplazar todo el contenido del nodo\npor la cadena de texto que se le asigne. Si la cadena de texto contiene\netiquetas HTML, éstas se van a escapar y se van a visualizar como texto.\nLos cambios realizados no van a ser permanentes, el documento va a regresar a\nsu estado original una vez que se recargue el sitio.</p>\n<p><img src=\"http://blog.eamexicano.com/wp-content/uploads/2014/02/textcontent.png\" alt=\"textContent\"></p>\n<h4 id=\"innerhtml\">innerHTML</h4>\n<p>Funciona de manera similar a textContent pero, además de mostrar el texto que\nexista en el nodo seleccionado y en los hijos, se van a mostrar las etiquetas\nde HTML que pudieran existir. Si se le asigna un valor, se va a reemplazar el\ncontenido del nodo incluyendo a sus hijos por la cadena de texto que se le\nasigne. A diferencia de <code>textContent</code>, si dentro de la cadena de texto asignada\nexisten etiquetas HTML, se van a visualizar en el navegador. Los cambios\nrealizados no van a ser permanentes, el documento va a regresar a su estado\noriginal una vez que se recargue el sitio.</p>\n<p><img src=\"http://blog.eamexicano.com/wp-content/uploads/2014/02/innerhtml.png\" alt=\"textContent\"></p>\n<p>En el siguiente video vemos de forma práctica, cómo utilizar <code>.innerHTML</code> y\n<code>.textContent</code>:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/KpiYwPLGEWs?list=PLhSj3UTs2_yVC0iaCGf16glrrfXuiSd0G&amp;index=16&amp;autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"value\">value</h4>\n<p>La propiedad <code>value</code> establece o devuelve el valor del atributo value de un\nelemento html, siempre y cuando en dicho elemento exista la propiedad value,\nalgunas de las etiquetas que contienen la propiedad <code>value</code> son elementos de\nformularios.</p>\n<ul>\n<li><p>Sintaxis</p>\n<ul>\n<li>Devuelve la propiedad value: <code>elemento.value;</code></li>\n<li>Establece la propiedad value: <code>elemento.value = texto;</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Nota: el valor devuelto es un string, que representa el valor del campo de\ntexto.</p>\n</blockquote>\n<p>Puedes ver un ejemplo más claro en este <a href=\"https://codepen.io/Si7v4n4/pen/prBzoX?editors=1010#0\" target=\"_blank\">pen</a>.</p>\n<h4 id=\"insertbefore\">insertBefore</h4>\n<p>Nos permite elegir un nodo del documento e incluir otro antes que él.</p>\n<pre><code class=\"language-js\">padre.insertBefore(nuevoNodo, nodoDeReferencia);\n</code></pre>\n<p>Si tuviéramos un fragmento de un documento como éste:</p>\n<pre><code class=\"language-html\">&lt;div id=\"container\"&gt;\n    &lt;p&gt;Primer párrafo.&lt;/p&gt;\n    &lt;p&gt;Segundo párrafo.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>y quisiéramos añadir un nuevo párrafo antes del segundo, lo haríamos así:</p>\n<pre><code class=\"language-js\">// Creamos el nuevo párrafo con su hijo texto\nconst newParagraph = document.createElement('p');\nconst paragraphText = document.createTextNode('Nuevo párrafo.');\nnewParagraph.appendChild(paragraphText);\n\n// Guardamos en una variable el padre y en otra variable el segundo párrafo\nconst container = document.getElementById('container');\nconst secondParagraph = container.getElementsByTagName('p')[1];\n\n// Y ahora lo insertamos\ncontainer.insertBefore(newParagraph, secondParagraph);\n</code></pre>\n<h4 id=\"replacechild\">replaceChild</h4>\n<p>Este método se utiliza para reemplazar un nodo secundario por otro. Toma como\nargumentos dos nodos: un nuevo nodo y el nodo a ser reemplazado. El nodo\nreemplazado debe ser un elemento secundario del elemento al que se llama el\nmétodo.</p>\n<ul>\n<li><p>Sintaxis:</p>\n<pre><code class=\"language-js\">padre.replaceChild(nuevoNodo, nodoAReemplazar);\n</code></pre>\n</li>\n</ul>\n<p>Con el mismo HTML que para el ejemplo de <code>.insertBefore()</code>, si quisiéramos\nsustituir el segundo párrafo por el que creamos, lo haríamos así:</p>\n<pre><code class=\"language-js\">container.replaceChild(newParagraph, secondParagraph);\n</code></pre>\n<blockquote>\n<p>Tenga en cuenta que tanto <code>.replaceChild()</code> como <code>.insertBefore()</code> esperan el\nnuevo nodo como su primer argumento.</p>\n</blockquote>\n<h3 id=\"a-practicar\">A practicar</h3>\n<p>Te recomendamos replicar los ejemplos de código que se han ido mostrando a la\nlargo de la lectura. Además de poner en práctica la teoría con los siguientes\nvídeos.</p>\n<ul>\n<li><p>Este video dura 8:18, en el minuto 2:25 empieza a utilizar los métodos\n<code>.createElement()</code> y <code>.createTextNode()</code>.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/b-ZWMiqsAeU?list=PLhSj3UTs2_yVC0iaCGf16glrrfXuiSd0G&amp;index=14&amp;autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n</li>\n<li><p>Este otro video agrega los nodos creados al DOM.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/yQdi_8nh9HE?index=15&amp;list=PLhSj3UTs2_yVC0iaCGf16glrrfXuiSd0G&amp;autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n</li>\n</ul>\n",
          "order": 4,
          "durationString": "2h"
        },
        "03-3-dom-methods-crud-attributes": {
          "title": "Modificando atributos desde el DOM",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<h3 id=\"atributos\">Atributos</h3>\n<p>Además de modificar el contenido del nodo o el nodo mismo, también podemos\nmodificar los atributos del nodo, conocer el valor o valores que tienen y\nasignar valores distintos.</p>\n<p>Los atributos con los que podemos trabajar directamente son los que utilizan la\ninterfaz <code>HTMLElement</code>.</p>\n<p><img src=\"http://blog.eamexicano.com/wp-content/uploads/2014/02/atributos.png\" alt=\"Nodos\"></p>\n<pre><code class=\"language-js\">const paragraph = document.getElementById('paragraph');\n/*\n * Para obtener el valor asignado utilizamos el nodo seguido del atributo que\n * queremos obtener\n */\nparagraph.id;\n/*\n * Para asignar valor o valores además del nombre del atributo se le asigna el o\n * los valores\n */\nparagraph.className = 'nueva-clase';\n/*\n * Se utiliza `.className` para hacer referencia al atributo `class`. En\n * JavaScript, class es una palabra reservada.\n*/\n</code></pre>\n<p>Habrá ocasiones en que necesitamos trabajar con atributos que no son parte de\nla interfaz <code>HTMLElement</code>. Para esos casos existen dos métodos:\n<code>.setAttribute()</code> y <code>.getAttribute()</code>.</p>\n<h4 id=\"setattributeatributo-valor\">setAttribute('atributo', 'valor')</h4>\n<p>Crea un atributo y establece un valor.</p>\n<h4 id=\"getattributeatributo\">getAttribute('atributo')</h4>\n<p>Obtiene el valor del atributo.</p>\n<pre><code class=\"language-html\">&lt;img id='image'\n  src=\"http://blog.eamexicano.com/wp-content/uploads/2014/02/innerhtml.png\"\n  alt=\"DOM - innerHTML\" width=\"100%\"  /&gt;\n</code></pre>\n<pre><code class=\"language-js\">const image = document.getElementById('image');\n\n// Devuelve el tamaño de la imagen en px\nimage.width;\nimage.height;\n\n// Devuelve el tamaño de la imagen como está especificado  en la etiqueta\nimage.getAttribute('width');\nimage.getAttribute('height');\n\n/*\n * Si queremos asignar un tamaño a la imagen que no sea en px tenemos que\n * utilizar `.setAttribute()`\n */\nimage.width = '50%';\nimage.height = 'auto';\n\nimage.setAttribute('width', '50%');\nimage.setAttribute('height', 'auto');\n</code></pre>\n<h2 id=\"manipulando-estilos-css-por-javascript\">Manipulando estilos CSS por Javascript</h2>\n<p>A diferencia de la mayoría de los otros atributos, la propiedad de estilo en sí\nes un objeto, que contiene propiedades.</p>\n<h3 id=\"style\">style</h3>\n<p>Esta propiedad se utiliza para mostrar, para establecer, modoficar o elimiar el\nestilo del nodo sobre el que se esté utilizando.</p>\n<ul>\n<li><p>Sintaxis</p>\n<pre><code class=\"language-js\">elemento.style.propiedad = valor;\n</code></pre>\n</li>\n</ul>\n<p>Tomar en cuenta que las propiedades de CSS que están separadas por un guión\n(<code>font-family</code>, <code>font-size</code>, <code>border-bottom</code>) tienen que ser escritas con\nnotación <em>lowerCamelCase</em> (<code>fontFamily</code>, <code>fontSize</code>, <code>borderBottom</code>).</p>\n<pre><code class=\"language-js\">const paragraph  = document.getElementById('paragraph');\nparagraph.style.padding = '5px';\nparagraph.style.color = 'rgb(242, 242, 242)';\nparagraph.style.fontFamily = 'helvetica';\n</code></pre>\n<p><img src=\"http://blog.eamexicano.com/wp-content/uploads/2014/02/style.png\" alt=\"Styles in JS\"></p>\n",
          "order": 5,
          "durationString": "20min"
        },
        "03-5-reflow-browser": {
          "title": "Redibujo del navegador",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<p>Con la llegada de las aplicaciones ricas de internet (RIA: Rich Internet\nApplications), nuestras páginas requieren mejor experiencia de usuario, lo que\nlleva a un mayor manejo del DOM con largas hojas de código <code>javascript</code>,\nanimaciones, etc. Pero esto lleva a un problema que no siempre se prevé antes\nde desarrollar y de pronto todo empieza a funcionar lento o se come la memoria\nde la maquina del cliente.</p>\n<h2 id=\"es-útil-entender-cuándo-se-activan-los-re-flow\">Es útil entender cuándo se activan los re-flow</h2>\n<p>1.- Adición, eliminación o cambio de elementos DOM visibles.</p>\n<blockquote>\n<p>La primera es obvia, el uso de JavaScript para cambiar el DOM provocará un\nre-flow.</p>\n</blockquote>\n<p>2.- Adición, eliminación o cambio de estilos CSS.</p>\n<blockquote>\n<p>Del mismo modo, aplicar directamente estilos CSS o cambiar la clase puede\nalterar el diseño. Cambiar el ancho de un elemento puede afectar a todos los\nelementos de la misma rama DOM y a los que la rodean.</p>\n</blockquote>\n<p>3.- Animaciones y transiciones CSS3.</p>\n<blockquote>\n<p>Cada marco de la animación causará un reflujo.</p>\n</blockquote>\n<p>4.- Uso de <code>offsetWidth</code> y <code>offsetHeight</code>.</p>\n<blockquote>\n<p>Curiosamente, leer la propiedad <code>offsetWidth</code> y <code>offsetHeight</code> de un elemento\npuede desencadenar un reflow inicial para calcular las cifras.</p>\n</blockquote>\n<p>5.- Acciones de usuario</p>\n<blockquote>\n<p>Finalmente, el usuario puede activar los re-flow activando un efecto <code>hover</code>,\ningresando texto en un campo, cambiando el tamaño de la ventana, cambiando las\ndimensiones de fuente, cambiando hojas de estilo o fuentes.</p>\n</blockquote>\n<p>El caudal de flujo de procesamiento de re-flow variará. Algunos navegadores\nson mejores que otros en ciertas operaciones. Algunos elementos generan más\nre-flow que otros. Afortunadamente, hay varios consejos generales que puede\nutilizar para <a href=\"https://developers.google.com/speed/docs/insights/browser-reflow\" target=\"_blank\">mejorar el rendimiento</a>.</p>\n",
          "order": 6,
          "durationString": "10min"
        },
        "04-events": {
          "title": "Eventos",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=gyICdb1iwII",
              "id": "gyICdb1iwII"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/lgkqf6hldEk?t=15m5s",
              "id": "lgkqf6hldEk"
            }
          ],
          "body": "<h2 id=\"¿qué-es-un-evento\">¿Qué es un evento?</h2>\n<p>Un <em>evento</em> representa la idea de que algo ha pasado en nuestro programa, y\ntenemos la oportunidad de <em>hacer algo</em> o <em>reaccionar</em> a esa cosa que ha ocurrido\n(el <em>evento</em>).</p>\n<p>Por ejemplo, la interacción con el usuario se hace através de eventos. Cuando el\nusuario realiza una acción como hacer un <code>click</code>, esto <em>dispara</em> un evento que\nnos va a permir reaccionar, y así agregar interacción al programa. A cada evento\nse le asocian una o más funciones que serán ejecutadas cuando ocurra dicho\nevento. A estas funciones las llamamos <em>manejadores</em> o <em>manejadores de eventos</em>\n(conocidos en inglés como <em>event handlers</em> o <em>event listeners</em>).</p>\n<p>Aquí hay un <div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/gyICdb1iwII?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div> de referencia.</p>\n<h2 id=\"¿cómo-usar-los-eventos\">¿Cómo usar los eventos?</h2>\n<p>Para poder hacer uso de la magia de los eventos es necesario saber primero como\n\"escucharlos\", esto se puede lograr mediante el método <strong>addEventListener</strong>.</p>\n<p>La sintaxis es muy sencilla:</p>\n<pre><code class=\"language-javascript\">  elemento_que_escucha.addEventListener('evento', funcion_a_ejecutar);\n</code></pre>\n<p>Aquí un <a href=\"http://www.codexexempla.org/curso/curso_4_3_e.php\" target=\"_blank\">link</a> de\nreferencia.</p>\n<p>Existen diferentes formas de asociar un evento a elementos del DOM, para saber\nmás sobre ello visita éste <a href=\"http://librosweb.es/libro/javascript/capitulo_6/modelo_basico_de_eventos_2.html\" target=\"_blank\">link</a>\n(a partir del punto 6.2).</p>\n<h3 id=\"manejo-de-eventos\">Manejo de eventos</h3>\n<p>Además de agregar el <em>listener</em> al evento también se puede eliminar usando el\nmétodo <strong>removeEventListener</strong>, el cual funciona casi de la misma manera. La\nsintaxis es de la siguiente manera:</p>\n<pre><code class=\"language-javascript\">  elemento_que_escucha.removeEventListener('evento', funcion_a_eliminar);\n</code></pre>\n<p>Para que el método funcione correctamente es obligatorio mandar como parámetro\nel callback (función) utilizado con addEventListener.</p>\n<p>Ahora hablemos sobre <strong>objectEvent</strong> que es otro tema de importancia en el\nmanejo de eventos. Cuando un evento ocurre, la función que se ejecutará\nnecesita información adicional sobre éste.</p>\n<p> <strong>objectEvent</strong> es el objeto que representa el evento que se ha producido. Se\n crea automáticamente cuando ocurre el evento y se destruye una vez se haya\n ejecutado su función manejadora. Éste objeto tiene un conjunto de propiedades\n con información sobre el evento. En el siguiente código podrás encontrar un\n ejemplo.</p>\n<pre><code class=\"language-javascript\">const holaMundo = (event) =&gt; {\n  const evento = window.event || event;\n  alert('Hola Mundo.');\n};\n\nconst boton = document.getElementById('boton');\nboton.addEventListener('click', holaMundo, false);\n</code></pre>\n<p>En ocasiones es necesario prevenir un cierto comportamiento que un evento tiene\npor defecto, para ello existe <strong>preventDefault</strong>, a continuación un ejemplo:</p>\n<blockquote>\n<p>Este es el código para un formulario muy sencillo\nHay un input para ingresar el nombre y otro para ingresar el apellido\nPor último, hay un input de tipo <em>submit</em> (botón enviar)</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form&gt;\n  &lt;div&gt;\n    &lt;label for=\"fname\"&gt;First name: &lt;/label&gt;\n    &lt;input id=\"fname\" type=\"text\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"lname\"&gt;Last name: &lt;/label&gt;\n    &lt;input id=\"lname\" type=\"text\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n     &lt;input id=\"submit\" type=\"submit\"&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;&lt;/p&gt;\n</code></pre>\n<blockquote>\n<p>Ahora veámos la funcionalidad del JS:\nEn la primera parte se guardan en variables los elementos del formulario\nDespués tenemos la función que detona el evento submit\nEsta función comprueba si los campos están vacios\nSi la condición se cumple se ejecuta la función <em>preventDefault</em> para el\n<em>eventObject</em> (e)\nImpidiendo que el formulario se envíe automáticamente (acción que tiene por\ndefecto este tipo de \"botón\") para mostrar al usuario un mensaje de error.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">const form = document.querySelector('form');\nconst fname = document.getElementById('fname');\nconst lname = document.getElementById('lname');\nconst submit = document.getElementById('submit');\nconst para = document.querySelector('p');\n\nform.onsubmit = function(e) {\n  if (fname.value === '' || lname.value === '') {\n    e.preventDefault();\n    para.textContent = 'You need to fill in both names!';\n  }\n}\n</code></pre>\n<h3 id=\"flujo-de-eventos-propagation\">Flujo de eventos (Propagation)</h3>\n<p>Cuando un evento se ejecuta pasa por diferentes fases: <em>Capture phase</em>, <em>Target\nphase</em> y <em>Bubbling phase</em>, como se muestra en las siguientes imágenes.</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/120246086-d60a0180-c234-11eb-9c38-0535154be569.png\" alt=\"Event propagation tree\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/120246026-9e02be80-c234-11eb-8ce5-c73e13ae900d.png\" alt=\"Event propagation markup\"></p>\n<p>Revisa éste <div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/lgkqf6hldEk?t=15m5s&amp;autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div> en donde encontrarás\nun ejemplo práctico del flujo que siguen los eventos.</p>\n<h2 id=\"tipo-de-eventos\">Tipo de eventos</h2>\n<p>Cuando el usuario interactúa con el navegador se pueden desencadenar múltiples\ntipos de eventos, algunos de los más comunes son:</p>\n<ul>\n<li>Eventos del ratón (mouseEvent)</li>\n<li>Eventos del teclado (keyboardEvent)</li>\n<li>Eventos del formularios</li>\n<li>Eventos de la ventana</li>\n</ul>\n<p>Para mayor información sobre todos los eventos visita éste <a href=\"https://sites.google.com/site/dwebtodojs/referencia/modelo-de-eventos-del-dom\" target=\"_blank\">link</a>\ny también éste otro <a href=\"https://es.khanacademy.org/computing/computer-programming/html-css-js/html-js-dom-events/a/dom-event-types\" target=\"_blank\">link</a>.</p>\n<h3 id=\"key-events\">Key Events</h3>\n<p>Estos son algunos de los eventos más utilizados:</p>\n<ul>\n<li>keyup/keydown</li>\n<li>mouse click</li>\n<li>mouse motion</li>\n<li>scroll</li>\n<li>focus</li>\n<li>load</li>\n<li>script execution timeline</li>\n<li>setting timers</li>\n<li>debouncing</li>\n</ul>\n<p><a href=\"https://codepen.io/Inti_Developer/pen/EvGMKG\" target=\"_blank\">Aquí</a> podrás encontrar un\nejemplo sobre la interacción con los eventos.</p>\n<blockquote>\n<p>Guía de uso:</p>\n<ol>\n<li>Nota como el fondo es de color blanco</li>\n<li>Ahora haz click en el botón <em>Hacer magia :)</em></li>\n<li>Revisa el código y analiza la lógica de programación</li>\n<li>Ahora intenta modificar el código para que reaccione con otros eventos,\n  diviertete ;)</li>\n</ol>\n</blockquote>\n<p>Finalmente, te adjuntamos el <a href=\"https://developer.mozilla.org/es/docs/Web/Reference/Events\" target=\"_blank\">link</a>\nde la documentación oficial explicando todo acerca de eventos:</p>\n",
          "order": 7,
          "durationString": "30min"
        },
        "05-data-attributes": {
          "title": "Atributos data",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=fnn6mqN1S8Q",
              "id": "fnn6mqN1S8Q"
            }
          ],
          "body": "<h2 id=\"¿qué-son-los-atributos-data\">¿Qué son los atributos data?</h2>\n<p>Son atributos personalizados que nos permiten añadir datos a nuestros elementos\nHTML, que no necesariamente son visibles pero que nos ayudan mucho al momento\nde dar información adicional de dichos elementos.</p>\n<h2 id=\"¿cómo-se-usan\">¿Cómo se usan?</h2>\n<p>Usarlos es muy fácil, ya que su sintaxis e interacción es sencilla.</p>\n<h3 id=\"sintaxis\">Sintaxis</h3>\n<p>Se compone de un prefijo <code>data-</code> acompañado del nombre (<em>en minúsculas</em>) que\nconsideremos más apropiado para el valor que va a guardar:</p>\n<pre><code class=\"language-html\">&lt;elemento id=\"ejemplo\" data-nombre=\"valor\" data-otro-nombre=\"otro valor\"&gt;\n</code></pre>\n<h3 id=\"interacción-con-javascript\">Interacción con JavaScript</h3>\n<p>Para poder acceder a estos atributos hacemos uso del método <code>dataset</code>.</p>\n<pre><code class=\"language-javascript\">const ejemplo = document.getElementById(\"ejemplo\");\nconst valor = ejemplo.dataset.nombre;\nconst otroValor = ejemplo.dataset.otroNombre;\n</code></pre>\n<p>En este <a href=\"https://cybmeta.com/los-atributos-data-y-el-dataset-api\" target=\"_blank\">link</a> podemos\nencontrar información más detallada acerca de esto que acabamos de leer.</p>\n<hr>\n<h2 id=\"y-ahora-¿qué-sigue\">Y ahora ¿qué sigue?</h2>\n<p>Ya que tenemos una noción de qué son y el cómo se usan los atributos data, qué\nte parece si vemos el siguiente video en el que se muestra un ejercicio\nhaciendo uso de éstos.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/fnn6mqN1S8Q?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Para leer más acerca de los atributos data, revisa este <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\" target=\"_blank\">link</a>\ny este otro <a href=\"https://www.w3schools.com/tags/att_global_data.asp\" target=\"_blank\">link</a>.</p>\n",
          "order": 8,
          "durationString": "30min"
        },
        "06-practical-cases": {
          "title": "Casos prácticos (videos)",
          "type": "read",
          "format": "self-paced",
          "duration": 360,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=ov2pYXulNvc",
              "id": "ov2pYXulNvc"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=ZtnY3ojz91k",
              "id": "ZtnY3ojz91k"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=ej2MVZpPaoM",
              "id": "ej2MVZpPaoM"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=nEKbaKIat1g",
              "id": "nEKbaKIat1g"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=yV7L6r6D464",
              "id": "yV7L6r6D464"
            },
            {
              "type": "slides",
              "provider": "google",
              "href": "https://docs.google.com/presentation/d/1LM2RPWTuo2SmrWT6nId2UrLyK5IXGeBQ_dMG_VN_FFw/edit#slide=id.g1554294399_1_0",
              "id": "M2RPWTuo2SmrWT6nId2UrLyK5IXGeBQ_dMG_VN_FFw/edit"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Al igual que hemos hecho antes, es hora de aplicar los conceptos aprendidos\npara resolver problemas.</p>\n<p>A continuación tendrás varios problemas que debes resolver. Intenta\nresolverlos primero por tu cuenta. Más abajo encontrarás las soluciones.</p>\n<p>Después de haberlo intentado, compara tus soluciones con los videos de abajo.</p>\n<p><em>NO</em> antes.</p>\n<h3 id=\"1-reserva-de-puestos-aerolínea\">1. Reserva de puestos aerolínea</h3>\n<p>Una pequeña aerolínea acaba de comprar una computadora para su nuevo sistema\nde reservaciones automatizadas. Se te ha pedido que desarrolles el nuevo\nsistema. Escribirás una aplicación para asignar asientos en cada vuelo del\n<strong>único</strong> avión de la aerolínea (capacidad: 10 asientos).</p>\n<p><img src=\"https://image.ibb.co/eMz26v/avion_2.jpg\" alt=\"GitHub Logo\"></p>\n<p>Tu aplicación debe mostrar las siguientes alternativas:</p>\n<p>Por favor escriba 1 para Primera Clase y Por favor escriba 2 para Económico.</p>\n<p><img src=\"https://image.ibb.co/mh9PKF/avion_3.jpg\" alt=\"GitHub Logo\"></p>\n<p>Si el usuario escribe 1, tu aplicación debe asignarle un asiento en la\nsección de primera clase (asientos 1 a 4). Si el usuario escribe 2, tu\naplicación debe asignarle un asiento en la sección económica\n(asientos 5 a 10).</p>\n<p>Tu aplicación deberá entonces imprimir un pase de abordar, indicando el\nnúmero de asiento de la persona y si se encuentra en la sección de primera\nclase o clase económica.</p>\n<p><img src=\"https://image.ibb.co/d8gtDa/avion_4.jpg\" alt=\"GitHub Logo\"></p>\n<h3 id=\"tips-para-la-solución\">Tips para la solución</h3>\n<p>A continuación, encontrarás tips que podrían ayudarte con la solución, ¡mucha suerte!</p>\n<h4 id=\"tip--diagrama-de-flujo\">[Tip. | Diagrama de flujo]</h4>\n<p><img src=\"https://image.ibb.co/bQ86Ya/untitled_8.jpg\" alt=\"GitHub Logo\"></p>\n<h4 id=\"tip--representación-usando-arrays\">[Tip. | Representación usando Arrays]</h4>\n<p>Usa un arreglo unidimensional del tipo booleano para representar la tabla de\nasientos del avión. Inicializa todos los elementos del arreglo con -false-\npara indicar que todos los asientos están vacíos. A medida que se asigne cada\nasiento, establezca el elemento correspondiente del arreglo en true para\nindicar que ese asiento ya no está disponible.</p>\n<p>Tu aplicación nunca deberá asignar un asiento que ya haya sido asignado.\nCuando esté llena la sección económica o primera clase, tu programa deberá\npreguntar a la persona si acepta ser colocada en la sección de primera clase\n(y viceversa).</p>\n<p><img src=\"https://image.ibb.co/nH4rzF/avion_6.jpg\" alt=\"GitHub Logo\"></p>\n<p>Si la persona acepta, haga la asignación de asiento apropiada.</p>\n<p>Si no, debe imprimir el mensaje “El próximo vuelo sale en 3 horas”.</p>\n<p><img src=\"https://image.ibb.co/d2Hpmv/avion_7.jpg\" alt=\"GitHub Logo\"></p>\n<h3 id=\"2-buscaminas\">2. Buscaminas</h3>\n<p>El juego de buscaminas funciona de la siguiente forma:</p>\n<p>Se muestra una tabla donde se encuentran celdas vacías, con número o con minas.\nEn caso de oprimir una mina entonces el juego termina, si se oprimen lugares\nsin minas (vacía o de número), el juego continúa.</p>\n<p><img src=\"https://lh4.googleusercontent.com/c4jnMEV2CirXxh8CRzP1y6_VSqfPOLNQnTGyv2uKyPzEMfa42ztBClyMCigW7K3dJqNWacIJDjaj-kfVDFWtQbHySxNhSSRBPVnf2Q2SbHK3MUkWD0WMpsVyXeUAfrI11ya9heW5lng\" alt=\"Buscaminas\"></p>\n<h4 id=\"preguntas-guía\">Preguntas guía</h4>\n<ul>\n<li>¿Cómo puedes estructurar el tablero en el navegador? (pista: HTML)</li>\n<li>¿Cómo puedes diferenciar una bomba de un número o de una celda vacía en el\nHTML?</li>\n<li>¿Qué evento necesitas para captar el click del usuario?</li>\n<li>Una vez que el usuario haga click sobre la \"celda\", ¿qué tiene que pasar?</li>\n<li>¿Cómo podemos hacer que elementos aparezcan y desaparezcan en el HTML?</li>\n<li>¿Cómo hacemos para que ya no se puedan ingresar clicks del usuario? (pista:\nremoveEventListener)</li>\n</ul>\n<h4 id=\"requerimientos\">Requerimientos</h4>\n<ul>\n<li>Mostrar una tabla de 4 x 4 (con bombas, celdas vacías y números en posición\nfija)</li>\n<li>Al dar clic en una celda vacía, cambiar de color de la celda.</li>\n<li>Al dar clic en una celda con bomba, terminar el juego (no debo poder clickear\nmás celdas) y mostrar mensaje: “Esto ha explotado”</li>\n<li>Al dar clic en una celda con un número, mostrar el número que tiene.</li>\n<li>Crear un botón Reiniciar que comience de nuevo el juego.</li>\n</ul>\n<h5 id=\"puntos-extra\">Puntos extra</h5>\n<ul>\n<li>Al dar clic fuera de la tabla mostrar mensaje: “Sigue jugando”. (inner html o\nalert).</li>\n<li>Preguntar el tamaño de la tabla al usar.</li>\n<li>Preguntar el nivel de dificultad deseada (fácil o difícil y significa el\nnúmero de bombas que tendrá)</li>\n<li>Llenar de manera automática todo (bombas, celdas vacías y números)</li>\n</ul>\n<h4 id=\"3-crear-un-menú-de-hamburguesa\">3. Crear un menú de hamburguesa</h4>\n<p>Un menú de hamburguesa nos permite tener escondido el menú y únicamente mostrar\nun botón (3 líneas horizontales) que cuando lo apretamos (o hacemos click), se\nmuestra en la pantalla todas las opciones del menú.</p>\n<p>Algo así:</p>\n<p><img src=\"http://i.imgur.com/JKJ8V9v.gif\" alt=\"Hamburger Menu\"></p>\n<p>Replicar esa funcionalidad usando DOM y CSS. (No agregar efectos \"bonitos\",\núnicamente enfocarse en funcionalidad)</p>\n<h4 id=\"4-crear-tabs\">4. Crear tabs</h4>\n<p>Las tabs nos sirven para agrupar contenido similar usando solo un espacio.</p>\n<p>Algo así:</p>\n<p><img src=\"https://diypm8fk7dlz0.cloudfront.net/support/wp-content/uploads/2014/06/simulate-tabs.gif\" alt=\"Tabs Menu\"></p>\n<p>Replicar esa funcionalidad usando DOM y CSS. (No agregar efectos \"bonitos\",\núnicamente enfocarse en funcionalidad)</p>\n<h4 id=\"5-crear-un-menú-drop-down\">5. Crear un menú drop down</h4>\n<p>El menú drop down nos ayuda a ahorrar espacio en un menú, ya que agrupa\nelementos similares.</p>\n<p>Algo así:</p>\n<p><img src=\"https://cdn.codemyui.com/wp-content/uploads/2016/06/jQuery-Dropdown-Navigation-Menu.gif\" alt=\"Drop Down Menu\"></p>\n<h4 id=\"6-mini-zoo\">6. Mini Zoo</h4>\n<p>Esta página permite elegir efectos como <strong>sepia</strong>, <strong>blanco y negro</strong> e\n<strong>invertir colores</strong> que deseamos que obtengan nuestras imágenes.\nDeberás replicarla usando DOM y CSS.</p>\n<p>Veamos como debe quedar la página...\n<img src=\"https://fotos.subefotos.com/33a270779462a9ffe98ae8c2b528087co.gif\" alt=\"Mini Zoo\"></p>\n<h2 id=\"solucionarios\">Solucionarios</h2>\n<p>A continuación Silvana, Meme, Amalia, Karla e Inti te explican cómo resolvieron\ncada uno de los ejercicios anteriores.</p>\n<h3 id=\"1-aerolínea\">1. Aerolínea</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ov2pYXulNvc?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"2-buscaminas-1\">2. Buscaminas</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ZtnY3ojz91k?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"3-menú-de-hamburguesa\">3. Menú de Hamburguesa</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ej2MVZpPaoM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"4-tabs\">4. Tabs</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/nEKbaKIat1g?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"5-menú-dropdown\">5. Menú dropdown</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/yV7L6r6D464?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"6-mini-zoo-1\">6. Mini Zoo</h4>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://docs.google.com/presentation/d/e/M2RPWTuo2SmrWT6nId2UrLyK5IXGeBQ_dMG_VN_FFw/edit\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 9,
          "durationString": "6h"
        },
        "08-quiz": {
          "questions": [
            {
              "title": "1) Completa el siguiente enunciado: Las etiquetas HTML siempre serán nodos de tipo _______.",
              "description": "",
              "answers": [
                "Texto",
                "Comentario",
                "Elemento",
                "Atributo"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) En la siguiente imagen, el texto ¡Hola Mundo! ¡La programación es muy cool! entre las etiquetas h1, corresponde a un nodo tipo ______",
              "description": "<pre><code class=\"language-html\">&lt;body&gt;\n  &lt;h1&gt;¡Hola Mundo! ¡La programación es muy cool!&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre>",
              "answers": [
                "Condicional",
                "Texto",
                "Elemento",
                "Atributo"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "3) El DOM nos sirve para",
              "description": "",
              "answers": [
                "Entrar a los elementos de una página html y modificar sus propiedades",
                "Acceder a los elementos del navegador y modificarlos",
                "Dominar el mundo de la programación",
                "Crear bucles y condicionales"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Cuando quiero acceder u obtener un elemento único de mi página web a través de su identificador, ¿qué método/métodos de selección del DOM puedo utilizar?",
              "description": "",
              "answers": [
                "<code>.getElementsByTagName();</code>",
                "<code>.getElementsByClassName();</code>",
                "<code>.getElementById();</code>",
                "<code>.querySelector();</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "5) Para acceder a elementos de mi página web que tienen la misma etiqueta HTML, ¿qué método/métodos del DOM puedo utilizar?",
              "description": "",
              "answers": [
                "<code>.getElementsByTagName();</code>",
                "<code>.getElementsByClassName();</code>",
                "<code>.getElementById();</code>",
                "<code>.querySelector();</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "6) Selecciona los objetos del BOM",
              "description": "",
              "answers": [
                "Location",
                "Screen",
                "HTMLtags",
                "Navigator"
              ],
              "solution": [
                0,
                1,
                3
              ]
            },
            {
              "title": "7) BOM define ______ métodos para manipular el tamaño y la posición de la ______",
              "description": "",
              "answers": [
                "dos, ventana",
                "cuatro, ventana",
                "tres, etiqueta",
                "dos, información"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "8) ¿Para qué puedo utilizar los atributos data?",
              "description": "",
              "answers": [
                "Para agregar estilos a través de css a un elemento del HTML",
                "Para identificar a un elemento del DOM",
                "Para obtener el valor de una entrada de texto",
                "Para almacenar datos en las etiquetas HTML sin modificar la presentación\ndel documento"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "9) ¿Cuál de las siguientes opciones es la correcta para hacer uso de los atributos data?",
              "description": "",
              "answers": [
                "<p>Snippet 1:</p>\n<pre><code class=\"language-html\"> &lt;ul&gt;\n   &lt;li data-lista=\"frutas\"&gt;Manzana&lt;/li&gt;\n   &lt;li data-lista=\"frutas\"&gt;Peras&lt;/li&gt;\n   &lt;li data-lista=\"frutas\"&gt;Fresas&lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n",
                "<p>Snippet 2:</p>\n<pre><code class=\"language-html\"> &lt;ul&gt;\n   &lt;li data=\"frutas\"&gt;Manzana&lt;/li&gt;\n   &lt;li data=\"frutas\"&gt;Peras&lt;/li&gt;\n   &lt;li data=\"frutas\"&gt;Fresas&lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n",
                "<p>Snippet 3:</p>\n<pre><code class=\"language-html\"> &lt;ul&gt;\n   &lt;li data-lista-frutas&gt;Manzana&lt;/li&gt;\n   &lt;li data-lista-frutas&gt;Peras&lt;/li&gt;\n   &lt;li data-lista-frutas&gt;Fresas&lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n",
                "<p>Snippet 4:</p>\n<pre><code class=\"language-html\"> &lt;ul&gt;\n   &lt;li data-lista(frutas)&gt;Manzana&lt;/li&gt;\n   &lt;li data-lista(frutas)&gt;Peras&lt;/li&gt;\n   &lt;li data-lista(frutas)&gt;Fresas&lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "10)  Viendo el siguiente código, ¿cómo accedemos a nuestros atributos data a través de js?",
              "description": "<pre><code class=\"language-html\">&lt;p id=\"text\" data-autor=\"Gustavo Monet\"&gt;\n  Aquí está nuestro texto\n&lt;/p&gt;\n</code></pre>",
              "answers": [
                "<p>Snippet 1:</p>\n<pre><code class=\"language-js\">const text = document.getElementById('text');\nconst autor = autor.dataset;\n</code></pre>\n",
                "<p>Snippet 2:</p>\n<pre><code class=\"language-js\">const text = document.getElementById('text');\nconst autor = dataset.text.autor;\n</code></pre>\n",
                "<p>Snippet 3:</p>\n<pre><code class=\"language-js\">const text = document.getElementById('text');\nconst autor = text.dataset.autor;\n</code></pre>\n",
                "<p>Snippet 4:</p>\n<pre><code class=\"language-js\">const text = document.getElementById('text');\nconst text.dataset = autor;\n</code></pre>\n"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "11) ¿A través de qué método eliminas un nodo del DOM?",
              "description": "",
              "answers": [
                "elementoPadre.removeAttribute(<strong>nodo</strong>);",
                "elementoPadre.appendChild(<strong>nodo</strong>);",
                "elementoPadre.removeChild(<strong>nodo</strong>);",
                "elementoPadre.removeNode(<strong>nodo</strong>);"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "12) ¿Con qué método creas un evento?",
              "description": "",
              "answers": [
                ".addEventListener('____', <strong>funcion</strong>);",
                ".createEvent(' _____',<strong>funcion</strong>);",
                ".createElement('_____');",
                ".actionListener('_____');"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "13) ¿Qué son los eventos?",
              "description": "",
              "answers": [
                "Acciones que realiza el navegador cuando algo no anda bien.",
                "Acciones que se desencadenan a partir de la interacción del usuario con\nun elemento de la página web.",
                "Fechas importantes para el navegador."
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "14) ¿Cómo agregas un evento a un elemento?",
              "description": "",
              "answers": [
                "<p>Snippet 1:</p>\n<pre><code class=\"language-js\">const boton = document.getElementById('boton');\nboton.createEventListener(click, funcion_a_ejecutar);\n</code></pre>\n",
                "<p>Snippet 2:</p>\n<pre><code class=\"language-js\">const boton = document.getElementById('boton');\nboton.addEventListener = 'click' + 'funcion_a_ejecutar';\n</code></pre>\n",
                "<p>Snippet 3:</p>\n<pre><code class=\"language-js\">const boton = document.getElementById('boton');\nboton.addEventListener('click', funcion_a_ejecutar);\n</code></pre>\n",
                "<p>Snippet 4:</p>\n<pre><code class=\"language-js\">const boton = document.getElementById('boton');\nboton = document.addEventListener('click', funcion_a_ejecutar);\n</code></pre>\n"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "15) En ocasiones tenemos que usar e.preventDefault() para",
              "description": "",
              "answers": [
                "Para prevenir cierto comportamiento que ya tienen los eventos.",
                "Para que nuestro evento tenga un valor por default.",
                "Para que el evento se ejecute en automático.",
                "Para prevenir que se llame al evento."
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz #1",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 10,
          "durationString": "30min"
        },
        "10-guided-exercises": {
          "title": "Clase Práctica",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=LtfSKzCjCC4",
              "id": "LtfSKzCjCC4"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>A continuación tienes más problemas de práctica. Estos problemas serán\nresueltos, paso a paso, por tu equipo de profes en una sesión presencial\n(<code>workshop</code>).</p>\n<p>Te sugerimos que intentes resolver los ejercicios por tu cuenta (o en equipo)\n<strong>antes</strong> de la sesión presencial. Así, ya vienes con dudas específicas y\nestarás familiarizada con los retos. Quizás, puedas tú presentar tu solución\nante el resto de la clase y así ayudar al resto de tus compañeras.</p>\n<h3 id=\"1-tic-tac-toe\">1. Tic Tac Toe</h3>\n<p>Crea una página web que implemente el juego Tic Tac Toe (también conocido como\ngato, michi, tres en línea, etc). Este es un divertido juego entre dos jugadores\n<strong>X</strong> y <strong>O</strong>, quienes marcan los espacios de un tablero 3x3 alternadamente,\nel ganador es quien primero consigue tener una línea horizontal, vertical o\ndiagonal de 3 espacios consecutivos con su elemento.\nPara esto deberás crear el tablero directamente en el archivo html y la\nfuncionalidad se desarrollará mediante uso del DOM.</p>\n<p>Para desarrollar el juego debemos tener en cuenta ciertos puntos:</p>\n<ol>\n<li>Debes contar con un botón <strong>RESET</strong> para limpiar el tablero y comenzar a\njugar desde cero.</li>\n<li>Bajo el tablero deberás indicar, al finalizar, qué elemento fue el ganador\no si se produjo un empate.</li>\n<li>Deben poder participar ambos jugadores, por ejemplo: el primer click\ncorresponde al elemento <strong>X</strong> y el siguiente click automáticamente\ncorresponde al elemento <strong>O</strong>, pudiendo así alternarse ambos turnos.</li>\n</ol>\n<p><img src=\"https://d30y9cdsu7xlg0.cloudfront.net/png/25029-200.png\" alt=\"Tic Tac Toe\"></p>\n<h3 id=\"2-creando-animación-en-el-dom\">2. Creando animación en el DOM</h3>\n<p>Necesitamos generar 12 cuadros blancos en filas de 3. Uno de esos cuadros\nserá de un color diferente. Necesitamos mover ese cuadro a través de los\ncuadros blancos usando las flechas del teclado.</p>\n<p>En el siguiente video explicamos un poco más el ejercicio:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/LtfSKzCjCC4?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"3-freelancer-v2\">3. Freelancer v2</h3>\n<p>¿Recuerdas el reto de código de <a href=\"https://github.com/Laboratoria-learning/freelancer\" target=\"_blank\">Freelancer</a>?\nAhora, nos enfocaremos en replicar la funcionalidad de la sección de <code>Portfolio</code>\nque es el modal al dar click sobre cada una de las imágenes. Debe quedar como\nen la siguiente imagen:</p>\n<p><img src=\"https://media.giphy.com/media/xT9IgDSValpayTy8QE/giphy.gif\" alt=\"Freelancer Portfolio\"></p>\n<h3 id=\"4-nuestras-coders-v2\">4. Nuestras Coders v2</h3>\n<p>¿Recuerdas el ejercicio guíado de <a href=\"https://lms.laboratoria.la/cohorts/test/courses/interactive-site/00-html-and-css/14-guided-exercises\" target=\"_blank\">Nuestras Coders</a>?\nAhora agregaremos un filtro para seleccionar a las coders dependiendo de su sede.\nAl final, deberá quedarte algo así:</p>\n<p><img src=\"https://media.giphy.com/media/xT9IgwHr6d1LObJt16/giphy.gif\" alt=\"Nuestras Coders\"></p>\n<h3 id=\"5-captcha\">5. Captcha</h3>\n<p>En la vida diaria usamos servicios que generan el <strong>CAPTCHA</strong>.\nEl más usado es el de Google, puedes encontrar su documentación <a href=\"https://developers.google.com/recaptcha/docs/display?authuser=1\" target=\"_blank\">aquí</a>.\nEstos CAPTCHA tienen como objetivo final poder identificar si eres o no un\nhumano y van cambiando conforme avanza la tecnología.</p>\n<p>Inicialmente consistía en un conjunto de imágenes que el usuario debía\ndeterminar el contenido de las mismas e indicarlo al sistema. Hoy en día\nevalúan tu comportamiento en el navegador, y de tener dudas te pide evaluar un\nconjunto de imágenes mucho más grande.</p>\n<p>Armaremos un Captcha (tal cual se muestra en el diseño de abajo), este\ncomprobará que el usuario escriba lo mismo que el Captcha que le\nproporcionaremos. El valor ingresado se evaluará al momento de que el usuario\nhaga clic en el símbolo <strong>✓</strong> y se generará otro código cuando el usuario haga\nclic en el símbolo <strong>↻</strong>.</p>\n<p>Dato: Genera los números y letras de manera random</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\" target=\"_blank\">Math.random()</a></li>\n</ul>\n<p><img src=\"https://fotos.subefotos.com/299269b4ed8aac7e0a445f0c76355612o.gif\" alt=\"Captcha\"></p>\n",
          "order": 11,
          "durationString": "2h"
        },
        "11-code-challenges": {
          "title": "Retos",
          "type": "practice",
          "format": "self-paced",
          "duration": 1200,
          "body": "<h2 id=\"1-twitter\">1. Twitter</h2>\n<p>En este reto, vamos a replicar el newsfeed de Twitter, para ello vamos a seguir\nun flujo de versiones que te guiarán para enfocarte de una manera más eficiente\n:)</p>\n<p>Puedes adaptar el diseño como mejor te parezca, <em>pero no tardes mucho\ndefiniendo los colores o fuentes. Por último puedes replicar el diseño de la\n<a href=\"https://twitter.com\" target=\"_blank\">página oficial</a></em> :). Aquí un ejemplo:</p>\n<p><img src=\"https://media.giphy.com/media/3ov9jP4RIGQCUQOScg/giphy.gif\" alt=\"Ejemplo Twitter DOM\"></p>\n<h3 id=\"versión-001\">Versión 0.0.1</h3>\n<ol>\n<li>Diseñar un formulario que permita ingresar un texto y un botón para \"twittear\".</li>\n<li>Agregar un evento de click al botón o de submit al formulario.</li>\n<li>En el evento, obtener el texto.</li>\n<li>Agregar el texto al HTML.</li>\n</ol>\n<h3 id=\"versión-002\">Versión 0.0.2</h3>\n<ol>\n<li>No ingresar texto vacío (deshabilitar el botón de \"twittear\").</li>\n<li>Contar la cantidad de caracteres de forma regresiva.</li>\n</ol>\n<h3 id=\"versión-003\">Versión 0.0.3</h3>\n<ol>\n<li>Si pasa los 140 caracteres, deshabilitar el botón.</li>\n<li>Si pasa los 120 caracteres, mostrar el contador con OTRO color.</li>\n<li>Si pasa los 130 caracteres, mostrar el contador con OTRO color.</li>\n<li>Si pasa los 140 caracteres, mostrar el contador en negativo.</li>\n</ol>\n<h3 id=\"versión-004\">Versión 0.0.4</h3>\n<ol>\n<li>Al presionar enter(<code>/n</code>) que crezca el textarea de acuerdo al tamaño del\ntexto.</li>\n</ol>\n<h3 id=\"versión-005-extra\">Versión 0.0.5 (Extra)</h3>\n<ol>\n<li>Si la cantidad de caracteres ingresados (sin dar un enter), supera al tamaño\ndel textarea por defecto, debe de agregarse una línea más para que no\naparezca el scroll. (Si en caso aplica)</li>\n</ol>\n<h3 id=\"versión-006-extra\">Versión 0.0.6 (Extra)</h3>\n<ol>\n<li>Agregar la hora en que se publicó el tweet. En el formato de 24 horas: <code>hh:mm</code>.</li>\n</ol>\n<blockquote>\n<p>Nota: Para dar formato a la fecha y hora, puedes crear tu propia función o\nusar una librería como <a href=\"https://momentjs.com/\" target=\"_blank\"><code>moment.js</code></a>.</p>\n</blockquote>\n<h2 id=\"2-trello\">2. Trello</h2>\n<p>En este reto, vamos a replicar el tablero de Trello, para ello vamos a seguir\nun flujo de versiones que te guiarán en dónde enfocarte desde un inicio.</p>\n<p>Al igual que en el reto anterior, puedes usar tu propio estilo o seguir la del\n<a href=\"https://trello.com\" target=\"_blank\">sitio original</a>. A continuación puedes ver como debe quedar:</p>\n<p><img src=\"https://media.giphy.com/media/l1J9Ai0amYnS22ChW/giphy.gif\" alt=\"Ejemplo - Clon de Trello\"></p>\n<h3 id=\"versión-001-1\">Versión 0.0.1</h3>\n<ul>\n<li>Se mostrará el texto \"Añadir una lista ...\".</li>\n<li>Al hacer click se debe ocultar el texto y mostrar un formulario.</li>\n<li>El formulario está conformado por un input y un botón para que pueda\nañadir tareas a tu lista.</li>\n</ul>\n<h3 id=\"versión-002-1\">Versión 0.0.2</h3>\n<ul>\n<li>Al dar click en el botón de \"Guardar\", se mostrará un nuevo cuadro donde\nestará el nombre de la lista agregada.</li>\n<li>Mostrar un texto de \"Añadir una tarea\" dentro de la lista.</li>\n</ul>\n<h3 id=\"versión-003-1\">Versión 0.0.3</h3>\n<ul>\n<li>Al dar click en \"Añadir una tarea\", deberá mostrar un formulario con un\ntextarea y un botón que diga \"Añadir\".</li>\n</ul>\n<h3 id=\"versión-004-1\">Versión 0.0.4</h3>\n<ul>\n<li>Poner <em>focus</em> al input al dar click en \"Agregar nueva tarea\".</li>\n<li>Al dar click en el botón de \"Añadir\", deberá aparecer el texto de la tarea\ndebajo del título de la lista.</li>\n</ul>\n<h3 id=\"versión-005\">Versión 0.0.5</h3>\n<ul>\n<li>Mostrar el formulario nuevamente debajo de la última tarea añadida.</li>\n</ul>\n<h3 id=\"versión-006-extra-1\">Versión 0.0.6 (Extra)</h3>\n<ul>\n<li>Poder agregar múltiples listas con tarjetas. Para esto, el formulario de\n\"Añadir una lista\" debe aparecer a la derecha de la lista anteriormente\ncreada.</li>\n</ul>\n<h2 id=\"3-laberinto-opcional\">3. Laberinto (Opcional)</h2>\n<p>Crea una página web que implemente el juego del Laberinto utilizando DOM y\neventos. El juego del Laberinto es un divertido Puzzle donde podrás darle a\ncualquier jugador la capacidad de interactuar con el mapa hasta encontrar la\nsalida.</p>\n<p>Recuerda que en Laberinto el objetivo es ir de un lugar A hacia un lugar B\núnicamente por el camino correcto.</p>\n<blockquote>\n<p>El Laberinto tiene raíces tan profundas como el mito griego sobre Teseo, que\nfue enviado a un laberinto para matar al minotauro. Teseo usó una bola de hilo\npara ayudarse a encontrar su camino de regreso, una vez que había terminado\ncon la bestia.</p>\n</blockquote>\n<p><img src=\"http://photos1.blogger.com/blogger/6613/878/1600/laberinto04.jpg\" alt=\"GitHub set up-w800\"></p>\n<p>Para interactuar con Teseom el jugador tendrá que hacer uso de las flechas de su\nteclado para poder mover  y ayudar a Teseo en su búsqueda de la salida.</p>\n<h3 id=\"tips-para-la-solución\">Tips para la solución</h3>\n<p>A continuación, encontrarás tips que podrían ayudarte con la solución,\nmucha suerte!</p>\n<h4 id=\"tip-1--el-programa\">[Tip 1. | El Programa]</h4>\n<p>Crea un programa que represente un Teseo en un Laberinto y que implemente\nel algoritmo de búsqueda de un camino de salida.</p>\n<p><img src=\"media/15034081309333/15034128157197.png\" alt=\"GitHub set up-w800\"></p>\n<p>Para que sea más fácil para nosotros, asumiremos que nuestro laberinto está\ndividido en \"cuadrados\". Cada cuadrado del laberinto está abierto u ocupado por\nuna sección de pared. Teseo sólo puede pasar a través de los cuadrados abiertos\ndel laberinto. Si Teseo se topa con una pared debe intentar una dirección diferente.</p>\n<h4 id=\"tip-2--creando-el-laberinto\">[Tip 2. | Creando el Laberinto]</h4>\n<p>Para crear el Laberinto se puede usar un array de cadenas para poder representarlo.\nLa notación que puedes usar para cada elemento dentro del mapa son las siguientes:</p>\n<ol>\n<li><code>*</code> Una pared</li>\n<li><code>_</code> Un espacio vacío</li>\n<li><code>o</code> Posición inicial del jugador</li>\n<li><code>W</code> Salida del laberinto.</li>\n</ol>\n<pre><code class=\"language-javascript\">const mazeMap = [\n  '******************',\n  '*_________*______*',\n  '*_*****_____******',\n  '*______***__*__*_*',\n  '***_*____*____**_*',\n  '*___*____**__*___*',\n  '*_********__**_*_*',\n  '*____*______*__*_*',\n  '*_**_*__*****_**_*',\n  '*o*__*________**W*',\n  '******************',\n];\n</code></pre>\n<p>Ese mapa se puede traducir en lo siguiente con la función de renderización/dibujo\nadecuado:</p>\n<p><img src=\"media/15034081309333/Screen%20Shot%202017-08-22%20at%2010.17.30%20AM.png\" alt=\"GitHub set up-w400\"></p>\n<h4 id=\"tip-3--identificando-objetos-y-funciones\">[Tip 3. | Identificando Objetos y Funciones]</h4>\n<p>Es importante identificar los objetos presentes. Si hacemos un análisis a la\nimagen anterior nos daremos cuenta que los objetos presentes son los siguientes:</p>\n<ol>\n<li>Maze: Objeto que representa el Laberinto</li>\n<li>Player: Objeto que representa a Teseo</li>\n<li>MazeInterface: Objeto que representa la interfaz de Juego usando DOM</li>\n</ol>\n<p>Además es importante identificar propiedades asociadas a estos objetos así como\nlas  principales funciones  presentes. A continuación presentamos la interfaz\ndel código de estos objetos y funciones.</p>\n<pre><code class=\"language-javascript\">const maze = {\n  matrix: undefined,           // representa el mapa del laberinto\n  startX: undefined,           // posición x inicial del laberinto\n  startY: undefined,           // posición y inicial del laberinto\n  endX: undefined,             // posición x que representa la salida\n  endY: undefined,             // posición y que representa la salida\n  startOrientation: undefined, // orientación inicial\n};\n\nconst player  = {\n  x: undefined,           // posición x actual del jugador\n  y: undefined,           // posición x actual del jugador\n  orientation: undefined, // orientación actual del jugador\n};\n\nconst ORIENTATION = {\n  LEFT: 1,\n  UP: 2,\n  RIGHT: 3,\n  DOWN: 4,\n};\n\n// representa la inferfaz usando DOM del laberinto\nconst mazeInterface = [];\n\n// dibujar laberinto\nconst renderMaze = (maze, player) =&gt; {};\n// establecer estilo en la posición x, y\nconst setStyleAt = (maze, x, y, style) =&gt; {};\n\n// preguntar si (x,y) representa un muro, es decir  '*'\nconst isWall = (maze, x, y) =&gt; {};\n// preguntar si (x,y) representa un espacio vacio, es decir  '_'\nconst isSpace = (maze, x, y) =&gt; {};\n// preguntar si (x,y) representa la salida del laberinto, es decir 'W'\nconst isEnd = (maze, x, y) =&gt; {};\n\n//  rotar a la izquierda\nconst turnLeft = (player) =&gt; {};\n//  rotar a la derecha\nconst turnRight = (player) =&gt; {};\n//  mover una posición hacia adelante en la dirección de player.direction\nconst moveForward = (player) =&gt; {};\n\n// algoritmo de búsqueda para encontrar un camino de salida para un\n// laberinto cualquiera\nconst exitMaze = (player) =&gt; {};\n</code></pre>\n<h4 id=\"tip-4--preguntas-guía\">[Tip 4. | Preguntas guía]</h4>\n<ul>\n<li>¿Cómo hacemos para detectar el teclado del usuario? En particular, ¿las flechas?</li>\n<li>¿Cómo hacemos para mover al personaje en el tablero?</li>\n<li>¿Cómo hacemos para limitar el movimiento del personaje en el tablero? (si hay\nuna pared, por ejemplo)</li>\n<li>¿Qué significa pintar o renderizar?</li>\n<li>¿Cómo hacemos para renderizar el tablero?</li>\n</ul>\n",
          "order": 12,
          "durationString": "20h"
        },
        "14-requiz": {
          "questions": [
            {
              "title": "1) El nodo document, es padre de los objetos o nodos",
              "description": "",
              "answers": [
                "Nodos <code>meta</code> dentro de <code>head</code>",
                "Nodos script dentro de <code>body</code>",
                "Los nodos <code>head</code> y <code>body</code>",
                "No es padre de ningún nodo"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) Propiedades de los nodos del DOM",
              "description": "",
              "answers": [
                "<code>nodeName</code>",
                "<code>nodeClass</code>",
                "<code>nodeType</code>",
                "<code>nodeValue</code>",
                "<code>nodeID</code>"
              ],
              "solution": [
                0,
                2,
                3
              ]
            },
            {
              "title": "3) Para el siguiente elemento, ¿cómo puedo cambiar el color de fondo de párrafo?",
              "description": "<pre><code class=\"language-html\">&lt;p id=\"paragraph\"&gt;Hola, soy un párrafo sensual&lt;/p&gt;\n</code></pre>",
              "answers": [
                "<p>Snippet 1:</p>\n<pre><code class=\"language-js\">const paragraph = document.getElementById('paragraph');\nparagraph.style.background = 'red';\n</code></pre>\n",
                "<p>Snippet 2:</p>\n<pre><code class=\"language-js\">const paragraph = document.getElementById('paragraph');\nparagraph.style.backgroundColor = 'red';\n</code></pre>\n",
                "<p>Snippet 3:</p>\n<pre><code class=\"language-js\">const paragraph = document.getElementById('paragraph');\nparagraph.backgroundColor = 'red';\n</code></pre>\n"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "4) document.getElementsByClassName('unaClase'), me regresa un",
              "description": "<pre><code class=\"language-js\">const elementos = document.getElementsByClassName('unaClase');\nconsole.log(elementos);\n</code></pre>",
              "answers": [
                "Arreglo de nodos HTML con la clase <code>unaClase</code>;",
                "Arreglo con el valor de texto contenido dentro de todos los elementos\ncon clase <code>unaClase</code>;",
                "Todos los caracteres del string <code>unaClase</code>;",
                "Me regresa solo el primer Elemento con clase <code>unaClase</code>;"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) Cuando quiero acceder a todos los elementos que comparten la misma etiqueta html, utilizo",
              "description": "",
              "answers": [
                "<code>.querySelector();</code>",
                "<code>.getElementsByClassName();</code>",
                "<code>.lastChild();</code>",
                "<code>.getElementsByTagName();</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "6) ¿Qué función utilizamos para crear animaciones con JS?",
              "description": "",
              "answers": [
                "<code>location.href</code>",
                "<code>setTimeout();</code>",
                "<code>setInterval();</code>",
                "<code>confirm();</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) ¿Por qué es importante el objeto screen ?",
              "description": "",
              "answers": [
                "Para conocer resoluciones más utilizadas",
                "Para identificar a un elemento del DOM",
                "Para adaptar los diseños a las resoluciones más utilizadas",
                "Para almacenar  datos en las etiquetas HTML sin modificar la presentación\ndel document"
              ],
              "solution": [
                0,
                2
              ]
            },
            {
              "title": "8) ¿Cómo puedo obtener la URL de la página anterior a la que estoy en este momento?",
              "description": "",
              "answers": [
                "<code>document.referrer</code>",
                "<code>document.URL</code>",
                "<code>document.title</code>",
                "<code>document.lastModified</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "9) ¿Qué método utilizamos para agregar a listaDeCompras, un nuevo elemento llamado elementoLista?",
              "description": "<pre><code class=\"language-html\">  &lt;ul id=\"listaDeCompras\"&gt;\n    &lt;li&gt;Leche Deslactosada&lt;/li&gt;\n    &lt;li&gt;Arequipe&lt;/li&gt;\n    &lt;li&gt;Harina para Hotcakes&lt;/li&gt;\n    &lt;li&gt;Moras&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre>",
              "answers": [
                "document.createTextNode(elementoLista);",
                "listaDeCompras.appendChild(elementoLista);",
                "listaDeCompras.getElementByName('elementoLista');"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "10) ¿Qué evento se desencadena al seleccionar el texto de un input o textarea?",
              "description": "",
              "answers": [
                "onclick",
                "onselect",
                "onmouseover",
                "ondblclick"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "11) Para almacenar datos en las etiquetas HTML sin modificar la presentación del documento, usamos",
              "description": "",
              "answers": [
                "Atributos data",
                "Etiquetas semánticas",
                "Variables",
                "Datos-HTML"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "12) Sintaxis de los atributos data",
              "description": "",
              "answers": [
                "const data = \"valor\"",
                "data-nombreAsignado = \"valor\"",
                "data = \"valor\"",
                "nombreAsignado-Datos(valor)"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "13) El método addEventListener nos sirve para",
              "description": "",
              "answers": [
                "Crear un elemento",
                "Crear una clase desde el DOM",
                "Crear un evento",
                "Crear un nodo texto"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "14) ¿Cuántos métodos define el BOM para manipular la ventana?",
              "description": "",
              "answers": [
                "1",
                "2",
                "3",
                "4"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "15) Selecciona los objetos del BOM",
              "description": "",
              "answers": [
                "Location",
                "Screen",
                "HTMLtags",
                "Navigator"
              ],
              "solution": [
                0,
                1,
                3
              ]
            }
          ],
          "title": "Quiz #2: _requizzing_",
          "type": "quiz",
          "format": "guided",
          "duration": 30,
          "order": 13,
          "durationString": "30min"
        },
        "15-closing": {
          "title": "Closing: Haciendo tu sitio web interactivo",
          "type": "seminar",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"agenda\">Agenda</h2>\n<h3 id=\"1-repasemos-qué-hemos-aprendido-hasta-ahora\">1. Repasemos qué hemos aprendido hasta ahora</h3>\n<h3 id=\"2-conversemos-sobre-el-sentimiento-de-la-clase-resultado-del-la-auto-evaluación\">2. Conversemos sobre el sentimiento de la clase (resultado del la <code>auto-evaluación</code>)</h3>\n<h3 id=\"3-respondamos-las-preguntas-del-opening\">3. Respondamos las preguntas del opening</h3>\n<h4 id=\"dom\">DOM</h4>\n<ul>\n<li>¿Qué es el DOM?</li>\n<li>¿Qué es un selector?</li>\n<li>¿Cuál es la diferencia entre document.getElementById y document.getElementsByClassName?</li>\n<li>¿Cómo preguntamos por los hijos de un elemento usando el DOM?</li>\n<li>¿Cómo preguntamos por el padre de un elemento usando el DOM?</li>\n<li>¿Qué atributos CSS de un elemento se pueden modificar usando el DOM?</li>\n<li>¿Cómo podemos simular animación entre elementos HTML?</li>\n</ul>\n<h4 id=\"bom\">BOM</h4>\n<ul>\n<li>¿Qué es el BOM?</li>\n<li>¿En qué se relaciona el DOM con el BOM?</li>\n<li>¿Cuáles son algunos usos comunes del BOM?</li>\n</ul>\n<h4 id=\"modificando-el-dom\">Modificando el DOM</h4>\n<ul>\n<li>¿Se pueden crear nuevos nodos usando el DOM?</li>\n<li>¿Qué es un nodo?</li>\n<li>¿Cuántos tipos de nodos existen?</li>\n<li>¿Por qué decimos que el DOM tiene nodos?</li>\n<li>¿Por qué decimos que el DOM tiene nodos de objetos?</li>\n<li>¿Cómo accedemos a la propiedad style de body usando el DOM?</li>\n<li>¿Cuál es el nodo origen en el DOM?</li>\n<li>¿Cuál es el nodo origen en el BOM?</li>\n<li>¿Cuál es la diferencia entre nodo y elemento?</li>\n</ul>\n<h4 id=\"eventos\">Eventos</h4>\n<ul>\n<li>¿Qué es un evento?</li>\n<li>¿Cuáles son los eventos más utilizados en un navegador?</li>\n<li>¿Cómo detectamos un click del usuario?</li>\n<li>¿Cómo detectamos entrada de texto del usuario?</li>\n<li>¿Cómo detectamos el envio de un formulario?</li>\n<li>¿Podemos usar el evento submit a un input text?</li>\n<li>¿De qué nos sirve la palabra \"event\" o \"e\"?</li>\n<li>¿Cómo podemos almacenar o pasar información entre elementos HTML?</li>\n<li>¿Qué es event delegation?</li>\n<li>¿Qué es event propagation?</li>\n<li>¿Cómo definimos eventos propios?</li>\n<li>¿Cuál es la diferencia entre onClick y addEventListener(\"click\")?</li>\n</ul>\n",
          "order": 14,
          "durationString": "2h"
        }
      },
      "order": 0,
      "stats": {
        "duration": 2210,
        "durationString": "36.8h",
        "exerciseCount": 0,
        "partCount": 15
      }
    },
    "03-browser-apis": {
      "title": "Browser APIs",
      "bonus": false,
      "description": "<p>En esta unidad nos enfocaremos en las APIs del navegador, tendrás una base\npara enfrentarte al variado universo de APIs que HTML5 trae consigo.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Opening",
          "type": "read",
          "format": "self-paced",
          "duration": 25,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Qué es un Browser API</li>\n<li>A utilizar algunas Browser APIs</li>\n<li>Qué es un API</li>\n<li>Qué APIs nos ofrece HTML5</li>\n</ul>\n<h2 id=\"html5-y-la-magia-de-sus-apis\">HTML5 y la magia de sus APIs</h2>\n<p>Anteriormente, nos enteramos que HTML5 viene con un conjunto de APIs, vamos\na entrar un poco en contexto con la siguiente diapositiva:</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTVOkfyF6VYPu9b3p667Sorg5KW9xbC2KO_-dL04fXm5XlIzp6jgduLzZgnBDU5QqDQp3UQTkuOCi-_/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"760\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<blockquote>\n<h3 id=\"entonces-¿qué-es-una-api\">Entonces, ¿qué es una API?</h3>\n<p>Una interfaz de programación de aplicaciones es una colección de instrucciones\ny estándares de programación para acceder a una aplicación de software. Con\nuna API, es posible diseñar productos basados en el servicio que proporciona\nla API.</p>\n<p>HTML5 tiene varias APIs nuevas. Por ejemplo:</p>\n<ul>\n<li>Una API de dibujo en 2D utilizada con el nuevo elemento de lienzos para\nrepresentar gráficos y otras imágenes visuales</li>\n<li>Un mecanismo API de memoria caché que soporta aplicaciones web offline</li>\n<li>Una API para reproducir video y audio utilizado con los nuevos elementos de\nvideo y audio</li>\n<li>Una API de historial que hace que el historial de navegación sea accesible y\npermite que las páginas se agreguen a este</li>\n<li>Una API de arrastrar y soltar para ser utilizada con el atributo draggable</li>\n<li>Una API de edición para ser utilizada con el atributo contenteditable</li>\n<li>Almacenamiento del lado del cliente con APIs de JavaScript para pares de\nvalor clave y también bases de datos SQL intercaladas</li>\n</ul>\n<p>Este texto es un extracto del <a href=\"https://www.ibm.com/developerworks/ssa/web/library/wa-html5fundamentals3/index.html\" target=\"_blank\">blog publicado en IBM</a>\npor Grace Walker.</p>\n</blockquote>\n<h2 id=\"¿qué-apis-veremos-en-esta-unidad\">¿Qué APIs veremos en esta unidad?</h2>\n<p>En esta unidad nos enfocaremos en 4 APIs del navegador, pero no será una\nlimitante, lo que verás te dará una base para enfrentarte al variado universo\nde APIs que HTML5 trae consigo. Las APIs que revisaremos son <strong>Media, Web\nStorage, Geolocation y Drag and Drop</strong>.</p>\n<h2 id=\"¿quieres-saber-qué-apis-existen\">¿Quieres saber qué APIs existen?</h2>\n<p>En el sitio de <a href=\"http://html5index.org/\" target=\"_blank\">html5index.org</a> puedes encontrar la lista\nde HTML5 JavaScript APIs con algunos recursos para que puedas obtener mayor\ninformación. Como te darás cuenta, hay muchas de estas APIs y cubrirlas todas\nno sería posible, pero te sugerimos que no solo revises las que verás a\ncontinuación.</p>\n<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\nque debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a\nmedida que avanzas para validar que estás avanzando en la dirección correcta.\nQue te sirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<ul>\n<li>¿Qué son las  APIs del navegador?</li>\n<li>¿Cómo uso las APIs del navegador?</li>\n<li>¿Qué se necesita para la manipulación de audio y video?</li>\n<li>¿Cómo almaceno datos en el navegador?</li>\n<li>¿Cuál es la diferencia entre <code>localStorage</code> y <code>sessionStorage</code>?</li>\n<li>¿Cómo obtengo la ubicación actual del usuario?</li>\n<li>¿Qué significa DnD?</li>\n<li>¿Qué otras APIs del navegador conoces?</li>\n</ul>\n",
          "order": 0,
          "durationString": "25min"
        },
        "01-audio-video": {
          "title": "Media: Audio & Video",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>Aprender a grandes rasgos cómo usar el API de Audio y Video.</p>\n<h2 id=\"audio-y-video-en-la-web\">Audio y video en la web</h2>\n<blockquote>\n<p>Lxs desarrolladorxs web han querido usar video y audio desde hace mucho tiempo,\na inicio de los 2000, cuando empezamos a tener un ancho de banda lo\nsuficientemente rápido para soportar cualquier tipo de video (los archivos de\nvideo son más grandes que texto o incluso imágenes). Al principio, las\ntecnologías web nativas como HTML no tenían la habilidad para embeber video o\naudio en la web, así que tecnologías propietarias (o basadas en plugins) como\nFlash (y posteriormente Silverlight) se volvieron muy populares para manejar\neste tipo de contenido. Estas tecnologías funcionaron bien, pero tenían un gran\nnúmero de problemas, incluyendo que no funcionaban bien con HTML/CSS, seguridad\ny problemas de accesibilidad.</p>\n<p>Una solución nativa resolvería esto si se hiciera bien. Afortunadamente, unos\naños después, la especificación de HTML5 incluiría estos <em>features</em> con los\nelementos <code>&lt;video&gt;</code> y <code>&lt;audio&gt;</code>, y algunas JavaScript APIs para controlarlos.</p>\n</blockquote>\n<p>Este es un extracto de <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\" target=\"_blank\">la documentación de MDN</a>\nsobre las etiquetas de audio y video, para entrar en contexto de lo genial que\nfue agregar soporte nativo desde HTML5 con su API de media.</p>\n<h2 id=\"insertando-contenido-multimedia-a-nuestra-web\">Insertando contenido multimedia a nuestra web</h2>\n<p>Para insertar contenido multimedia en nuestra web, debemos usar las etiquetas\n<code>&lt;video&gt;</code> y <code>&lt;audio&gt;</code>. A continuación te mostramos unos ejemplos de cómo\ninsertarlos:</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"Video Tag\" src=\"//codepen.io/ivandevp/embed/gvMPjW/?height=265&amp;theme-id=0&amp;default-tab=html,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [Video Tag](https://codepen.io/ivandevp/pen/gvMPjW/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<iframe height=\"265\" scrolling=\"no\" title=\"Audio Tag\" src=\"//codepen.io/ivandevp/embed/PQzNoE/?height=265&amp;theme-id=0&amp;default-tab=html,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [Audio Tag](https://codepen.io/ivandevp/pen/PQzNoE/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<p>¿Te diste cuenta de lo sencillo que es agregarlo? Bueno, adicional a esto,\ndebemos de tener en cuenta lo siguiente:</p>\n<ul>\n<li>Atributos, en los ejemplos la etiqueta video y audio cuentan con un atributo\n<code>controls</code>, ¿te imaginas qué pasa si se lo quitas?. Así como este atributo hay\nmuchos más, conforme vayas necesitando irás reconociendo qué otros existen.</li>\n<li>Soporte entre navegadores, si te diste cuenta, solo usamos un video con\nextensión <code>.mp4</code> y un audio con extensión <code>.mp3</code>. No todos los navegadores\nsoportan el mismo formato, para garantizar que nuestro audio y/o video\nfuncione en cualquier formato, debemos de agregarlo nuestro recurso en\ndiversos formatos, eso lo logramos con la etiqueta <code>&lt;source&gt;</code>.</li>\n</ul>\n<h2 id=\"¿dónde-encuentro-la-lista-de-atributos-y-formatos-soportados\">¿Dónde encuentro la lista de atributos y formatos soportados?</h2>\n<p>La W3Schools (uno de tus mejores amigos en este momento) tiene una serie de\nrecursos que te pueden ayudar a obtener esta información.</p>\n<ul>\n<li><a href=\"https://www.w3schools.com/tags/tag_audio.asp\" target=\"_blank\">HTML <code>&lt;audio&gt;</code> Tag</a>, aquí\npuedes encontrar la lista de atributos que soporta esta etiqueta y formatos\nde audio que cada navegador soporta.</li>\n<li><a href=\"https://www.w3schools.com/tags/tag_video.asp\" target=\"_blank\">HTML <code>&lt;video&gt;</code> Tag</a>, aquí\npuedes encontrar la lista de atributos que soporta esta etiqueta y formatos\nde video que cada navegador soporta.</li>\n<li><a href=\"https://www.w3schools.com/tags/ref_av_dom.asp\" target=\"_blank\">HTML Audio/Video DOM Reference</a>,\nno olvidar que al ser etiquetas de HTML, éstas pueden ser manipuladas por el\nDOM, y por lo tanto cuentan con métodos y eventos que podemos utilizar. Esto\ntenlo como referencia, no es necesario que te memorices todo esto ahora mismo.</li>\n</ul>\n<h2 id=\"¿y-cómo-interactúo-con-la-api\">¿Y cómo interactúo con la API?</h2>\n<p>Interactuamos a través de la interfaz <code>HTMLMediaElement</code>, ésta agrega las\npropiedades y métodos necesarios para soportar capacidades básicas relacionados\na elementos multimedia (audio y video).</p>\n<p>Ejemplo:</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"HTMLMediaElement JS\" src=\"//codepen.io/ivandevp/embed/KQMWMy/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [HTMLMediaElement JS](https://codepen.io/ivandevp/pen/KQMWMy/) by\n  Ivan ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<p>¿Cómo te imaginas que sería con el audio? ¿Básicamente lo mismo no? Esperamos lo\nintentes y veas el resultado.</p>\n<p>¿Y cómo sería con jQuery?</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"HTMLMediaElement jQuery\" src=\"//codepen.io/ivandevp/embed/XZKMjx/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [HTMLMediaElement jQuery](https://codepen.io/ivandevp/pen/XZKMjx/)\n  by Ivan ([@ivandevp](https://codepen.io/ivandevp)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<p>Si bien jQuery nos permite manipular el DOM con mayor facilidad, no provee\nsoporte para <code>HTMLMediaElement</code>s, y lo que nos queda por hacer es obtener el\nelemento del DOM usando el método <code>.get</code> y debido a que es un único elemento\n(por lo tanto, el primero), hacemos <code>$video.get(0)</code> para poder interactuar con\nel API de video. Otro detalle interesante a notar es que, al estar esperando que\nel DOM esté listo a través de <code>$(document).ready</code> no significa necesariamente\nque el video haya cargado como tal, por eso, para obtener la duración, fue\nnecesario agregar un evento que nos indique que los datos del video se han\nterminado de cargar (<code>video.onloadeddata</code>).</p>\n<h2 id=\"recursos\">Recursos</h2>\n<p>Si deseas hacer una aplicación con audio y/o video, pero no se te ocurre de\ndónde obtener dicho audio y/o video, puedes obtener algunos gratuitos desde los\nsiguientes enlaces:</p>\n<ul>\n<li><a href=\"https://coverr.co/\" target=\"_blank\">Coverr</a></li>\n<li><a href=\"https://videos.pexels.com/\" target=\"_blank\">Pexels</a></li>\n<li><a href=\"https://clyp.it/\" target=\"_blank\">Clyp.it</a></li>\n</ul>\n<p>Si en alguna no te deja descargar, recuerda que eres una desarrolladora web y\ntienes superpoderes para inspeccionar elementos y obtener los enlaces desde\ntu Dev Tools ;).</p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-media-challenges": {
          "title": "Jugando con Audio & Video",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Practicar todo lo aprendido haciendo uso del API de Audio/Video</li>\n<li>Practicar, practicar y practicar</li>\n</ul>\n<h2 id=\"ejercicios\">Ejercicios</h2>\n<p>Debes subir todos tus ejercicios a <code>GitHub</code> y publicarlos en <code>gh-pages</code>.</p>\n<h3 id=\"reproductor-de-música\">Reproductor de Música</h3>\n<p>Arma tu reproductor de música con tus propios controles y diseño, tu reproductor\ndebería permitirte iniciar, pausar, adelantar y retroceder el audio así como\npoder controlar el volumen. Para este ejercicio, puedes tener tu audio\npredeterminado en el HTML.</p>\n<p>Puedes usar <a href=\"https://www.w3.org/2010/05/video/mediaevents.html\" target=\"_blank\">este website</a>\ncomo referencia interactiva.</p>\n<p>Si no se te ocurre bien el diseño, puedes usar este o cualquier otro que\nencuentres en internet.</p>\n<p><img src=\"https://www.dailydot.com/wp-content/uploads/c21/27/b76687f426e12252.png\" alt=\"Music Player\"></p>\n<h3 id=\"reproduce-en-hover\">Reproduce en hover</h3>\n<p>Busca tu(s) video(s) favorito(s) y muéstralos en tu sitio web, luego agrégale\nla funcionalidad de que se reproduzca cuando pases el mouse sobre el video\n(<code>hover</code>) y se pause cuando lo quites.</p>\n<p>Ejemplo:</p>\n<p><img src=\"https://media.giphy.com/media/3o7WIKDFzrbuFJIm9G/giphy.gif\" alt=\"Video on hover\"></p>\n<blockquote>\n<p>Nota: No se ve el mouse, pero el GIF parece que se pausa debido a que el mouse\nse saca de la imagen.</p>\n</blockquote>\n<h2 id=\"más-práctica-para-vol\">Más práctica para vol</h2>\n<h3 id=\"arma-tu-playlist\">Arma tu pLaylist</h3>\n<p>¿Cómo mejorarías la experiencia de playlist de videos de Youtube? Arma un JSON\ncon tu lista de videos favoritos que estén relacionados y muéstralo en una lista\nque te permita seleccionar y reproducir el video.</p>\n<p>Ejemplo:</p>\n<p><img src=\"https://img.labnol.org/di/youtube-playlist.png\" alt=\"Video playlist\"></p>\n<p>No es necesario seguir la misma estructura, puedes proponer la que tu desees,\npiensa en cómo sería la experiencia en móvil.</p>\n<h3 id=\"red-social-de-música\">Red social de Música</h3>\n<p>¿Cómo darías la experiencia a tus usuarios de que puedan armar su propio\nplaylist y que lo puedan compartir con su red de amigos? Tal vez, mezclando tus\npoderes con Firebase y haciendo uso de algún API público. :thinking_face:</p>\n",
          "order": 2,
          "durationString": "2h"
        },
        "03-web-storage": {
          "title": "Web Storage",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/hb8O0qRqiSk",
              "id": "hb8O0qRqiSk"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Aprender a almacenar datos en el navegador a través de la API de Web Storage</li>\n</ul>\n<h2 id=\"almacenamiento-web\">Almacenamiento web</h2>\n<p>La API de almacenamiento web proporciona los mecanismos mediante los cuales\nel navegador puede almacenar información de tipo <strong>clave/valor</strong>, de una forma\nmucho más intuitiva que utilizando cookies.</p>\n<p>Los dos mecanismos en el almacenamiento web son los siguientes:</p>\n<ul>\n<li><code>sessionStorage</code> mantiene un área de almacenamiento separada para cada origen\nque está disponible por la duración de la sesión de la página (tanto si el\nnavegador esta abierto como si no, incluyendo recargas de página y\nrestablecimientos).</li>\n<li><code>localStorage</code> hace lo mismo, pero persiste incluso cuando el navegador es\ncerrado y reabierto.</li>\n</ul>\n<p>Fuente: <a href=\"https://developer.mozilla.org/es/docs/Web/API/API_de_almacenamiento_web\" target=\"_blank\">MDN - API de almacenamiento web</a></p>\n<p>Mira el siguiente enlace: <a href=\"https://mdn.github.io/dom-examples/web-storage/\" target=\"_blank\">https://mdn.github.io/dom-examples/web-storage/</a>,\njuega con él y recarga la página, si deseas cierra la pestaña o el navegador y\nvuelve a ingresar. ¿Te diste cuenta que tus cambios permanecieron? Esto es lo\nque la API de Web Storage (almacenamiento web) nos permite hacer fácilmente.</p>\n<p>¿Aun no te queda del todo claro? Acá te dejamos <a href=\"https://medium.com/laboratoria-how-to/api-web-storage-ad9b1efa9b01\" target=\"_blank\">un post de Medium</a>\nescrito por nuestra súper profe Marcia donde te explica los métodos que tenemos\ndisponibles a través de esta API.</p>\n<p>Si eres de las que prefiere el contenido visual, acá te dejamos un video que\nte permite ver un ejemplo de cómo usar <code>localStorage</code>.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/hb8O0qRqiSk?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"¿jsonstringify-jsonparse\">¿<code>JSON.stringify()</code>, <code>JSON.parse()</code>?</h2>\n<p>Si revisaste el video, habrás percibido que usa los métodos <code>JSON.stringify()</code> y\n<code>JSON.parse()</code>, sino lo viste, aun así es bueno que tengas presente ambos\nmétodos.</p>\n<p>Como bien es mencionado en la parte superior, esta API almacena elementos en el\nformato de clave/valor. Ejemplo: si tengo el nombre del usuario en una variable\nllamada <code>name</code> y quiero almacenarla en el navegador, haría lo siguiente:</p>\n<pre><code class=\"language-javascript\">const name = 'nombre de usuario';\n/*\n * name es el identificador (clave),\n * y el valor está almacenada en la variable `name`\n */\nlocalStorage.setItem('name', name);\n// Si usáramos sessionStorage, solo cambiaríamos el objeto de localStorage\n// sessionStorage.setItem('name', name);\n</code></pre>\n<blockquote>\n<p>El valor siempre será almacenado como <code>string</code> independientemente del tipo de\ndato con el que se almacenen.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">// signup.html\nconst age = 50;\nlocalStorage.setItem('age', 50);\n\n// home.html\nconst userAge = localStorage.getItem('age');\ntypeof userAge; // \"string\"\n</code></pre>\n<p>Bien, esto deberíamos tenerlo presente siempre, en especial cuando vamos a\nquerer operar con esos valores como el caso de números o booleanos, pero\n¿cuándo usamos los métodos del objeto <code>JSON</code> entonces?. En ocasiones vamos a\nnecesitar almacenar múltiples valores que estén relacionados entre sí,\nnormalmente, lo representaríamos en un objeto, y debido a que todo lo que se\nalmacena es un string, no lo podemos hacer directamente. Ejemplo:</p>\n<pre><code class=\"language-javascript\">// login.html\nconst user = {\n    name: 'user',\n    email: 'user@gmail.com',\n    photoUrl: 'https://images.com/user.png',\n};\n\nsessionStorage.setItem('loggedUser', user);\n\n// home.html\nconst loggedUser = sessionStorage.getItem('loggedUser');\nconsole.log(loggedUser); // \"[object Object]\"\n</code></pre>\n<p>Esto ocurre ya que el intérprete trata de convertir el objeto a un string y\nesto hace que se almacence como <code>\"[object Object]\"</code>. Si quieres saber más sobre\nporqué el objeto se convierte a string de esa manera, debes de entender un poco\nsobre como funciona <a href=\"https://jherax.wordpress.com/2014/07/05/javascript-coercion/\" target=\"_blank\">coerción en JavaScript</a>,\ny entender sobre el método <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/toString\" target=\"_blank\"><code>.toString()</code> de los objetos</a>.</p>\n<p>En fin, ¿cómo solucionamos este inconveniente y logremos almacenar nuestro\nobjeto? Entendamos qué hacen los siguientes métodos:</p>\n<ul>\n<li><code>JSON.stringify()</code>: convierte el objeto que es pasado como argumento a un\nstring, serializando las propiedades y valores.</li>\n<li><code>JSON.parse()</code>: convierte el string pasado como argumento a un objeto,\ndeserializando las propiedades y valores.</li>\n</ul>\n<p>Ejemplo:</p>\n<pre><code class=\"language-javascript\">// login.html\nconst user = {\n    name: 'user',\n    email: 'user@gmail.com',\n    photoUrl: 'https://images.com/user.png',\n};\n\n/*\n * Aquí se guarda el objeto en forma de string\n */\nsessionStorage.setItem('loggedUser', JSON.stringify(user));\n\nconsole.log(sessionStorage.getItem('loggedUser'));\n// {\"name\":\"user\",\"email\":\"user@gmail.com\",\"photoUrl\":\"https://images.com/user.png\"}\n\n\n// home.html\n/*\n * Aquí se obtiene el objeto en forma de string y se convierte (parsea) a objeto\n */\nconst loggedUser = JSON.parse(sessionStorage.getItem('loggedUser'));\nconsole.log(typeof loggedUser); // \"object\"\n</code></pre>\n<blockquote>\n<p>Para terminar, no olvides que lo almacenado en el localStorage persiste aun\ncuando se cierra el navegador, así que si deseamos limpiar o eliminar lo que\ntenemos almacenado, debemos de usar los métodos <code>.removeItem()</code> o <code>.clear()</code>\ndependiendo si queremos eliminar una clave específica o todas.</p>\n</blockquote>\n",
          "order": 3,
          "durationString": "30min"
        },
        "04-storage-challenges": {
          "title": "Jugando con Web Storage",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Practicar todo lo aprendido haciendo uso del API de almacenamiento web</li>\n<li>Practicar, practicar y practicar</li>\n</ul>\n<h2 id=\"ejercicios\">Ejercicios</h2>\n<p>Debes subir todos tus ejercicios a <code>GitHub</code> y publicarlos en <code>gh-pages</code>.</p>\n<h3 id=\"perfil-de-usuario\">Perfil de usuario</h3>\n<p>Implementa un login con Firebase, sea manual o con alguna red social,\nredireccionálo a la página principal de tu sitio (puedes darle la temática que\ndesees) y permite tener una edición de perfil, para esto los datos deben de\nestar precargados con lo que almacenaste en el navegador. Ten en cuenta que\ndebe funcionar para distintos usuarios, por lo que deberá estar existente\ndurante una sesión del usuario. ¿Deberás usar <code>localStorage</code> o <code>sessionStorage</code>?</p>\n<iframe height=\"500\" scrolling=\"no\" title=\"Edit Profile with Angular\" src=\"//codepen.io/DonPage/embed/HCjem/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [Edit Profile with Angular](https://codepen.io/DonPage/pen/HCjem/)\n  by Don Page ([@DonPage](https://codepen.io/DonPage)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<h3 id=\"lector-personalizado\">Lector personalizado</h3>\n<p>Alguna vez te has puesto a leer un post de un blog pero te has sentido incómoda\ncon la fuente, el tamaño o incluso los colores usados. Es hora de darle una\nsolución, crea un sitio responsive (esto no es necesario indicarlo, pero por si\nlas dudas) con un post real (tu preferido, no Lorem Ipsum) y dale la opción a tu\nusuario de personalizar su modo de lectura de la mejor forma que creas\nconveniente.</p>\n<p>Algo muy similar al ejemplo visto en <a href=\"https://mdn.github.io/dom-examples/web-storage/\" target=\"_blank\">la lectura del self-learning anterior</a>.\nSi deseas que se mantenga la configuración del usuario guardada, ¿qué usarás?</p>\n",
          "order": 4,
          "durationString": "2h"
        },
        "05-geolocation": {
          "title": "Geolocation",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=XX9Kmg3qLRk",
              "id": "XX9Kmg3qLRk"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>Entender qué es la geolocalización y cómo usar el API</p>\n<h2 id=\"geolocalización\">Geolocalización</h2>\n<p>Revisemos las siguientes diapositivas</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQbFDCCktoR42Inmp5jjBt-OkwBMPS-CxOI4k4FgHvQKEOkLvht3qTZc5bYz4X8Vjt--a3NepBgu2A-/embed?start=false&amp;loop=false&amp;delayms=5000\" frameborder=\"0\" width=\"760\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<p>Ahora vamos a leer el siguiente <strong><a href=\"https://devcode.la/tutoriales/api-geolocalizacion-html5/\" target=\"_blank\">enlace</a></strong>\nde DevCode que aparte de tener información importante cuenta con un ejemplo\npráctico para ir resolviendo.</p>\n<p>Para finalizar, veamos el siguiente vídeo, notarás que pone todo en su HTML\npero tú eres una desarrolladora que ama las buenas prácticas y a la hora de\nponer manos a la obra en tu editor de texto, pondrás cada cosa en su archivo\ncorrespondiente.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/XX9Kmg3qLRk?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Si ya realizando lo anterior quieres algo más, DevCode tiene un <strong><a href=\"https://devcode.la/tutoriales/geolocalizacion-nodejs/\" target=\"_blank\">tutorial</a></strong>\npara obtener la geolocalización con Nodejs.</p>\n",
          "order": 5,
          "durationString": "1h"
        },
        "06-geolocation-challenges": {
          "title": "Jugando con Geolocation",
          "type": "workshop",
          "format": "guided",
          "duration": 180,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Practicar todo lo aprendido haciendo uso del API de geolocalización</li>\n<li>Practicar, practicar y practicar</li>\n</ul>\n<h2 id=\"ejercicios\">Ejercicios</h2>\n<p>Debes subir todos tus ejercicios a <code>GitHub</code> y publicarlos en <code>gh-pages</code>.</p>\n<p>Sigamos las siguientes diapositivas para resolver nuestro\nreto</p>\n<h3 id=\"encuéntrame\">Encuéntrame</h3>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQQVIwRCvs17bO0YkP17rLec33TEsjj0k5rehs7XcnAGoO7eUCU41j-VxZGge47XLBA-rkss81K2dPd/embed?start=false&amp;loop=false&amp;delayms=5000\" frameborder=\"0\" width=\"480\" height=\"389\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<h3 id=\"encuéntrame-hacker-edition\">Encuéntrame Hacker Edition</h3>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQMPjhYWVZPuLjEaA0ITeavo8zW_zZcXrPY8J-JUDkrU5EIBAhED5Ir5NhIn4KXffdc9xA92QdxaU2S/embed?start=false&amp;loop=false&amp;delayms=5000\" frameborder=\"0\" width=\"480\" height=\"389\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<h3 id=\"easy-vreco\">EASY-VRECO</h3>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vS4fG3rIcQeV-IDN44cnIwsi4ewKi4RAoH62L21Lf2PVegDzm4T5UlqlkLQou4mG0yfepvT4UgtTz6N/embed?start=false&amp;loop=false&amp;delayms=5000\" frameborder=\"0\" width=\"480\" height=\"389\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n",
          "order": 6,
          "durationString": "3h"
        },
        "07-dnd": {
          "title": "Drag and Drop",
          "type": "read",
          "format": "self-paced",
          "duration": 90,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>Entender a grandes rasgos qué es el Drag and Drop y cómo usar para\nalgunas aplicaciones.</p>\n<h2 id=\"arrastrar-y-soltar\">Arrastrar y soltar</h2>\n<blockquote>\n<p>La función de arrastrar y soltar (Drag and Drop, DnD) tiene una gran\nimportancia en HTML5. En la especificación se define un mecanismo basado en\neventos, el API de JavaScript y elementos de marcado adicionales para indicar\nque prácticamente cualquier tipo de elemento de una página se pueda arrastrar.\nLa compatibilidad nativa del navegador con la función DnD permite ofrecer\naplicaciones web más interactivas.</p>\n</blockquote>\n<p>Este es un extracto de <strong>html5rocks</strong>, dirígete a este\n<strong><a href=\"https://www.html5rocks.com/es/tutorials/dnd/basics/\" target=\"_blank\">enlace</a></strong> para que leas\nla explicación y veas el ejemplo de Drag and Drop.</p>\n<p>El siguiente <strong><a href=\"https://developer.mozilla.org/es/docs/DragDrop/Drag_and_Drop\" target=\"_blank\">enlace</a></strong>\nes de la documentación de mozilla y aquí podemos darnos una idea de que es y que\nhace esta estupenda API de HTML5.</p>\n<p>Y por último, revisaremos este <strong><a href=\"http://www.desarrollolibre.net/blog/tema/45/html/el-drag-and-drop-en-html5-javascript#.Wniowa6WbIU\" target=\"_blank\">enlace</a></strong>,\nya que es una maravilla con los ejemplos que proporciona con todo y\nsu explicación.</p>\n<blockquote>\n<p>Una aplicación debe ser intuitiva, y que más intuitivo que arrastrar un\n\"objeto\" de una parte a otra.</p>\n</blockquote>\n<p><img src=\"http://www.desarrollolibre.net/public/images/example/html/drag-and-drop/ejemplo-drag-and-drop-html5.gif\" alt=\"ejemploDnD\"></p>\n<p>No te preocupes si sientes que de repente es mucha información, recuerda que la\nmejor manera de entender lo que leímos es ponerlo en practica, así que abre tu\neditor de texto y replica o modifica los ejemplos que ya vimos.</p>\n<p>Y si sientes que puedes con algo más y necesitas otro reto, puedes entrar a\neste <strong><a href=\"https://devcode.la/tutoriales/draggable-con-jquery-ui/\" target=\"_blank\">enlace</a></strong>\nde DevCode para practicar esto pero con jQuery-UI</p>\n",
          "order": 7,
          "durationString": "1.5h"
        },
        "08-dnd-challenges": {
          "title": "Jugando con DnD",
          "type": "workshop",
          "format": "guided",
          "duration": 180,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Practicar todo lo aprendido haciendo uso del API de Drag and Drop</li>\n<li>Practicar, practicar y practicar</li>\n</ul>\n<h2 id=\"ejercicios\">Ejercicios</h2>\n<p>Debes subir todos tu ejercicios a <code>GitHub</code> y publicarlos en <code>gh-pages</code>.</p>\n<h3 id=\"inta-collage\">Inta Collage</h3>\n<p>Revisa las siguientes diapositivas para resolver tu ejercicio</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vR4AWSnJCx4t7sS9bOnyY6JeToc_IE8FVM8MXVu5EN0c5AgJv5Odkwb8sHHkw_hzqtFb8WAyeFtTsZX/embed?start=false&amp;loop=false&amp;delayms=5000\" frameborder=\"0\" width=\"760\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n",
          "order": 8,
          "durationString": "3h"
        },
        "09-more-apis": {
          "title": "Más APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 40,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Incentivar a explorar otras APIs de HTML5</li>\n</ul>\n<h2 id=\"otras-apis\">Otras APIs</h2>\n<p>En esta unidad, nos hemos enfocado en algunas APIs específicas, pero como bien\nlo hemos mencionado, no son las únicas y te invitamos a explorar por tu cuenta\notras.</p>\n<p>Acá te dejamos algunas con las que puedes ir jugando:</p>\n<h3 id=\"canvas\">Canvas</h3>\n<p>El elemento HTML <code>&lt;canvas&gt;</code> es usado para dibujar gráficos a través de\nJavaScript. A nivel de HTML, el elemento solo es un contenedor de gráficos.\nEl API provee variados métodos para dibujar rutas, cajas, círculos, texto y\nagregar imágenes.</p>\n<h4 id=\"retos\">Retos</h4>\n<h5 id=\"jugando-con-formas\">Jugando con formas</h5>\n<p>Dibuja las diversas formas geométricas que conozcas y comienza a darle un estilo\npersonalizado a cada una.</p>\n<p>Ejemplo:</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"CSS Basic Shapes\" src=\"//codepen.io/krystalcampioni/embed/bgYxQa/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [CSS Basic Shapes](https://codepen.io/krystalcampioni/pen/bgYxQa/)\n  by Krystal Campioni ([@krystalcampioni](https://codepen.io/krystalcampioni))\n  on [CodePen](https://codepen.io).\n</iframe>\n\n<h5 id=\"imágenes-pixeleadas\">Imágenes pixeleadas</h5>\n<p>Crea una interfaz con tus imágenes preferidas y vuélvelas pixeleadas.</p>\n<p>Ejemplo: Mira la sección de <strong>Quiénes somos?</strong> en la web de <a href=\"http://developers.laboratoria.la/\" target=\"_blank\">Developers\nLaboratoria</a>.</p>\n<h4 id=\"referencias\">Referencias</h4>\n<ul>\n<li><a href=\"https://www.w3schools.com/html/html5_canvas.asp\" target=\"_blank\">HTML5 Canvas</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/Guide/HTML/Canvas_tutorial/Basic_usage\" target=\"_blank\">Uso básico de Canvas</a></li>\n</ul>\n<h3 id=\"file\">File</h3>\n<p>Esta probablemente ya la haz conocido, ya sea a través del elemento <code>&lt;input type=\"file\" /&gt;</code> o cuando has querido adjuntar una imagen al momento de postear\nen tu red social. Cualquiera que haya sido el escenario, te habrás dado cuenta\nque es muy útil saber manipularla.</p>\n<h4 id=\"retos-1\">Retos</h4>\n<h5 id=\"editando-foto-de-perfil\">Editando foto de perfil</h5>\n<p>¿Recuerdas el reto de web storage, donde podías editar los datos tu perfil? ¿Qué\nte parece si ahora editas también su foto de perfil? ¿Y si recargas la página,\npermanece la imagen que acabas de cambiar? Comienza a mezclar ambas APIs y\ncomprueba hasta donde te lleva tu imaginación. Recuerda que una buena manera de\nindicar al usuario que su edición está correcta es mostrándole como quedaría\nantes de guardarlo.</p>\n<blockquote>\n<p>Debes probar esto en tu móvil una vez terminado, estamos seguros que te\nllamará la atención ver que puedes poner un selfie que te tomas con la cámara\ncomo foto de perfil. Ooopss, la idea era que lo descubrieras por tu cuenta ;)</p>\n</blockquote>\n<h5 id=\"¿instragram\">¿Instragram?</h5>\n<p>Si ya sabes cómo mostrar las imágenes que tienes almacenadas en tu PC o móvil,\ntienes el poder de agregar interacción con el DOM, loguearte con redes sociales\ny almacenarlo en una base de datos gracias a Firebase; esto quiere decir que\n¡tienes todo lo necesario para construir tu propio Instagram! Deja volar tu\nimaginación y diviértete creando tu red social de fotografía a tu gusto.</p>\n<blockquote>\n<p>Nota, con CSS puedes hacer <a href=\"https://platzi.com/blog/filtros-css/\" target=\"_blank\">filtros a tus imágenes</a>\n:scream:</p>\n</blockquote>\n<h4 id=\"referencias-1\">Referencias</h4>\n<ul>\n<li><a href=\"https://www.html5rocks.com/es/tutorials/file/dndfiles/\" target=\"_blank\">Cómo leer archivos en JavaScript a través del File API</a></li>\n<li><a href=\"http://blog.teamtreehouse.com/reading-files-using-the-html5-filereader-api\" target=\"_blank\">File Reader API</a></li>\n</ul>\n<h3 id=\"websockets\">WebSockets</h3>\n<p>¿Alguna vez te has preguntado cómo funcionan las aplicaciones en tiempo real?\n¿Cómo hace Facebook, WhatsApp u otra red social para notificarte que has\nrecibido un mensaje inmediatamente después de que el remitente lo envió? Un\nejemplo más técnico sería mediante Firebase, ¿te has dado cuenta que si escuchas\nlos cambios de su base de datos, tu aplicación se actualzia automáticamente?</p>\n<p>Todo esto es gracias a los Web Sockets, HTML5 provee esta API con la que puedes\nestablecer conecciones <em>socket</em> entre el navegador y un servidor. Esto significa\nque existe una conexión persistente en la que puedes enviar datos en cualquier\nmomento.</p>\n<p>Como bien lo menciona en el párrafo anterior, se necesita escribir un script en\nel servidor y en el cliente para establecer una conexión de Web Sockets. Esto\npuede ser un poco complicado sobre todo porque la implementación varía en el\nback-end dependiendo del lenguaje y varía en el cliente por la compatibilidad\nentre navegadores. Para hacer probar esta API de una manera sencilla, podrías\nusar Node.js (JavaScript del lado del servidor) y una librería que funcione en\nambos lados (cliente y servidor) como <a href=\"https://socket.io/\" target=\"_blank\">socket.io</a>.</p>\n<h4 id=\"retos-2\">Retos</h4>\n<h5 id=\"real-time-chat\">Real-time chat</h5>\n<p>Probablemente dirás que con Firebase ya puedes hacer un chat en tiempo real, aun\nasí te invitamos a vivir la experiencia de crearlo sin Firebase y veas como\npuedes armar una aplicación en tiempo real escribiendo código tanto en el cliente\ncomo en el servidor.</p>\n<h5 id=\"canvas--socketio\">Canvas + Socket.io</h5>\n<p>¿Te imaginas tener una pizarra compartida? Con canvas puedes crear un lienzo y\nmediante eventos del mouse dibujar en él, si estos gráficos los envías hacia un\nsocket podrías dibujarlo entre todos los usuarios conectados en tiempo real,\nalgo así como una pizarra mágina. Piénsalo, puede ayudarte cuando quieres\nenseñar o estudiar junto a alguien.</p>\n<h5 id=\"¿hangouts-skype\">¿Hangouts, Skype?</h5>\n<p>Si pudieras encender la cámara de tu laptop, mostrarla en la web, y enviarla a\ntravés de un socket, tendrías una aplicación de videollamadas. ¿Crees que aun\nno puedes lograrlo? Pues te comentamos, que con un par de APIs más Web Sockets\ny sobre todo tus ganas de querer hacerlo, lo puedes lograr ;)</p>\n<p>Las APIs serían <a href=\"https://davidwalsh.name/browser-camera\" target=\"_blank\"><code>getUserMedia</code></a>\n(parte de Media API) y Canvas. Y probablemente al investigar al respecto, te\nencontrarás con el término de <a href=\"https://webrtc.org/\" target=\"_blank\">WebRTC</a>.</p>\n<p>Tranquila, le tendrás que dedicar tiempo, pero si te interesa estamos 100%\nseguros de que podrás lograrlo :).</p>\n<h4 id=\"referencias-2\">Referencias</h4>\n<ul>\n<li><a href=\"https://www.html5rocks.com/es/tutorials/websockets/basics/\" target=\"_blank\">Introducción a los WebSockets: incorporación de sockets a la Web</a></li>\n<li><a href=\"https://code.tutsplus.com/tutorials/real-time-chat-with-nodejs-socketio-and-expressjs--net-31708\" target=\"_blank\">Real time chat with NodeJS, Socket.io and ExpressJS</a></li>\n<li><a href=\"http://www.nazariglez.com/2012/07/08/dibujando-a-tiempo-real-con-canvas-node-js-y-socket-io/\" target=\"_blank\">Dibujando a tiempo real con Canvas, Node.js y Socket.io</a></li>\n<li><a href=\"http://html5facil.com/tutoriales/streaming-de-video-con-html5/\" target=\"_blank\">Streaming de video con HTML5</a></li>\n</ul>\n<h3 id=\"notifications\">Notifications</h3>\n<blockquote>\n<p>La API de Notificaciones permite a una página web enviar notificaciones que\nse mostrarán fuera de la web al nivel del sistema. Esto permite a las\naplicaciones web enviar información al usuario aunque estas estén de fondo.</p>\n</blockquote>\n<p>Fuente: <a href=\"https://developer.mozilla.org/es/docs/Web/API/Notifications_API/Usando_la_API_de_Notificaciones\" target=\"_blank\">MDN - Usando la API de Notificaciones</a></p>\n<h4 id=\"retos-3\">Retos</h4>\n<h5 id=\"notificaciones-de-mensajes\">Notificaciones de mensajes</h5>\n<p>Ya tienes tu chat o red social ya sea con Firebase o tu propia implementación de\nWeb Sockets, ahora que te parece si cada vez que un usuario interactúa con tu\napp, le envías una notificación. Eso estaría muy cool :muscle:</p>\n<h4 id=\"referencias-3\">Referencias</h4>\n<ul>\n<li><a href=\"https://filisantillan.com/notificaciones-web-html5/\" target=\"_blank\">Notificaciones Web con HTML5</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/API/Notifications_API/Usando_la_API_de_Notificaciones\" target=\"_blank\">Usando la API de Notificaciones</a></li>\n</ul>\n<h3 id=\"vibration\">Vibration</h3>\n<blockquote>\n<p>La mayoría de los dispositivos modernos pueden vibrar a través del hardware,\nesto permite que a través del código de software se pueda emitir estas\nvibraciones. La Vibration API  ofrece a las aplicaciones web la capacidad de\nacceder a este hardware en caso este lo soporte, caso contrario el dispositivo\nno hace nada.</p>\n</blockquote>\n<p>Fuente: <a href=\"https://developer.mozilla.org/es/docs/Web/Guide/API/Vibration\" target=\"_blank\">MDN - Vibración API</a></p>\n<h4 id=\"retos-4\">Retos</h4>\n<h5 id=\"vibración-de-notificaciones\">Vibración de notificaciones</h5>\n<p>Ya tienes tus notificaciones, ahora que te parece si agregas la capacidad de\nvibrar cuando éstas lleguen a tu usuario.</p>\n<h4 id=\"referencias-4\">Referencias</h4>\n<ul>\n<li><a href=\"https://developer.mozilla.org/es/docs/Web/Guide/API/Vibration\" target=\"_blank\">Vibración API</a></li>\n<li><a href=\"https://platzi.com/blog/api-vibracion-html5/\" target=\"_blank\">Introducción y uso de la API de Vibración en HTML5</a></li>\n</ul>\n<h2 id=\"conclusión\">Conclusión</h2>\n<p>Existen muchas APIs que vuelven cada vez más potente al navegador, y esto a\npermitido grandes avances en la web, lo único que te podemos decir es que nunca\nnos va a dar el tiempo de ver todos, solo hay que ser curiosas y comenzar a\njugar sin miedo con ellas.</p>\n<p>Recuerda tener presente que muchas de ellas tienen problemas de compatibilidad\ncon dispositivos o navegadores específicos así que no vayas a pensar que algo\nestá fallando en tu código necesariamente, puede que sea algo de hardware. Por\notro lado, recuerda que en <a href=\"http://html5index.org/\" target=\"_blank\">The HTML 5 JavaScript API Index</a>\npuedes indagar un poco más acerca de las APIs existentes.</p>\n<p>Y mira de manera interactiva cómo ha evolucionado la web en\n<a href=\"http://www.evolutionoftheweb.com/#/evolution/day\" target=\"_blank\">www.evolutionoftheweb.com</a>.</p>\n<p><img src=\"http://www.evolutionoftheweb.com/img/Evolution_of_the_web.jpg\" alt=\"Evolution of the web\"></p>\n",
          "order": 9,
          "durationString": "40min"
        }
      },
      "order": 1,
      "stats": {
        "duration": 875,
        "durationString": "14.6h",
        "exerciseCount": 0,
        "partCount": 10
      }
    },
    "04-xhr": {
      "title": "Xhr",
      "bonus": false,
      "description": "<p>...</p>\n",
      "parts": {
        "00-opening": {
          "title": "Opening: ¿Qué significa traer datos de un servidor asíncronamente?",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/P5JlebbqzTQ",
              "id": "P5JlebbqzTQ"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>El objetivo de esta unidad es llevar a la práctica el ciclo request/response de\nHTTP, y qué mejor que hacerlo asíncronamente a través de JS con XHR, AJAX y\ncomunicándonos con el servidor a través de un API.</p>\n<p>Referencia:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/P5JlebbqzTQ?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 0,
          "durationString": "15min"
        },
        "01-client-server": {
          "title": "Comunicación Cliente Servidor",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/nozbz6J3_4w",
              "id": "nozbz6J3_4w"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender el flujo de petición y respuesta</li>\n<li>Qué significa que sea asíncrono</li>\n</ul>\n<h2 id=\"petición-y-respuesta\">Petición y Respuesta</h2>\n<p>Para entender esto, lo primero es recordar que existe un protocolo de\ncomunicación en el que se deja claro cómo y de que manera un cliente\n(navegador) pide información/datos a un servidor. Ya teniendo en cuenta\nesto revisemos la siguiente imagen:</p>\n<p><img src=\"http://www.solocodigoweb.com/wp-content/uploads/2017/06/clientserver.jpg\" alt=\"comunicación\"></p>\n<p>En la imagen se puede apreciar como un cliente (emisor) realiza una solicitud\nHTTP (<strong>HTTP Request</strong>) a un servidor (receptor) y este último le responde\n(<strong>HTTP Response</strong>) el pedido.</p>\n<p>Estas <em>peticiones y respuestas</em> (que generalmente son conocidas como <em>requests\ny responses</em>, su traducción en inglés) son transportados a través de internet\ncomo medio de comunicación.</p>\n<p>Cuando hacemos esto normalmente lo realizamos de forma <strong>Síncrona</strong>, es decir\nque necesitamos que cada petición tenga su respuesta antes de enviar otra\npetición, tal como en una conversación entre dos personas.</p>\n<blockquote>\n<p>Cuando el navegador hace una petición de forma síncrona tiene que esperar la\nrespuesta antes de proceder a la carga de una página</p>\n</blockquote>\n<p>Pero esto en algún momento ya no nos va a resultar tan eficiente o funcional,\nten en cuenta que generalmente solo una petición no es lo único que una\naplicación está haciendo, y en general estará haciendo muchas peticiones a la\nvez, es por eso que podemos, y debemos, hacerlo de manera <strong>Asíncrona</strong> haciendo\nuso de <strong>AJAX</strong> y así lograr hacer más de una \"tarea\" a la vez.</p>\n<blockquote>\n<p>Cuando el navegador hace peticiones de forma asíncrona, estas pueden\nocurrir en el fondo sin bloquear la carga de una página</p>\n</blockquote>\n<p>En el siguiente vídeo los geniales amigos de UDACITY nos explican de manera\nvisual lo anterior, está en inglés pero ya sabemos que ese no es impedimento\npara que entendamos el concepto :muscle:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/nozbz6J3_4w?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-ajax": {
          "title": "AJAX",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=_ybgWmSCAu8",
              "id": "_ybgWmSCAu8"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender qué significa AJAX</li>\n</ul>\n<h2 id=\"un-poco-de-historia\">Un poco de historia</h2>\n<blockquote>\n<p>JavaScript Asíncrono y XML (AJAX) no es una tecnología por sí misma,\nes un término que describe un nuevo modo de utilizar conjuntamente varias\ntecnologías existentes. Esto incluye: HTML o XHTML, CSS, JavaScript, DOM,\nXML, XSLT, y el objeto XMLHttpRequest. Cuando estas tecnologías se combinan\nen un modelo AJAX, es posible lograr aplicaciones web capaces de actualizarse\ncontinuamente sin tener que volver a cargar la página completa. Esto crea\naplicaciones más rápidas y con mejor respuesta a las acciones del usuario.</p>\n</blockquote>\n<p>Extracto de MDN WEB DOCS:</p>\n<blockquote>\n<p>En la aplicación web tradicional, la computadora cliente realiza una solicitud\nde una página web. El servidor crea y regresa la página para el cliente.\nFinalmente, el cliente carga la nueva página y muestra la información.\nSi interactúan con la página, digamos para agregar o eliminar algo o al enviar\nun formulario, vuelve a comenzar el ciclo. El cliente hará otra solicitud,\nel servidor regresa una página totalmente nueva, el cliente carga y se\nlo presenta nuevamente al usuario.</p>\n</blockquote>\n<p>Hasta mediados de la década de los 2000, esta era básicamente la única forma\nen que se producía la comunicación por Internet. La información residiría en\nel servidor, un cliente solicitaría esos datos, actualizaría la página y\nla mostraría. Este ciclo se repetiría para todas y cada una de las\nnuevas solicitudes.</p>\n<p>A finales de los años 90, el equipo de Microsoft Outlook agregó el componente\nXMLHTTP a Internet Explorer y compiló la versión web del cliente de correo de\nOutlook. Este código fue recogido por otros navegadores como\n<strong>XMLHttpRequest</strong>. Esto permitió a los navegadores realizar solicitudes HTTP\ndesde Javascript y actualizar la página actual sin recuperar una página\ncompleta del servidor. En lugar del modelo síncrono de espera para una página\ncompleta, la interfaz de usuario podría actualizarse de forma asíncrona a\nmedida que el usuario siguiera trabajando.</p>\n<h2 id=\"ajax\">AJAX</h2>\n<p>En 2005, Jesse James Garrett acuñó el término AJAX para significar\n\"Javascript y XML asíncronos\". Esta es esencialmente la técnica de usar\nXMLHTTPRequest para recuperar datos y luego modificar la página actual.</p>\n<p>AJAX tomó el mundo de la web por asalto, extendiéndose mucho más allá de\nMicrosoft Outlook. Las aplicaciones web de vanguardia como Flickr, GMail y\nGoogle Maps lo adoptaron rápidamente. En lugar de tener que esperar para\nobtener datos y actualizar la página completa, estas nuevas aplicaciones\ncasi instantáneas fueron increíbles.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/_ybgWmSCAu8?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>En la lectura y vídeo anterior se menciona JSON y XML, vayamos a este <a href=\"https://medium.com/laboratoria-how-to/como-enviar-y-recibir-informaci%C3%B3n-en-internet-json-y-xml-456d5109e885\" target=\"_blank\">enlace</a>\npara leer al respecto.</p>\n<p>Y por último terminamos con esta <a href=\"https://medium.com/laboratoria-how-to/entendiendo-como-funciona-el-internet-parte-ajax-c993f9802e72\" target=\"_blank\">lectura</a>\nque nos resume y explica con otras palabras que es AJAX.</p>\n",
          "order": 2,
          "durationString": "1h"
        },
        "03-apis": {
          "title": "APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender qué es una API enfocado al entorno de AJAX y dónde podemos\nencontrarlas</li>\n</ul>\n<h2 id=\"obtener-datos\">Obtener datos</h2>\n<p>Hemos analizado los conceptos de Ajax y que es la tecnología que utilizaremos\npara agregar datos a nuestro proyecto de forma asíncrona. Pero, ¿De dónde\nprovienen estos datos? ¿Cómo accedemos a ellos? ¿Cómo sabrá nuestra aplicación\ncómo debe recuperar esos datos?</p>\n<p>Usaremos una API para interactuar con varias fuentes de datos.</p>\n<h2 id=\"qué-es-una-api\">Qué es una API?</h2>\n<p>Anteriormente ya habíamos leído que es un <strong>API</strong>\n(Application Programming Interface = Interfaz de Programación de Aplicaciones)</p>\n<p>Una API es un set de herramientas o funciones que nos entrega un servicio, como\npueden ser los mapas de google, las estadísticas o manipulación de twitts de\ntwitter, o los datos de IMDB (página que tiene montón de datos sobre películas).\nLa idea es darle el poder a las programadoras de usar el servicio desde su\npropia aplicación o página.</p>\n<blockquote>\n<p><strong>Hay datos por ahí que solo esperan ser utilizados.</strong></p>\n</blockquote>\n<p><img src=\"https://github.com/AnaSalazar/curricula-js/blob/ivandevp-06-spa/06-spa/02-asynchronous-js-request/03-apis/ejemplos-apis.png?raw=true\" alt=\"ejemplosAPI\"></p>\n<p><a href=\"https://developers.google.com/apis-explorer/#p/\" target=\"_blank\">Google</a> cuenta con una\ncantidad enorme de APIs, podemos hacer uso de alguna de ellas o buscar que\notros sitios ofrecen o usan APIs.</p>\n",
          "order": 3,
          "durationString": "30min"
        },
        "04-xhr": {
          "title": "XHR",
          "type": "read",
          "format": "self-paced",
          "duration": 90,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=nz9S3uZE_dM",
              "id": "nz9S3uZE_dM"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/m9C0LJoWhOE",
              "id": "m9C0LJoWhOE"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender qué es XHR</li>\n</ul>\n<h2 id=\"analogía\">Analogía</h2>\n<p>Una buena manera de entender XHR es usando la siguiente analogía:</p>\n<blockquote>\n<p><strong>Preparar un pastel!</strong>\nPara prepararlo necesitamos, harina, huevo, leche, mantequilla y un horno.\nEncendemos el horno. Luego procedemos a mezclar los 4 ingredientes y ya\nlista la mezcla la metemos al horno, aquí va a tardar un poco en lo que se\nhornea pero mientras podemos ir preparando la cubierta del pastel.</p>\n</blockquote>\n<p>Un objeto XHR es proporcionado por el entorno de JavaScript y se utiliza para\nhacer peticiones AJAX, es muy parecido a la parte de la preparación de la mezcla\ndonde primero debemos \"preparar\" las configuraciones y luego mandar nuestra\npetición, pero una vez hecho esto nuestro código puede seguir adelante y hacer\notras peticiones o tareas.</p>\n<blockquote>\n<p>Cuando el horno nos regresa el pastel horneado podemos continuar con\ndecorarlo</p>\n</blockquote>\n<p>Una vez que nuestra petición tiene respuesta puede seguir adelante con lo que\nhayamos dispuesto para esta \"tarea\".</p>\n<h2 id=\"xmlhttprequest\">XMLHTTPRequest</h2>\n<p>El entorno de JavaScript nos proporciona una forma de realizar solicitudes\nHTTP asíncronas. Esto lo hacemos con un objeto XMLHttpRequest, podemos usar\neste objeto con la función de constructor XMLHttpRequest proporcionada.</p>\n<p>XMLHttpRequests (comúnmente abreviado como XHR o xhr) se puede utilizar para\nsolicitar cualquier tipo de archivo (por ejemplo, archivos de texto plano,\nHTML, JSON, de imagen, etc.) o datos de una API.</p>\n<p>Ahora profundizaremos en el objeto XMLHttpRequest. Veremos cómo crearlo, qué\nmétodos y propiedades se deben usar y cómo enviar realmente solicitudes\nasíncronas.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/nz9S3uZE_dM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"el-objeto-xhr-y-su-método-open\">El objeto XHR y su método <code>.open()</code></h3>\n<p>Ya que hemos construido un objeto XHR llamado <em>asyncRequestObject</em>.</p>\n<pre><code class=\"language-javascript\">const asyncRequestObject = new XMLHttpRequest ();\n</code></pre>\n<p>Podemos acceder a sus métodos, uno de los más importantes es el método <code>.open()</code></p>\n<p>asyncRequestObject.open();</p>\n<p><code>.open()</code> toma una serie de parámetros, pero los más importantes son sus dos\nprimeros: el método HTTP y la URL para enviar la solicitud.</p>\n<p><img src=\"https://github.com/AnaSalazar/curricula-js/blob/ivandevp-06-spa/06-spa/02-asynchronous-js-request/04-xhr/sintax_open.png?raw=true\" alt=\"sintax-open\"></p>\n<p>Si queremos solicitar de manera asíncrona la página de inicio del popular sitio\nde imágenes de alta resolución, Unsplash, usaremos una solicitud GET y\nproporcionaremos la URL:</p>\n<pre><code class=\"language-javascript\">asyncRequestObject.open('GET', 'https://unsplash.com');\n</code></pre>\n<blockquote>\n<p>Los métodos HTTP que por el momento más usaremos son:\nGET - para recuperar datos.\nPOST - para enviar datos.</p>\n</blockquote>\n<h2 id=\"el-objeto-xhr-y-su-método-send\">El objeto XHR y su método <code>.send()</code></h2>\n<p>Para enviar la solicitud, necesitamos usar el método de envío:</p>\n<pre><code class=\"language-javascript\">asyncRequestObject.send();\n</code></pre>\n<p>Ya sabemos que no hay mejor manera de aprender que practicar, para ver como\nfunciona, dirígete a <a href=\"https://unsplash.com\" target=\"_blank\">Unsplash</a>, abre tu developer tools\ny agrega en consola el objeto y sus métodos open y send.</p>\n<p><img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/August/59938614_ud109-l1-send-xhr-request-1/ud109-l1-send-xhr-request-1.gif\" alt=\"XHR send method\"></p>\n<p>En el siguiente video podemos ver que es lo pasa, está en inglés pero si vas\nhaciendo el paso a paso como en el video, seguro que le entiendes.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/m9C0LJoWhOE?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"respuesta-correcta\">Respuesta correcta</h2>\n<p>Ya que la petición ha sido enviada debemos establecer la propiedad <code>onload</code> en\nel objeto a una función que manejará la respuesta exitosa de nuestra solicitud\nXHR:</p>\n<pre><code class=\"language-javascript\">function handleSuccess () {\n    // en la función, `this` es el valor del objeto XHR\n&nbsp;&nbsp;&nbsp;&nbsp;// this.responseText contiene la respuesta del servidor\n\n    console.log( this.responseText ); // el HTML de https://unsplash.com/\n}\n\nasyncRequestObject.onload = handleSuccess;\n</code></pre>\n<p>Con esto nos damos cuenta que si <code>onload</code> no está configurado, la solicitud\nvuelve pero no ocurre nada con eso.</p>\n<h2 id=\"en-caso-de-error\">En caso de error</h2>\n<p>Ahora veamos que pasa si sucede algo con la solicitud y no se puede cumplir,\nentonces necesitamos usar la propiedad onerror:</p>\n<pre><code class=\"language-javascript\">function handleError () {\n    console.log( 'An error occurred 😞' );\n}\n\nasyncRequestObject.onerror = handleError;\n</code></pre>\n<p>Al igual que con <code>onload</code>, si <code>onerror</code> no está configurado y se produce un\nerror, ese error simplemente fallará en <em>silencio</em> y tu código (¡y tu usuario!)\nno sabrá qué es lo que está mal ni cómo recuperarlo.</p>\n<p>Es una buena práctica el tener ambos casos, correcto y error, en control\nsiempre. Es nuestra responsabilidad de desarrolladoras el comunicar al usuario\nqué es lo que sucede mientras espera. Y ofrecer opciones en caso de error, eso\nhará que nuestras aplicaciones tengan una mejor UX (experiencia de usuario) y\nsean más robustas, esto es, que no se caigan con nada.</p>\n<h2 id=\"juntando-todo\">Juntando todo</h2>\n<p>Aquí está el código completo que hemos desarrollado.</p>\n<p>Se crea el objeto XHR, se le dice qué información solicitar, configuramos los\nmanejadores para un éxito o error y luego finalmente se envía la solicitud:</p>\n<pre><code class=\"language-javascript\">function handleSuccess () {\n  console.log( this.responseText );\n\n}\n\nfunction handleError () {\n  console.log( 'An error occurred 😞' );\n}\n\nconst asyncRequestObject = new XMLHttpRequest();\nasyncRequestObject.open('GET', 'https://unsplash.com');\nasyncRequestObject.onload = handleSuccess;\nasyncRequestObject.onerror = handleError;\nasyncRequestObject.send();\n</code></pre>\n<h2 id=\"apis-y-json\">APIs y JSON</h2>\n<p>Obtener el HTML de un sitio web está bien, pero probablemente no sea muy útil.\nLos datos que devuelve están en un formato que es extremadamente difícil de\nanalizar y consumir.</p>\n<p>Sería mucho más fácil (y útil) si pudiéramos obtener solo los datos que\nqueremos en una estructura de datos mejor ordenada, aquí entra <strong>JSON</strong>\n(<em>JavaScript Object Notation</em>).</p>\n<h3 id=\"json\">JSON</h3>\n<p>Es un formato de texto, es una forma de ordenar los datos de manera que sea\nfácil procesarlos y manejarlos. Nace del problema de cómo podemos intercambiar\ndatos entre aplicaciones, páginas o servicios de una manera cómoda.\n<strong>JSON</strong> ES texto, pero con una estructura bien definida, tal como ordenamos\nlibros en capítulos, secciones, parrafos, lineas. Un JSON estará compuesto de\nllaves y valores tal como en el siguiente ejemplo:</p>\n<pre><code class=\"language-json\">{\n  \"título\": \"La guía del viajero intergaláctico\",\n  \"autor\": \"Douglas Adams\",\n  \"descripción\": \"Triología de cinco partes\"\n}\n</code></pre>\n<p>Título, autor y descripción son las llaves, mientras que el resto son los\nvalores de esas llaves.</p>\n<h3 id=\"comunicándose-con-una-api-json\">Comunicándose con una API-JSON</h3>\n<p>Entonces, si estamos comunicándonos con una API a través de JSON, necesitamos\nque nuestro código entienda el formato de este texto especial, a este proceso le\nllamaremos análisis o <em>parsing</em> en inglés. Luego de este análisis, el texto pasa\na ser un objeto de javascript, que podemos manipular y acceder como cualquier\notro objeto que hemos visto.\nSupongamos que la respuesta es el JSON que pusimos de ejemplo anteriormente,\nveamos cómo podemos analizar o <em>parsear</em> ésta :</p>\n<pre><code class=\"language-javascript\">function handleSuccess () {\n  const data = JSON.parse( this.responseText );\n  console.log( `${data.autor} escribió el libro : ${data.título}` );\n}\n\nasyncRequestObject.onload = handleSuccess;\n</code></pre>\n<p>Para obtener más información sobre el uso del objeto XHR para realizar\nsolicitudes asíncronas, puedes consultar estos enlaces:</p>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open\" target=\"_blank\">MDN's docs</a></p>\n</li>\n<li><p><a href=\"https://xhr.spec.whatwg.org/\" target=\"_blank\">WHATWG Spec</a></p>\n</li>\n<li><p><a href=\"https://www.w3.org/TR/XMLHttpRequest/\" target=\"_blank\">W3C Spec</a></p>\n</li>\n</ul>\n",
          "order": 4,
          "durationString": "1.5h"
        },
        "05-xhr-demo": {
          "title": "XHR Project Demo",
          "type": "read",
          "format": "self-paced",
          "duration": 120,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Usar XHR para construir una aplicación</li>\n</ul>\n<h2 id=\"¿por-dónde-empezamos\">¿Por dónde empezamos?</h2>\n<p>Lo primero y más importante es saber que queremos obtener.</p>\n<p>Para este ejercicio guiado queremos hacer una petición a la página del NY Times\ny que con la respuesta podamos ocupar sus noticias.</p>\n<h3 id=\"manos-al-teclado\">Manos al teclado</h3>\n<ol>\n<li><p>Crea una cuenta de desarrollador <a href=\"https://developer.nytimes.com/\" target=\"_blank\">aquí</a>. Nos\nenviarán una clave de acceso, con ella haremos las peticiones</p>\n</li>\n<li><p>Crea un proyecto con sus archivos HTML, CSS y JS\n(Nuestro HTML tiene una estructura sencilla pero tú puedes darle el estilo\nque prefieras)</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572825-5c3288ce-733f-11e8-86aa-c04d17ad2ad2.png\" alt=\"index-inicial\"></p>\n<p>Así es como se ve en el navegador:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572837-71a99922-733f-11e8-93a9-0819ca2998a8.png\" alt=\"pantalla-inicial\"></p>\n</li>\n<li><p>En nuestro archivo app.js nos traemos los elementos que usaremos y creamos un\nlet sin asignarle valor por el momento</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572849-8319f602-733f-11e8-81a5-e5d66a65e26e.png\" alt=\"traemos-elementos\"></p>\n</li>\n<li><p>A nuestro formulario le agregamos el evento <code>submit</code> y las instrucciones a\nejecutar</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572863-9229576e-733f-11e8-9d8b-66d0f8ace7bc.png\" alt=\"form-addevent\"></p>\n</li>\n<li><p>Como ya te diste cuenta, está invocando la función <code>getNews()</code> y es en esta\nfunción donde crearemos las peticiones</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572879-a16ae3c8-733f-11e8-85f6-b9a44caba985.png\" alt=\"getnews\"></p>\n<ul>\n<li>Creamos nuestro objeto <em>(línea 14)</em></li>\n<li>Hacemos uso del método <code>.open()</code> y es aquí donde debemos poner la clave que\nllegó a nuestro correo, <strong>sustituyendo</strong> &lt; TU KEY &gt; por tu clave\n<em>(linea 15)</em></li>\n<li>Las propiedades <code>.onload</code> y <code>.onerror</code> tienen asignadas sus funciones\ncorrespondientes</li>\n<li>Enviamos la petición con el método <code>.send()</code></li>\n</ul>\n</li>\n<li><p>La función <code>handleError()</code> quedará así</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572899-b6f9e98c-733f-11e8-9879-27588c37898c.png\" alt=\"handle-error\"></p>\n</li>\n<li><p>Vamos a empezar a trabajar con la función <code>addNews()</code></p>\n<ul>\n<li><p>Primero podemos hacer un console.log de <code>this.responseText</code> para saber que\nnos va a entregar esta respuesta (Un JSON)</p>\n</li>\n<li><p>Ya que vimos que tipo de información nos devolvió, podemos proceder con\nguardarlo en una const y hacer de nuevo un console.log para entender mejor\nla estructura de los datos</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572917-cd4a8fde-733f-11e8-8461-d26417c1b42c.png\" alt=\"add-news1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572941-e442637e-733f-11e8-9c98-3df461487aa0.png\" alt=\"consola-data\"></p>\n</li>\n</ul>\n</li>\n<li><p>Observando detenidamente lo que nos regresa la consola vemos que este objeto\ntiene la propiedad <code>response</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572958-f386d82e-733f-11e8-9c68-9c52e0dc439d.png\" alt=\"add-news2\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572975-0245f002-7340-11e8-9407-530a13f0ce2e.png\" alt=\"consola-data2\"></p>\n</li>\n<li><p>A partir de este punto ya podemos jugar e investigar este JSON que tenemos\nen consola y por lo tanto ya podemos hacer uso de sus propiedades.</p>\n</li>\n<li><p>Creamos un <code>li</code>, le añadimos una clase para que tenga estilos, le agregamos\ntexto que obtuvimos del JSON y lo anexamos al <code>ul</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572984-10d3e732-7340-11e8-8928-756abfb74a18.png\" alt=\"add-news3\"></p>\n</li>\n<li><p>Hecho todo esto, así debería verse en nuestro navegador</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/41572997-20eef22e-7340-11e8-830b-8636312f1ad4.png\" alt=\"pantalla-final\"></p>\n</li>\n</ol>\n<blockquote>\n<p>Recuerda que en este ejemplo nuestro <em>html</em> y el <em>li</em> que creamos tienen\nestilos, asi que no te preocupes si se ve diferente. Lo importante es que te\nmuestre en pantalla el elemento con los valores</p>\n</blockquote>\n",
          "order": 5,
          "durationString": "2h"
        },
        "06-xhr-quiz": {
          "questions": [
            {
              "title": "1) ¿Para qué usamos el método GET?",
              "description": "",
              "answers": [
                "Para confirmar que se puede establecer comunicación con el servidor",
                "Para recuperar datos",
                "Para el manejo de errores",
                "Para enviar datos"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) ¿Para qué usamos el método POST?",
              "description": "",
              "answers": [
                "Para confirmar que se puede establecer comunicación con el servidor",
                "Para recuperar datos",
                "Para el manejo de errores",
                "Para enviar datos"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "3) XHR es la abreviación de",
              "description": "",
              "answers": [
                "XMLHttpRequest",
                "Asynchronous JavaScript And XML",
                "AJAX",
                "Response Hipertext Xml"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Si en tu consola del navegador pones este código, ¿qué sucede?",
              "description": "<pre><code class=\"language-javascript\">const req = new XMLHttpRequest();\nreq.open('GET', 'https://www.google.com/');\n</code></pre><p>¿Qué sucede?</p>",
              "answers": [
                "La página de inicio de Google se abre en el navegador",
                "Una solicitud asíncrona es enviada a <code>https: // www.google.com</code>",
                "No pasa nada",
                "Se produce un error"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "5) El método .open () de un objeto XHR puede tener varios argumentos. Pero los más importantes son",
              "description": "",
              "answers": [
                "<code>.open ()</code> no tiene argumentos",
                "Nombre de la función y parámetro",
                "method HTTP y URL",
                "url y JSON"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) ¿Qué propiedad debemos establecer para el manejo de una respuesta exitosa?",
              "description": "",
              "answers": [
                "asyncRequestObject.onsucces",
                "asyncRequestObject.onload",
                "asyncRequestObject.handleSuccess",
                "asyncRequestObject.oncorrect"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "7) ¿A qué propiedad hay que asignar una función para el manejo de errores?",
              "description": "",
              "answers": [
                "asyncRequestObject.handleError",
                "asyncRequestObject.onincorrect",
                "asyncRequestObject.onerror",
                "asyncRequestObject.errorReponse"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) Cuando nuestra respuesta es un JSON, debemos convertirla a un objeto JavaScript y eso lo hacemos con",
              "description": "",
              "answers": [
                "JSON.parse();",
                "Object.json();",
                "JSON.object();",
                "parser.JSON();"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 6,
          "durationString": "30min"
        },
        "07-xhr-challenges": {
          "title": "Jugando con XHR",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Practicar todo lo aprendido haciendo uso de XHR</li>\n<li>Practicar, practicar y practicar</li>\n</ul>\n<h2 id=\"ejercicios\">Ejercicios</h2>\n<p>Debes subir todos tus ejercicios a <code>GitHub</code> y publicarlos en <code>gh-pages</code>.</p>\n<h3 id=\"algo-más-que-solo-una-noticia\">Algo más que solo una noticia</h3>\n<p>En el ejercicio demo, trabajamos con hacer peticiones al NY TIMES, pero nuestro\nejercicio solo muestra una sola noticia de las muchas que nos manda en la\nrespuesta.</p>\n<p>En esta ocasión el reto es que logres que se visualicen por lo menos 5 de\nellas.</p>\n<ul>\n<li>Necesitas hacer más peticiones?</li>\n<li>Y si queremos agregar imágenes?</li>\n<li>Nos puede direccionar a cada nota de manera individual?</li>\n<li>Y si ahora nuestra petición fuera a otro periódico?</li>\n<li>Se puede tener diferentes peticiones a distintos sitios?</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/AnaSalazar/curricula-js/02c7691cd5325626c91a99f410fc8dddbc24b0fc/06-spa/02-asynchronous-js-request/07-xhr-challenges/muestra.png\" alt=\"muestra\"></p>\n",
          "order": 7,
          "durationString": "2h"
        },
        "08-xhr-recap": {
          "title": "XHR Recap",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Reflexionar lo aprendido sobre XHR</li>\n</ul>\n<h2 id=\"como-usamos-xhr\">Como usamos XHR</h2>\n<p>Hay una serie de pasos que debemos seguir para enviar una solicitud HTTP\nde forma asíncrona con JavaScript.</p>\n<h3 id=\"para-enviar-una-petición\">Para enviar una petición</h3>\n<ul>\n<li><p>Creamos un objeto XHR con la función del constructor XMLHttpRequest</p>\n</li>\n<li><p>Utilizamos el método .open() y configuramos el método HTTP y la URL\ndel recurso que se va a buscar</p>\n</li>\n<li><p>Establecemos la propiedad .onload a nuestro objeto y a esto le asignamos\nuna función que se ejecutará en una búsqueda exitosa</p>\n</li>\n<li><p>Establecer la propiedad .onerror a nuestro objeto y a esto le asignamos una\nfunción que se ejecutará cuando se produzca un error</p>\n</li>\n<li><p>Usamos el método .send() para que envíe la solicitud</p>\n</li>\n</ul>\n<h3 id=\"para-usar-la-respuesta\">Para usar la respuesta</h3>\n<ul>\n<li><p>Usamos la propiedad .responseText, que contiene el texto de la respuesta de\nla solicitud asincrónica</p>\n</li>\n<li><p>Podemos usarla tal cual nos es devuelta o en caso de ser devuelta como un JSON\nla convertimos en Objeto JavaScript con JSON.parse()</p>\n</li>\n</ul>\n<h2 id=\"qué-sigue\">Qué sigue?</h2>\n<p>Probablemente te preguntes si realmente es necesario escribir todos esos pasos\npara conseguir nuestras peticiones asíncronas, la respuesta es <strong>Sí</strong> pero lo\nque no es necesario es escribir todas esas líneas de código. Si hacemos uso de\nalguna biblioteca como jQuery, esta puede hacer la petición por nosotros y ya\nsabemos que cada que usamos una biblioteca se ocupa menos código y lo hacemos\nun poco más eficiente.</p>\n",
          "order": 8,
          "durationString": "30min"
        },
        "09-jq-ajax": {
          "title": "AJAX con jQuery",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/NFGrayBZOVM",
              "id": "NFGrayBZOVM"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Usar jQuery para hacer requests asíncronos y entender qué ventajas nos da</li>\n</ul>\n<h2 id=\"analogía\">Analogía</h2>\n<p>Dejar que un experto prepare el pastel por ti.</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/NFGrayBZOVM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"¿por-qué-jquery\">¿Por qué jQuery?</h2>\n<p>jQuery es una librería muy popular que ya has tenido la oportunidad de usar. El\nuso que le has dado hasta este momento ha sido para manipular y recorrer el DOM\na través de métodos que hacen nuestro código más corto.</p>\n<p>Ahora, usaremos esta ventaja de usar métodos más pequeños y dejar la\nresponsabilidad a jQuery de ver la compatibilidad de navegadores por nosotros\nen la implementación de AJAX.</p>\n<p>Esto es posible gracias al método <code>.ajax()</code> que jQuery provee para realizar\npeticiones asíncronas.</p>\n<h2 id=\"método-ajax\">Método <code>.ajax()</code></h2>\n<p>El método <code>.ajax()</code> es el corazón de las peticiones asíncronas en la librería\nde jQuery. Hay 2 formas de usar este método:</p>\n<pre><code class=\"language-js\">$.ajax(&lt;url-a-realizar-la-petición&gt;, &lt;un-objeto-configuración&gt;);\n\n// or\n\n$.ajax(&lt;solo un objeto de configuración&gt;);\n</code></pre>\n<p>Fuente: <a href=\"https://api.jquery.com/jQuery.ajax/\" target=\"_blank\">Documentación de jQuery</a></p>\n<p>La manera más común de usar el método <code>.ajax()</code> es usando solo el objeto de\nconfiguración, esto en parte es debido a que es la forma más antigua que está\ndisponible (versión 1.0, a ver si encuentras de donde obtuvimos este dato\nmirando la documentación), además de que toda la configuración lo puedes poner\nen un solo objeto.</p>\n<blockquote>\n<h3 id=\"qué-es-un-objeto-de-configuración\">Qué es un objeto de configuración?</h3>\n<p>Es un objeto de JavaScript que se usa para configurar algo.</p>\n<p>Por ejemplo:</p>\n<pre><code class=\"language-js\">const settings = {\n  name: 'this is my name',\n  colors: ['orange', 'blue'],\n  layers: 2,\n  isRound: true,\n};\n</code></pre>\n<p>El objeto de configuración puede ser pasado como parámetro de una función\nconstructora. Imaginemos la función constructora <code>MakeCake</code>:</p>\n<pre><code class=\"language-js\">const myDeliciousCake = MakeCake(settings);\n</code></pre>\n<p>De igual manera, el objeto de configuración puede ser pasado directamente:</p>\n<pre><code class=\"language-js\">const myDeliciousCake = MakeCake({\n  name: 'this is my name',\n  colors: ['orange', 'blue'],\n  layers: 2,\n  isRound: true,\n});\n</code></pre>\n</blockquote>\n<h2 id=\"haciendo-una-llamada-ajax\">Haciendo una llamada AJAX</h2>\n<p>El método <code>.ajax()</code> de jQuery tiene que ser increíblemente versátil y poderoso\nsi es lo que le da vida a las peticiones asíncronas de jQuery. Una petición Ajax\nsimple se vería así:</p>\n<pre><code class=\"language-js\">$.ajax({\n    url: `https://api.github.com/users/${searchedUser}`\n});\n</code></pre>\n<p>Vamos a probarlo:</p>\n<ol>\n<li>Anda al sitio web de <a href=\"http://jquery.com/\" target=\"_blank\">jQuery</a></li>\n<li>Abre el <code>Developer Tools</code> de tu navegador</li>\n<li>Asegúrate que estás en la pestaña <code>Network</code> y que el botón de grabación está\nencendido</li>\n<li>Agrega el script anterior en la consola y ejecútalo</li>\n</ol>\n<p><img src=\"https://media.giphy.com/media/l1KcRuWi059tT6VYQ/giphy.gif\" alt=\"jQuery - ajax\"></p>\n<p>Este <code>request</code> (petición o solicitud) está siendo realizada hacia un recurso en\nGithub (información del usuario). El request puede ser revisado desde el panel\nde redes (pestaña <code>Network</code> en el Dev Tools).</p>\n<p>Ya sabemos cómo realizar una petición con <code>.ajax()</code> pero aun no estamos\ncontrolando la respuesta.</p>\n<h2 id=\"manipular-los-datos-retornados\">Manipular los datos retornados</h2>\n<p>Si recordamos cómo podemos lograr esto usando un objeto XHR, el <code>response</code> era\ncontrolado por una función. Para el método <code>.ajax()</code> es exactamente lo mismo,\npodemos encadenar a la ejecución de éste, el método <code>.done()</code>. Vamos a pasar una\nfunción como argumento al método <code>.done()</code> que se ejecutará una vez que la\nllamada Ajax haya terminado:</p>\n<pre><code class=\"language-js\">function handleResponse(data) {\n    console.log('the ajax request has finished!');\n    console.log(data);\n}\n\n$.ajax({\n    url: `https://api.github.com/users/${searchedUser}`\n}).done(handleResponse);\n</code></pre>\n<p><img src=\"https://media.giphy.com/media/xUOwGiAxN7tYlwAZyg/giphy.gif\" alt=\"done method\"></p>\n<p>La llamada asíncrona es realizada y controlada una vez que termina por el\nmétodo <code>.done()</code>, en este caso, muestra el response en la consola.</p>\n<p>Para ponernos a prueba, vamos a convertir esta petición asíncrona que usa <code>XHR</code>\na una llamada con el método <code>.ajax()</code> de jQuery. Esto es lo que tenemos\nactualmente:</p>\n<pre><code class=\"language-js\">const githubRequest = new XMLHttpRequest();\ngithubRequest.onload = addUser;\ngithubRequest.open('GET', `https://api.github.com/users/${searchedUser}`);\ngithubRequest.send();\n</code></pre>\n<p>Muchas de estas operaciones pueden ser manejadas internamente por jQuery, así\nque el primer paso de la conversión sería así:</p>\n<pre><code class=\"language-js\">$.ajax({\n    url: `https://api.github.com/users/${searchedUser}`\n}).done(addUser);\n</code></pre>\n<p>Usando jQuery para peticiones asíncronas:</p>\n<ul>\n<li>No tenemos la necesidad de crear un objeto XHR</li>\n<li>En vez de especificar que el request es de método <code>GET</code>, jQuery lo da por\ndefecto y solo tenemos que indicarle la URL del recurso que estamos\nsolicitando</li>\n<li>En vez de configurar el evento <code>.onload</code>, usamos el método <code>.done()</code></li>\n</ul>\n<p>La petición debe enviarse correctamente ahora. ¡Gran trabajo! Pero ahora tenemos\nproblemas con el response y cómo se está controlando.</p>\n<h2 id=\"limpiando-el-callback-de-success\">Limpiando el callback de success</h2>\n<p>Ya hemos obtenido la respuesta en la consola, ahora vamos a ver cómo lo\nagregamos a nuestra página a través de jQuery. Primero veamos cómo lo\ntendríamos usando el objeto XHR:</p>\n<pre><code class=\"language-js\">function addUser() {\n    const user = JSON.parse(this.responseText);\n    const firstImage = data.results[0];\n\n    userContainer.insertAdjacentHTML('afterbegin', `&lt;div class=\"card col-md-6 offset-md-3 col-xs-12\"&gt;\n        &lt;img class=\"card-img-top\" src=\"${user.avatar_url}\" alt=\"Card image cap\"&gt;\n        &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;${user.name || ''}&lt;/h5&gt;\n        &lt;h6&gt;@${user.login}&lt;/h6&gt;\n        &lt;p class=\"card-text\"&gt;${user.bio || ''}&lt;/p&gt;\n        &lt;a href=\"${user.html_url}\" class=\"btn btn-primary\"&gt;Stalkear coder&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;`);\n}\n</code></pre>\n<blockquote>\n<p><strong>Nota:</strong> En este ejemplo, el HTML que se está agregando es un card de\nBootstrap 4, para fines de este ejemplo, el <em>markup</em> puede tener otra\nestructura y diseño.</p>\n</blockquote>\n<p>Si usamos jQuery, podríamos cambiarlo de la siguiente manera:</p>\n<pre><code class=\"language-js\">function addUser(user) {\n    $userContainer.html(`&lt;div class=\"card col-md-6 offset-md-3 col-xs-12\"&gt;\n        &lt;img class=\"card-img-top\" src=\"${user.avatar_url}\" alt=\"Card image cap\"&gt;\n        &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;${user.name || ''}&lt;/h5&gt;\n        &lt;h6&gt;@${user.login}&lt;/h6&gt;\n        &lt;p class=\"card-text\"&gt;${user.bio || ''}&lt;/p&gt;\n        &lt;a href=\"${user.html_url}\" class=\"btn btn-primary\"&gt;Stalkear coder&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;`);\n}\n</code></pre>\n<h3 id=\"¿qué-cambió\">¿Qué cambió?</h3>\n<ul>\n<li>La función ahora tienen un parámetro (el usuario)</li>\n<li>El parámetro ya ha sido convertido de JSON a un objeto de JavaScript, así que\nno necesitamos usar <code>JSON.parse()</code></li>\n<li>Aprovechamos los métodos de jQuery para manipular el DOM</li>\n</ul>\n<p>El código que agrega el HTML (plantilla) al contenedor no ha cambiado :).</p>\n<h2 id=\"¿y-si-ocurre-un-error-cómo-lo-controlarías\">¿Y si ocurre un error, cómo lo controlarías?</h2>\n<p>Entra a la documentación de jQuery y revisa qué método (así como <code>.done()</code>)\nencadenarías a la petición AJAX para controlar un posible error. Una vez\nencontrado, puedes probarlo metiendo un error dentro de la URL por ejemplo.</p>\n<h2 id=\"código-fuente-de-la-demo\">Código fuente de la demo</h2>\n<p>El código visto en esta lectura lo puedes encontrar en el siguiente pen:</p>\n<iframe height=\"400\" scrolling=\"no\" title=\"AJAX con jQuery\" src=\"//codepen.io/ivandevp/embed/vdxNMd/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [AJAX con jQuery](https://codepen.io/ivandevp/pen/vdxNMd/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n",
          "order": 9,
          "durationString": "30min"
        },
        "10-fetch": {
          "title": "AJAX con fetch",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Aprender cómo hacer llamadas asíncronas con Javascript moderno</li>\n<li>Revisar fetch y sus funcionalidades</li>\n<li>Usar promesas para encadenar varias llamadas http, o hacerlas en paralelo</li>\n</ul>\n<h2 id=\"alternativa-a-xhr-y-jquery-pero-solo-con-javascript-puro\">Alternativa a XHR y JQuery, pero solo con javascript puro</h2>\n<p>Cuando usamos XHR vemos que se vuelve tedioso hacer peticiones. Tenemos que\nponer un montón de código para que recién funcione, además estamos en la\nobligación de usar callbacks, que rápidamente puede resultar en nuestro código\ntransformado en espagueti.</p>\n<p>¿qué sucede si queremos hacer varias peticiones al mismo tiempo?</p>\n<p>¿qué pasa si necesitamos datos de una llamada, para luego hacer otra, y otra?</p>\n<p>Por suerte para nosotras actualmente existe <code>fetch</code>, implementado por la mayoría\nde los navegadores (excepto <em>Internet Explorer</em> y <em>Safari</em>), que usa <em>Promesas</em>\npara retornar los resultados, lo que trae como beneficio inmediato el no tener\nque depender de <em>callbacks</em> para recibir las respuestas de las peticiones. El\nusar promesas también nos permite anidarlas o ejecutarlas en paralelo, haciendo\nnuestro código mucho más ordenado. Ahora, mucha charla, mejor veamos cómo usarla\ny algunos ejemplos.</p>\n<h2 id=\"uso-básico-de-fetch\">Uso básico de fetch</h2>\n<pre><code class=\"language-js\">fetch(url).then((response) =&gt; {\n  if (response.status !== 200) {\n    // Código cuando recibimos una respuesta corréctamente del servidor\n  } else {\n    // Código en caso de que nos respondan con algún error\n  }\n}).catch((error) =&gt; {\n  /* Código en caso de que la llamada falle\n   * Como cuando el usuario NO tiene internet, o se haya cortado la\n   * comunicación.\n   */\n});\n</code></pre>\n<p>Como podemos ver, lo único que debemos proveer a fetch es la URL a la que\nllamaremos, luego a través de <code>then</code> escribimos la función que recibirá la\nrespuesta desde el servicio. La diferencia con XHR o JQuery acá, es que\ncualquiera sea la respuesta, esta llegará a la función que colocas en <code>then</code>. La\npromesa solo fallará (pasando a ejecutar la función que está en <code>catch</code>) si es\nque hay algún problema con la conexión o no se recibe respuesta alguna.</p>\n<p>Observa también que la respuesta llega como un objeto <code>response</code>, que contiene\nel estado HTTP de la respuesta.</p>\n<p>Ahora, como vimos antes, muchas <strong>API</strong> usan el formato JSON para comunicar los\ndatos, en el caso de <code>fetch</code>, tenemos que hacer solo un paso extra para obtener\nel JSON :</p>\n<pre><code class=\"language-js\">fetch(url).then((response) =&gt; {\n  if (response.status !== 200) {\n    return response.json();\n    // Solo si es que sabemos que la respuesta es JSON, o fallará\n  } else {\n    // Código en caso de que nos respondan con algún error\n  }\n}).then((respuestaJson) =&gt; {\n  // Código que usa el JSON\n}).catch((error) =&gt; {\n  /* Código en caso de que la llamada falle\n   * Como cuando el usuario NO tiene internet, o se haya cortado la\n   * comunicación.\n   */\n});\n</code></pre>\n<p>Como vemos, <code>response.json()</code> también retorna una promesa (todo es muy\nasíncrono), pero obtener el JSON queda bastante cómodo a través de un segundo\n<code>then</code> que nos da el JSON que nos devuelve la API finalmente.</p>\n<p>Si la URL en cambio, no responde con un JSON, si no que con una imagen, por\nejemplo, entonces debemos usar el método acorde :</p>\n<pre><code class=\"language-js\">response.json() //Para respuestas en JSON\nresponse.blob() //Para archivos binarios como imágenes\nresponse.text() //Para respuestas en texto simple y plano\n</code></pre>\n<p>Todos los métodos anteriores funcionan con promesas, así que hay que anidar\nlas funciones <code>then</code> acorde a esto.</p>\n<p>Puede que hacer todo así parezca más trabajo, o mucho más código que en las\nsoluciones anteriores, pero ahora veremos que para hacer llamadas una tras otra,\no incluso hacer peticiones en paralelo, esta es la mejor opción de todas.</p>\n<h2 id=\"llamadas-sucesivas-con-fetch\">Llamadas sucesivas con fetch</h2>\n<p>Muchas veces cuando estamos usando una API, necesitamos ciertos datos de una\nllamada para poder hacer la siguiente y así. Gracias a que <code>fetch</code> usa promesas\nesto se vuelve mucho más fácil y natural, veamos un ejemplo :</p>\n<pre><code class=\"language-js\">fetch(url1).then((response) =&gt; {\n  if (response.status == 200) {\n    return response.json();\n  } else {\n    throw new Error(\"La llamada a la API falló\");\n  }\n}).then((jsonData) =&gt; {\n  return fetch(jsonData.url); // Supongamos que obtenemos otra url de los datos\n}).then((response) =&gt; {\n  if (response.status == 200){\n    return response.json();\n  } else {\n    throw new Error(\"La segunda llamada a la API falló\");\n  }\n}).then((jsonData) =&gt; {\n  // Código que procesa los datos de la segunda llamada\n}).catch((error) =&gt; {\n  // Código que se ejecuta en caso de **cualquier** error\n});\n</code></pre>\n<p>Como vemos, podemos aprovechar todo el poder de las promesas para poder hacer\nuna tras otras las peticiones, de una forma ordenada, sin caer en\n<em>callback hell</em> (callbacks dentro de callbacks dentro de callbacks...). Otra\ncosa que ganamos al hacer las llamadas de esta forma es que concentramos todo el\ncódigo que maneja errores en solo una función que se coloca en <code>catch</code>.</p>\n<h2 id=\"muchas-llamadas-a-la-vez\">Muchas llamadas a la vez</h2>\n<p>Otro caso muy común mientras programamos nuestras aplicaciones es que\nnecesitemos de varias peticiones a API, o recursos de la internet, como\nimágenes, todo al mismo tiempo. En estos casos, nuevamente, gracias a que\n<code>fetch</code> usa promesas para retornar los resultados, es que podemos aprovecharnos\nde ellas para hacer cosas como la siguiente :</p>\n<pre><code class=\"language-js\">const llamadas = [];\nllamadas.push(fetch(url1));\nllamadas.push(fetch(url2));\nllamadas.push(fetch(url3));\n\nPromise.all(llamadas).then((responses) =&gt; {\n  return responses.map(response =&gt; response.json());\n  // En caso de que sean llamadas a api\n}).then((jsonResponses) =&gt; {\n  // Código que maneja las múltiples llamdas y sus respuestas en JSON\n}).catch((error) =&gt; {\n  // Código que maneja errores\n});\n</code></pre>\n<p>Como vemos, el código es mucho más directo y corto que si usaramos XHR o JQuery\npara hacer lo mismo. Otra cosa es el uso de map, que recorre todas las\nrespuestas y devuelve un arreglo con las promesas de extraer la respuesta en\nJSON.</p>\n",
          "order": 10,
          "durationString": "30min"
        },
        "11-qz-fetch-jq": {
          "questions": [
            {
              "title": "1) ¿Qué métodos podemos usar para hacer una petición GET usando JQuery?",
              "description": "",
              "answers": [
                "<code>$.get()</code>",
                "<code>$.post()</code>",
                "<code>$.getJSON()</code>",
                "<code>$.ajax()</code>"
              ],
              "solution": [
                0,
                2,
                3
              ]
            },
            {
              "title": "2) ¿Con qué trabaja fetch para entregar las respuestas?",
              "description": "",
              "answers": [
                "Callbacks",
                "Eventos",
                "Promesas",
                "Gatos pequeños"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) ¿Qué método podemos encadenar en una petición AJAX con jQuery para controlar los errores?",
              "description": "",
              "answers": [
                "<code>.fail()</code>",
                "<code>.done()</code>",
                "<code>.error()</code>",
                "<code>.load()</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) ¿cómo manejamos errores al hacer una petición con fetch?",
              "description": "",
              "answers": [
                "A través de .catch(error =&gt; {//Manejo de error})",
                "A través de un callback de error",
                "Usando .error()",
                "Con try / catch"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) Si queremos hacer una llamada fetch tras otra en orden, entonces",
              "description": "",
              "answers": [
                "usamos un ciclo <code>for</code> que itere por cada llamada",
                "usamos Funciones <em>callback</em> dentro de otras",
                "las guardamos en un arreglo y usamos <code>map</code> para ejecutar cada una de ellas",
                "usamos promesas para hacer secuencialmente then().then()... catch()"
              ],
              "solution": [
                3
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 11,
          "durationString": "15min"
        },
        "12-jq-ajax-challenges": {
          "title": "Jugando con AJAX",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Practicar todo lo aprendido haciendo peticiones asíncronas</li>\n<li>Practicar, practicar y practicar</li>\n</ul>\n<h2 id=\"ejercicios\">Ejercicios</h2>\n<p>Debes subir todos tus ejercicios a <code>GitHub</code> y publicarlos en <code>gh-pages</code>. Eres\nlibre de elegir el método que más te acomode para ejecutar las llamadas a estas\nAPI, así descubrirás por ti misma las ventajas y desventajas de cada método.</p>\n<h3 id=\"pokedex\">Pokedex</h3>\n<p>¿Alguna ves viste Pokemon? Sino, no importa, ahora te enterarás de que trata.\nUn pokedex es un buscador de Pokemons, donde puedes obtener información sobre\nel pokemon que buscas. Usando la <a href=\"https://pokeapi.co/\" target=\"_blank\">API de Pokeapi</a> diseña\ntu propio pokedex. Acá te dejamos unos slides con algunas instrucciones un\npoco más particulares. Recuerda no limitarte y dar más allá de lo propuesto ;)</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTZUDMeEBLTwGHncLRRQzdq4qcQAsV8Q1XNIhJGG4N2QyzFVXgQqf2nZ0zp4U42mitojFEtDxU-Gcan/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"760\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<h3 id=\"buscador-de-gifs\">Buscador de GIFs</h3>\n<p>Este reto consiste en hacer literalmente lo que el nombre indica, vamos a darle\nla oportunidad a nuestros usuarios de buscar GIFs y mostrarlo de la manera más\namigable y entretenida posible. Para esto usaremos el\n<a href=\"https://developers.giphy.com/\" target=\"_blank\">API de Giphy</a>. Notarás que para realizar las\npeticiones te pide un <code>API Key</code>, para obtenerlo tendrás que regitrarte y crear\nuna app. No olvides que las buenas APIs tienen documentación y a pesar de que\nestán en inglés, podemos ingeniárnosla para entenderlo en su mayoría :). Una vez\nlisto tu buscador, ¿qué más se te ocurre poder agregar?</p>\n<p>Acá tienes una guía de cómo lograrlo, no te conformes con esto y adáptalo a tu\npropio estilo.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRabPxOEWBZZ5srO-SaZQ83flBF2Swt9iS2t54ycoJ1tdP07BGQrEuSxU6Uq_M1Cocwbc0UuetdW6PD/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"760\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n",
          "order": 12,
          "durationString": "2h"
        },
        "13-jq-ajax-recap": {
          "title": "jQuery AJAX Recap",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Reflexionar sobre lo aprendido de AJAX, jQuery, fetch.</li>\n</ul>\n<h2 id=\"conclusiones\">Conclusiones</h2>\n<p>En esta segunda parte de la unidad, hemos visto cómo realizar una petición HTTP\nasíncrona a través de jQuery. Las ventajas que nos da usar una librería como\nesta es ahorrarnos tiempo y código para la configuración que se haría\nnativamente a través del objeto <code>XMLHTTPRequest</code> además de la verificación\nde compatibilidad entre navegadores.</p>\n<p>En una de las lecturas, se hizo la mención a que si era conveniente usar jQuery\npara estas peticiones asíncronas y expresamos esto debido a que ésta librería\nno está dedicada a solo esto sino a más. La respuesta es que en la actualidad\nse prefiere usar microlibrerías (librerías mucho más pequeñas) que cumplan un\npropósito específico como manejar peticiones asíncronas. Además de esto, HTML5\nprovee una nueva API como reemplazo a <code>XMLHTTPRequest</code> que hace el manejo de\nestas peticiones mucho más sencillas. Acá te dejamos una lista para que\naverigües y comiences a jugar con ellas. ¿Te animas a refactorizar alguno de tus\nretos con estas nuevas herramientas?</p>\n<ul>\n<li><strong><a href=\"https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch\" target=\"_blank\">Fetch</a></strong>,\nesta es la nueva API que provee HTML5 para realiar peticiones asíncronas y\nestá basada en <code>promises</code>.</li>\n<li><strong><a href=\"https://github.com/visionmedia/superagent\" target=\"_blank\">SuperAgent</a></strong> es una\nmicrolibrería especializada en hacer peticiones HTTP asíncronas.</li>\n<li><strong><a href=\"https://github.com/axios/axios\" target=\"_blank\">axios</a></strong> es una microlibrería que a\ndiferencia de la anterior, esta está basada en promesas.</li>\n</ul>\n<p>Estas no son las únicas herramientas que existen para realizar peticiones\nasíncronas pero sin duda son algunas de las más usadas hoy en día, te darás\ncuenta que al usar una, las demás son muy similares. Así que no pierdas la\noportunidad de probarlas todas para que luego decidas cuál te llama más la\natención.</p>\n<h2 id=\"recursos\">Recursos</h2>\n<p>Te dejamos algunos recursos que te podrían apoyar a indagar un poco más al\nrespecto de los temas vistos sobre jQuery.</p>\n<ul>\n<li><a href=\"http://librosweb.es/libro/fundamentos_jquery/capitulo_7/metodos_ajax_de_jquery.html\" target=\"_blank\">Métodos Ajax de jQuery</a></li>\n<li><a href=\"http://jqfundamentals.com/chapter/ajax-deferreds\" target=\"_blank\">AJAX &amp; Deferred</a></li>\n<li><a href=\"https://desarrolloweb.com/articulos/fetch-ajax-javascript.html\" target=\"_blank\">Fetch, Ajax moderno en JavaScript</a></li>\n<li><a href=\"https://cybmeta.com/ajax-con-json-y-php-ejemplo-paso-a-paso\" target=\"_blank\">Ajax con jQuery, JSON y PHP: ejemplo paso a paso</a></li>\n</ul>\n",
          "order": 13,
          "durationString": "30min"
        },
        "14-opening": {
          "title": "Opening: A jugar con Web APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<p>En esta unidad vamos a practicar jugando con distintos tipos de Web APIs, con el\nobjetivo de experimentar la extracción de datos sin autenticación, con un token\ngenerado, enviando datos a través de cabeceras HTTP, identificar cuando son\nRESTful y otros detalles que te darán superpoderes.</p>\n<h2 id=\"guía-de-preguntas-y-conceptos-clave\">Guía de preguntas y conceptos clave</h2>\n<p>Cuando empezamos a estudiar un tema nuevo, es útil tener una idea de los\nconceptos más importantes de lo que vamos a aprender y de los temas centrales\nque debemos prestar particular atención.</p>\n<p>A continuación te presentamos una serie de preguntas que debes ser capaz de\nresponder al terminar esta unidad. Utiliza estas preguntas como guía para\norientar tus esfuerzos de aprendizaje. Regresa a ellas constantemente a\nmedida que avanzas para validar que estás avanzando en la dirección correcta.\nQue te sirva como un \"checklist\" que vas marcando a medida que vas progresando.</p>\n<ul>\n<li>¿Qué es un Web API?</li>\n<li>Identificar cuáles APIs son públicas sin autenticación</li>\n<li>Identificar cuáles APIs son públicas pero necesitan un API Key</li>\n<li>¿Qué es autenticación basada en tokens?</li>\n<li>¿Cómo enviar datos en las cabeceras HTTP usando AJAX?</li>\n<li>¿Qué es OAuth?</li>\n<li>¿Qué es REST?</li>\n<li>¿Cómo identificar una RESTful API?</li>\n<li>¿Qué es un CRUD?</li>\n</ul>\n",
          "order": 14,
          "durationString": "15min"
        },
        "15-third-party-apis": {
          "title": "Third party APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/_49_6pjTXiQ",
              "id": "_49_6pjTXiQ"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender la diferencia entre las APIs del navegador y las APIs de terceros</li>\n<li>Conocer las ventajas de usar APIs de terceros</li>\n</ul>\n<h2 id=\"recordemos-qué-es-un-web-api\">Recordemos qué es un web API</h2>\n<p>Ya hemos visto muchas veces que el acrónimo de API significa Application\nProgramming Interface (Interfaz de programación de aplicaciones) y que la\npodemos encontrar en distintos lugares como el navegador, la computadora, la\nweb y demás. También hemos escuchado que nos da interoperabilidad entre diversos\nsistemas, en esta unidad nos enfocaremos no en la comunicación con un único\ndispositivo sino entre miles o millones de esto, ¿cómo?. A través de internet,\npor ello, nos enfocaremos en las <strong>Web APIs</strong>. Alista tu subtítulos cone el\ntraductor automático y mira este video:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/_49_6pjTXiQ?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"apis-de-terceros\">APIs de terceros</h2>\n<blockquote>\n<p>Los APIs de terceros son APIs provistas por terceros (duh), estos terceros\nson generalmente compañías como Google, Facebook, entre otras - que permiten\nacceder a su funcionalidad a través de un lenguaje de programación (en nuestro\ncaso JavaScript) y usarlo en nuestra web app.</p>\n</blockquote>\n<p>Este es un extracto traducido de un <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\" target=\"_blank\">artículo de MDN sobre Third Party APIs</a>.</p>\n<h2 id=\"pros-y-contras-del-uso-de-apis-de-terceros\">Pros y contras del uso de APIs de Terceros</h2>\n<blockquote>\n<h3 id=\"pros-del-uso-de-apis-de-terceros\">Pros del uso de APIs de terceros</h3>\n<ul>\n<li><strong>Rapidez.</strong> El poder integrar en cuestión de segundos mapas, imágenes o\nservicios de autenticación en nuestras aplicaciones nos descarga de gran parte\nde la programación y nos permite centrarnos rápidamente en nuestro dominio de\nnegocio.</li>\n<li><strong>Robustez.</strong> La mayoría de APIs y servicios más populares están tan sumamente\nextendidos que han sido probados en toda clase de situaciones de estrés, por\nlo que podremos asegurar que su respuesta será adecuada en la inmensa mayoría\nde los casos.</li>\n<li><strong>Imagen.</strong> Cuando los usuarios usan a menudo un buen servicio, lo acaban\nreconociendo, y el asociar nuestra imagen a la de un grande como Google,\nFacebook o Twitter, puede ayudarnos a contagiarnos de la buena percepción que\nlos usuarios tienen de estos gigantes.</li>\n<li><strong>Mantenimiento.</strong> Por norma general, las grandes empresas no dejarán que sus\nproductos se deterioren, por lo que es bastante común que los servicios\naccedidos a través de las APIs estén en una constante mejora, que además en\nmuchos casos será totalmente transparente al programador que las usa.</li>\n<li><strong>Innovación.</strong> Al hilo de lo anterior, es lógico pensar que empresas líderes\ncomo Microsoft, eBay o Amazon no se conformarán con mantener sus aplicaciones\npara que funcionen bien, sino que tratarán de mejorarlas constantemente, con\nlo que los usuarios de sus APIs se verán beneficiados con todas las mejoras\nque se vayan produciendo.</li>\n</ul>\n<h3 id=\"contras-del-uso-de-apis-de-terceros\">Contras del uso de APIs de terceros</h3>\n<ul>\n<li><strong>Condiciones cambiantes.</strong> Al ligarnos a una tercera empresa por un contrato\ntan débil como es la licencia de uso de una API, normalmente estamos expuestos\na la voluntad de la otra parte, lo que puede suponer recortes en las\nprestaciones, obsolescencia de métodos implementados o pérdida de la gratuidad\ndel servicio, tal y como acaba de ocurrir con Google Maps.</li>\n<li><strong>Disponibilidad.</strong> Como si no fuera suficiente con preocuparnos de mantener\nen funcionamiento nuestro propio servidor y aplicaciones, caídas de servicios\nexternos, como las ocurridas este año con Amazon, pueden dejar tus servicios\ninutilizados. ¿Os imagináis tener una tienda virtual que funcione a la\nperfección pero sólo admita pagos por PayPal y que éstos no funcionen?</li>\n<li><strong>Imagen.</strong> Antes lo nombré como una ventaja, ya que podemos favorecernos del\nprestigio de una buena marca al trabajar con ella, pero ¿Qué ocurre cuando la\nreputación de nuestros partners desciende hasta el fango? Desgraciadamente es\nmuy difícil separar por completo la imagen de unos y otros, y nos veremos\nperjudicados por los errores ajenos.</li>\n<li><strong>Falta de innovación.</strong> Cuando los servicios de terceros que utilizamos van\npor delante en progreso e innovación no suele haber quejas, pero también puede\nocurrir lo contrario: que se estanquen, nuestra aplicación avance más rápido\ny su API ya no pueda cumplir nuestras exigencias. Ante situaciones así se\nplantea la difícil decisión de cambiar de proveedor de servicios o\nimplementarlos por tu cuenta, con el consiguiente sobrecoste.</li>\n<li><strong>Privacidad.</strong> Las leyes son muy distintas en cada país, y algunas como la\nLey Orgánica de Protección de Datos española (LOPD), que es más restrictiva\nque las equivalentes de   otros países, pueden impedirnos legalmente delegar\nciertos datos o servicios para su trato por terceros.</li>\n</ul>\n</blockquote>\n<p>Estos pros y contras son parte de un <a href=\"https://www.genbetadev.com/programacion-en-la-nube/pros-y-contras-del-uso-de-apis-de-terceros\" target=\"_blank\">post de GenbetaDev</a>.\nNosotros nos enfocaremos en las cosas positivas en este momento y sacaremos\nprovecho de todo lo que nos ofrecen las APIs de terceros y hacer apps increíbles.</p>\n",
          "order": 15,
          "durationString": "20min"
        },
        "16-web-apis": {
          "title": "Web APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 40,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/ATB23YVOSq4",
              "id": "ATB23YVOSq4"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/lyHrVjx8MSw",
              "id": "lyHrVjx8MSw"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Conocer e identificar los distintos tipos de Web APIs con los que podemos\ntrabajar</li>\n</ul>\n<h2 id=\"¿dónde-puedo-saber-qué-web-apis-públicas-hay\">¿Dónde puedo saber qué Web APIs públicas hay?</h2>\n<p>Ya que en esta unidad vamos a trabajar con Web APIs públicas, debemos de saber\ndónde podemos ver cuáles existen. Para ello, te dejamos los siguientes recursos:</p>\n<ul>\n<li><a href=\"https://github.com/abhishekbanthia/Public-APIs\" target=\"_blank\">Public-APIS</a></li>\n<li><a href=\"https://any-api.com/\" target=\"_blank\">Any API</a></li>\n<li><a href=\"https://public.apis.zone/\" target=\"_blank\">Public APIs - Github Repo</a></li>\n<li><a href=\"https://www.programmableweb.com/apis/directory\" target=\"_blank\">API Directory</a></li>\n<li><a href=\"https://apilist.fun/\" target=\"_blank\">API List</a></li>\n</ul>\n<p>Para el objetivo de esta lectura, vamos a enfocarnos en un recurso que no hemos\nlistado hace un momento: <a href=\"https://github.com/toddmotto/public-apis\" target=\"_blank\">Public APIs</a>.\nEste repositorio a diferencia de los demás, tiene una manera sintetizada de\nmostrar la autenticación que requiere un API (los demás recursos también\nmuestran este detalle pero no están a primera vista).</p>\n<p><img src=\"https://github.com/ivandevp/curricula-js/blob/378ca9e9ad8d178bf783ebbcea6383d9c44a783b/06-spa/03-working-with-apis/02-web-apis/web-apis.png?raw=true\" alt=\"Different Web APIs Auth\"></p>\n<p>En la imagen anterior, podemos visualizar el apartado de las APIs de Música, en\nla cual, la columna de <code>Auth</code> tiene valores distintos como: <code>NO</code>, <code>apiKey</code> u\n<code>OAuth</code>. Esto nos da un espacio a darles de cierta manera una clasificación a\nlas Web APIs en base a su medio de autenticación. Así que veamos un poco de qué\ntrata.</p>\n<h3 id=\"web-apis-sin-autenticación\">Web APIs sin autenticación</h3>\n<p>Éste tipo de APIs es el más sencillo de consumir a través de AJAX y a su vez el\nde mayor uso público debido a que no debes de registrarte para obtener una clave\no algo. simplemente haces una petición al endpoint especificado y listo. Ejemplo\nde estas APIs pueden ser: Pokeapi, Swapi, entre otras. Aquí te dejamos un <em>pen</em>\nmostrando lo que puedes hacer con la API de <a href=\"https://lyricsovh.docs.apiary.io/#\" target=\"_blank\">Lyrics.ovh</a>.</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"Lyrics API\" src=\"//codepen.io/ivandevp/embed/NyjmMm/?height=760&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [Lyrics API](https://codepen.io/ivandevp/pen/NyjmMm/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<h3 id=\"web-apis-con-apikey\">Web APIs con <code>apiKey</code></h3>\n<p>En estas APIs, su método de autenticación es a través de un <code>API Key</code> que\nacompaña a todas las peticiones que se realizan hacia algún endpoint (recurso).\nEn la mayoría de casos, deberás registrarte para obtener este <code>apiKey</code>. Aquí\nte dejamos un ejemplo con Google Maps.</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"Laboratoria en Google Maps\" src=\"//codepen.io/ivandevp/embed/qxmGaY/?height=760&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen[ Laboratoria en Google Maps](https://codepen.io/ivandevp/pen/qxmGaY/)\n  by Ivan ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<p>En algunas ocasiones, los API Keys generados deben de ir en las cabeceras HTTP\nde la petición para que en el backend se haga la verificación del token y pueda\nautenticarse correctamente. Por ejemplo, en la API de <a href=\"https://www.coinapi.io/\" target=\"_blank\">CoinAPI.io</a>,\nel token se envía a través del header <code>X-CoinAPI-Key</code>, acá te mostramos un pen\nde cómo se haría la petición en este caso:</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"BYReOj\" src=\"//codepen.io/ivandevp/embed/BYReOj/?height=760&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [BYReOj](https://codepen.io/ivandevp/pen/BYReOj/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<h3 id=\"web-apis-con-oauth\">Web APIs con <code>OAuth</code></h3>\n<p>OAuth es un protocolo de autorización que te permite obtener acceso limitado a\naplicaciones de terceros para obtener datos y luego usar dichos datos para el\nregistro o uso de un web service o API. Aquí dejamos un ejemplo para que veas\na qué nos referimos:</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"YeQwOe\" src=\"//codepen.io/ivandevp/embed/YeQwOe/?height=265&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [YeQwOe](https://codepen.io/ivandevp/pen/YeQwOe/) by Ivan\n  ([@ivandevp](https://codepen.io/ivandevp)) on [CodePen](https://codepen.io).\n</iframe>\n\n<p>¿No notaste la diferencia? Si bien esta implementación es similar a las que\nusan un API Key como método de autenticación, para generar ese <code>key</code> que se puede\nver en la URL del <strong>GET Request</strong>, se debe crear una aplicación en <a href=\"https://stackapps.com/\" target=\"_blank\">Stack Apps</a>\ny para poder hacerlo, es necesario registrarse, al momento del registro ofrece\nuna opción de realizarlo mediante Facebook. Cuando esto sucede, el usuario\ngarantiza que StackExchange puede obtener ciertos datos de su cuenta de Facebook\ny estos datos son usados para crear la cuenta y configurar la app que se cree\nen Stack Apps. Ese proceso es lo que OAUth permite realizar de manera\nestandarizada.</p>\n<p>Otro ejemplo, si pruebas acceder al API de Spotify, tu te puedes conectar a él\nmediante Facebook y obtener acceso a hacer búsquedas de canciones, artistas,\nplaylists y demás.</p>\n<h2 id=\"autenticación-y-autorización\">Autenticación y Autorización</h2>\n<p>Estos dos términos fueron mencionados a lo largo de esta lectura, es importante\nhacer mención que son 2 aspectos de seguridad que las APIs toman en cuenta al\nmomento del diseño e implementación.</p>\n<p>La autenticación es el proceso de verificar que eres el usuario que indicas ser.\nEs decir, en un inicio de sesión, tu usuario y contraseña deben de coincidir con\nlos datos que tiene almacenado el sistema, este es un ejemplo de autenticación.</p>\n<p>Mientas que la autorización, una vez comprobado que eres quien dices ser,\nverifica si tienes acceso o permisos al recurso solicitado.</p>\n<p>Aquí te dejamos un par de videos (lo sabemos, está en inglés pero Google\nTranslate nos puede apoyar, no a la perfección pero seguro podrás entenderlo\nbajo el contexto adecuado).</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ATB23YVOSq4?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/lyHrVjx8MSw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"más-recursos\">Más recursos</h2>\n<ul>\n<li><a href=\"https://carlosazaustre.es/que-es-la-autenticacion-con-token/\" target=\"_blank\">¿Qué es la autenticación basada en tokens?</a></li>\n<li><a href=\"https://aplicacionesysistemas.com/que-es-oauth/\" target=\"_blank\">¿Qué es OAuth?</a></li>\n</ul>\n",
          "order": 16,
          "durationString": "40min"
        },
        "17-rest": {
          "title": "RESTful APIs",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/hTdYO7tKh_k",
              "id": "hTdYO7tKh_k"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/95X-pHvGBnw",
              "id": "95X-pHvGBnw"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/AyQboo5CycM",
              "id": "AyQboo5CycM"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://youtu.be/aI1DSeZAEMA",
              "id": "aI1DSeZAEMA"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender a grandes rasgos qué es REST y cómo detectar qué APIs son RESTful</li>\n</ul>\n<h2 id=\"formato-de-contenido\">Formato de contenido</h2>\n<h3 id=\"xml\">XML</h3>\n<blockquote>\n<p>Extensible Markup Language (XML) es un formato universal para datos y\ndocumentos estructurados. Los archivos XML tienen una extensión de archivo de\n<code>.xml</code>. Al igual que HTML, XML utiliza etiquetas (palabras delimitadas por los\ncaracteres <code>&gt;</code> y <code>&lt;</code>) para estructurar los datos del documento.</p>\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=UTF-8\"?&gt;\n&lt;doc&gt;\n   &lt;customer id='123'&gt;\n      &lt;name&gt;...&lt;/name&gt;\n      &lt;address&gt;...&lt;/address&gt;\n       ...\n      &lt;order&gt;\n         &lt;amount&gt;...&lt;/amount&gt;\n            &lt;date&gt;...&lt;/date&gt;\n         &lt;item quant='12'&gt;\n            &lt;name&gt;...&lt;/name&gt;\n         &lt;/item&gt;\n         &lt;item quant='4'&gt;...&lt;/item&gt;\n          ...\n      &lt;/order&gt;\n      &lt;order&gt;...&lt;/order&gt;\n       ...\n      &lt;payment&gt;\n         &lt;number&gt;...&lt;/number&gt;\n         &lt;date&gt;...&lt;/date&gt;\n      &lt;/payment&gt;\n      &lt;payment&gt;&gt;...&lt;/payment&gt;\n       ...\n   &lt;/customer&gt;\n   &lt;customer id='124'&gt;...&lt;/customer&gt;\n&lt;/doc&gt;\n</code></pre>\n</blockquote>\n<p>Fuente: <a href=\"https://www.ibm.com/support/knowledgecenter/es/SSEPGG_8.2.0/com.ibm.db2.ii.doc/opt/c0007799.htm\" target=\"_blank\">¿Qué es XML? - IBM</a></p>\n<h3 id=\"json\">JSON</h3>\n<blockquote>\n<p>JSON (JavaScript Object Notation) es un formato para el intercambios de datos,\nbásicamente JSON describe los datos con una sintaxis dedicada que se usa para\nidentificar y gestionar los datos. JSON nació como una alternativa a XML, el\nfácil uso en javascript ha generado un gran numero de seguidores de esta\nalternativa. Una de las mayores ventajas que tiene el uso de JSON es que puede\nser leído por cualquier lenguaje de programación. Por lo tanto, puede ser\nusado para el intercambio de información entre distintas tecnologías.</p>\n</blockquote>\n<p>Fuente: <a href=\"https://geekytheory.com/json-i-que-es-y-para-que-sirve-json/\" target=\"_blank\">¿Qué es y para qué sirve JSON? - GeekyTheory</a></p>\n<blockquote>\n<pre><code class=\"language-json\">{\n  \"squadName\": \"Super hero squad\",\n  \"homeTown\": \"Metro City\",\n  \"formed\": 2016,\n  \"secretBase\": \"Super tower\",\n  \"active\": true,\n  \"members\": [\n    {\n      \"name\": \"Molecule Man\",\n      \"age\": 29,\n      \"secretIdentity\": \"Dan Jukes\",\n      \"powers\": [\n        \"Radiation resistance\",\n        \"Turning tiny\",\n        \"Radiation blast\"\n      ]\n    },\n    {\n      \"name\": \"Madame Uppercut\",\n      \"age\": 39,\n      \"secretIdentity\": \"Jane Wilson\",\n      \"powers\": [\n        \"Million tonne punch\",\n        \"Damage resistance\",\n        \"Superhuman reflexes\"\n      ]\n    },\n    {\n      \"name\": \"Eternal Flame\",\n      \"age\": 1000000,\n      \"secretIdentity\": \"Unknown\",\n      \"powers\": [\n        \"Immortality\",\n        \"Heat Immunity\",\n        \"Inferno\",\n        \"Teleportation\",\n        \"Interdimensional travel\"\n      ]\n    }\n  ]\n}\n</code></pre>\n</blockquote>\n<p>Fuente: <a href=\"https://developer.mozilla.org/es/docs/Learn/JavaScript/Objects/JSON\" target=\"_blank\">Ejemplo - Trabajando con JSON - MDN</a></p>\n<p>En el siguiente video, encuentras un resumen de formato de contenidos:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/hTdYO7tKh_k?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Si quieres comparar un poco sobre estas 2 estructuras de información, aquí un\nvideo te lo resume:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/95X-pHvGBnw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"servicios-web\">Servicios Web</h2>\n<h3 id=\"soap\">SOAP</h3>\n<blockquote>\n<p>SOAP (originalmente las siglas de Simple Object Access Protocol) es un\nprotocolo estándar que define cómo dos objetos en diferentes procesos pueden\ncomunicarse por medio de intercambio de datos XML. Este protocolo deriva de un\nprotocolo creado por Dave Winer en 1998, llamado XML-RPC. SOAP fue creado por\nMicrosoft, IBM y otros. Está actualmente bajo el auspicio de la W3C. Es uno de\nlos protocolos utilizados en los servicios Web.</p>\n</blockquote>\n<p>Fuente: <a href=\"https://es.wikipedia.org/wiki/Simple_Object_Access_Protocol\" target=\"_blank\">SOAP - Wikipedia</a></p>\n<h3 id=\"rest\">REST</h3>\n<blockquote>\n<p>\"Representational State Transfer\" o traducido a \"Transferencia de presentación\nde estado\" es lo que se domina a REST. ¿Y eso es?, una técnica de arquitectura\nde software usada para construir APIs que permitan comunicar a nuestro servidor\ncon sus clientes usando el protocolo HTTP mediante URIs lo suficientemente\ninteligentes para poder satisfacer la necesidad del cliente.</p>\n<ul>\n<li>REST es STATELESS, es decir que cada petición que reciba nuestra API debe\nperecer. Por ejemplo, no podemos RECORDAR un usuario logeado en el API\nusando una sesión, esto es un PECADO ya que agotaría la memoria RAM de\nnuestro servidor (10 mil usuarios conectados a nuestra API). Lo que correcto\nes pasar un TOKEN para cada petición realizada al API, y el API deberá\nvalidar si esta es correcta o no (por ahora no vamos hablar de técnicas para\ngenerar el TOKEN, pero lo más común es usar una COOKIE).</li>\n<li>Se implementan RECURSOS para generar comunicación, es decir crea URIs únicas\nque permiten al cliente entender y utilizar lo que está exponiendo.\nPor ejemplo:<ul>\n<li><code>api.anexsoft.com/users/</code></li>\n<li><code>api.anexsoft.com/users/1405</code></li>\n</ul>\n</li>\n<li>Cada petición realizada a nuestra API responde a un verbo, y dicho verbo a\nuna operación en común. Mediante los métodos HTTP hacemos las peticiones, lo\ncomún es GET y POST, PUT y DELETE.<ul>\n<li><strong>POST (create):</strong> cuando mandamos información para insertar por ejemplo un\nregistro en la base de datos. La información es enviado en el cuerpo de la\npetición, es decir que los datos no son visibles al usuario.\n<code>POST /users</code></li>\n<li><strong>GET (read):</strong> es usado para modo lectura, por ejemplo: cuando queremos\nlistar a todos los usuarios de nuestra base de datos. Los parámetros son\nenviados por la URL.\n<code>GET /users</code></li>\n<li><strong>PUT (update):</strong> cuando queremos actualizar un registro. Actualizar la\ninformación de un usuario X.\n<code>PUT /users/:userId</code></li>\n<li><strong>DELETE (delete):</strong> cuando queremos eliminar un registro. Borrar un\nusuario X de nuestra base de datos.\n<code>DELETE /uses/:userId</code></li>\n</ul>\n</li>\n</ul>\n<p>Con esto hemos mencionado algunas caracteristicas básicas de lo que es REST,\nla cual podríamos decir que es un estándar para crear una REST Api o RESTFul.</p>\n</blockquote>\n<p>Fuente: <a href=\"http://anexsoft.com/p/117/que-es-rest\" target=\"_blank\">¿Qué es REST? - Anexsoft</a></p>\n<p>A continuación puedes ver un video que resume SOAP y REST:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/AyQboo5CycM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<p>Por convenciones, cada uno de los estándares usa un formato de contenido\nparticular. En resumen, SOAP transfiere información a través de XML, mientras\nque REST frecuenta transferir datos usando JSON. Aquí tienes un video que resume\neste mensaje:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/aI1DSeZAEMA?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"conclusión\">Conclusión</h2>\n<p>¿No te quedó claro que son RESTful APIs? Mientras REST es un estándar, la\nimplementación de éste en un API, viene a ser los RESTful APIs. Si bien al\ndiseñar un API hay muchas más cosas que se toman en cuenta, la principal es que\nte enfoques en cómo se obtienen los recursos y así poder identificar los métodos\ny URIs necesarias para consumir el API.</p>\n<p>Ejemplos de RESTful APIs son:</p>\n<ul>\n<li><a href=\"https://stripe.com/docs/api/php\" target=\"_blank\">Stripe</a></li>\n<li><a href=\"https://www.instagram.com/developer\" target=\"_blank\">Instagram</a></li>\n<li><a href=\"https://developer.spotify.com/web-api/\" target=\"_blank\">Spotify</a></li>\n<li><a href=\"https://developer.lyft.com/docs/overview\" target=\"_blank\">Lyft</a></li>\n<li>Muchas más!</li>\n</ul>\n<p>Si quieres saber más sobre REST, aquí un <a href=\"http://www.restapitutorial.com/\" target=\"_blank\">tutorial</a>\nque te puede ayudar.</p>\n",
          "order": 17,
          "durationString": "30min"
        },
        "18-crud": {
          "title": "CRUD",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=cQmwK306XaI",
              "id": "cQmwK306XaI"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizaje\">Objetivos de Aprendizaje</h2>\n<ul>\n<li>Entender qué es CRUD y cómo podemos generar una aplicación consumiendo un API\nRESTful</li>\n</ul>\n<h2 id=\"crud-create-read-update-and-delete\">CRUD: Create, Read, Update and Delete</h2>\n<p>¿Te has percatado que casi toda la interacción qué haces en la web tiene que ver\ncon una base de datos? Cuando entras al perfil de la persona que stalkeas, todas\nsus fotos, publicaciones, comentarios y demás está almacenado en algún lugar\n(base de datos), cuando subes una foto en Instagram o envías un e-mail, estás\ncreando un nuevo registro en la database, cuando cambias tu foto de perfil\nen Whatsapp, estás editando algo existente en la BD, por último, cuándo borras\nel mensaje cuando te equivocas de conversación o grupo, estás alterando tu DB.</p>\n<blockquote>\n<p>El uso de distintas palabras para referirse a base de datos en el párrafo\nanterior fue intencional para saber que hacen referencia a lo mismo.</p>\n</blockquote>\n<p>A todas las acciones descritas anteriormente que tienen interacción con la base\nde datos, tienen un acrónimo en programación: <strong>CRUD</strong>.</p>\n<p>CRUD es el acrónimo de \"<em>Crear, Leer, Actualizar y Eliminar</em>\", palabras que\ncorresponden respectivamente a los verbos HTTP más utilizados: <strong>POST, GET,\nPUT y DELETE.</strong></p>\n<p>Estas son las operaciones más comunes que queremos tener en el caso de una API,\nque manipula datos.</p>\n<p>Para aclararnos vamos a revisar el siguiente vídeo, solo hasta el minuto 3:15.</p>\n<blockquote>\n<p>Nota: El vídeo dura muchísimo (1:28:04)!!! Los primeros tres minutos muestra\nlo que es un CRUD y que uso tendría en un aplicación con Firebase.\nDespués, inicia con el desarrollo de la aplicación y si lo vas siguiendo\neste es un excelente ejercicio guiado.</p>\n</blockquote>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/cQmwK306XaI?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"ejemplo\">Ejemplo</h2>\n<p>Aquí un ejemplo de CRUD para una lista de tareas:</p>\n<iframe height=\"760\" scrolling=\"no\" title=\"Plain JS CRUD Frontend\" src=\"//codepen.io/ianseabrook/embed/rxvByR/?height=760&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">\n  See the Pen [Plain JS CRUD Frontend](https://codepen.io/ianseabrook/pen/rxvByR/)\n  by Ian Seabrook ([@ianseabrook](https://codepen.io/ianseabrook)) on\n  [CodePen](https://codepen.io).\n</iframe>\n\n<p>Si bien el ejercicio anterior pierde los cambios al recargar la página, ésta\nmuestra el principio de las acciones que implica un CRUD. Al momento de\npracticar (en las siguientes lecciones), ¡lo pondremos en práctica con una base\nde datos real!</p>\n",
          "order": 18,
          "durationString": "30min"
        },
        "19-api-challenges": {
          "title": "Jugando con APIs",
          "type": "workshop",
          "format": "guided",
          "duration": 120,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Practicar todo lo aprendido respecto a APIs</li>\n<li>Practicar, practicar y practicar</li>\n</ul>\n<h2 id=\"ejercicios\">Ejercicios</h2>\n<p>Debes subir todos tus ejercicios a <code>GitHub</code> y publicarlos en <code>gh-pages</code>.</p>\n<h3 id=\"swapi\">Swapi</h3>\n<p><em>Que la fuerza te acompañe</em> en este ejercicio, revisa las siguientes slides para\nque puedas crear esta fenómenal app para los amantes de Star Wars.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRGrO9hyhFU--4MSOJZgA8nRxfJ9qPdI6-2y25bTlBqo4T6C_VKfPm0IKEk-TIsx6a47Jk6lKgME-IS/embed?start=false&amp;loop=false&amp;delayms=5000\" frameborder=\"0\" width=\"760\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<h3 id=\"la-mayor-red-profesional-del-mundo\">La mayor red profesional del mundo</h3>\n<p>Si tú pensabas que LinkedIn solo servía para mantener actualizado tu CV,\nrevisa las siguientes slides para que te sorprendas con todas las posibilidades\nque nos ofrece para crear diferentes productos.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vSjQwnB8r8N5hFRhtE1wQ9a8GH13MDjhQhPYwmekE66Qtwrdlld582UwJr1EomzQxjLNKr3UpzwVkLp/embed?start=false&amp;loop=false&amp;delayms=5000\" frameborder=\"0\" width=\"760\" height=\"569\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<h3 id=\"weather\">Weather</h3>\n<p>¿Has visto que los sistemas operativos móviles vienen con una APP de predicción\ndel clima? ¡Vamos a hacer la nuestra! Para ello, usaremos la API de\n<a href=\"https://darksky.net/dev\" target=\"_blank\">Dark Sky</a> y esperemos llegues a usar un API de\nimágenes como <a href=\"https://www.flickr.com/services/api/\" target=\"_blank\">Flickr</a>,\n<a href=\"https://unsplash.com/developers\" target=\"_blank\">Unsplash</a> u otro. A continuación te dejamos\nunos slides con algunos recursos y guías del flujo de la app. Recuerda que no es\nnecesario que sigas el diseño al pie de la letra, eres completamente libre de\nadaptarlo a tus gustos.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vSJ0g3cXnpyO9R6DjngjIxIpgRXd_Fz9nA0l8E2iRCl97pQkAFMgFJzNtGnu5lHAeL0VeC21S7D7shg/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"760\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n",
          "order": 19,
          "durationString": "2h"
        },
        "20-quiz": {
          "questions": [
            {
              "title": "1) ¿Qué significa API?",
              "description": "",
              "answers": [
                "Application Programming Interface.",
                "Application Programming Internet.",
                "Application Programming Interaction."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "2) Indica la opción donde solo encuentres API'S del navegador",
              "description": "",
              "answers": [
                "Geolocalizacion, drag and drop, google map.",
                "LocalStorage, firebase, Json.",
                "Geolocalización, drag and drop, LocalStorage.",
                "Json, xml, ajax"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) ¿Cuales son los pros de uso de APIS de terceros?",
              "description": "",
              "answers": [
                "Rapidez, robustes, mantenimiento, innovación.",
                "Rapidez, mantenimiento, disponibilidad, innovacion.",
                "Rapidez, mantenimiento, privacidad, innovacion.",
                "Disponibilidad, privacidad, imagen, condiciones cambiantes."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Dependiendo el medio de autenticación ¿Cómo se clasifican las web-apis de terceros?",
              "description": "",
              "answers": [
                "Públicas o sin autenticación, ApiKey, OAuth y Token.",
                "Rest, Crud, Públicas.",
                "Publicas y privadas.",
                "Publicas, privadas y con Token."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) ¿Qué es Rest?",
              "description": "",
              "answers": [
                "El principal protocolo de la web.",
                "Servicio web que se ejecuta en tu computadora para mostrar archivos json\nencontrados en la web.",
                "Arquitectura de software usada para construir APIs que permitan comunicar a\nnuestro servidor con sus clientes usando el protocolo HTTP mediante URIs"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) ¿Qué opción es incorrecta con relación a xml?",
              "description": "",
              "answers": [
                "Extensible Markup Language (XML).",
                "Formato universal para datos y documentos estructurados.",
                "Desarrollado en 1997",
                "Utiliza tags de identificación similar a HTML.",
                "Deriva de Javascript."
              ],
              "solution": [
                4
              ]
            },
            {
              "title": "7) ¿Qué opción es la incorrecta con relación a JSON?",
              "description": "",
              "answers": [
                "Formato para intercambio de datos.",
                "Nace como una alternativa a XML.",
                "Solo puede ser leído con JavaScript.",
                "JavaScript Object Notation.",
                "Desarrollado en 2001."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) CRUD es el acrónimo de \"Crear, Leer, Actualizar y Eliminar\" palabras que corresponden a",
              "description": "",
              "answers": [
                "Los verbos http: Create, Read, Update, Delete.",
                "Los verbos http: Close, Request, Update, Delete.",
                "Los verbos http: Close, Response, Update, Delete.",
                "Los verbos http: Post, Get, Put y Delete."
              ],
              "solution": [
                3
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 20,
          "durationString": "30min"
        }
      },
      "order": 2,
      "stats": {
        "duration": 1035,
        "durationString": "17.3h",
        "exerciseCount": 0,
        "partCount": 21
      }
    }
  },
  "grades": "",
  "contributors": "",
  "books": "",
  "benchmarks": "",
  "references": "",
  "repo": "Laboratoria/bootcamp",
  "path": "topics/browser",
  "version": "5.0.0",
  "parserVersion": "3.1.0",
  "track": "js",
  "locale": "es-ES",
  "stats": {
    "duration": 4120,
    "durationString": "68.7h",
    "exerciseCount": 0,
    "unitCount": 3,
    "partCount": 46
  }
}
