{
  "slug": "javascript-pt",
  "createdAt": "2021-07-12T22:08:26.757Z",
  "title": "JavaScript",
  "description": "<p>En un mundo que rápidamente se está digitalizando, aprender a programar abre\nnuevas (y muchas veces mejores) oportunidades. Con este curso darás tus primeros\npasos hacia el mundo de la programación. Empezaremos desde cero, enseñándote los\nfundamentos de JavaScript, el lenguaje de programación más popular de la Web.</p>\n<p>En este curso aprenderás mejores formas de estructurar y manipular la data de tu\nprograma haciendo uso de estructuras de datos básicas: <code>arreglos</code> y <code>objetos</code>.</p>\n\n",
  "tags": {
    "secondary": {},
    "primary": {
      "value": true,
      "variable": true,
      "operator": true,
      "comment": true,
      "flow-control": true,
      "branching": true,
      "conditional": true,
      "loop": true,
      "function": true,
      "array": true,
      "object": true,
      "string": true,
      "built-ins": true,
      "async": true,
      "callback": true,
      "promise": true,
      "error": true,
      "debugging": true,
      "style": true
    }
  },
  "targetAudience": "<p>Este curso está dirigido a personas <em>sin</em> conocimientos previos de programación\nque tienen el interés de aventurarse al mundo del código. Será tu primer paso en\nla ruta de aprendizaje.</p>\n<h2 id=\"propósito-general\">Propósito General</h2>\n<p>El propósito de este curso es darte una idea de qué se trata el mundo del\ndesarrollo de software, para que puedas determinar si es algo que te apasiona\nperseguir como profesión. Al terminar este curso sabrás si el código es lo tuyo\ny habrás sentado unas buenas bases para el desarrollo de tu carrera profesional\nen el mundo tech.</p>\n",
  "dependencies": "<p>Ningún conocimiento previo de programación es necesario para completar este\ncurso. Está diseñado para principiantes.</p>\n",
  "learningObjectives": "<ul>\n<li>Conceptos básicos de programación como: <code>variables</code>, <code>tipos datos</code>,\n<code>operadores</code>, <code>declaraciones condicionales</code>, <code>ciclos</code> y <code>funciones</code>.</li>\n<li>La sintaxis básica de JavaScript como lenguaje de programación</li>\n<li>A utilizar estructuras de datos básicas: <code>arrays</code> y <code>objects</code></li>\n<li>...</li>\n</ul>\n",
  "product": "",
  "syllabus": {
    "01-basics": {
      "title": "Valores, variáveis, operadores, tipos e comentários",
      "bonus": false,
      "description": "<p>Aprenda a utilizar variáveis para armazenar informações que alteram durante o\ncurso do programa e os diferentes tipos de dados dos valores em JavaScript.</p>\n",
      "parts": {
        "01-values-variables-and-types": {
          "title": "Valores, tipos de dados e operadores",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "body": "<p>O texto em seguida se baseia em grande parte, com certos ajustes, ao capítulo 1\nde <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>, de Marijn Haverbeke\n(2014). Tradução em\n<a href=\"http://braziljs.github.io/eloquente-javascript/chapters/valores-tipos-operadores\" target=\"_blank\">Português</a>.</p>\n<h2 id=\"vivemos-num-mundo-de-dados\">Vivemos num mundo de Dados</h2>\n<p>Em 2010, o então CEO da Google, Eric\nSchmidt,(<a href=\"https://techcrunch.com/2010/08/04/schmidt-data/\" target=\"_blank\">mencionava</a>) que num\nperíodo de dois dias nós criávamos tantos dados quanto no período que compreende\ndesde o início da civilização até o ano de 2003. As compras que você faz são\ndados, as suas notas na escola são dados, seu perfil do Facebook está repleto de\ndados. Suas buscas no Google, os sinais de GPS do seu celular, os vídeos que\nvocê assiste e envia para o YouTube, as fotos que você vê no Instagram, o\nhistórico do clima, os e-mails trocados… tudo são dados!</p>\n<p>Os dados são cruciais porque eles nos ajudam a tomar decisões e a entender o\nmundo que nos cerca. Dados são informações, informação é conhecimento, e\nconhecimento leva à tomada de decisões melhores: desde simples, como escolher um\nlugar para almoçar baseando-se nos comentários do Yelp; à complexas, como\n(<a href=\"http://www.forbes.com/sites/kashmirhill/2012/02/16/how-target-figured-out-a-teen-girl-was-pregnant-before-her-father-did/#1a3ac4\" target=\"_blank\">predizer</a>)\nse uma mulher está grávida, baseando-se no seu histórico de compra em um\nsupermercado.</p>\n<h2 id=\"tipos-de-dados\">Tipos de dados</h2>\n<p>Os computadores são excelentes instrumentos para trabalhar com grandes\nquantidades de dados. De fato, no universo dos computadores existem somente\ndados. Com os computadores podemos ler dados, modificar dados e criar novos\ndados. Todos os dados são armazenados em longas sequências dos famosos <em>bits</em> as\nsequências de 0s e 1s que você provavelmente já viu no filme Matrix.</p>\n<p>Os computadores manipulam bilhões de bits. Para que o manejo destas grandes\nquantidades de informação seja mais fácil, eles são divididos em “pedaços” que\nrepresentam partes de informação. No contexto do JavaScript, esses pedaços são\nchamados de <em><strong>values</strong></em> (valores, em português). Cada <em>value</em> possui um <em>data\ntype</em> (tipo de dado) que determina qual a sua funcionalidade. Em JavaScript\nexistem cinco tipos de dados primitivos:</p>\n<ol>\n<li><code>number</code> (número).</li>\n<li><code>string</code> (cadeias de caracteres).</li>\n<li><code>boolean</code> (booleano).</li>\n<li><code>undefined</code> (indefinido).</li>\n<li><code>null</code> (nulo).</li>\n</ol>\n<p>Os dados e os tipos de dados formam as bases de qualquer linguagem de\nprogramação. Eles nos permitem organizar a informação e determinar como o\nprograma deve ser executado. Nesta seção você aprenderá a definir e manipular\nesses tipos de dados.</p>\n<h2 id=\"1-numbers\">1. Numbers</h2>\n<p>Os <em>values</em> do tipo <code>number</code> são, sem muita surpresa, valores numéricos. Ou\nseja, pedaços de dado que representam uma informação numérica são representados\ncom o tipo <code>number</code>. Sua representação inclui números positivos, negativos,\ninteiros e decimais. Além disso, o tipo de dado <code>number</code> possui três valores\nsimbólicos: <code>+Infinity</code> (infinito positivo), <code>-Infinity</code> (infinito negativo) e\n<code>NaN</code> (not a number, ou “não-número”, em português).</p>\n<p>Vejamos alguns exemplos. Abra o seu console (lembre-se: clique com o botão\ndireito do mouse &gt; inspect &gt; console) e escreva os seguintes números. Ao tentar,\no console retornará o próprio número de volta.</p>\n<pre><code class=\"language-js\">13\n// retorna: 13\n\n-9.81\n// retorna: -9.81\n</code></pre>\n<p>Você também pode usar a notação científica para números muito grandes ou muito\npequenos, adicionando ao número a letra “e” (de “expoente”), seguido pelo\nexpoente do número:</p>\n<pre><code class=\"language-js\">5e10\n// retorna: 50000000000\n\n-2.998e8\n// retorna: -299800000\n</code></pre>\n<h3 id=\"operadores-aritméticos\">Operadores Aritméticos</h3>\n<p>O que mais se faz com os números é aritmética. Sigamos explorando o\ncomportamento do tipo de dado <code>numbers</code> no seu próprio console. Digite o\nseguinte exemplo no console e confirme que o resultado é o mesmo:</p>\n<pre><code class=\"language-js\">100 + 4 * 11\n// retorna: 144\n</code></pre>\n<p>Os símbolos <code>+</code> e <code>*</code> são chamados de <em>operators</em> (operadores). O primeiro\nrepresenta a soma e o segundo, multiplicação. Ao colocar um operador entre dois\nvalores, a operação será aplicada a esses valores e produzirá um novo valor.\nComo pôde perceber, a multiplicação ocorre primeiro. Mas, assim como na\nmatemática, você pode mudar isso colocando a soma entre parênteses.</p>\n<pre><code class=\"language-js\">(100 + 4) * 11\n// retorna: 1144\n</code></pre>\n<p>Para a subtração, existe o operador <code>-</code>, e a divisão pode ser feita com o\noperador <code>/</code>. Vejamos mais exemplos (não se esqueça de fazê-los em seu console\ntambém!):</p>\n<pre><code class=\"language-js\">12345 / 250\n// retorna: 49.38\n\n1234 + 57 * 3 - 31 / 4\n// retorna: 1397.25\n\n100 / 0\n// retorna: Infinity\n\n100 / -0\n// retorna: -Infinity\n\n1000 * Infinity\n// retorna: Infinity\n\n0/0\n// retorna: NaN\n\nInfinity - Infinity\n// retorna: NaN\n</code></pre>\n<p>Também há um operador aritmético que pode não ser reconhecido imediatamente. O\nsímbolo <code>%</code> é utilizado para representar a operação <em>resíduo</em>. X <code>%</code> Y é o resto\nda divisão de X por Y. Por exemplo, 314 % 100 é 14 (porque 100 multiplicado por\n3 + 14 = 314), e 144 % 12 dá 0 (porque 12 multiplicado por 12 + 0 = 144). Você\nverá este operador frequentemente referido como <em>módulo</em> embora, tecnicamente,\nresto é mais preciso.</p>\n<pre><code class=\"language-js\">5 % 3\n// retorna: 2\n\n7 % 2\n// retorna: 1\n</code></pre>\n<h2 id=\"2-strings\">2. Strings</h2>\n<p>O próximo <em>data type</em> básico é a <code>string</code> (<em>sequência de caracteres</em> em\nportuguês). É o tipo de dado que utilizamos para representar texto. São\ndeclaradas ao colocar o conteúdo entre aspas.</p>\n<p>Abra seu console e escreva:</p>\n<pre><code class=\"language-js\">\"Olá, meu nome é Michelle\"\n// retorna: \"Olá, meu nome é Michelle\"\n\n'Sou desenvolvedora web'\n// retorna: \"Sou desenvolvedora web\"\n\n\"123\"\n// retorna: \"123\"\n</code></pre>\n<p>Tanto as aspas simples como as duplas podem ser usadas para declarar <code>strings</code>,\ndesde que o início coincida com o fim. Quase tudo pode ser colocado entre aspas,\ne o JavaScript criará um <em>string value</em> a partir do conteúdo entre elas.</p>\n<hr>\n<p><strong>Pro tip</strong>:</p>\n<p>Podemos usar tanto comillas simples (<code>'</code>) como dobles (<code>\"</code>) para delimitar\nnuestros strings, pero por convención, normalmente en cada proyecto se elige\nusar o una u otra y tratamos de ser consistentes. Esto ayuda a la <em>claridad</em> y\n<em>mantenibilidad</em> del código a largo plazo. En nuestro caso, vamos a elegir las\ncomillas simples de aquí en adelante.</p>\n<hr>\n<p>Existe um par de caracteres no <code>strings</code> que tem um comportamento especial. Por\nexemplo, quando uma barra invertida (<em>backslash</em> -<code>\\</code>) se encontra dentro de um\ntexto entre aspas, isso indica que o próximo caractere tem um significado\nespecial. Chamamos isso de <em>escapar caractere</em>. Quando o caractere <code>n</code> segue uma\nbarra invertida, o par de caracteres é interpretado como uma nova linha. Da\nmesma forma, um <code>t</code> após a barra invertida indica uma tabulação. Escreva os\nseguintes textos em seu console (lembre-se de sempre colocá-los entre aspas,\nsimples ou duplas).</p>\n<pre><code class=\"language-js\">'sta é a primeira linha \\n E esta a segunda'\n// retorna: \"Esta é a primeira linha\n//            E esta a segunda\"\n\n'Minha linguagem favorita é \\t JavaScript'\n// retuns: \"Minha linguagem favorita é      JavaScript\"\n</code></pre>\n<p>Quando as aspas são precedidas pela barra invertida, elas não terminarão a\ncadeia de caracteres, mas farão parte dela.</p>\n<pre><code class=\"language-js\">'Eu \\'estudo\\' na Laboratoria'\n// retorna: \"Eu 'estudo' na Laboratoria\"\n</code></pre>\n<p>Existirão, com certeza, situações em que você desejará que uma barra invertida\nseja apenas isso em uma cadeia de caracteres, e não um código especial. Se duas\nbarras invertidas estão juntas, vão se tornar apenas uma, e somente uma barra\nsairá como resultado no valor da cadeia.</p>\n<pre><code class=\"language-js\">'Um caractere de nova linha está escrito \\'\\\\n\\'.'\n// retorna: \"Um caractere de nova linha está escrito '\\n'.\"\n</code></pre>\n<p>Cadeias de caracteres não podem ser divididas como os números, multiplicadas, ou\nsubtraídas, mas o caractere + pode ser utilizado nelas. Ele não soma, mas\nconcatena, ou seja, junta duas strings. A linha a seguir produz a string\n\"concatenar\":</p>\n<pre><code class=\"language-js\">\"con\" + \"cat\" + \"e\" + \"nar\"\n// retorna: \"concatenar\"\n</code></pre>\n<p>Tome cuidado ao misturar <em>numbers</em> e <em>strings</em> em uma operação. Por exemplo,\nmultiplicar um <em>número</em> por uma <em>string</em> resulta em NaN.</p>\n<pre><code class=\"language-js\">\"oi\" * 3\n// retorna: NaN\n</code></pre>\n<p>Há outras maneiras de manipular <code>strings</code>, como veremos mais adiante.</p>\n<h3 id=\"operadores-unários\">Operadores Unários</h3>\n<p>Nem todos os operadores são símbolos. Alguns são escritos como palavras. Um\nexemplo é o operador typeof que produz uma cadeia de texto que representa o tipo\ndo valor que lhe foi passado.</p>\n<pre><code class=\"language-js\">typeof 4.5\n// retorna: \"number\"\n\ntypeof \"hola\"\n// retorna: \"string\"\n\ntypeof NaN\n// retorna: \"number\"\n\ntypeof Infinity\n// retorna: \"number\"\n</code></pre>\n<p>Note que verificamos que <em>NaN</em> e <em>Infinity</em> são do tipo <code>number</code> (de valor\nsimbólico), como mencionamos anteriormente.</p>\n<p>Os outros operadores que vimos operavam sobre dois valores, mas <code>typeof</code> só\nrecebe um. Operadores que utilizam dois valores são chamados de operadores\n<em>binários</em>, enquanto aqueles que só recebem um são chamados de operadores\n<em>unários</em>.</p>\n<p>O operador menos (<code>-</code>) pode ser usado tanto como um operador binário como\nunário.</p>\n<pre><code class=\"language-js\">- (10 - 2)\n// retorna: -8\n</code></pre>\n<h2 id=\"3-booleans\">3. Booleans</h2>\n<p>Muitas vezes, você precisará de um valor que simplesmente diferencie duas\npossibilidades, como \"sim\" e \"não\" ou \"ligado\" e \"desligado\". Para isso, o\nJavaScript tem o tipo de dado <em>boolean</em> que possui apenas dois valores: <em>true</em>\n(verdadeiro) e <em>false</em> (falso).</p>\n<h3 id=\"operadores-comparativos\">Operadores comparativos</h3>\n<p>Faça estas comparações em seu console:</p>\n<pre><code class=\"language-js\">3 &gt; 2\n// retorna: true\n\n2 &gt; 3\n// retorna: false\n\ntypeof (3 &gt; 2)\n// retorna: \"boolean\"\n\ntypeof (2 &gt; 3)\n// retorna: \"boolean\"\n</code></pre>\n<p>Os sinais &gt; e &lt; são os símbolos clássicos de \"é maior que\" e \"é menor que\",\nrespectivamente. Estes são operadores binários (porque operam sobre dois\nvalores). Aplicá-los resulta em um valor de tipo <em>boolean</em> que indica se estão\ncorretos.</p>\n<p>As <code>strings</code> podem ser comparadas da mesma maneira.</p>\n<pre><code class=\"language-js\">\"Aardvark\" &lt; \"Zoroaster\"\n// retorna: true\n</code></pre>\n<p>A forma pela qual as <code>strings</code> são ordenadas é mais ou menos alfabética: em\nJavaScript, as letras maiúsculas são sempre \"menores\" que as minúsculas, por\nisso \"Z\" &lt; \"a\" é <em>true</em>, e os caracteres não alfabéticos (!, -, e assim por\ndiante) também estão incluídos na ordenação. A comparação efetiva é baseada no\npadrão <a href=\"https://unicode-table.com/en/#control-character\" target=\"_blank\">Eloquent Unicode</a>.</p>\n<pre><code class=\"language-js\">\"Zeyla\" &lt; \"ana\"\n// retorna: true\n\n\"Zeyla\" &lt; \"!na\"\n// retorna: false\n</code></pre>\n<p>Outros operadores similares são &gt;= (maior ou igual a), &lt;= (menor ou igual a), ==\n(igual a) e != (não é igual a).</p>\n<pre><code class=\"language-js\">\"Itchy\" == \"Itchy\"\n// retorna: true\n\n\"Itchy\" != \"Scratchy\"\n// retorna: true\n\n5 == 5\n// retorna: true\n\n10 != \"dez\"\n// retorna: true\n</code></pre>\n<p>Só existe um valor em JavaScript que não é igual a si mesmo: o NaN, que\nsignifica \"não é um número\".</p>\n<pre><code class=\"language-js\">NaN == NaN\n// retorna: false\n</code></pre>\n<p>A intenção do NaN é representar o resultado de um cálculo sem sentido e, como\ntal, não é igual ao resultado de qualquer outro cálculo sem sentido.</p>\n<h3 id=\"operadores-lógicos\">Operadores Lógicos</h3>\n<p>Há também algumas operações que podem ser aplicadas a valores <code>Booleans</code>. O\nJavaScript dá suporte a três operadores lógicos: <em>and</em>, <em>or</em> e <em>not</em>. Eles podem\nser usados para estabelecer relações entre <code>Booleans</code>.</p>\n<p>O operador <code>&amp;&amp;</code> representa a operação lógica <em>and</em> (\"e\"). É um operador binário,\ne o seu resultado é <em>true</em> (verdadeiro) somente se os dois valores fornecidos\nforem verdadeiros. O operador <code>||</code> denota a operação lógica or (\"ou\") e devolve\nverdadeiro quando qualquer um dos dois valores dados for verdadeiro. <em>Not</em>\n(negação) é escrito como o símbolo de exclamação <code>!</code>. É um operador binário que\ninverte o valor que lhe é dado: !true resulta em false e !false tem como\nresultado true. Vejamos alguns exemplos:</p>\n<pre><code class=\"language-js\">true &amp;&amp; true\n// retorna: true\n\ntrue &amp;&amp; false\n// retorna: false\n\nfalse &amp;&amp; false\n// retorna: false\n\ntrue || true\n// retorna: true\n\ntrue || false\n// retorna: true\n\n!true\n// retorna: false\n\n!false\n// retorna: true\n</code></pre>\n<p>O último operador lógico que você aprenderá não é unário. Este é escrito usando\num símbolo de interrogação e dois pontos, da seguinte forma:</p>\n<pre><code class=\"language-js\">true ? 1 : 2\n// retorna: 1\n\nfalse ? 1 : 2\n// retorna: 2\n</code></pre>\n<p>Este é chamado o operador condicional (ou algumas vezes o operador ternário já\nque é o único operador deste tipo na linguagem). O valor à esquerda do ponto de\ninterrogação \"escolhe\" qual dos outros dois valores será o resultado. Quando é\nverdadeiro, o valor central é escolhido, e quando é falso, o valor da direita é\no resultado.</p>\n<h2 id=\"4-null-e-undefined--nulo-e-indefinido\">4. Null e undefined ( nulo e indefinido)</h2>\n<p>Existem dois valores especiais, escritos como <code>null</code> e <code>undefined</code>, que são\nusados para denotar a ausência de um valor significativo. São valores por si\nmesmos, mas não possuem nenhuma informação. Muitas operações na linguagem que\nnão produzem um valor que tem significado (você verá isso depois) produzem\n<code>undefined</code> simplesmente porque têm que produzir algum valor.</p>\n<p>A diferença no significado entre <code>undefined</code> e <code>null</code> é um acidente no desenho\ndo JavaScript, e não importa a maior parte do tempo.</p>\n<p>Entender a diferença entre <code>undefined</code> e <code>null</code> (sim existe uma diferença\nsemântica) é importante e mais simples do que parece. Ambos valores denotam da\nausência de um valor, mas em um caso podemos dizer que é intencional (<code>null</code>) e\no no outro não (<code>undefined</code>).</p>\n<p>O valor <code>undefined</code> signigica que não existe um valor designado, o que é\ndiferente de <code>null</code>, que significa que designamos o valor <code>null</code>. Este pode ser\nmuito útil para diferenciar o estado em operações asíncronas, ... é comum que\n<code>undefined</code> signifique que a operação não foi completada, enquanto que <code>null</code>\nsignigica que completo mas o retorno é um valor nulo.</p>\n<h3 id=\"conversão-automática-do-tipo\">Conversão automática do tipo</h3>\n<p>Quando um operador é aplicado ao tipo \"incorreto\" de valor, o JavaScript mudará\nsilenciosamente o valor no tipo de dado que espera, usando um conjunto de regras\nque frequentemente não são as que você quer ou espera. Isto é chamado <em>coerção\ndo tipo</em>. Olha estes exemplos:</p>\n<pre><code class=\"language-js\">8 * null\n// retorna: 0\n\n\"5\" - 1\n// retorna: 4\n\n\"5\" + 1\n// retorna: 51\n\n\"cinco\" * 2\n// retorna: NaN\n\nfalse == 0\n// retorna: true\n</code></pre>\n<p>O null na primeira expressão muda para 0, e o \"5\" na segunda expressão torna-se\n5 (de string a number). Todavia, na terceira expressão, o + tenta fazer\nconcatenação de strings antes de uma soma numérica, assim o 1 é convertido em\n\"1\" (de number a string). Quando algo que não corresponde com um número de forma\nóbvia (como o \"cinco\" ou o undefined) é convertido em número, o valor resultante\né NaN. As seguintes operações aritméticas sobre NaN continuaram produzindo NaN.\nÉ por isso que, na quarta expressão, \"cinco\" * 2 devolve NaN.</p>\n<p>No caso da quinta expressão, quando comparamos valores que têm tipos de dados\ndiferentes, o JavaScript usa um conjunto de regras, complicado e confuso, para\ndeterminar o que fazer. Na maioria dos casos, só tenta converter um dos valores\nao tipo de dado do outro valor. Contudo, quando null ou undefined estão em\nqualquer lado da operação, resulta verdadeiro só no caso de que os dois lados\nsejam null ou undefined.</p>\n<p>Continuando com a quinta expressão, as regras para converter cadeias e números a\nBooleanos dizem que 0, NaN e a cadeia vazia (\"\") contam como <em>false</em>, enquanto\ntodos os outros valores contam como <em>true</em>. É por isso que, as seguintes\nexpressões devolvem <em>true</em>:</p>\n<pre><code class=\"language-js\">false == 0\n// retorna: true\n\n\"\" == 0\n// retorna: true\n</code></pre>\n<p>Para casos em que você não quer que aconteça nenhuma conversão automática de\ntipos, existem dois operadores extras: === e !==. O primeiro prova se um valor é\nprecisamente igual a outro, e o segundo se não é precisamente igual. Portanto,\nao mudar de == a === as mesmas expressões anteriores, temos o resultado\ncontrário: <em>false</em>:</p>\n<pre><code class=\"language-js\">false === 0\n// retorna: false\n\n\"\" === 0\n// retorna: false\n</code></pre>\n<hr>\n<h2 id=\"notas-sobre-comparações-de-igualdadedesigualdade\">Notas sobre comparações de igualdade/desigualdade</h2>\n<p>Nesta continuação veremos algumas particularidades sobre os operadores de\nigualdade (<code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code>). Ao fim da leitura deixaremos como\nreferência para você o link para a documentação oficial de operadores e\nexpressões no MDN que recomendamos que você <em>leia</em> (ou olhe pelo menos).</p>\n<h2 id=\"diferença-entre--e-\">Diferença entre <code>==</code> e <code>===</code></h2>\n<h3 id=\"algoritmo-de-\">Algoritmo de <code>==</code></h3>\n<p>Quando avaliamos dois valores com este operador, a sequência a seguir é\nexecutada para determinar o resultado:</p>\n<ul>\n<li>Se são do mesmo tipo, então são comparados com ===.</li>\n<li>Se são de tipos diferentes:<ul>\n<li>Se um é <code>null</code> e outro é <code>undefined</code>, retorna <code>true</code>.</li>\n<li>Se um é uma <code>string</code> e outro é um <code>number</code>, ele é convertido para <code>string</code> e\nsão comparados como números.</li>\n<li>Se um é booleano, são convertidos: <code>true</code> em 1 e <code>false</code> em 0, e se\ncomparam.</li>\n<li>Se um é um objeto e outro é um <code>number</code> ou <code>string</code>, converte o objeto para\num primitivo.</li>\n<li>Em outros casos, retorna <code>false</code>.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">null == undefined // true\n10 == '10'        // true\ntrue == 1         // true\n[10] == 10        // true\n[] == []          // false\n{} == {}          // false\n</code></pre>\n<h3 id=\"algoritmo-de--1\">Algoritmo de <code>===</code></h3>\n<p>Esta igualdade é mais restrita com os resultados, utilizando a sequência a\nseguir para determinar o resultado:</p>\n<ul>\n<li>Se possuem tipos diferentes, retorna <code>false</code>.</li>\n<li>Se ambos são <code>null</code>, retorna <code>true</code>.</li>\n<li>Se ambos são <code>undefined</code>, retorna <code>true</code>.</li>\n<li>Se ambos são <code>NaN</code>, retorna <code>false</code>.</li>\n<li>Se ambos são <code>true</code> ou <code>false</code>, retorna <code>true</code></li>\n<li>Se ambos são <code>number</code> e possuem o mesmo valor, retorna <code>true</code>.</li>\n<li>Se ambos são <code>string</code> e possuem o mesmo valor, retorna <code>true</code>.</li>\n<li>Em outros casos, retorna <code>false</code>.</li>\n</ul>\n<pre><code class=\"language-js\">21 === \"21\"         // false\nundefined === null  // false\nNaN === NaN         // false\n[10] === 10         // false\ntrue === 1          // false\n[] === []           // false\n{} === {}           // false\n'10' === '10'       // true\n</code></pre>\n<p>Você pode considerar o seguinte para saber qual operador utilizar:</p>\n<ul>\n<li>Se qualquer dos valores é booleano, utilize <code>===</code>.</li>\n<li>Se não tiver certeza se os valores podem ser convertidos por coerção, utilize\n<code>===</code>.</li>\n<li>Nos outros casos pode utilizar <code>==</code> com certeza.</li>\n</ul>\n<blockquote>\n<p>Nota: Por convenção, e uma boa prática a comunidade incentiva o uso de <code>===</code>.</p>\n</blockquote>\n<h2 id=\"desigualdades\">Desigualdades</h2>\n<p>Sempre o resultado de comparação de uma desigualdade é um booleano. Os\noperadores a seguir são utilizados para comparar desigualdades:</p>\n<pre><code class=\"language-js\">&lt;  → Menor\n&gt;  → Maior\n&lt;= → Menor Igual\n&gt;= → Maior Igual\n</code></pre>\n<p>Situações de uso:</p>\n<ul>\n<li>Se algum é um <code>object</code>, converte-se para primitivo e é comparado.</li>\n<li>Se ambos são <code>string</code>, é comparada a ordem dos caracteres alfabeticamente.</li>\n<li>Se ambos são <code>number</code>, são comparados.</li>\n<li>Em outros casos retorna <code>false</code>.</li>\n</ul>\n<pre><code class=\"language-js\">[10] &lt; 9    // false, caso 1\n\"a\" &lt; \"b\"   // true, caso 2\n10 &gt;= 10    // true, caso 3\n</code></pre>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators\" target=\"_blank\">Expressões e Operadores -\nMDN</a></p>\n",
          "order": 0,
          "durationString": "1h"
        },
        "02-variables": {
          "title": "Variáveis",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "body": "<p>O texto a continuação se baseia principalmente, com algumas modificações, no\ncapítulo 2 de <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn\nHaverbeke, 2014. Tradução em\n<a href=\"http://braziljs.github.io/eloquente-javascript/chapters/valores-tipos-operadores\" target=\"_blank\">Português</a>.</p>\n<h2 id=\"variáveis\">Variáveis</h2>\n<p>Você já conhece os tipos de dados mais frequentes no JavaScript. Você consegue\ncriar, combinar e transformar <code>numbers</code>, <code>strings</code> e <code>booleans</code>. Mas, o que\npodemos fazer com isso? Até agora, tudo o que foi trabalhado tem sido para uso\nimediato. Ou seja, os novos valores que geramos devem ser imediatamente\nutilizados ou se perdem. Segue no seu console o seguinte exemplo:</p>\n<pre><code class=\"language-js\">'Oi, meu nome é ' + 'Michelle' + ' e tenho ' + 19 + ' anos';\n// returns: \"Oi, meu nome é Michelle e tenho 19 anos\"\n</code></pre>\n<p>Se quisesse utilizar esse <code>string</code> de novo, talvez porque Michelle fez\naniversário e agora queremos que apareça 20 anos no lugar de 19, não poderíamos\nfazê-lo. O valor foi perdido.</p>\n<p>Para capturar e manter os valores, o JavaScript fornece algo chamado <code>variável</code>.\nÉ utilizada assim:</p>\n<pre><code class=\"language-js\">var age = 19;\n// returns: undefined\n</code></pre>\n<p>A palavra chave (<em>keyword</em>) <code>var</code> indica que esta frase irá definir uma\nvariável. É seguida pelo nome da variável (o nome <em>age</em>) e, se queremos atribuir\nimediatamente um valor, é seguido do operador <code>=</code> e uma expressão (o número 19).</p>\n<hr>\n<p>NOTA: Neste primeiro exemplo usamos\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/var\" target=\"_blank\"><code>var</code></a>,\nque nos dias de hoje é considerada uma forma antiquada de declarar variáveis.\nDesdo ES6 (ES2015), preferimos usar a\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/let\" target=\"_blank\"><code>let</code></a>\n(para declarar variáveis que vamos necessitar <em>reatribriuir</em> um valor diferente)\nou a\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/const\" target=\"_blank\"><code>const</code></a>\n(para declarar variáveis que não vamos reatribuir), ambas variáveis possuem\nescopo de bloco, como veremos mais a frente.</p>\n<hr>\n<p>A declaração anterior cria uma variável chamada <code>age</code> (ou idade no português) e\né usada para reter o número <code>19</code>. A console devolve <code>undefined</code>, mas não pense\nque é um erro. É o que o JavaScript faz quando um comando não devolve nenhum\nvalor. Quando você escreve <code>12 + 5</code>, o console devolve <code>17</code>. Mas ao declarar uma\nvariável chamada age atribuindo o valor <code>19</code>, não há um valor fornecido. É por\nisso que a console simplesmente devolve <code>undefined</code> (no restante dos exemplos\nvamos a omitir esse <code>undefined</code> devolvido porque não adiciona muito valor na\nexplicação).</p>\n<p>Depois que uma variável tem sido definida, o nome dela pode ser usada como uma\n<em>expressão</em>. O valor da expressão é o valor que a variável contém atualmente.\nContinuemos com o exemplo anterior:</p>\n<pre><code class=\"language-js\">// declaramos `age` usando `const` ja que não vamos reatribuir está variável.\nconst age = 19;\n'Oi, meu nome é' + 'Rafael' + 'e tenho' + age + 'anos';\n// returns \"Oi, meu nome é Rafael e tenho 19 anos\"\n</code></pre>\n<p>O console nos ajuda a saber o valor de uma variável. Se escrevemos o nome de uma\nvariável que foi declarada no console, nos devolve seu valor. Se essa variável\nnão foi declarada, o console devolve um erro. E se a variável foi declarada, mas\nnão foi atribuído nenhum valor, o console devolve <code>undefined</code>.</p>\n<pre><code class=\"language-js\">age\n// returns Uncaught ReferenceError: age is not defined\n//           at &lt;anonymous&gt;:1:1\n\nconst age = 19;\nage\n// returns 19\n\nlet weight;\nweight\n// returns undefined\n</code></pre>\n<p>Quando uma variável aponta para um valor, não quer dizer que está ligada a esse\nvalor para sempre. De fato, são chamadas de variáveis porque seu valor pode\nmudar. O operador <code>=</code> pode ser utilizado em qualquer momento em variáveis\nexistentes (declaradas com <code>let</code> ou <code>var</code>)para desconectá-las do seu valor atual\ne ser apontadas para um novo. (valores declarados em <code>const</code> não podem ser\nalterados).</p>\n<pre><code class=\"language-js\">let age = 19;\n// returns undefined\nage = 24;\n// returns 24\n'Oi, meu nome é' + 'Rafael' + 'e tenho' + age + 'anos';\n// returns \"Oi, meu nome é Rafael e tenho 24 anos\"\n</code></pre>\n<p>Leve em consideração que para atribuir um novo valor, você não tem que utilizar\na <em>keyword</em> <code>var</code> ou <code>let</code> novamente. Você só utiliza ela quando precisa <em>criar</em>\nnovas variáveis.</p>\n<p>Muitas vezes é explicado o conceito de variáveis com a analogia de uma caixa: as\nvariáveis são como \"caixa\" nas quais você pode colocar algum valor que depois\npode mudar por outro. Contudo, uma analogia mais fiel é pensar nas variáveis\ncomo sendo <strong>tentáculos</strong>. As variáveis realmente não \"contém\" os valores (como\numa caixa); mas apenas os segura (como um tentáculo). De fato, duas variáveis\npodem se referir a um mesmo valor. Um programa pode acessar apenas os valores\nque ainda mantém \"segurados\". Quando você precisa lembrar algo, você cria um\nnovo tentáculo para \"segurá-lo\" ou muda um dos tentáculos existentes para\nsegurar o novo.</p>\n<h2 id=\"nomeando-variáveis\">Nomeando Variáveis</h2>\n<p>No JavaScript, existem certas regras para nomear variáveis. Os nomes das\nvariáveis:</p>\n<ol>\n<li><strong>Não</strong> podem incluir espaços</li>\n<li><strong>Não</strong> podem ser palavras reservadas (ou <em>keywords</em>), como a palavra <code>var</code></li>\n<li><strong>Não</strong> podem começar com números, ainda que podem haver números dentro do\nnome (só não pode no início)</li>\n<li><strong>Não</strong> podem conter sinais de pontuação, salvo os símbolos <code>$</code> e <code>_</code></li>\n</ol>\n<p>Não respeitar alguma das regras anteriores produz um erro por parte do\nJavaScript.</p>\n<p>Além dessas regras, existem uma série de \"sugestões\" que você deve levar em\nconsideração na hora de nomear variáveis. São \"sugestões\" porque o JavaScript\nnão devolve nenhum erro se você não as segue. Porém, são \"boas práticas\" de\nescrita de código que fazem com que seu trabalho seja de melhor qualidade. As\nsugestões são:</p>\n<ol>\n<li>Convenção <em>CamelCase</em>. Já que não é possível incluir espaços nos nomes das\nvariáveis, uma convenção utilizada é a de <code>CamelCase</code>. A convenção determina\nque o nome da variável começa com uma letra minúscula e são colocadas em\nmaiúscula a primeira letra das palavras que continuam. Por exemplo:\n<code>numberOfCandies</code> ou <code>studentTechScore</code>. É chamada <em>CamelCase</em> porque\naparenta a corcova do camelo.</li>\n<li>Utilizar nomes em inglês. A programação está baseada no inglês, dessa forma é\numa boa prática que esteja acostumado a escrever seu código em inglês.</li>\n<li>Utilizar nomes descritivos. Assim como as outras sugestões, algo que você\nsempre tem que considerar é que outras pessoas irão ler seu código e você\ndeve fazer o esforço para utilizar nomes descritivos que ajudem o leitor a\nentender melhor o que seu programa faz.</li>\n</ol>\n<p>Vamos ver alguns exemplos:</p>\n<table>\n<thead>\n<tr>\n<th>Nome ruim</th>\n<th>Problema</th>\n<th>Nome melhor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>age of fiends</td>\n<td>Erro: contém espaços</td>\n<td>ageOfFriends</td>\n</tr>\n<tr>\n<td>null</td>\n<td>Erro: palavra chave (keyword)</td>\n<td>empty</td>\n</tr>\n<tr>\n<td>1stName</td>\n<td>Erro: começa com número</td>\n<td>firstName</td>\n</tr>\n<tr>\n<td>full.price</td>\n<td>Erro: contém \".\"</td>\n<td>fullPrice</td>\n</tr>\n<tr>\n<td>full_price</td>\n<td>não usa CamelCase</td>\n<td>fullPrice</td>\n</tr>\n<tr>\n<td>x</td>\n<td>não é descritivo</td>\n<td>age</td>\n</tr>\n<tr>\n<td>altura</td>\n<td>em português</td>\n<td>height</td>\n</tr>\n</tbody></table>\n<h2 id=\"aumentar-e-diminuir\">Aumentar e Diminuir</h2>\n<p>Como programadora, muitas vezes você terá que aumentar ou diminuir o valor de\numa variável numérica por um outro valor. Por exemplo, pode ser que você tenha a\nvariável <code>score</code> que registra a pontuação num jogo de futebol. Toda vez que\nalguém faz um gol, a variável <code>score</code> deve aumentar em 1. Você consegue fazer\nisso da seguinte forma:</p>\n<pre><code class=\"language-js\">let score = 0;\nscore = score + 1;\nscore;\n// returns 1\n</code></pre>\n<p>Isso pode ser escrito de uma forma mais simples:</p>\n<pre><code class=\"language-js\">let score = 0;\nscore++;\nscore;\n// returns 1\n</code></pre>\n<p>O mesmo pode ser feito para diminuir o valor de uma variável. Por exemplo, num\nvideogame você pode precisar de uma variável chamada <code>lifePoints</code> que registra\nos \"pontos de vida\" de um jogador. O jogador parte com 100 pontos e cada vez que\num inimigo bate nele, perde 25 pontos. Cada vez que bebe um refrigerante\nrecupera 10 pontos.</p>\n<pre><code class=\"language-js\">let lifePoints = 100;\nlifePoints = lifePoints - 25;\nlifePoints\n// returns 75\n\nlifePoints = lifePoints + 10;\nlifePoints\n// returns 85\n</code></pre>\n<p>Isso pode ser escrito de forma reduzida, assim:</p>\n<pre><code class=\"language-js\">let lifePoints = 100;\nlifePoints -= 25;\nlifePoints\n// returns 75\n\nlifePoints += 10;\nlifePoints\n// returns 85\n</code></pre>\n<p>Existem outros operadores similares a <code>+=</code> e <code>-=</code>. Por exemplo, existem também\n<code>*=</code> e <code>/=</code>:</p>\n<pre><code class=\"language-js\">let balloons = 100;\nballoons *= 2;\nballoons\n// returns 200\n\nlet balloons = 100;\nballoons /= 4;\nballoons\n// returns 25\n</code></pre>\n<h2 id=\"o-escopo-de-uma-variável\">O escopo de uma variável</h2>\n<p>O <em>scopo</em> de uma variável é o local onde ela pode ser encontrada. Por exemplo:</p>\n<pre><code class=\"language-js\">const foo = () =&gt; {\n  let x;\n}\n</code></pre>\n<p>Aqui, o <em>direct scope</em> (escopo direto) de <code>x</code> é a função <code>foo</code>. Esta variável\npoderá ser acessada apenas dentro do corpo da função <code>foo</code>, mas não fora dela.</p>\n<p>Normalmente, no JavaScript podiamos apenas criar um novo escopo quando criavamos\numa nova função. Mas desde a atulização do ES6 (ES2015) temos a <code>let</code> e a\n<code>const</code>, que introduzição o conceito de <em>block scope</em> no JavaScript.</p>\n<h3 id=\"lexical-scoping\">Lexical scoping</h3>\n<p>As variáveis no JavaScript são <em>lexically scoped</em> (de escopo léxico), o que\nsignifica que a estrutura estática do programa determina o escopo da variável,\nque dizer que não é influênciada pelo local onde a função é chamada. Em palavras\nmais simples, significa que as variáveis declarada dentro de um <em>escopo</em> (uma\nfunção, ou um bloco indicado pelos caractéres <code>{}</code> no caso da <code>let</code> e <code>const</code>),\nnão são visíveis fora desse <em>escopo</em>.</p>\n<h3 id=\"nested-scopes-escopos-aninhados\">Nested Scopes (escopos aninhados)</h3>\n<p>Sim o escopo está aninado dentro de um escopo direto de uma variável e a\nvariável será acessível a todos os escopos:</p>\n<pre><code class=\"language-js\">function foo(arg) {\n  function bar() {\n    console.log(`arg: ${arg}`);\n  }\n  bar();\n}\n\nconsole.log(foo('hello')); // arg: hello\n</code></pre>\n<p>O escopo direto de <code>arg</code> é <code>foo</code>, mas também é acessível no escopo aninhado\n<code>bar</code>. Com respeito ao aninhamento, <code>foo</code> é um <em>outer scope</em> (escopo externo) e\n<code>bar</code> é um <em>inner scope</em> (escopo interno).</p>\n<h3 id=\"shadowing-sombra\">Shadowing (sombra)</h3>\n<p>Sim, é possível declarar uma variável que tem o mesmo nome em um escopo interno\nde uma função, com isso o acesso a variável externa é bloqueado no escopo\ninterno e todo os escopos aninhados dentro dela. Mudanças nas variávels internas\nnão afetam a variável externa, a qual é acessível fora do escopo interno.\nExemplo:</p>\n<pre><code class=\"language-js\">let x = 'global';\nfunction f() {\n  let x = 'local';\n  console.log(x); // local\n}\nf();\nconsole.log(x); // global\n</code></pre>\n<p>Dentro da função <code>f</code>, a variável <code>x</code> é \"sombreada\" pela variável local <code>x</code>.</p>\n<hr>\n<h2 id=\"diferença-entre-contexto-e-alcance\">Diferença entre contexto e alcance</h2>\n<p>Cada invocação de função tem um certo alcance com o contexto associado a ela.\nFundamentalmente, o alcance é um conceito associado a funções enquanto que o\ncontexto é associado ao objeto. Em outras palavras, o alcance se refere a\nacessibilidade de variável de uma função quando é chamada e é única para cada\ninvocação. Em contraste, o contexto é sempre o mesmo valor chamado de <code>this</code>\ncuja a referência é sempre o objecto que está executando o código.</p>\n<h3 id=\"alcance-de-variáveis\">Alcance de variáveis</h3>\n<p>As variáveis podem ser declaradas com <strong>alcance local</strong> ou <strong>alcance global</strong>, o\nqual estabelece a sua acessibilidade de diferentes alcances no tempo de\nexecução. Qualquer variável definida como global será acessível no tempo de\nexecução em qualquer alcance, desde que tenha sido declarado fora do corpo de um\nfunção.</p>\n<p>Em contraste, as variáveis locais existem somente dentro do corpo de uma função\nou bloco. O alcance local de uma variável é somente definida a partir do corpo\nde uma função ou bloco que a contenha.</p>\n<h2 id=\"declaração-de-variáveis-no-escopo-local-com-let\">Declaração de variáveis no escopo local com \"let\"\"</h2>\n<p>A \"palavra\" <code>let</code> declara uma variável de alcance local, a qual, opcionalmente,\npode  ser inicializada com algum valor e permite ser reatribuída (diferente de\n<code>const</code>).</p>\n<p>O alcance da <code>let</code> é local ao bloco, a declaração ou expressão onde se está\nusando. O que diferencia a palavra <code>let</code> da palavra <code>var</code>, a qual defini a\nvariável global ou local em uma função sem se importar com o escopo de bloco.</p>\n<p>Vejamos alguns exemplos:</p>\n<pre><code class=\"language-js\">if (x &gt; y) {\n  let gamma = 12.7 + y;\n  i = gamma * x;\n}\n</code></pre>\n<p>No exemplo a cima, <code>gama</code> existe apenas dentro do escopo do <code>if</code>.</p>\n<pre><code class=\"language-js\">for (let i = 0; i &lt; students.length; i++) {\n  console.log(students[i].name);\n}\n</code></pre>\n<p>Podemos utilizar <code>let</code> para que a variável seja local ao escopo do laço <code>for</code>.\nSe em seu lugar usassemos <code>var</code>, a variável seria visível em toda a função\ndentro do laço.</p>\n<pre><code class=\"language-js\">(function () {\n  if (true) {\n    let x = 'Olá mundo';\n  }\n  console.log(x);\n  // Da error, porque \"x\" ha sido definida dentro del \"if\"\n})();\n</code></pre>\n<p>No exemplo, <code>console.log(x)</code> não tem acesso a <code>let x = \"Olá mundo\"</code> e da erro\nporque <code>x</code> foi declarado dentro do laço <code>if</code>.</p>\n<p>No seguinte exemplo o console imprime <code>Olá Ju</code>, ja que a variável <code>x</code> no bloco\ndo <code>if</code> se mantem dentro do seu escopo.</p>\n<pre><code class=\"language-js\">(function () {\n  let x = 'Olá Ju';\n\n  if (true) {\n    let x = 'Olá Palomita';\n  }\n  console.log(x);\n  // Imprime Olá Ju\n})();\n</code></pre>\n<h2 id=\"variáveis-não-reatribuídas-com-const\">Variáveis não reatribuídas com \"const\"</h2>\n<p>As variáveis somente de leitura são outra novidade do ECMAScript 6, com a\nintrodução da nova palavra reservada <code>const</code>. Qualquer variável declarada como\nconstatante não poderá ser reatribuída.</p>\n<p>Vejamos o exemplo:</p>\n<pre><code class=\"language-js\">(function () {\n  const hello = 'hello world';\n  hello = 'Olá mundo';\n  // Acontecerá um ERROR, já que `hello` não pode ser reatribuído\n})();\n</code></pre>\n<p>Neste exemplo vemos que desde o momento que declaramos a constante <code>hello</code>, seu\nvalor foi blindado e o interpretado lançará um erro quanto tentar reatribuir um\nnovo valor.</p>\n<pre><code class=\"language-js\">(function () {\n  const PI;\n  PI = 3.15;\n  // Acontecerá um ERROR, já que tentamos alterar o valor de `PI`, mesmo ele não\n  // tendo valor\n})();\n</code></pre>\n<p>Mas, o que acontence quando o valor de uma variável é um objeto, ou array?</p>\n<pre><code class=\"language-js\">const user = {\n  name: 'Adriana',\n  surname: 'Arantes',\n  age: 60\n};\n\n/**\n * A seguinte sentença funciona, pois estamos modificando a propriedade do\n * objeto, e não o valor em si, que é a referência do objeto, a qual não é\n * alterada.\n **/\n\nuser.name = 'João';\n\nuser.age = 'trinta'; // alterar o tipo de uma propriedade também funciona\n\nconsole.log(user); // {name: 'João', surname: 'Arantes', age: 'trinta'}\n\n// Mas se atribuímos um novo valor para `user` vemos um erro\nuser = 'Caro Covarrubias'; // Erro, não é permitido\n</code></pre>\n",
          "order": 1,
          "durationString": "1h"
        },
        "03-comments": {
          "title": "Comentários",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"comentários\">Comentários</h2>\n<p>Muitas vezes, não importa quão descritivo você escreva seu código, é necessário\noferecer mais informação para que outras pessoas possam entender facilmente como\nfunciona o seu programa. Para adicionar essa informação sem afetar o fluxo do\nseu código, existem os <em>comentários</em>.</p>\n<p>Eles são assim:</p>\n<pre><code class=\"language-js\">// Isto é um comentário de uma linha\n\n/*\n  Isto é um comentário de\n  múltiplas\n  linhas\n*/\n</code></pre>\n<p>O computador ignora os comentários completamente. Os comentários no JavaScript\ncomeçam com <code>//</code>. Tudo o que segue às barras comuns (na mesma linha) é ignorado\npelo interpretador do JavaScript. Os comentários de múltiplas linhas começam com\n<code>/*</code> e acabam com <code>*/</code>. Tudo o que fica entre isso é ignorado pelo programa.</p>\n<p>Dessa forma, os comentários não têm efeito algum em como se executa o programa.\nSó estão aí para prover contexto. É uma <strong>boa prática</strong> incluir comentários no\ncódigo para melhorar sua legibilidade.</p>\n<h2 id=\"comentários-como-sugestões-ou-instruções\">Comentários como sugestões ou instruções</h2>\n<p>Muitos dos exercícios e questionários neste curso vão incluir os comentários\npara oferecer sugestões ou instruções.</p>\n<p>Por exemplo, é normal ver algo tipo:</p>\n<pre><code class=\"language-js\">const firstName = // seu código aqui\nconsole.log(/* seu código aqui */);\n</code></pre>\n<p>A ideia é que você apague o comentário e utilize esse espaço para escrever seu\ncódigo. Não se preocupe em apagar os comentários. Aliás, <strong>não</strong> apague outras\npartes do programa. Se você faz isso, é muito provável que não funcione muito\nbem.</p>\n<p>Agora sim, continue com os exercícios e questionários desta lição. Boa sorte!</p>\n",
          "order": 2,
          "durationString": "15min"
        },
        "04-guided-exercises": {
          "title": "Exercícios Livres",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "wistia",
              "href": "https://laboratoria.wistia.com/medias/a9x43umo91?wvideo=a9x43umo91",
              "id": "a9x43umo91"
            },
            {
              "type": "video",
              "provider": "wistia",
              "href": "https://laboratoria.wistia.com/medias/ri4tobcdz5?wvideo=ri4tobcdz5",
              "id": "ri4tobcdz5"
            },
            {
              "type": "video",
              "provider": "wistia",
              "href": "https://laboratoria.wistia.com/medias/r92tdew4i6?wvideo=r92tdew4i6",
              "id": "r92tdew4i6"
            },
            {
              "type": "video",
              "provider": "wistia",
              "href": "https://laboratoria.wistia.com/medias/cn7vfs5x1e?wvideo=cn7vfs5x1e",
              "id": "cn7vfs5x1e"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Agora que você já conhece certos conceitos básicos da programação, é hora de\nvocê ver na prática as coisas que você consegue criar. Não é um teste , mas é\nsuper importante você praticar!! Os projetos a criar são:</p>\n<ol>\n<li><strong>Idade em segundos</strong>: Crie um site que peça ao usuário a idade dele em anos,\nutilizando <code>prompt()</code>, e devolva a idade <strong>em segundos</strong>, utilizando\n<code>document.write()</code>.</li>\n<li><strong>Conversor de temperatura</strong>:Crie um site que peça ao usuário a temperatura\nem graus Celsius (°C), utilizando <code>prompt()</code>, e devolva, no console, a\ntemperatura em graus Farenheit (°F) utilizando <code>console.log()</code>. A fórmula\nmatemática para converter de °C a °F é: <code>T(°F) = ( T(°C) × 1.8 ) + 32</code>.</li>\n<li><strong>Ganhos e perdas</strong>: Crie um programa que peça os ingressos, os custos e o %\nde impostos, e calcule o ganho depois de impostos. Deve imprimir o resultado\nno site com o símbolo $ na frente.</li>\n<li><strong>Iniciais</strong>: Crie um programa que peça o nome e sobrenome do usuário. O\nusuário deve introduzir duas palavras separadas por um espaço, por exemplo:\n\"Ana Martinez\". O programa deve devolver as iniciais <strong>em maiúsculas</strong>. Vamos\nver alguns exemplos: \"ana martinez\" e \"Ana Martinez\" devolvem as iniciais\n\"AM\". \"Michelle Seguil\" e \"michelle seguil\" devolvem \"MS\".</li>\n</ol>\n<hr>\n<h2 id=\"soluções\">Soluções</h2>\n<p>A seguir, Thaissa te explica como resolveu cada um dos exercícios anteriores.</p>\n<blockquote>\n<p>NOTA: Nos vídeos a seguir, Thaissa usa <code>var</code> ao invés de <code>let</code> e <code>const</code> para\ndeclarar variáveis, bem como outros <em>recursos</em> um pouco antigos de JavaScript.\nEles são válidos e fazem parte da linguagem, mas hoje em dia preferimos usar\n<em>recursos/features</em> mais modernos e adequados como é o caso de <code>let</code> e\n<code>const</code>. Nesse caso, esses vídeos foram gravados já faz um tempo... ;-)</p>\n</blockquote>\n<h3 id=\"1--idade-em-segundos\">1.  Idade em segundos</h3>\n<p><div class=\"iframe-container\"><iframe width=\"100%\" height=\"100%\" src=\"//fast.wistia.net/embed/iframe/a9x43umo91?videoFoam=true\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" oallowfullscreen=\"true\" msallowfullscreen=\"true\" allowtransparency=\"true\"></iframe></div></p>\n<h3 id=\"2-conversor-de-temperatura\">2. Conversor de temperatura</h3>\n<p><div class=\"iframe-container\"><iframe width=\"100%\" height=\"100%\" src=\"//fast.wistia.net/embed/iframe/ri4tobcdz5?videoFoam=true\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" oallowfullscreen=\"true\" msallowfullscreen=\"true\" allowtransparency=\"true\"></iframe></div></p>\n<h3 id=\"3-ganhos-e-perdas\">3. Ganhos e perdas</h3>\n<p><div class=\"iframe-container\"><iframe width=\"100%\" height=\"100%\" src=\"//fast.wistia.net/embed/iframe/r92tdew4i6?videoFoam=true\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" oallowfullscreen=\"true\" msallowfullscreen=\"true\" allowtransparency=\"true\"></iframe></div></p>\n<h3 id=\"4-iniciais\">4. Iniciais</h3>\n<p><div class=\"iframe-container\"><iframe width=\"100%\" height=\"100%\" src=\"//fast.wistia.net/embed/iframe/cn7vfs5x1e?videoFoam=true\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" oallowfullscreen=\"true\" msallowfullscreen=\"true\" allowtransparency=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "1h"
        },
        "05-quiz": {
          "questions": [
            {
              "title": "1) Qual/Quais das seguintes opções refletem \"bons\" nomes de variáveis (ou seja, em conformidade com as regras e sugestões de boas práticas)?",
              "description": "",
              "answers": [
                "<code>const last_name = 'Martim';</code>",
                "<code>const score = 1;</code>",
                "<code>const cosita = 'O retorno de Jedi';</code>",
                "<code>const undefined = true;</code>",
                "<code>const likesCoffee = false;</code>",
                "<code>const 2ndChild = 'Diana';</code>"
              ],
              "solution": [
                1,
                4
              ]
            },
            {
              "title": "2) Comentários na programação",
              "description": "",
              "answers": [
                "Afetam o fluxo do programa e são usados para tornar o código mais\ncompreensível",
                "Não afetam o fluxo do programa e são usados para fazer o código funcionar\nmais rápido",
                "Não afetam o fluxo do programa e são usados para tornar o código mais\ncompreensível",
                "Afetam o fluxo do programa e são usados para fazer o código funcionar mais\nrápido"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) Um exemplo de conversão automática é",
              "description": "",
              "answers": [
                "<code>3 &gt; 3</code>",
                "<code>'oi' + ' mundo'</code>",
                "<code>true &amp;&amp; false</code>",
                "<code>'10' + 1</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "4) A diferença entre undefined y null",
              "description": "",
              "answers": [
                "Não existe, são iguais",
                "Não importa",
                "<code>undefined</code> não tem valor e <code>null</code> é uma string vazia",
                "<code>undefined</code> significa que um valor não foi atribuído, enquanto que <code>null</code>\nsignifica que nós atribuímos o valor <code>null</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) A partir da lista abaixo escolher duas fontes confiáveis para aprender por você mesma",
              "description": "",
              "answers": [
                "Documentación de la Red de Desarrolladores de Mozilla (MDN)",
                "elrincondelvago.com",
                "lineadecodigo.com",
                "stackoverflow.com"
              ],
              "solution": [
                0,
                3
              ]
            },
            {
              "title": "6) Qual o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'Olá' + 'mundo'\n</code></pre>",
              "answers": [
                "<code>'Olá Mundo'</code>",
                "<code>'Olá mundo'</code>",
                "<code>'Olámundo'</code>",
                "<code>'OláMundo'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) Qual é o tipo do seguinte valor?",
              "description": "<pre><code class=\"language-js\">'123'\n</code></pre>",
              "answers": [
                "<code>number</code>",
                "<code>string</code>",
                "<code>boolean</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "8) Que tipo de dados é Infinity?",
              "description": "",
              "answers": [
                "<code>number</code>",
                "<code>string</code>",
                "<code>boolean</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "9) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">10 == 'dez'\n</code></pre>",
              "answers": [
                "<code>true</code>",
                "<code>false</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "10) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">10 % 3\n</code></pre>",
              "answers": [
                "<code>1</code>",
                "<code>0</code>",
                "<code>3.33</code>",
                "<code>10</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "11) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'JavaScript me \\'encanta\\''\n</code></pre>",
              "answers": [
                "<code>JavaScript me \\'encanta\\'</code>",
                "<code>JavaScript me \\encanta\\</code>",
                "<code>JavaScript me encanta</code>",
                "<code>JavaScript me 'encanta'</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "12) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">typeof NaN\n</code></pre>",
              "answers": [
                "<code>'boolean'</code>",
                "<code>'undefined'</code>",
                "<code>'number'</code>",
                "<code>'string'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "13) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">4 % 15\n</code></pre>",
              "answers": [
                "<code>4</code>",
                "<code>false</code>",
                "<code>15</code>",
                "<code>%</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "14) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'dez' * 4\n</code></pre>",
              "answers": [
                "<code>NaN</code>",
                "<code>40</code>",
                "<code>'dez4'</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "15) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'50' + 1\n</code></pre>",
              "answers": [
                "<code>'501'</code>",
                "<code>51</code>",
                "<code>'50+1'</code>",
                "<code>50</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "16) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">false == ''\n</code></pre>",
              "answers": [
                "<code>true</code>",
                "<code>false</code>",
                "<code>undefined</code>",
                "<code>null</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "17) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'' === NaN\n</code></pre>",
              "answers": [
                "<code>true</code>",
                "<code>false</code>",
                "<code>undefined</code>",
                "<code>null</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "18) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'a string'.slice(1, 5)\n</code></pre>",
              "answers": [
                "<code>' str'</code>",
                "<code>' string'</code>",
                "<code>'stri'</code>",
                "<code>' strin'</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "19) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'My long string is long'.slice(5)\n</code></pre>",
              "answers": [
                "<code>'ng string is long'</code>",
                "<code>'long string is long'</code>",
                "<code>''</code>",
                "<code>'My long string is long'</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "20) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'Quero seguir aprendendo!!!'.slice(0, -2)\n</code></pre>",
              "answers": [
                "<code>'Quero seguir aprendendo!!!'</code>",
                "<code>'Quero seguir aprendendo!!'</code>",
                "<code>'Quero seguir aprendendo!'</code>",
                "<code>'ero seguir aprendendo!!!'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "21) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'qualquer string'.charAt(100)\n</code></pre>",
              "answers": [
                "<code>null</code>",
                "<code>undefined</code>",
                "<code>''</code>",
                "<code>'g'</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "22) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'Olá Mundo'.indexOf(' ')\n</code></pre>",
              "answers": [
                "<code>null</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "23) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'Olá Mundo'.indexOf('s')\n</code></pre>",
              "answers": [
                "<code>null</code>",
                "<code>undefined</code>",
                "<code>0</code>",
                "<code>-1</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "24) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">'alphabet'.toUpperCase()\n</code></pre>",
              "answers": [
                "<code>'AlphaBet'</code>",
                "<code>'ALPHABET'</code>",
                "<code>'alphabet'</code>",
                "<code>'Alphabet'</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "25) Qual é o resultado da seguinte expressão?",
              "description": "<pre><code class=\"language-js\">typeof parseInt('543')\n</code></pre>",
              "answers": [
                "<code>543</code>",
                "<code>'543'</code>",
                "<code>'boolean'</code>",
                "<code>'number'</code>"
              ],
              "solution": [
                3
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 4,
          "durationString": "30min"
        },
        "06-exercises": {
          "title": "Exercícios",
          "type": "practice",
          "format": "self-paced",
          "duration": 30,
          "exercises": {
            "01-coin-convert": {
              "title": "coinConvert",
              "body": "<p>Neste exercício vamos nos concentrar em atribuir <em>valores</em> em <em>variáveis</em>. O\nexercício já inclui um <em>boilerplate</em> (<em>modelo</em>), com uma <em>função</em>, dentro da qual\nvocê terá que substituir os <em>comentário</em> <code>/* ??? */</code> por <em>expressões</em> que produzam\no <em>valor</em> que queremos armazenar (<em>atribuir</em>) na variável correspondente.</p>\n<p>O <em>boilerplate</em> (<em>modelo</em>):</p>\n<pre><code class=\"language-js\">const coinConvert = (dollars) =&gt; {\n  // Atribuir o valor equivalente em soles\n  const soles = /* ??? */;\n\n  // Atribuir o valor equivalente em pesos mexicanos\n  const pesosMexicanos = /* ??? */;\n\n  // Atribuir o valor equivalente em pesos chilenos\n  const pesosChilenos = /* ??? */;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n</code></pre>\n<p>A <em>função</em> do exercício se chama <code>coinConvert</code> e irá nos permitir converter uma\nquantidade de dólares em 3 moedas diferentes (soles, pesos mexicanos e pesos\nchilenos).</p>\n<p>Está <em>função</em> irá receber apenas um <em>argumento</em> (<code>dollars</code>), que é um <em>número</em>\nque representa um valor em dólares, e irá retornar um <em>array</em> com três valores: a\nquantidade em soles, pesos mexicanos e pesos chilenos. Por enquanto, não\nprecisamos nos preocupar com a <em>função</em> em si ou como retornar um <em>array</em>, o\n<em>boilerplate</em>, já está fazendo isso. Você deve se concentrar em usar a variável\n<code>dollars</code> junto com a operação para criar os valores que queremos atribuir nas\nvariáveis <code>soles</code>, <code>pesosMexicanos</code> e <code>pesosChilenos</code>.</p>\n<p>Utilize as seguintes taxas de câmbio:</p>\n<pre><code class=\"language-text\">1 dólar = 3.25 soles\n1 dólar = 18 pesos mexicanos\n1 dólar = 660 pesos chilenos\n</code></pre>\n<p>Boa sorte!</p>\n",
              "files": {
                "UkVBRE1FLm1k": "# coinConvert\n\nEn este ejercicio nos concentraremos en asignar _valores_ en _variables_. El\nejercicio ya incluye un _boilerplate_ (_plantilla_), con una _función_, dentro\nde la cual tendrás que re-emplazar los _comentarios_ `/* ??? */` por\n_expresiones_ que produzcan el _valor_ que queremos almacenar (_asignar_) en\nla _variable_ correspondiente.\n\nEl _boilerplate_ (_plantilla_):\n\n```js\nconst coinConvert = (dollars) => {\n  // Asigna el monto equivalente en soles\n  const soles = /* ??? */;\n\n  // Asigna el monto equivalente en pesos mexicanos\n  const pesosMexicanos = /* ??? */;\n\n  // Asigna el monto equivalente en pesos chilenos\n  const pesosChilenos = /* ??? */;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n```\n\nLa _función_ del ejercicio se llama `coinConvert` y nos permitirá convertir una\ncantidad en dólares a 3 monedas diferentes (soles, pesos mexicanos y pesos\nchilenos).\n\nEsta _función_ solo recibirá un _argumento_ (`dollars`), que es un _número_ que\nrepresenta una cantidad en dólares, y retornará un _arreglo_ (_array_) con tres\nvalores: la cantidad en soles, pesos mexicanos y pesos chilenos. Por ahora no\nnos tenemos que preocupar sobre la _función_ en sí o cómo retornar un _arreglo_,\nel _boilerplate_, ya se encarga de eso. Tú solo debes concentrarte en usar\n`dollars` junto con una operación para crear los valores que queremos asignar en\nlas variables `soles`, `pesosMexicanos` y `pesosChilenos`.\n\nUtiliza las siguientes tasas de cambio:\n\n```text\n1 dólar = 3.25 soles peruanos\n1 dólar = 18 pesos mexicanos\n1 dólar = 660 pesos chilenos\n```\n\n¡Mucha suerte!\n",
                "Ym9pbGVycGxhdGU=": {
                  "Y29pbkNvbnZlcnQuanM=": "const coinConvert = (dollars) => {\n  const soles = /* ??? */;\n  const pesosMexicanos = /* ??? */;\n  const pesosChilenos = /* ??? */;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n\nmodule.exports = coinConvert;\n"
                },
                "c29sdXRpb24=": {
                  "Y29pbkNvbnZlcnQuanM=": "const coinConvert = (dollars) => {\n  const soles = dollars * 3.25;\n  const pesosMexicanos = dollars * 18;\n  const pesosChilenos = dollars * 660;\n\n  return [soles, pesosMexicanos, pesosChilenos];\n};\n\nmodule.exports = coinConvert;\n"
                },
                "dGVzdA==": {
                  "Y29pbkNvbnZlcnQuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst coinConvert = require('../solution/coinConvert');\n\ndescribe('coinConvert()', () => {\n  it('debería retornar [162.5, 900, 33000], para $50', () => {\n    const dollars = 50;\n    const soles = dollars * 3.25;\n    const pesosMx = dollars * 18;\n    const pesosCl = dollars * 660;\n    Assert.deepEqual(coinConvert(dollars), [soles, pesosMx, pesosCl]);\n  });\n\n  it('debería retornar [325, 1800, 66000], para $100', () => {\n    const dollars = 100;\n    const soles = dollars * 3.25;\n    const pesosMx = dollars * 18;\n    const pesosCl = dollars * 660;\n    Assert.deepEqual(coinConvert(dollars), [soles, pesosMx, pesosCl]);\n  });\n\n  it('debería retornar [243.75, 1350, 49500], para  $85', () => {\n    const dollars = 85;\n    const soles = dollars * 3.25;\n    const pesosMx = dollars * 18;\n    const pesosCl = dollars * 660;\n    Assert.deepEqual(coinConvert(dollars), [soles, pesosMx, pesosCl]);\n  });\n});\n"
                }
              }
            },
            "02-restaurant-bill": {
              "title": "Conta do restaurante",
              "body": "<p>Imagine que você saiu para comer com as suas quatro melhores amigas. O valor\ntotal da conta foi de 50 reais, lembrando que você deve adicionar os 10% de\nimposta. Vocês querem dividir a conta igualmente entre as cinco. E para isso\nvocê vai criar um programa.</p>\n<p>O exercício inclui um <em>boilerplate</em> (<em>modelo</em>) que já inclui uma função\n(<code>restaurantBill</code>), a qual irá receber um <em>argumento</em> (<code>bill</code>) com o valor total\nda conta sem contar o imposto (um <em>número</em>), e se espera que o retorno seja uma\n<em>string</em> com a quantidade que deve ser paga por cada uma, já incluindo os 10% de\nimposto (e incluindo o símbolo de dólar).</p>\n<p>O <em>boilerplate</em> (<em>modelo</em>):</p>\n<pre><code class=\"language-js\">const restaurantBill = (bill) =&gt; {\n  const tax = /* ??? */\n\n  /* ??? */\n\n  return /* ??? */\n};\n</code></pre>\n<p>Siga as etapas abaixo para completar a implementação da função <em>função</em>\n<code>restaurantBill</code>.</p>\n<ol>\n<li>Atribua o resultado da multiplicação <code>bill</code> por <code>10%</code> na variável <code>tax</code>\n(imposto em inglês). Dica: <code>10%</code> em decimal se escreve <code>0.1</code>.</li>\n<li>Crie uma variável chamada <code>total</code> e atribua o resultado da soma de <code>bill</code>\nmais <code>tax</code>.</li>\n<li>Retorne o valor que cada uma deve pagar (<code>total</code> dividido por 5), com o\nsímbolo <code>$</code> na frente (exemplo: <code>$11</code>). Dica: pode usar concatenação de\n<em>strings</em> (ou <em>string literals</em>) para criar uma <em>string</em> com o número e o\nsímbolo <code>$</code> na frente.</li>\n</ol>\n<p>Exemplo:</p>\n<pre><code class=\"language-js\">const output = restaurantBill(50);\nconsole.log(output); // --&gt; '$11'\n</code></pre>\n<p>Boa sorte!</p>\n",
              "files": {
                "UkVBRE1FLm1k": "# Cuenta de restaurante\n\nImagina que has salido a comer con tus cuatro mejores amigas.  La cuenta total\ndel consumo es de 50 dólares, pero a eso debes agregarle el 10% de Impuesto al\nValor Agregado (IVA). Quieres dividir la cuenta equitativamente entre las cinco.\nPara eso vamos a crear este programa.\n\nEl ejercicio incluye un _boilerplate_ (_plantilla_) que ya incluye una función\n(`restaurantBill`), la cual espera recibir un _argumento_ (`bill`) con el monto\nde la cuenta antes de impuestos (un _número_), y espera que retornemos un\n_string_ con la cantidad que le toca pagar a cada una ya teniendo en cuenta el\n10% de impuestos (e incluyendo el símbolo de dólar).\n\nEl _boilerplate_ (_plantilla_):\n\n```js\nconst restaurantBill = (bill) => {\n  const tax = /* ??? */\n\n  /* ??? */\n\n  return /* ??? */\n};\n```\n\nSigue los pasos a continuación para completar la implementación de la _función_\n`restaurantBill`.\n\n1. Asigna el resultado de multiplicar `bill` por `10%` en la variable `tax`\n   (impuesto en inglés). Tip: `10%` en decimal se escribe `0.1`.\n2. Crea una variable llamada `total` y asígnale el resultado de sumar `bill` más\n  `tax`.\n3. Retorna el monto que cada una debe pagar (`total` divido entre 5), con el\n   símbolo `$` adelante (por ejemplo: `$11`). Tip: puedes usar concatenación de\n   _strings_ (o _string literals_) para crear un _string_ con el número y el\n   símbolo `$` adelante.\n\nEjemplo:\n\n```js\nconst output = restaurantBill(50);\nconsole.log(output); // --> '$11'\n```\n\n¡Mucha suerte!\n",
                "Ym9pbGVycGxhdGU=": {
                  "cmVzdGF1cmFudEJpbGwuanM=": "const restaurantBill = (bill) => {\n  const tax = /* ??? */\n\n  /* ??? */\n\n  return /* ??? */\n};\n\nmodule.exports = restaurantBill;\n"
                },
                "c29sdXRpb24=": {
                  "cmVzdGF1cmFudEJpbGwuanM=": "const restaurantBill = (bill) => {\n  const tax = bill * 0.1;\n\n  const total = bill + tax;\n\n  return `$${total / 5}`;\n};\n\nmodule.exports = restaurantBill;\n"
                },
                "dGVzdA==": {
                  "cmVzdGF1cmFudEJpbGwuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst restaurantBill = require('../solution/restaurantBill');\n\ndescribe('restaurantBill()', () => {\n  it('debería regresar $11, para 50', () => {\n    const preTaxAmount = 50;\n    const tax = preTaxAmount * 0.1;\n    const total = `$${(preTaxAmount + tax) / 5}`;\n    Assert.deepEqual(restaurantBill(preTaxAmount), total);\n  });\n\n  it('debería regresar $22, para 100', () => {\n    const preTaxAmount = 100;\n    const tax = preTaxAmount * 0.1;\n    const total = `$${(preTaxAmount + tax) / 5}`;\n    Assert.deepEqual(restaurantBill(preTaxAmount), total);\n  });\n\n  it('debería regresar $18.7, para 85', () => {\n    const preTaxAmount = 85;\n    const tax = preTaxAmount * 0.1;\n    const total = `$${(preTaxAmount + tax) / 5}`;\n    Assert.deepEqual(restaurantBill(preTaxAmount), total);\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "30min"
        }
      },
      "order": 0,
      "stats": {
        "duration": 255,
        "durationString": "4.3h",
        "exerciseCount": 2,
        "partCount": 6
      }
    },
    "02-flow-control": {
      "title": "Controle de fluxo",
      "bonus": false,
      "description": "<p>Explora uma das formas mais comuns de controlar o fluxo do seu programa, e assim\nde flexibilidade ao seu produtos.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Opening",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<h2 id=\"guia-de-perguntas-e-conceitos-chave\">Guia de perguntas e conceitos-chave</h2>\n<p>Quando começamos a estudar um tema novo, é útil ter uma idea dos conceitos mais\nimportantes do que vamos aprender e dos temas centrais que devemos prestar\nespecial atenção.</p>\n<p>A seguir te apresentamos uma série de perguntas que você deve ser capaz de\nresponder ao terminar esta unidade. Utilize estas perguntas como guia para\norientar os seus esforços de aprendizagem. Revisite este conteúdo constantemente\nà medida que avance, pois assim poderá validar se está avançando na direção\ncorreta. Isto te servirá como um \"checklist\" conforme você avança:</p>\n<ul>\n<li>Por que modificar o controle de fluxo de um programa?</li>\n<li>Quais são as formas de modificar o fluxo de um programa? Desenhe uma\nrepresentação de cada uma</li>\n<li>O que significa <code>else</code> de uma sentença <code>if...else</code>? Dê um exemplo</li>\n<li>Qual é a diferença entre um <code>while</code> e um <code>do</code>?</li>\n<li>Quais são as 3 partes (sentenças) essenciais de um <code>for</code>? Dê um exemplo</li>\n<li>Para que utilizamos <code>break</code> e <code>continue</code> em um <code>for</code>? Dê um exemplo</li>\n<li>Explique, com uma analogia e as suas próprias palavras, o que é uma função.\nDesenhe o conceito de uma função</li>\n<li>Por que são importantes as funções na programação?</li>\n<li>O que é&nbsp;<code>DRY</code>?</li>\n<li>O que significa \"chamar\" a uma função?</li>\n<li>O que seria um \"input\" (entrada) para uma função e o que seria o equivalente\nao \"output\" (saída)?</li>\n<li>Qual é a diferença entre um parâmetro e um argumento de uma função?</li>\n<li>O que significa o valor de <code>return</code> de uma função?</li>\n<li>O que acontece quando uma função tem vários valores de <code>return</code>?</li>\n<li>Por que podemos resolver problemas mais complexos sabendo <code>estruturas condicionais</code>, &nbsp;<code>estruturas repetitivas</code> e <code>funções</code>? Dê um exemplo</li>\n</ul>\n",
          "order": 0,
          "durationString": "10min"
        },
        "01-conditionals-and-loops": {
          "title": "Estruturas condicionais e repetitivas",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=wQ_s9sso9b0",
              "id": "wQ_s9sso9b0"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=CbBTrBwzQfQ",
              "id": "CbBTrBwzQfQ"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=6iZEpRhzDKI",
              "id": "6iZEpRhzDKI"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=1B6pwKRDWgE",
              "id": "1B6pwKRDWgE"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Entender o que é o controle de fluxo de um programa</li>\n<li>Entender o que são <code>estruturas condicionais</code> e como eles afetam o fluxo do\nprograma</li>\n<li>Entender o que são <code>estruturas repetitivas</code> e como afetam o fluxo do programa</li>\n</ul>\n<hr>\n<p>O texto a seguir se baseia em grande medida, com alguns ajustes, ao capítulo 2\ndo <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn Haverbeke,\n2014. Tradução em\n<a href=\"http://braziljs.github.io/eloquente-javascript/chapters/valores-tipos-operadores\" target=\"_blank\">Português</a>,\ne ao capítulo 6 do <a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for\nkids</a>,\nNick Morgan, 2015;</p>\n<h2 id=\"controle-de-fluxo\">Controle de Fluxo</h2>\n<p>A razão pela qual criamos programas de computador é para <strong>resolver problemas</strong>.\nUm programa, como vimos, é simplemente um conjunto de \"instruções\" que os\ncomputadores seguem. Esse conjunto de instruções resolve um problema. Até agora,\naprendemos a obter, representar, manipular e armazenar dados em <code>variáveis</code>. Com\nisso, conseguimos criar programas que resolvem problemas muito simples. Este é o\ncaso, por exemplo, do programa que fizemos para transformar a temperatura de\ngraus Celsius (°C) para Farenheit (°F). No entanto, para criar programas mais\ncomplexos, é necessário expandir nosso conhecimento sobre o <em>controle de fluxo\nde um programa</em> e as estruturas existentes para modificar esse fluxo.</p>\n<p>Para usar a terminologia correta de JavaScript, a partir de agora,\nsubstituiremos a palavra \"instruções\" pela palavra \"sentenças\". Uma instrução\nJavaScript é o equivalente a uma sentença em linguagem humana. Entendemos,\nportanto, que um programa em JavaScript é uma lista de \"instruções JavaScript\",\nisto é, um conjunto de sentenças que informa ao computador o que fazer.</p>\n<h3 id=\"1-fluxo-em-linha-reta\">1. Fluxo em linha reta</h3>\n<p>Quando um programa contém mais de uma frase, elas são executadas de cima para\nbaixo, uma por uma. Por exemplo, o programa a seguir tem três sentenças: a\nprimeira declara uma variável chamada <code>name</code> com o valor do string 'Samanta'; a\nsegunda exibe no terminal uma mensagem de saudação personalizada: \"Olá\nSamanta\"; e a terceira exibe \"Que nome longo você tem!\".</p>\n<pre><code class=\"language-js\">const name = 'Samanta';\nconsole.log('Olá ' + name);\nconsole.log('Que nome lindo você tem!');\n// returns Olá Samanta\n//         Que nome lindo você tem!\n</code></pre>\n<p>Uma representação trivial esquemática de um fluxo de controle direto seria:</p>\n<p><img src=\"https://camo.githubusercontent.com/a46047c5ecd947fd9919f87767fdbadc8fdbadc2/687474703a2f2f656c6f7175656e746a6176617363726970742e6e65742f696d672f636f6e74726f6c666c6f772d73747261696768742e737667\" alt=\"Fluxo\nreto\"></p>\n<h3 id=\"2-fluxo-condicional\">2. Fluxo condicional</h3>\n<p>A execução de frases em linha reta não é a única opção que temos. Uma\nalternativa é a execução condicional, em que escolhemos entre duas rotas\ndiferentes com base em um valor <code>Boolean</code>, assim:</p>\n<p><img src=\"https://camo.githubusercontent.com/a3c015252a2f151939cd11f52953a91e561a907a/687474703a2f2f656c6f7175656e746a6176617363726970742e6e65742f696d672f636f6e74726f6c666c6f772d69662e737667\" alt=\"Fluxo\ncondicional\"></p>\n<p>A execução condicional é escrita com a palavra-chave <code>if</code> en JavaScript. A\ninstrução <code>if</code> é a mais simples das estruturas de controle dessa linguagem. Ela\né usada para executar código se, e somente se, uma condição for verdadeira. Uma\ncondicional diz: \"Se algo é verdade, faça isso\". Por exemplo, se você fez sua\nlição de casa, recebe um sorvete, mas se você não fez sua lição, não o recebe.</p>\n<p>Como o exemplo abaixo mostra, uma sentença <code>if</code> em duas partes principais: a\ncondição e o corpo. A condição deve ser um valor <code>Boolean</code> entre parênteses. O\ncorpo consiste em uma ou mais instruções JavaScript que serão executadas se, e\nsomente se, a condição for verdadeira (<code>Boolean</code> igual a <code>true</code>).</p>\n<pre><code class=\"language-js\">if (condição) {\n &nbsp;// Conjunto de sentenças a executar\n}\n</code></pre>\n<p>Quando precisamos executar várias instruções, podemos colocá-las entre chaves\n({ e }). As chaves agrupam as sentenças, tornando-as apenas uma. Uma sequência\nde sentenças entre chaves é chamada de <strong>bloco</strong> (de código). Muitos\nprogramadores JavaScript incluem chaves em todo corpo de  <code>if</code> (e nos loops,\ncomo você verá mais adiante). Eles fazem isso em nome da consistência e para não\nter que adicionar ou remover as chaves quando o número de sentenças no corpo\nmudar. Outros, valorizam a brevidade e no caso do <code>if</code> não utilizam as chaves.\nNeste curso, sempre usaremos as chaves para nos ajudar a organizar nosso código.</p>\n<p>Vamos voltar ao exemplo anterior e adicionar uma condição antes da frase que\nimprime a segunda mensagem:</p>\n<pre><code class=\"language-js\">const name = 'Samanta';\nconsole.log('Olá ' + name);\nif(name.length &gt; 6) {\n  console.log('Que nome grande você tem!');\n}\n// returns Olá Samanta\n//         Que nome grande você tem!\n</code></pre>\n<p>Com esta modificação, antes de imprimir no terminal a segunda mensagem ('Que\nnome longo você tem!'), o programa verifica se o tamanho da string <code>name</code> é\nmaior que 6. Se sim, a segunda mensagem é impressa. Caso contrário, essa\nsentença não é executada. Neste caso, como Samanta tem 7 caracteres, a condição\né <code>true</code>. Portanto, a segunda mensagem é impressa.</p>\n<p>Vamos mudar um pouco este exemplo, modificando o valor de <code>name</code> para 'Ana'.</p>\n<pre><code class=\"language-js\">const name = 'Ana';\nconsole.log('Olá ' + name);\nif (name.length &gt; 6) {\n  console.log('Que nome grande você tem!');\n}\n// returns Olá Ana\n</code></pre>\n<p>Nesta ocasião, a condição <strong>não</strong> é&nbsp;<code>true</code> (é <code>false</code>) porque o comprimento do\nnome é 3, que <strong>não</strong> é maior que 6. Portanto, o corpo do <code>if</code> <strong>não</strong> se\nexecuta. Desta forma, apenas a primeira mensagem 'Olá Ana' é executada.</p>\n<h4 id=\"sentença-if-else\"><em>Sentença <code>if... else</code></em></h4>\n<p>Muitas vezes, você não só terá o código que é executado quando uma condição é\nverdadeira, mas também quando acontece o outro caso. Esse caminho alternativo é\nrepresentado pela segunda seta no diagrama de fluxo. A palavra-chave <code>else</code> pode\nser usada, junto com <code>if</code>, para criar dois caminhos de execução separados e\nalternativos.</p>\n<p>Adicionemos uma sentença <code>else</code> ao nosso exemplo:</p>\n<pre><code class=\"language-js\">const name = 'Ana';\nconsole.log('Olá ' + name);\nif (name.length &gt; 6) {\n  console.log('Que nome grande você tem!');\n} else {\n  console.log('Não nome não é muito grande');\n}\n// returns Olá Ana\n//         Não nome não é muito grande\n</code></pre>\n<p>Como você pode ver, o resultado deste caso é similar ao anterior, mas se <code>name</code>\n<strong>não</strong> tiver um comprimento maior que 6, existe uma \"mensagem alternativa\" que\né executada.</p>\n<p>Como o exemplo abaixo mostra, as sentenças <code>if ... else</code> são semelhantes à\nsentenças <code>if</code>, mas incluem dois corpos. Se a condição é <code>true</code>, as sentenças do\nprimeiro corpo são executadas; caso contrário, as sentenças do segundo corpo são\nexecutadas.</p>\n<pre><code class=\"language-js\">if (condição) {\n  Sentenças para execução se a condição for VERDADEIRA\n} else {\n  Sentenças para execução se a condição for FALSA\n}\n</code></pre>\n<p>Se tivermos mais de dois caminhos para escolher, vários pares if... else podem\nser \"encadeados\". Aqui está um exemplo:</p>\n<pre><code class=\"language-js\">const num = parseInt(prompt('Digite um número', '0'));\n\nif (num &lt; 10){\n  alert('Você digitou um número pequeno');\n}\nelse if (num &lt; 100){\n  alert('Você digitou um número médio');\n}\nelse {\n  alert('Você digitou um número grande');\n}\n</code></pre>\n<p>O programa primeiro verificará se <code>num</code> é menor que 10. Se for, ele escolhe esse\ncaminho, mostra \"Você digitou um número pequeno\" em uma caixa de alerta e\ntermina. Se não for, toma o caminho do  <code>else</code>, que em si mesmo contém um\nsegundo <code>if</code>. Se a segunda condição (&lt; 100) for atendida, significa que o número\nestá entre 10 e 100, e \"Você digitou um número médio\" é exibido em uma caixa de\nalerta. Se não for, o segundo e último <code>else</code> é escolhido, mostrando \"Você\ndigitou um número grande\".</p>\n<p>O fluxograma deste programa é algo assim:</p>\n<p><img src=\"https://camo.githubusercontent.com/7da7c495c1528a60105d941be0181490fbffbc81/687474703a2f2f656c6f7175656e746a6176617363726970742e6e65742f696d672f636f6e74726f6c666c6f772d6e65737465642d69662e737667\" alt=\"Flujo\ncondicional\"></p>\n<p>Vamos ver outro exeplo de como usar <code>if...else</code>. Dessa vez com um vído da Paloma:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/wQ_s9sso9b0?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"utilizando-switch\"><em>Utilizando Switch</em></h4>\n<p>É comum ver o código assim:</p>\n<pre><code class=\"language-js\">if (variable == 'valor1') {\n  accion1();\n}\nelse if (variable == 'valor2') {\n  accion2();\n}\nelse if (variable == 'valor3') {\n  accion3();\n}\nelse {\n  accionDefault();\n}\n</code></pre>\n<p>Existe uma estrutura chamada <code>switch</code> que serve para \"decidir\" de maneira mais\ndireta. Infelizmente, a sintaxe que o JavaScript usa para isso (que é herdada da\nlinha da linguagem de programação C/Java) é um pouco estranha. Uma sequência de\nfrases <code>if</code> geralmente parece melhor. Aqui está um exemplo:</p>\n<pre><code class=\"language-js\">switch (prompt('Como está o clima?')) {\n  case 'chuvoso':\n    console.log('Lembre-se de levar um guarda-chuva.');\n    break;\n  case 'ensolarado':\n    console.log('Vista roupas leves.');\n  case 'nublado':\n    console.log('Saia para a rua.');\n    break;\n  default:\n    console.log('Tipo de tempo desconhecido.');\n    break;\n}\n</code></pre>\n<p>Você pode colocar qualquer número de etiquetas <code>case</code> dentro do bloco <code>switch</code>.\nO programa irá pular para o rótulo correspondente ao valor que foi dado ao\n<code>switch</code> ou ao default se não houver nenhum valor igual. Daí, eles começam a\nexecutar as sentenças, incluindo os abaixo de outro rótulo, até que uma sentença\n<code>break</code> seja alcançada (o que em português significa \"pare\").</p>\n<p>Em alguns casos, como no caso de \"ensolarado\" no exemplo, é possível\ncompartilhar o código entre os casos (é recomendado ir ao ar livre tanto para\ntempo ensolarado quanto nublado). Mas cuidado: é fácil esquecer o break, o que\nfará com que o programa execute um código que você não deseja executar.</p>\n<p>A seguir o Daniel te ajudará entender este caso um pouco melhor:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/CbBTrBwzQfQ?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"3-fluxo-repetitivo-loops\">3. Fluxo repetitivo: Loops</h3>\n<p>Outra forma de modificar o fluxo de um programa é por meio de estruturas\nrepetitivas, também chamadas \"loops\" em inglês. Como já estamos vendo, as\ncondicionais permitem executar um conjunto de sentenças uma vez se uma condição\n<em><strong>é</strong></em> verdadeira. Os loops permitem executar um código várias vezes,\ndependendo se uma condição <em><strong>continua sendo</strong></em> verdadeira.</p>\n<p>Imagine um programa que imprima todos os números pares do 1 ao 12. Uma maneira\nde escrevê-lo seria assim:</p>\n<pre><code class=\"language-js\">console.log(0);\nconsole.log(2);\nconsole.log(4);\nconsole.log(6);\nconsole.log(8);\nconsole.log(10);\nconsole.log(12);\n// → 0\n// → 2\n//   … etcetera\n</code></pre>\n<p>Isso funciona, mas a ideia de escrever um programa é trabalhar menos, e não\nmais. Se necessitamos todos os números menores que 1,000, o modo anterior seria\nimpossível de trabalhar. O que necessitamos é uma forma de repetir partes de\ncódigo. Esta forma de <strong>controle de fluxo</strong> é chamada loop. O controle de fluxo\npor loops nos permite voltar a certo ponto no programa em que estivemos antes e\nrepetí-lo com nosso estado atual, como descreve o seguinte diagrama:</p>\n<p><img src=\"https://camo.githubusercontent.com/48a2fb7be5218c417decdc954fe2e9bf7dc3a3a2/687474703a2f2f656c6f7175656e746a6176617363726970742e6e65742f696d672f636f6e74726f6c666c6f772d6c6f6f702e737667\" alt=\"Flujo\nbucle\"></p>\n<h4 id=\"loops-while\">Loops <code>while</code></h4>\n<p>O loop mais simples é o loop <code>while</code> (que significa \"enquanto\" em português). Um\nloop <code>while</code> executa repetidamente uma série de sentenças até que uma condição\nparticular deixe de ser verdadeira. Ao escrever um loop <code>while</code>, você está\ndizendo: <em>\"Continue fazendo isto enquanto esta condição seja verdadeira. Pare\nquando a condição se tornar falsa.\"</em></p>\n<p>Como revela o exemplo a seguir, uma sentença que começa com a keyword <code>while</code>\ncria um loop. Depois de <code>while</code> vem uma expressão em parênteses que representa a\ncondição e depois um conjunto de sentenças (muito parecido ao caso do <code>if</code>).\nPorém, diferentemente do <code>if</code>, o loop executa a sentença enquanto a condição\nproduza um valor que seja <code>true</code>. Por isso é muito importante que o conjunto de\nsentenças inclua algo que <em>\"muda\"</em> para que a condição eventualmente seja falsa.\nDo contrário, criaria um ciclo infinito que nunca termina, e isto usualmente é\nruim.</p>\n<pre><code class=\"language-js\">while (condição) {\n &nbsp;// Conjunto de sentenças, onde\n  // se inclui algo que \"muda\" para\n &nbsp;// que a condição eventualmente seja FALSA\n}\n</code></pre>\n<p>Vamos voltar agora ao problema de imprimir todos os números pares do 1 ao 12, e\ncriar um programa que utilize um loop <code>while</code>:</p>\n<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n// → 0\n// → 2\n// &nbsp; … etcetera até 12\n</code></pre>\n<p>Neste caso, como queremos imprimir os números pares do 1 ao 12, criamos uma\nvariável <code>number</code>, inicializamos com o valor 0, e a utilizamos na condição.\nQueremos que o bloco dentro do <code>while</code> funcione enquanto o valor de <code>number</code>\nseja igual ou menor a 12. O corpo do <code>while</code> inclui duas sentenças: a primeira\nimprime o número (com console.log), e a segunda incrementa <code>number</code> em 2 (porque\nqueremos imprimir os pares unicamente). A variável <code>number</code> demonstra a forma em\nque uma variável pode dar seguimento ao progresso de um programa. Cada vez que o\nloop se repete, <code>number</code> se incrementa em 2. Então, no início de cada repetição,\no valor da variável <code>number</code> é comparado com o número 12 para decidir se o\nprograma fez todo o trabalho que deveria fazer. É importante que entendamos que\nse não modificamos o valor de <code>number</code> com a segunda sentença, a condição\n(number &lt;=12) sempre será <code>true</code> e teremos um ciclo infinito que nunca se\ndeterá. Isto pode causar que o seu computador tenha problemas e trave.</p>\n<p>Se você cria um loop infinito em um dos exemplos, usualmente será perguntado se\nvocê quer deter o script depois de alguns segundos. Se isso falha, você terá que\nfechar a aba na qual está trabalhando, ou, em outros navegadores, fechar o\nnavegador inteiro para se recuperar.</p>\n<p>Vejamos algumas variantes deste mesmo problema para assegurar que entendemos bem\ncomo funciona o ciclo <code>while</code>:</p>\n<ul>\n<li>Como fazemos para imprimir os números <strong>pares</strong> do 1 ao 100?: Modificamos a\n&nbsp;condição para que o loop aconteça enquanto <code>number</code> seja &lt;= 100.</li>\n</ul>\n<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 100) {\n  console.log(number);\n  number = number + 2;\n}\n// → 0\n// → 2\n// &nbsp; … etcetera até 100\n</code></pre>\n<ul>\n<li>Como fazemos para imprimir os números <strong>ímpares</strong> do 1 a 12?: Iniciamos o\n&nbsp;valor de <code>number</code> com o valor de 1 (ao invés de 0).</li>\n</ul>\n<pre><code class=\"language-js\">let number = 1;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n// → 1\n// → 3\n// &nbsp; … etcetera até 11\n</code></pre>\n<ul>\n<li>Como fazemos para imprimir todos os números <strong>pares</strong> e <strong>ímpares</strong> do 1 ao\n&nbsp;12?: Na segunda sentença do while, incrementamos <code>number</code> em 1 (no lugar de\n&nbsp;2) a cada ciclo.</li>\n</ul>\n<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 1;\n}\n// → 0\n// → 1\n// → 2\n// &nbsp; … etcetera até 12\n</code></pre>\n<h4 id=\"loops-do\">Loops <code>do</code></h4>\n<p>O loop <code>do</code> é uma estrutura de controle similar ao loop <code>while</code>. A diferença\nestá em um só ponto: um loop <code>do</code> sempre executa seu corpo <strong>pelo menos uma\nvez</strong> e começa a verificar se devería parar somente depois da primeira execução.\nPara refletir isto, a condição aparece depois do corpo do loop. Vejamos um\nexemplo:</p>\n<pre><code class=\"language-js\">let yourName;\ndo {\n yourName = prompt('Qual é seu nome?');\n} while (!yourName);\n\nconsole.log('seu nome é ' + yourName);\n</code></pre>\n<p>Este programa te obrigará a introduzir um nome. Perguntará uma e outra vez até\nque obtenha algo que não seja uma cadeia vazia. Aplicar o operador <code>!</code> converte\num valor a <code>Boolean</code> negando-o e todas as cadeias exceto <code>''</code> se convertem a\n<code>true</code>. Isto significa que ele continua rodando até que você dê um nome que não\nseja uma cadeia vazia.</p>\n<h4 id=\"loop-for\"><em>Loop <code>for</code></em></h4>\n<p>Muitos loops seguem um padrão dos exemplos prévios do <code>while</code>. Primeiro, uma\nvariável “contador” é criada para dar seguimento ao progresso do loop. Logo\ndepois vem o loop <code>while</code>, cuja expressão condicional normalmente verifica se o\ncontador alcançou certo limite. Ao final do corpo do loop, o contador é\natualizado para dar seguimento ao progresso.</p>\n<p>Devido ao fato de que este padrão é muito comum, JavaScript e outras linguagens\nsimilares proporcionam uma versão um pouco mais curta e mais completa: o loop\n<code>for</code>.</p>\n<pre><code class=\"language-js\">for (let number = 0; number &lt;= 12; number = number + 2){\n  console.log(number);\n}\n// → 0\n// → 2\n//   … etc.\n</code></pre>\n<p>Este programa é exatamente equivalente ao exemplo prévio de impressão de números\npares. A única mudança é que todas as sentenças que estão relacionadas com o\n\"estado\" do ciclo estão agrupadas.</p>\n<p>Os parênteses depois do keyword <code>for</code> devem conter ponto e vírgula (<code>;</code>). A\nparte que está antes do primeiro ponto e vírgula <em>inicia</em> o loop, normalmente ao\ndefinir uma variável. A segunda parte é a expressão que <em>verifica</em> se o loop tem\nque continuar. A parte final <em>atualiza</em> o estado do loop antes de cada iteração.\nNa maioria dos casos, isto é mais curto e claro que uma construção com <code>while</code>.</p>\n<p>A seguir mostramos um código que calcula 2^10 (2 exponencial 10), usando o loop\n<code>for</code>:</p>\n<pre><code class=\"language-js\">let result = 1;\nfor (let counter = 0; counter &lt; 10; counter = counter + 1){\n  result = result * 2\n}\nconsole.log(result);\n// → 1024\n</code></pre>\n<p>A representação geral do loop <code>for</code> é a seguinte:</p>\n<pre><code class=\"language-js\">for (initial setup; condition; increment){\n  Bloco de código a executar\n}\n</code></pre>\n<p>O <em>initial setup</em> (por exemplo: <code>let counter = 0</code>) se executa antes de que se\ninicie o loop. Geralmente se usa para criar uma variável que rastreia o número\nde vezes que foi executado o loop. A <em>condition</em> (counter &lt; 10) se comprova\nantes de cada execução do corpo do loop. Se a condição é verdadeira, o corpo é\nexecutado; se é falsa, o loop se detém. Neste caso, o loop se deterá uma vez que\ncounter já não seja inferior a 10. O <em>increment</em> (counter = counter + 1) se\nexecuta depois de cada execução do corpo do loop. Geralmente se utiliza para\natualizar a variável do loop. No nosso exemplo, utilizamos para agregar 1 a\ncounter cada vez que se executa o loop.</p>\n<p>A seguir Paloma te ajudará a entender o fluxo do loop for:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/6iZEpRhzDKI?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"forçando-a-saída-de-um-loop\"><em>Forçando a saída de um loop</em></h4>\n<p>Fazer com que a condição do loop produza <em>false</em> não é a única forma para que um\nloop termine. Podemos usar a sentença especial <code>break</code>, utilizada en <code>switch</code>,\nque tem o efeito de sair inmediatamente do loop que o esta fechando.</p>\n<p>O programa a seguir ilustra o uso da sentença <code>break</code> para sair de um loop.\nQueremos fazer um programa que encontre o primeiro número que é maior ou igual a\n20 e divisível por 7.</p>\n<pre><code class=\"language-js\">for (let current = 20; current++) {\n  if (current % 7 == 0)\n    break;\n}\nconsole.log(current);\n// → 21\n</code></pre>\n<p>Usar o operador de resto ou módulo (%) é uma forma fácil de provar se o número é\ndivisível por outro. Se for, o resto da divisão é zero. Também lembre-se que\n<code>current++</code> é o mesmo que <code>current = current + 1</code>.</p>\n<p>O <code>for</code> neste exemplo não tem a parte que verifica se o loop deve terminar. Isto\nsignifica que o loop nunca terminará até que a sentença <code>break</code> que está dentro\nseja executada.</p>\n<p>Como já estamos aprendendo, se você deixasse fora essa sentença <code>break</code> ou\nacidentalmente escrevesse uma condição que sempre produza <code>true</code>, o seu programa\nse ficaria travado em um loop infinito.</p>\n<p>A palavra chave <code>continue</code> é parecida ao <code>break</code> pois influencia o progresso do\nloop. Quando se encontra <code>continue</code> no corpo de um loop, o controle sai do corpo\ndo loop imediatamente e continua na próxima iteração do loop.</p>\n<p>A seguir Rafael te explicará, com um exemplo, as aplicações de <code>break</code> and\n<code>continue</code> dentro de um for:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/1B6pwKRDWgE?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h4 id=\"diferenças-entre-for-e-while\"><em>Diferenças entre <code>for</code> e <code>while</code></em></h4>\n<p>Pontualmente, se usa o <code>for</code> quando se save quantas repetições vão ser\nrealizadas e o <code>while</code> quando não se sabe.</p>\n<p>Se dissermos, \"gire o ventilador 10 vezes\", você já sabe que vamos girar o\nventilador 10 vezes, então seria uma boa ideal usar o <code>for</code>.</p>\n<p>Se dissermos, \"enquanto estiver calor gire o ventilador\". Não savemos quantas\nvezes vamos girar o ventilador até ficar frio, então usar o <code>while</code> nesse caso é\nmelhor.</p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-loops": {
          "title": "Laços (Loops)",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"mecanismos-que-podem-ser-usados-como-laços\">Mecanismos que podem ser usados como laços</h2>\n<p>Os seguintes mecanismos podem ser usados como laços:</p>\n<h3 id=\"break-label\"><code>break [label]</code></h3>\n<p>Sai do laço.</p>\n<h3 id=\"continue-label\"><code>continue [label]</code></h3>\n<p>Para a iteração atual e imediatamente executa a seguinte.</p>\n<h3 id=\"labels\"><code>Labels</code></h3>\n<p>Uma <code>label</code> (etiqueta) é um identificador seguido por <code>:</code>. No início de um laço,\numa label pode fazer <code>break</code> ou <code>continue</code> inclusive se está dentro de um outro\nlaço aninhado. Quanto está no início do bloco, te permite sair do mesmo com a\npalavra <code>break</code>. Em ambos os casos, o nome da <em>label</em> se converte em um\nargumento de <code>break</code> ou <code>continue</code>. Aqui um exemplo de <code>break</code>:</p>\n<pre><code class=\"language-js\">const findEvenNumber = arr =&gt; {\n  loop: { // label\n    for (let i = 0, l = arr.length; i &lt; l; i++) {\n      let element = arr[i];\n      if (element % 2 === 0) {\n        console.log(`Found: ${element}`);\n        break loop;\n      }\n    }\n    console.log('No even number found.');\n  }\n  console.log('DONE');\n};\n</code></pre>\n<h2 id=\"tipos-de-laços-loops\">Tipos de laços (loops)</h2>\n<h3 id=\"while\">while</h3>\n<p>Um laço <code>while</code>:</p>\n<pre><code class=\"language-js\">while (condition) {\n  // statement\n}\n</code></pre>\n<p>Executa <code>statement</code> até que a condição não seja mais satisfeita. Se a condição é\nsempre <code>true</code>, então entra em um <code>infinite loop</code> (laço infinito).</p>\n<pre><code class=\"language-js\">// infinite loop\nwhile (1 === 1) { }\n</code></pre>\n<p>No próximo exemplo, eliminamos todos os elemnto do <code>array</code> e os mostramos no\nconsole:</p>\n<pre><code class=\"language-js\">const arr = ['a', 'b', 'c'];\n\nwhile (arr.length &gt; 0) {\n  console.log(arr.shift());\n}\n\n/*\n *\n * A saída do código será:\n * a\n * b\n * c\n *\n */\n</code></pre>\n<h3 id=\"do-while\">do-while</h3>\n<p>Um laço <code>do-while</code>:</p>\n<pre><code class=\"language-js\">do {\n  // statements\n} while (condition);\n</code></pre>\n<p>Executa os <code>statements</code> pelo menos uma vez e continua equanto a condição for\nsatisfeita. Por exemplo:</p>\n<pre><code class=\"language-js\">const pattern = /^[0-9]+$/;\nlet line;\ndo {\n  line = prompt('Enter a number:');\n} while(!pattern.test(line));\n</code></pre>\n<h3 id=\"for\">for</h3>\n<p>Um laço <code>for</code>:</p>\n<pre><code class=\"language-js\">for ([init]; [condition]; [post_iteration]) {\n  // statements\n}\n</code></pre>\n<p><code>init</code> é executado uma vez antes de iniciar o laço, que depois executa\n<code>statements</code> enquanto a <code>condition</code> retorne <code>true</code>. Pode usar <code>let</code> para\ndeclarar variáveis, mas o escopo dela será apenas dentro do laço.\n<code>post_iteration</code> é executado logo após cada interação. Exemplo:</p>\n<pre><code class=\"language-js\">const arr = ['a', 'b', 'c'];\n\nfor (let i = 0, l = arr.length; i &lt; l; i++) {\n  console.log(arr[i]);\n}\n\n/*\n *\n * O resultado será esse:\n * a\n * b\n * c\n *\n */\n</code></pre>\n",
          "order": 2,
          "durationString": "15min"
        },
        "02-practical-cases": {
          "title": "Casos práticos",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=AwweNciBXZo",
              "id": "AwweNciBXZo"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=Ji_fnG3IYbE",
              "id": "Ji_fnG3IYbE"
            }
          ],
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Como fizemos antes, é hora de aplicar os conceitos aprendidos para resolver\nproblemas.</p>\n<h3 id=\"1-fizzbuzz\">1. FizzBuzz</h3>\n<p>Escreva um programa que use <code>console.log</code> para imprimir todos os números de 1 a\n100, com duas exceções:</p>\n<ul>\n<li>Para números divisíveis por 3, imprima \"Fizz\" ao invés de número</li>\n<li>Para números divisíveis por 5 (mas não por 3), imprima \"Buzz\".</li>\n</ul>\n<p>Quando isto esteja funcionando, modifique o seu programa para imprimir\n\"FizzBuzz\" para os números que sejam divisíveis tanto por 3 como por 5 (e que\ncontinue imprimindo \"Fizz\" ou \"Buzz\" para números divisíveis por somente um\ndeles).</p>\n<h3 id=\"2-tabuleiro-de-xadrez\">2. Tabuleiro de Xadrez</h3>\n<p>Elabore um programa que crie um <code>string</code> que represente um quadrado de 8x8,\npulando uma linha como separador. Em cada posição do quadrado deve haver um\nespaço ou um caracter \"#\". Os caracteres devem formar um tabuleiro de xadrez.</p>\n<p>Passar este <code>string</code> a console.log deve mostrar algo assim:</p>\n<pre><code class=\"language-js\"> # # # #\n# # # #\n # # # #\n# # # #\n # # # #\n# # # #\n # # # #\n# # # #\n</code></pre>\n<p>Quando você tiver um programa que gere este padrão, defina uma variável <code>size</code> =\n8 e mude o programa de tal forma que trabalhe para qualquer tamanho, que seja\nproporcionado por um <code>prompt()</code> produzindo um quadrado com as medidas indicadas.</p>\n<h2 id=\"gabaritos\">Gabaritos</h2>\n<p>A seguir, o Rafael irá te explicar como ele resolveu cada um dos exerícios\nanteriores.</p>\n<h3 id=\"1-fizzbuzz-gabarito\">1. FizzBuzz: Gabarito</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/AwweNciBXZo?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"2-tabuleiro-de-xadrez-gabarito\">2. Tabuleiro de Xadrez: Gabarito</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/Ji_fnG3IYbE?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "1h"
        },
        "03-functions": {
          "title": "Funções",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=68743wkEjiw",
              "id": "68743wkEjiw"
            }
          ],
          "body": "<p>O texto a seguir se baseia em grande medida, com alguns ajustes, ao capítulo 2 e\n3do <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn Haverbeke,\n2014. Tradução em\n<a href=\"http://braziljs.github.io/eloquente-javascript/chapters/valores-tipos-operadores\" target=\"_blank\">Português</a>.</p>\n<h2 id=\"dry\">DRY</h2>\n<p>Na programação, existe um conceito que você escutará mais de uma vez. Ele diz o\nseguinte: <em>\"Don't Repeat Yourself\"</em>, e é comumente conhecido como <code>DRY</code>. Em\nportuguês significa <em>\"não se repita\"</em>. Se você estiver copiando e colando\npedaços de código, ou se tiver sentenças de código similares ao longo do seu\nprograma, significa que você está se repetindo. Já vimos este conceito em\nprática com o uso de <code>estruturas repetitivas</code> (loop): ao invés de ter um mesmo\nbloco de código repetido, você pode sustituí-lo por um <code>for</code> ou um <code>while</code>. Com\nas funções você pode alcançar o mesmo objetivo. Vejamos quais são as <code>funções</code>,\ncomo usá-las e por que são importantes.</p>\n<h2 id=\"o-que-é-uma-função\">O que é uma função?</h2>\n<p>Uma função é uma forma de agrupar código para que ele possa ser reutilizado. As\nfunções nos permitem executar a mesma peça de código em vários lugares de um\nprograma sem ter que copiar e colar o código repetidamente. Dito de outra\nmaneira, uma função é um <strong>pedaço de programa embrulhado em um valor</strong>. Esse\nvalor pode ser \"chamado\" várias vezes, em diferentes lugares do teu programa,\npara que execute o código que está ali dentro.</p>\n<p>Ao longo deste curso temos utilizado funções, porém temos chamado de\n<em>\"comandos\"</em>. Os comandos como <code>alert()</code>, <code>prompt()</code> e <code>console.log()</code> são de\nfato funções.</p>\n<h2 id=\"funções-em-javascript\">Funções em JavaScript</h2>\n<p>As funções são o pão de cada dia na programação com JavaScript.</p>\n<p>A aplicação mais óbvia das funções é a de definir um novo vocabulário. Criar\nnovas palavras em uma linguagem humana comum (como o português, inglês ou o\nespanhol) é tipicamente algo de mal gosto. Contudo, na programação isto é\nindispensável.</p>\n<p>Um adulto médio possui umas 20.000 palavras em seu vocabulário. Poucas\nlinguagens de programação possuem 20.000 comandos incorporados. E o vocabulário\nque está disponível na programação tende a ser definido de forma mais precisa, e\nportanto menos flexível que em uma linguagem humana. Como consequência,\nusualmente <em>precisamos</em> agregar algo do nosso próprio vocabulário para evitar\nmuitas repetições.</p>\n<p>Agrupando fragmentos de código em uma função com um <strong>nome fácil de entender</strong>\n(dado que será parte do vocabulário que você está construindo) podemos\nestruturar melhor nosso código. Isto porque nos enfocamos em organizar as\nfunções, ao invés de cada linha de código que as compõem. Ao dividir nosso\ncódigo em peças menores e portanto mais fáceis de lidar, podemos ter uma visão\nmais completa do que estamos fazendo. Nos permite elevar-nos a um nível superior\nde abstração. Como diz o ditado: podemos visualizar a floresta completa, vendo\nalém das árvores.</p>\n<h2 id=\"definindo-uma-função\">Definindo uma função</h2>\n<p>A definição de uma função é simplesmente uma definição regular de uma variável,\nmas onde o valor dado à variável é uma função. Por exemplo, o código a seguir\ndefine a variável <code>square</code> para se referir à <em>função</em> que produz o quadrado de\num número dado:</p>\n<pre><code class=\"language-js\">const square = function (num) {\n  return num * num;\n};\n</code></pre>\n<p>A mesma função usando a sintax de <em>função flexa</em> (arrow function):</p>\n<pre><code class=\"language-js\">const square = num =&gt; num * num;\n</code></pre>\n<p>Uma função é criada por uma expressão que começa com o keyword <code>function</code>, ou\npode ser usando a sintax de <em>arrow function</em>. As funções possuem um conjunto de\n<em>parâmetros</em> (no exemplo anterior só temos <strong>um</strong> parâmetro: <code>num</code>) e um\n<em>corpo</em>, que contêm as sentenças a serem executadas. Os parâmetros servem para\n\"transmitir\" valores à função e, assim, mudar seu comportamento segundo os\nvalores oferecidos. O corpo da função, usando a <em>keyword</em> <code>function</code>, precisa\nestar sempre fechado em chaves, inclusive quando houver uma única instrução\n(como no exemplo anterior), enquanto funções usando <em>arrow function</em> podemos\nfazer o retorno implícito quando o corpo possui apenas uma expressão. (que será\nimplícitamente o valor do retorno).</p>\n<h2 id=\"chamando-uma-função\">Chamando uma função</h2>\n<p>Para rodar o código dentro de uma função, necessitamos <em>\"invocar, chamar, ou\naplicar\"</em> a função. Isto se faz escrevendo o nome da função imediatamente\nseguido por parênteses <code>()</code>. Dentro dos parênteses se inclui o que você quer\n\"transmitir\" à função para usar como parâmetro. Os valores que se trasnmitem à\nfunção para usar como parâmetros são chamados <em>argumentos</em>.</p>\n<p>Agregando ao exemplo anterior um chamado à função <code>square</code> transmitindo-lhe como\nargumento o valor <code>12</code> vemos que nos devolve <code>144</code> (ou seja, 12 ao quadrado).</p>\n<pre><code class=\"language-js\">const square = function (num) {\n  return num * num;\n};\n\nsquare(12);\n// → 144\n</code></pre>\n<h2 id=\"o-valor-de-retorno\">O valor de retorno</h2>\n<p>Assim como os argumentos são os valores de \"entrada\" (input) que utiliza uma\nfunção ao ser chamada, o valor de retorno é o valor de saída (output) que\ndevolve a função (o <code>144</code> do exemplo anterior), e que pode ser utilizado em\nqualquer lugar do programa. Se uma função não especifica o valor de retorno,\nentão a função retorna&nbsp;<code>undefined</code>.</p>\n<p>O valor de retorno se especifica com o <em>keyword</em> <code>return</code>. No exemplo anterior,\nse especifica que o valor de retorno é o parâmetro multiplicado por si mesmo;\nisto é, o parâmetro ao quadrado. O keyword <code>return</code> sem uma expressão depois\ndele também fará com que a função devolva <code>undefined</code>.</p>\n<p>Adicionemos uma outra sentença ao exemplo anterior na qual se utilize o valor de\nretorno da função <code>square</code>:</p>\n<pre><code class=\"language-js\">const square = function (num) {\n  return num * num;\n};\n\nconsole.log('El cuadrado de 12 es ' + square(12));\n// → El cuadrado de 12 es 144\n</code></pre>\n<p>Com esta mudança acontece o seguinte: o valor de retorno que se obtém ao chamar\n(ou invocar) a função <code>square</code> com o valor <code>12</code> de argumento é: <code>144</code>. Este se\nconcatena com o texto <code>'O quadrado de 12 é '</code> para formar <code>'O quadrado de 12 é 144'</code>; o qual, por sua vez, se transmite como argumento à função <code>console.log</code>\npara que o imprima no painel de comando.</p>\n<h2 id=\"múltiplos-parâmetros\">Múltiplos parâmetros</h2>\n<p>Uma função pode ter vários parâmetros ou pode não ter nenhum. No seguinte\nexemplo, <code>makeNoise</code> não tem parâmetros, enquanto <code>power</code> tem dois:</p>\n<pre><code class=\"language-js\">const makeNoise = function () {\n  console.log('Pling!');\n};\n\nmakeNoise();\n// → Pling!\n\nconst power = function (base, exponent) {\n  let result = 1;\n  for (let count = 0; count &lt; exponent; count++) {\n    result *= base;\n  }\n  return result;\n};\n\nconsole.log(power(2, 10));\n// → 1024\n</code></pre>\n<p>A seguir Daniel te explica mais sobre funções:\n<div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/68743wkEjiw?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"saindo-de-uma-função-com-return\">Saindo de uma função com <code>return</code></h2>\n<p>Quando o intérprete JavaScript observa um <code>return</code> dentro de uma função,\nimediatamente pula fora da função atual e passa o valor retornado ao código que\na chamou. Isto é, qualquer sentença que coloquemos <strong>depois</strong> do <code>return</code> em uma\nfunção, <strong>não</strong> será executada.</p>\n<p>Uma forma comum de utilizar <code>return</code> é para sair da função antecipadamente caso\nalgum dos argumentos brindados não seja válido; isto é, se não forem o tipo de\nargumentos que a função necessita para funcionar corretamente. Por exemplo, a\nseguinte função devolve uma cadeia que indica o quinto caracter do seu nome. Se\no nome transmitido à função tem menos de cinco caracteres, a função utiliza\n<code>return</code> para deixar a função imediatamente. Isto significa que a declaração de\ndevolução ao final, que te diz a quinta letra do seu nome, nunca se executa.</p>\n<pre><code class=\"language-js\">const fifthLetter = function (name) {\n  if (name.length &lt; 5) {\n    return;\n  }\n  return 'A quinta letro do seu nome é' + name[4] + '.';\n};\n</code></pre>\n<h2 id=\"funções-e-controle-de-fluxo\">Funções e controle de fluxo</h2>\n<p>A funções também afetam o controle de fluxo do nosso programa. Com funções\npodemos criar estruturas repetitivas (com algo que se chama <code>recursividade</code>) e\nestruturas condicionais (com, por exemplo, múltiplos valores de <code>return</code>). De\nfato, as funções são tão versáteis para armar a estrutura de um programa que\nexiste todo um <em>paradigma de programação</em> baseado em funções. Isto é, existe uma\nmaneira de pensar na programação que está baseada em funções. Isto se chama o\n<strong>paradigma de programação funcional</strong>. Mais adiante estudaremos com mais\nprofundidade funções e o paradigma de programação funcional. Por enquanto, o\nimportante é entender que as funções são uma forma de agrupar código para que\npossa ser reutilizado.</p>\n<h2 id=\"utilizando-múltiplos-return-no-lugar-de-if-else\">Utilizando múltiplos <code>return</code> no lugar de <code>if... else</code></h2>\n<p>Podemos usar vários <code>return</code> dentro de diferentes sentenças <code>if</code> no corpo de uma\nfunção para que a função devolva um valor diferente, dependendo do argumento\noferecido. Por exemplo, digamos que você está escrevendo um jogo que dá medalhas\naos jogadores conforme a sua pontuação. Uma pontuação menor a 3 é uma medalha de\nbronze, uma puntuação de 7 ou mais é ouro, e o que está no meio é prata. Você\npoderia utilizar uma função como <code>medalForScore</code> para avaliar uma pontuação e\ndar o tipo de medalha, como se mostra aqui:</p>\n<pre><code class=\"language-js\">const medalForScore = function (score) {\n  if (score &lt; 3) {\n    return 'Bronze';\n  }\n  if (score &lt; 7) {\n    return 'Silver';\n  }\n  return 'Gold';\n};\n</code></pre>\n<p>Embora estejamos comprovando múltiplas condições, não necessitamos usar\nsentenças <code>if ... else</code> encadeadas. Utilizamos as sentenças <code>if ... else</code> para\ngarantir que somente uma das sentenças se execute. Quando cada uma das opções\npossui sua própria sentença de <code>return</code>,  garantimos que se execute somente uma\ndas opções --- porque, lembre-se, <strong>as funções só podem devolver uma vez</strong>.</p>\n",
          "order": 4,
          "durationString": "30min"
        },
        "04-quiz-1": {
          "questions": [
            {
              "title": "1) Quais das seguintes permitem modificar o controle de fluxo de um programa?",
              "description": "",
              "answers": [
                "unicamente estruturas condicionais e repetitivas",
                "unicamente funções",
                "estruturas condicionais, estruturas repetitivas e funções",
                "nenhuma das anteriores"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) Que forma de modificar o fluxo de um programa mostra a figura a seguir?",
              "description": "<p><img src=\"http://eloquentjavascript.net/img/controlflow-nested-if.svg\" alt=\"Flujo\ncondicional\"></p>",
              "answers": [
                "while",
                "do while",
                "for",
                "if",
                "if else",
                "if else \"aninhado\" (nested)"
              ],
              "solution": [
                5
              ]
            },
            {
              "title": "3) São exemplos de DRY",
              "description": "",
              "answers": [
                "loops e funções",
                "soente loops",
                "somente funções",
                "nenhuma das anteriores"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Qual é o problema com o código a seguir?",
              "description": "<pre><code class=\"language-js\">while (3 &gt; 2) {\n  console.log('Hello world');\n}\n</code></pre>",
              "answers": [
                "Tem um erro de sintaxis",
                "Não utiliza boas práticas",
                "A variável não está bem declarada",
                "Gera um loop infinito"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) Encontre o erro na seguinte função",
              "description": "<pre><code class=\"language-js\">let result = 0;\n\nconst showSum = () =&gt; {\n  result = num1 + num2;\n &nbsp;alert('O resultado é ' + result);\n};\n\nshowSum();\n</code></pre>",
              "answers": [
                "A função carece de parâmetros e portanto \"num1\" e \"num2\" não estão definidos",
                "A função não está sendo invocada",
                "Possui um erro de sintaxis",
                "alert não é uma função"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "6) Complete os espaços em branco (ordenadamente)",
              "description": "<pre><code class=\"language-js\">const sum = _____ (num1, num2) {\n  ________ num1 + num2;\n};\n\n_______(2, 3);\n</code></pre>",
              "answers": [
                "return - function - sum",
                "function - sum - return",
                "function - return - sum",
                "for - return - while"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) Qual o resultado de",
              "description": "<pre><code class=\"language-js\">let emoji = ':D';\n\nconst greet = (name) =&gt; {\n  emoji = ':)';\n  const myGreet = () =&gt; `Hola ${name} ${emoji}`;\n  return myGreet();\n};\n\nconsole.log(greet('Laboratoria'));\n</code></pre>",
              "answers": [
                "Olá Laboratoria :D",
                "Olá Laboratoria :)",
                "Olá Laboratoria",
                "undefined"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "8) Qual o resultado de",
              "description": "<pre><code class=\"language-js\">let number = 0;\n\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n</code></pre>",
              "answers": [
                "imprime os números pares desde o 2 ao 10 (inclusive)",
                "imprime os números pares desde o 2 ao 12 (inclusive)",
                "imprime os números pares desde o 0 ao 10 (inclusive)",
                "imprime os números pares desde o 0 ao 12 (inclusive)"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "9) Qual o resultado de",
              "description": "<pre><code class=\"language-js\">for (let number = 1; number &lt;= 8; number = number * 2) {\n  console.log(number);\n}\n</code></pre>",
              "answers": [
                "2, 4, 6, 8",
                "1, 2, 4, 6, 8",
                "1, 2, 4, 8",
                "0, 1, 2, 4, 8"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "10) Ao seguinte switch lhe faltam alguns \"breaks\", porém qual seria o resultado de executar o código assim como está?",
              "description": "<pre><code class=\"language-js\">const weather = 'nublado';\n\nswitch (weather) {\n  case 'chuvoso':\n    console.log('Lembre de levar um guardachuva.');\n    break;\n  case 'soleado':\n    console.log('Use roupas leves.');\n  case 'nublado':\n    console.log('Saia para a rua');\n\n  default:\n    console.log('Tipo de clima desconhecido');\n    break;\n}\n</code></pre>",
              "answers": [
                "Erro de sintaxis",
                "Imprime 'Saia para a rua.'",
                "Imprime 'Tipo de Clima desconhecido.'",
                "Imprime 'Saia para a rua.' e 'Tipo de Clima desconhecido.'"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "11) O que diferencia um loop \"do\" de um \"while\"?",
              "description": "",
              "answers": [
                "Um loop \"do\" sempre executa seu corpo pelo menos uma vez.",
                "O \"while\" pode gerar um ciclo infinito, mas um \"do\" nunca o fará.",
                "O \"do\" executa uma só vez o cuerpo.",
                "Não existe diferenças."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "12) Qual é o resultado de",
              "description": "<pre><code class=\"language-js\">for (let i = 0; i &lt;= 10; i++) {\n  if (i == 5) {\n    continue;\n  } else {\n    console.log(i);\n  }\n}\n</code></pre>",
              "answers": [
                "Imprime os números inteiros de 1 a 10 (inclusive)",
                "Imprime os números inteiros de 0 a 10 (inclusive) com exceção do número 5",
                "Imprime os números inteiros de 0 a 10 (inclusive)",
                "Imprime os números inteiros de 1 a 9 (inclusive) e logo imprime o número 5 de\nnovo"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "13) Qual é o resultado de",
              "description": "<pre><code class=\"language-js\">const medalForScore = (score) =&gt; {\n  if (score &lt; 3){\n    return 'Bronze';\n  }\n  if (score &lt; 7){\n    return 'silver';\n  }\n  return 'Gold';\n}\n\nconsole.log(medalForScore(7));\n</code></pre>",
              "answers": [
                "Bronze",
                "Silver",
                "Gold",
                "undefined"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "14) No exemplo a seguir",
              "description": "<pre><code class=\"language-js\">const square = num =&gt; num * num;\nsquare(12);\n//-&gt;144\n</code></pre>",
              "answers": [
                "num é um parâmetro e 12 é o argumento",
                "num e 12 são parâmetros",
                "num e 12 são argumentos",
                "num é um argumento e 12 é o parâmetro"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz 1",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 5,
          "durationString": "30min"
        },
        "05-guided-exercises": {
          "title": "Exercícios Livres",
          "type": "read",
          "format": "self-paced",
          "duration": 120,
          "body": "<h2 id=\"enunciados\">Enunciados</h2>\n<p>Aqui estão alguns exercícios para você praticar, sugerimos que tenta resolver\neles sozinha ou em grupo. Assim, você ficará familizariada com os desafios. E se\nquiser pode apresentar a sua solução para a sala e ajudar as suas companheiras\n😁</p>\n<h3 id=\"1-funções-matemáticas\">1. Funções matemáticas</h3>\n<p>Crie duas funções, <code>add</code> e <code>multiply</code>. Cada uma deve tomar dois argumentos. A\nfunção <code>add</code> deve somar seus argumentos e devolver o resultado. A função\n<code>multiply</code> deve multiplicar seus argumentos. Usando somente estas duas funções,\nresolva este simples problema matemático: 36325 * (9824 + 777).</p>\n<h3 id=\"2-organizando-comida\">2. Organizando comida</h3>\n<p>Imagine que você está pedindo comida em um restaurante. O seu prato favorito é\n<code>ceviche</code> e por isso você o escolheria se houvesse no menú. Se não houver\n<code>ceviche</code>, escolheria <code>tacos al pastor</code>. Se este último não houver, você então\npediria <code>empanada chilena</code>. No caso raro que nenhuma destas opções esteja\ndisponível, você iria por um <code>hamburguer</code>. Escreva uma função, que de acordo com\na disponibilidade dos pratos no menú, você decida o que pedir.</p>\n<h3 id=\"3-idades-e-etapas\">3. Idades e etapas</h3>\n<p>Crie uma web que peça, por meio de um <code>prompt()</code>, a idade de uma pessoa, em\nanos. Dependendo do número oferecido, a web deve dar uma mensagem que classifica\na pessoa em: <code>toddler</code>, <code>preschooler</code>, <code>gradeschooler</code>, <code>teenager</code>, <code>young adult</code> e <code>adult</code>, segundo o critério desta\n<a href=\"https://www.healthychildren.org/English/ages-stages/Pages/default.aspx\" target=\"_blank\">página</a>.</p>\n<p>Se a pessoa coloca um dado que <strong>não</strong> é um número inteiro (por exemplo: um\n<code>string</code>, um número decimal, um zero, ou um campo vazio), a web deve dar uma\nmensagem de erro. Revise este\n<a href=\"https://stackoverflow.com/questions/3885817/how-do-i-check-that-a-number-is-float-or-integer\" target=\"_blank\">link</a>\nque possui dicas interessantes relacionadas a este projeto.</p>\n<h3 id=\"4-contando-caracteres-e-espaços\">4. Contando caracteres e espaços</h3>\n<p>Crie uma web que peça, por meio de um <code>prompt()</code>, uma frase ao usuário. A web\ndeve apresentar uma mensagem que diga: o número de caracteres e de espaços que\ncompõem o <code>string</code> inserido. No painel, deve aparecer cada caracter impresso em\numa linha separada, em maiúscula. Se o usuário insere um campo vazio, a web deve\ndar uma mensagem de erro.</p>\n<p>Arme seu arquivo JavaScript para que tenha 3 funções:</p>\n<ul>\n<li>Uma função que imprima todos os caracteres de um <code>string</code>, cada um em uma\nlinha separada, em maiúscula.</li>\n<li>Una função que conte o número de caracteres de um <code>string</code> (sem utilizar\n<code>.length</code>!)</li>\n<li>Uma função que conte o número de espaços de um <code>string</code></li>\n</ul>\n",
          "order": 6,
          "durationString": "2h"
        },
        "06-code-challenges": {
          "title": "Desafios de Código",
          "type": "practice",
          "format": "self-paced",
          "duration": 120,
          "exercises": {
            "01-power-of-two": {
              "title": "Potência de 2",
              "env": "js",
              "body": "<p>Calcule a potência de 2 elevado a um número específico.\nDeve usar um loop (não usar <code>Math.pow()</code>).</p>\n<p>Exemplo:</p>\n<pre><code class=\"language-js\">const output = powerOfTwo(10);\n\nconsole.log(ouput); // -&gt; 1024\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# Potencia de 2\n\n* Environment: `js`\n\n***\n\nCalcula la potencia de 2 elevado a un número específico. Debes de usar un loop\n(no `Math.pow()`).\n\nEjemplo:\n\n```js\nconst output = powerOfTwo(10);\n\nconsole.log(ouput); // -> 1024\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "cG93ZXJPZlR3by5qcw==": "const powerOfTwo = (number) => {\n\n};\n\nmodule.exports = powerOfTwo;\n"
                },
                "c29sdXRpb24=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-param-reassign\": \"off\"\n  }\n}\n",
                  "cG93ZXJPZlR3by5qcw==": "const powerOfTwo = (number) => {\n  let result = 1;\n\n  while (number > 0) {\n    result *= 2;\n    number -= 1;\n  }\n\n  return result;\n};\n\nmodule.exports = powerOfTwo;\n"
                },
                "dGVzdA==": {
                  "cG93ZXJPZlR3by5zcGVjLmpz": "const Assert = require('chai').assert;\nconst powerOfTwo = require('../solution/powerOfTwo');\n\ndescribe('powerOfTwo()', () => {\n  it('debería regresar la potencia de 2 elevado al número ingresado cuando es positivo', () => {\n    const output = powerOfTwo(10);\n    Assert.deepEqual(output, 1024);\n  });\n\n  it('debería regresar 1 cuando el número ingresado es 0', () => {\n    const output = powerOfTwo(0);\n    Assert.deepEqual(output, 1);\n  });\n\n  it('debería regresar 1 cuando el número ingresado es negativo', () => {\n    const output = powerOfTwo(-5);\n    Assert.deepEqual(output, 1);\n  });\n});\n"
                }
              }
            },
            "02-reverse": {
              "title": "Inverter uma array",
              "env": "js",
              "body": "<p>Use estruturas de controle para inverter uma array de inteiros.\nComo entrada receberá uma array de números ou objetos e como\nsaída é esperada uma array com a ordem dos elementos invertida.</p>\n<blockquote>\n<p>Não é válido utilizar <code>arr.reverse()</code>.</p>\n</blockquote>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = reverse([1, 2, 3, 4]);\n\nconsole.log(ouput); // -&gt; [4, 3, 2, 1]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# Invertir un arreglo\n\n* Environment: `js`\n\n***\n\nUsar estructuras de control para invertir un arreglo de números. Como entrada\nrecibirás un arreglo de números u objetos y como salida se espera un arreglo con\nel orden invertido de los elementos.\n\n> No es válido usar `arr.reverse()`.\n\nEjemplo:\n\n```javascript\nconst output = reverse([1, 2, 3, 4]);\n\nconsole.log(ouput); // -> [4, 3, 2, 1]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "cmV2ZXJzZS5qcw==": "const reverse = (array) => {\n\n};\n\nmodule.exports = reverse;\n"
                },
                "c29sdXRpb24=": {
                  "cmV2ZXJzZS5qcw==": "const reverse = (array) => {\n  const result = [];\n\n  for (let i = array.length - 1; i >= 0; i -= 1) {\n    result.push(array[i]);\n  }\n\n  return result;\n};\n\nmodule.exports = reverse;\n"
                },
                "dGVzdA==": {
                  "cmV2ZXJzZS5zcGVjLmpz": "const Assert = require('chai').assert;\nconst reverse = require('../solution/reverse');\n\ndescribe('reverse()', () => {\n  it('debería regresar el arreglo invertido cuando es un arreglo de números', () => {\n    const output = reverse([1, 2, 3, 4]);\n    Assert.deepEqual(output, [4, 3, 2, 1]);\n  });\n\n  it('debería regresar el arreglo invertido cuando es un arreglo de caracteres', () => {\n    const output = reverse(['j', 'a', 'v', 'a', 's', 'c', 'r', 'i', 'p', 't']);\n    Assert.deepEqual(output, ['t', 'p', 'i', 'r', 'c', 's', 'a', 'v', 'a', 'j']);\n  });\n\n  it('debería regresar el arreglo invertido cuando es un arreglo de objetos', () => {\n    const output = reverse([{ country: 'Chile' }, { country: 'México' }, { country: 'Perú' }]);\n    Assert.deepEqual(output, [{ country: 'Perú' }, { country: 'México' }, { country: 'Chile' }]);\n  });\n\n  it('debería regresar el arreglo vacío cuando es un arreglo vacío', () => {\n    const output = reverse([]);\n    Assert.deepEqual(output, []);\n  });\n});\n"
                }
              }
            },
            "03-count-vowels": {
              "title": "Contar vogais",
              "env": "js",
              "body": "<p>Crie uma função que conte o número de vogais em uma <code>string</code>.\nSiga os passos a seguir para completar o programa.</p>\n<ol>\n<li>Implementar a função <code>countVowels(str)</code> que retorne o número de vogais.</li>\n<li>Iniciar um contador em <code>counter = 0</code></li>\n<li>Iterar os caracteres da string; se o elemento atual é uma vogal\nentão incrementar o contador <code>counter</code>.</li>\n<li>Retornar <code>counter</code>, que contẽm o número de vogais.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLm1k": "# Contar vocales\n\n* Environment: `js`\n\n***\n\nCrea una función que cuente el número de vocales de un `string`. Sigue los pasos\na continuación para que completes el programa.\n\n1. Implementar la función `countVowels(str)` que retorne el número de vocales.\n2. Iniciar un contador en `counter = 0`\n3. Iterar los caracteres de string, si el elemento actual es una vocal entonces\n   incrementar el contador `counter`.\n4. Retornar `counter`, el cual contiene el número de vocales.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y291bnRWb3dlbHMuanM=": "const countVowels = (str) => {\n\n\n};\n\nmodule.exports = countVowels;\n"
                },
                "c29sdXRpb24=": {
                  "Y291bnRWb3dlbHMuanM=": "const countVowels = (str) => {\n  const vowels = 'aeiou';\n  const lowercased = str.toLowerCase();\n  let counter = 0;\n\n  for (let i = 0; i < lowercased.length; i += 1) {\n    for (let j = 0; j < vowels.length; j += 1) {\n      if (lowercased[i] === vowels[j]) {\n        counter += 1;\n      }\n    }\n  }\n\n  return counter;\n};\n\nmodule.exports = countVowels;\n"
                },
                "dGVzdA==": {
                  "Y291bnRWb3dlbHMuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst countVowels = require('../solution/countVowels');\n\ndescribe('countVowels(string)', () => {\n  it('debería retornar cuantas vocales hay en un string', () => {\n    Assert.deepEqual(countVowels('murcielago'), 5);\n    Assert.deepEqual(countVowels('sol'), 1);\n    Assert.deepEqual(countVowels('abecedario'), 6);\n  });\n\n  it('debería retornar 0 si el string está vacío', () => {\n    Assert.deepEqual(countVowels(''), 0);\n  });\n});\n"
                }
              }
            },
            "04-even-or-odd": {
              "title": "Funcão par/impar",
              "env": "js",
              "body": "<p>Crie uma função que verifique se um número é par ou ímpar.\nSiga os passos a seguir para completar o programa.</p>\n<ol>\n<li>Declare uma função <code>comprobar(n)</code>. Nota: pode utilizar o\noperador de módulo: <code>%</code>.</li>\n<li>Se o número é par, retornar <code>0</code>.</li>\n<li>Se o número é ímpar, retornar <code>1</code>.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLm1k": "# Función par/impar\n\n* Environment: `js`\n\n***\n\nCrea una función que compruebe si un número es par o impar.\n\nSigue los pasos a continuación para que completes el programa.\n\n1. Implementa una función `comprobar(n)`. Nota: Puedes usar el operador modulo:\n   `%`.\n2. Si el número es par retornar `0`.\n3. Si el número es impar  retornar `1`.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZXZlbk9yT2RkLmpz": "const evenOrOdd = (n) => {\n\n};\n\nmodule.exports = evenOrOdd;\n"
                },
                "c29sdXRpb24=": {
                  "ZXZlbk9yT2RkLmpz": "module.exports = n => ((n % 2 === 0) ? 0 : 1);\n"
                },
                "dGVzdA==": {
                  "ZXZlbk9yT2RkLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst evenOrOdd = require('../solution/evenOrOdd');\n\ndescribe('evenOrOdd(n)', () => {\n  it('debería retornar si el número que se pasa como parámetro es par o impar', () => {\n    Assert.deepEqual(evenOrOdd(5), 1);\n    Assert.deepEqual(evenOrOdd(66), 0);\n    Assert.deepEqual(evenOrOdd(20), 0);\n    Assert.deepEqual(evenOrOdd(35), 1);\n  });\n});\n"
                }
              }
            },
            "05-max": {
              "title": "Número maior que outro",
              "env": "js",
              "body": "<p>Implementa uma função que determine se um número é maior que outro.</p>\n<p>Siga os passos a seguir para completar o programa:</p>\n<ol>\n<li>Retornar o maior número entre A, B e C</li>\n</ol>\n<p>Input: A = 10, B = 30, C = 5\nOutput: 30</p>\n",
              "files": {
                "UkVBRE1FLm1k": "# Número mayor que otro\n\n* Environment: `js`\n\n***\n\nImplementa una función que determine si un número es mayor a otro.\n\nSigue los pasos a continuación para que completes el programa:\n\n1. Retornar el numero mayor entre A, B y C\n\nInput: A = 10, B = 30, C = 5\nOutput: 30\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "bWF4Lmpz": "const max = (A, B, C) => {\n\n\n};\n\nmodule.exports = max;\n"
                },
                "c29sdXRpb24=": {
                  "bWF4Lmpz": "const max = (A, B, C) => {\n  let maximo = A;\n\n  if (A > B) {\n    if (A > C) {\n      maximo = A;\n    } else {\n      maximo = C;\n    }\n  } else if (B > C) {\n    maximo = B;\n  } else {\n    maximo = C;\n  }\n\n  return maximo;\n};\n\nmodule.exports = max;\n"
                },
                "dGVzdA==": {
                  "bWF4LnNwZWMuanM=": "const Assert = require('chai').assert;\nconst max = require('../solution/max');\n\ndescribe('max()', () => {\n  it('debería retornar el número que sea mayor', () => {\n    Assert.deepEqual(max(5, 6, 7), 7);\n    Assert.deepEqual(max(66, 4, 6), 66);\n    Assert.deepEqual(max(20, 25, 10), 25);\n  });\n});\n"
                }
              }
            },
            "06-is-prime": {
              "title": "Determinar se um número é primo",
              "env": "js",
              "body": "<p>Crie uma função que determine se um número é primo. Em matemática,\num número primo é um número natural maior que 1 que é divisível\nsomente por ele mesmo e 1.</p>\n<p>Tips:</p>\n<ol>\n<li>Utilizar o operador módulo (<code>%</code>) para determinar se um número é\ndivisível por outro.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLm1k": "# Determinar si un número es primo\n\n* Environment: `js`\n\n***\n\nCrea una función que determine si un número es primo. En matemáticas, un número\nprimo es un número natural mayor que 1 que tiene únicamente dos divisores\ndistintos: él mismo y el 1.\n\nTips:\n\n1. Utilizar el operador  modulo (`%`) para determinar si un número es divisor de\n   otro.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "aXNQcmltZS5qcw==": "const isPrime = (n) => {\n\n\n};\n\nmodule.exports = isPrime;\n"
                },
                "c29sdXRpb24=": {
                  "aXNQcmltZS5qcw==": "const isPrime = (n) => {\n  if (n === 1) {\n    return true;\n  }\n\n  for (let i = 2; i < n; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n\nmodule.exports = isPrime;\n"
                },
                "dGVzdA==": {
                  "aXNQcmltZS5zcGVjLmpz": "const Assert = require('chai').assert;\nconst isPrime = require('../solution/isPrime');\n\ndescribe('isPrime(n)', () => {\n  it('debería retornar si el número que se da como parámetro es primo o no', () => {\n    Assert.deepEqual(isPrime(5), true);\n    Assert.deepEqual(isPrime(6), false);\n    Assert.deepEqual(isPrime(23), true);\n    Assert.deepEqual(isPrime(35), false);\n  });\n});\n"
                }
              }
            },
            "07-can-drive-and-vote": {
              "title": "Pode dirigir e votar?",
              "env": "js",
              "body": "<p>Crie uma função que determine se uma pessoa pode dirigir nos EUA (16 anos ou mais)\ne votar (18 anos ou mais).</p>\n<p>Siga os passos a seguir para completar o programa:</p>\n<ol>\n<li>Implemente a função <code>comprobar</code></li>\n<li>Se o valor cumpre a condição dirigir (16 anos ou mais)\ne votar (18 anos ou mais), então retorna <code>true</code>; caso\ncontrário, retornar <code>false</code></li>\n</ol>\n",
              "files": {
                "UkVBRE1FLm1k": "# Puedes conducir y votar?\n\n* Environment: `js`\n\n***\n\nCrea una función que determine si una persona puede manejar (16 años o más) y\nvotar (18 años o más)\n\nSigue los pasos a continuación para que completes el programa:\n\n1. Implementar la función comprobar.\n2. Si cumple con la condición  (16 años o más) y votar (18 años o más)\n  entonces retornar true; en caso contrario retornar false.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y2FuRHJpdmVBbmRWb3RlLmpz": "const canDriveAndVote = (edad) => {\n\n\n};\n\nmodule.exports = canDriveAndVote;\n"
                },
                "c29sdXRpb24=": {
                  "Y2FuRHJpdmVBbmRWb3RlLmpz": "const canDriveAndVote = (edad) => {\n  if (edad >= 16 && edad >= 18) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = canDriveAndVote;\n"
                },
                "dGVzdA==": {
                  "Y2FuRHJpdmVBbmRWb3RlLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst canDriveAndVote = require('../solution/canDriveAndVote');\n\ndescribe('canDriveAndVote()', () => {\n  it('debería retornar true si cumple con ambas condiciones (16 años o más y 18 años o más), en caso contrario retornar false', () => {\n    Assert.deepEqual(canDriveAndVote(25), true);\n    Assert.deepEqual(canDriveAndVote(12), false);\n    Assert.deepEqual(canDriveAndVote(16), false);\n  });\n});\n"
                }
              }
            },
            "08-are-odd": {
              "title": "Determinar se dois números são pares",
              "env": "js",
              "body": "<p>Implemente uma função que determina se dois números são pares.</p>\n<p>Siga os passos a seguir para completar o programa:</p>\n<ol>\n<li>Se <code>n</code> e <code>m</code> são pares retornar <code>true</code>; caso contrário retornar <code>false</code>.</li>\n</ol>\n<p>Dica: Usar o operador módulo (<code>%</code>)</p>\n",
              "files": {
                "UkVBRE1FLm1k": "# Determinar si dos números son pares\n\n* Environment: `js`\n\n***\n\nImplementa una función que determine si dos número son pares.\n\nSigue los pasos a continuación para que completes el programa:\n\n1. Si `n` y `m` son pares retornar `true`; en caso contrario retornar `false`.\n\nTip: Usar el operador modulo (`%`)\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YXJlT2RkLmpz": "const areOdd = (n, m) => {\n\n\n};\n\nmodule.exports = areOdd;\n"
                },
                "c29sdXRpb24=": {
                  "YXJlT2RkLmpz": "const areOdd = (n, m) => {\n  if (n % 2 === 0 && m % 2 === 0) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = areOdd;\n"
                },
                "dGVzdA==": {
                  "YXJlT2RkLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst areOdd = require('../solution/areOdd');\n\ndescribe('areOdd()', () => {\n  it('debería retornar true si ambos números son pares', () => {\n    Assert.deepEqual(areOdd(22, 10), true);\n    Assert.deepEqual(areOdd(12, 5), false);\n    Assert.deepEqual(areOdd(16, 8), true);\n    Assert.deepEqual(areOdd(33, 15), false);\n  });\n});\n"
                }
              }
            }
          },
          "order": 7,
          "durationString": "2h"
        },
        "07-quiz-2": {
          "questions": [
            {
              "title": "1) Que forma de modificar o fluxo de um programa a figura a seguir revela?",
              "description": "<p><img src=\"https://camo.githubusercontent.com/48a2fb7be5218c417decdc954fe2e9bf7dc3a3a2/687474703a2f2f656c6f7175656e746a6176617363726970742e6e65742f696d672f636f6e74726f6c666c6f772d6c6f6f702e737667\" alt=\"Flujo\nbucle\"></p>",
              "answers": [
                "while",
                "loops em geral",
                "if",
                "if else",
                "if else \"aninhado\" (nested)"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) Qual é o problema com o seguinte código?",
              "description": "<pre><code class=\"language-js\">do {\n  console.log('Hello world');\n} while (2 &gt; 3);\n</code></pre>",
              "answers": [
                "Tem um erro de sintaxe",
                "Não utiliza boas práticas",
                "A variável não está bem declarada",
                "Gera um loop infinito",
                "Nenhum, funciona bem e imprime 'hello world' uma vez no console"
              ],
              "solution": [
                4
              ]
            },
            {
              "title": "3) Encontre o erro na seguinte função",
              "description": "<pre><code class=\"language-js\">let result = 0;\n\nconst showSum = (num1, num2) =&gt; {\n  result = num1 + num2;\n  alert('El resultado es ' + result);\n};\n\nshowSum(if, else);\n</code></pre>",
              "answers": [
                "A função não está sendo chamada",
                "Os parâmetros não estão sendo declarados",
                "alert não é uma função",
                "Erro de sintaxe. Não se pode utilizar keywords como argumentos"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "4) A diferença entre undefined e null",
              "description": "",
              "answers": [
                "Não existe, eles são a mesma coisa",
                "Não importa",
                "<code>undefined</code> não tem valor e <code>null</code> é um string vazio",
                "<code>undefined</code> significa que não foi <em>assinalado</em> um valor, enquanto <code>null</code>\nsignifica que <em>assinalamos</em> o valor <code>null</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) Qual é o resultado de",
              "description": "<pre><code class=\"language-js\">let number = 0;\nwhile (number &lt;= 12) {\n  console.log(number);\n  number = number + 2;\n}\n</code></pre>",
              "answers": [
                "imprime os números pares de 0 a 10 (inclusive)",
                "imprime os números pares de 0 a 12 (inclusive)",
                "imprime os números pares de 2 a 10 (inclusive)",
                "imprime os números pares de 2 a 12 (inclusive)"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "6) O resultado de \"Hola\" + \"mundo\" é",
              "description": "",
              "answers": [
                "\"Hola Mundo\"",
                "\"Hola mundo\"",
                "\"Holamundo\"",
                "'HolaMundo'"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) Qual o resultado de",
              "description": "<pre><code class=\"language-js\">for (let number = 1; number &lt; 8; number = number * 3) {\n  console.log(number);\n}\n</code></pre>",
              "answers": [
                "1",
                "1, 3, 9",
                "0, 1, 3, 9",
                "1, 3"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "8) Ao seguinte switch lhe faltam alguns \"breaks\". Qual seria o resultado de executar o código assim como está?",
              "description": "<pre><code class=\"language-js\">const weather = 'soleado';\n\nswitch (weather) {\n  case 'chuvoso':\n    console.log('Lembre-se de levar um guarda-chuvas.');\n    break;\n  case 'ensolarado':\n    console.log('Vista-se com roupas leves.');\n  case 'nublado':\n    console.log('Saia para a rua.');\n\n  default:\n    console.log('Tipo de clima desconhecido');\n    break;\n}\n</code></pre>",
              "answers": [
                "Imprime 'Saia para a rua.'",
                "Imprime 'Tipo de Clima desconhecido.'",
                "Imprime 'Saia para a rua.'\" e 'Tipo de Clima desconhecido.'",
                "Imprime 'Vista-se com roupas leves.', 'Saia para a rua.' e 'Tipo de Clima\ndesconhecido.'"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "9) Qual é o resultado de",
              "description": "<pre><code class=\"language-js\">for (let i = 0; i &lt;= 10; i++) {\n  if (i == 0) {\n    continue;\n  } else {\n    console.log(i);\n  }\n}\n</code></pre>",
              "answers": [
                "Imprime os números inteiros do 0 a 10 (inclusive)",
                "Imprime os números inteiros do 1 ao 10 (inclusive)",
                "Imprime os números inteiros do 0 ao 10 (inclusive) e depois imprime o número\n0 denovo",
                "Imprime os números inteiros do 1 ao 10 (inclusive) e depois imprime o número\n0 denovo"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "10) Qual o resultado de",
              "description": "<pre><code class=\"language-js\">var medalForScore = function(score) {\n  if (score &lt; 3){\n    return 'Bronze';\n  }\n  if (score &lt; 7){\n    return 'silver';\n  }\n  return 'Gold';\n}\n\nconsole.log(medalForScore(3));\n</code></pre>",
              "answers": [
                "Bronze",
                "Silver",
                "Gold",
                "undefined"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "11) Uma função pode retornar múltiplos valores ao mesmo tempo",
              "description": "",
              "answers": [
                "Verdadeiro",
                "Falso"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "12) Os comandos como alert(), prompt() e console.log() são realmente funções",
              "description": "",
              "answers": [
                "Verdadeiro",
                "Falso"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz 2",
          "type": "quiz",
          "format": "self-paced",
          "duration": 30,
          "order": 8,
          "durationString": "30min"
        },
        "08-closing": {
          "title": "Fechamento",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"respondamos-às-perguntas-do-opening\">Respondamos às perguntas do opening</h2>\n<ul>\n<li>Por que modificar o controle de fluxo de um programa?</li>\n<li>Quais são as formas de modificar o fluxo de um programa? Desenhe uma\nrepresentação de cada uma</li>\n<li>O que significa <code>else</code> de uma sentença <code>if...else</code>? De um exemplo</li>\n<li>Qual a diferença entre um <code>while</code> e um <code>do</code>?</li>\n<li>Quais são as 3 partes (sentenças) essenciais de um <code>for</code>? De um exemplo</li>\n<li>Para que utilizamos <code>break</code> e <code>continue</code> em um <code>for</code>? De um exemplo</li>\n<li>Explique, com uma analogia e com as suas próprias palavras, o que é&nbsp;uma\n<code>function</code> (uma função). Desenhe o conceito de uma função</li>\n<li>Por que são importantes as funções na programação?</li>\n<li>O que se entende por <code>DRY</code>?</li>\n<li>O que significa \"chamar\" a uma função?</li>\n<li>O que seria um \"input\" (entrada) para uma função e o que seria o equivalente\nao \"output\" (saída)?</li>\n<li>Qual a diferença entre um parâmetro e um argumento de una função?</li>\n<li>O que significa o valor de <code>return</code> de uma função?</li>\n<li>O que acontece quando uma função tem vários valores de <code>return</code>?</li>\n<li>Por que podemos resolver problemas mais complexos sabendo <code>estruturas condicionais</code>,&nbsp;<code>estruturas repetitivas</code> e <code>funções</code>? De um exemplo</li>\n</ul>\n",
          "order": 9,
          "durationString": "5min"
        }
      },
      "order": 1,
      "stats": {
        "duration": 450,
        "durationString": "7.5h",
        "exerciseCount": 8,
        "partCount": 10
      }
    },
    "03-functions": {
      "title": "Funções",
      "bonus": false,
      "description": "<p>Nesta unidade, veremos com profundidade o tempo de funções, aproveitando que\nJavaScript está fortemente influênciado pela programação funcional desde o seu\ndesenho, e nos oferece caracteristicas importantes como designar funções a uma\nvariável, passar como parâmetro outra função, trocar o escopo de variáveis, etc.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Opening",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>Nesta unidade veremos com maior profundidade o tema de funções, aproveitando que\no Javascript é fortemente influênciado pela programação funcional desdo seu\ndesenho inicial e que nos oferece características importante para atribuir\nfunções a uma variável, passar como parametro à outra função, mudar o escopo de\nvariáveis, atribuir como valor de um objeto, etc.</p>\n<p>As funções são blocos de construção de aplicações que englobam múltiplas\nsequências de código. São particularmente importantes no Javascript porque\nsuportam caracteristicas como <em>first-class functions</em>, <em>functions as objects</em>,\n<em>runtime function definition</em> e mais que veremos nesta unidade.</p>\n<p>Listamos alguns princípios que te vão te ajudar a escrever funções melhores:</p>\n<ul>\n<li><p><strong>Don't Repeat Yourself (DRY)</strong>: É muito comum que ao longo do desenvolvimento\nde uma solução encontremos um padrão que se repete ao longo de nosso código.\nUma vez identificado um padrão, é hora de escrever uma função, objeto ou\nmódulo que encapsule o padrão encontrado para que seja reutilizado facilmente.\nIsso ajuda também se encontrarmos algum <em>bug</em> ou quisermos adicionar alguma\nfuncionalidade, só precisaremos fazer em um lugar. Além disso, escrevendo uma\nfunção reutilizável obriga você a analisar o padrão do problema, o que ajudar\nter a funcionalidade relacionada de maneira agrupada.</p>\n</li>\n<li><p><strong>Do One Thing (DOT)</strong>: Cada função deve fazer somente uma coisa e fazê-la o\nmelhor possível. Seguindo este princípio, você escreverá funções mais\nreutilizáveis, legíveis e fáceis de depurar.</p>\n</li>\n<li><p><strong>Keep It Simple Stupid (KISS)</strong>: Se as funções devem fazer somente uma coisa,\né melhor fazê-la claramente mantendo a simplicidade e não adicionando\ncomplexidade desnecessária para resolver um problema. Isto não quer dizer que\na solução seja ótima, mas que pode ser legível para poder dar manutenção ao\nlongo do tempo.</p>\n</li>\n<li><p><strong>Less Is More</strong>: Para alcançar a maior legibilidade possível e reduzir a\ntentação de fazer mais de uma coisa, as funções devem ser tão pequenas quanto\npossível. Se a função se torna muito longa, é melhor considerar separá-la em\nsubtarefas e dados ao longo de funções e objetos.</p>\n</li>\n</ul>\n",
          "order": 0,
          "durationString": "15min"
        },
        "01-classic": {
          "title": "Funções clásicas",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<h2 id=\"declarando-uma-função\">Declarando uma função</h2>\n<p>A declaração de uma função é simplesmente a declaração de uma variável comum na\nqual o valor dado a tal variável resulta ser uma função. Por exemplo, o código a\nseguir define a variável <code>square</code> para fazer referência à função que retorna o\nquadrado de um dado número:</p>\n<pre><code class=\"language-js\">  const square = function(x) {\n    return x * x;\n  };\n\n  console.log(square(12)); // 144\n</code></pre>\n<hr>\n<p>Funções são valores que podem ser chamados (invocados). Uma maneira de definir\numa função é chamada uma <code>function declaration</code> ou <code>declaração de função</code>. Por\nexemplo, o código a seguir define uma função <code>id</code> que possue um parâmetro\nsimples <code>x</code>:</p>\n<pre><code class=\"language-js\">function id(x) {\n  return x;\n}\n</code></pre>\n<p>A instrução <code>return</code> retorna um valor da função <code>id</code>. Você pode chamar uma\nfunção por meio de seu nome, seguida de seus <code>argumentos</code> entre parênteses:</p>\n<pre><code class=\"language-js\">id('hello'); // 'hello'\n</code></pre>\n<p>Se nada é retornado pela função, <code>undefined</code> é retornado (implicitamente):</p>\n<pre><code class=\"language-js\">function f() { }\nf(); //undefined\n</code></pre>\n<p>Esta seção mostrou somente uma maneira de definir e chamar uma função. Outras\nformas serão mostradas em breve.</p>\n<h2 id=\"os-3-papéis-das-funções-em-javascript\">Os 3 papéis das funções em JavaScript</h2>\n<p>Uma vez definida uma função, ela pode realizar vários papéis:</p>\n<h3 id=\"nonmethod-function-função-normal\">Nonmethod function (função normal)</h3>\n<p>Você pode chamar uma função diretamente como vimos até o momento. Aqui um\nexemplo de chamada:</p>\n<pre><code class=\"language-js\">id('hello');\n</code></pre>\n<p>Por convenção, os nomes destas funções <em>normais</em> começam com letra minúscula\nseguindo o estilo <strong>lowerCamelCase</strong>.</p>\n<h3 id=\"construtor\">Construtor</h3>\n<p>Você pode invocar uma função por meio do operador <code>new</code>. Ele é utilizado para\ncriação de objetos. Aqui um exemplo de invocação:</p>\n<pre><code class=\"language-js\">new Date();\n</code></pre>\n<p>Por convenção, os nomes dos construtores começam com letra maiúscula, seguindo o\nestilo <strong>UpperCamelCase</strong>.</p>\n<h3 id=\"método\">Método</h3>\n<p>Você pode armazenar uma função em uma propriedade de um objeto, o que o converte\nem um <em>método</em>. Aqui um exemplo de como invocar um método definido em um objeto\n<code>obj</code>:</p>\n<pre><code class=\"language-js\">obj.method();\n</code></pre>\n<p>Por convenção, os nomes dos métodos seguem o estilo das funções normais\n(<em>lowerCamelCase</em>).</p>\n<h2 id=\"terminologia-parâmetro-vs-argumento\">Terminologia: \"Parâmetro\" vs. \"Argumento\"</h2>\n<p>Os termos <code>parâmetro</code> e <code>argumento</code> são frequentemente usados para se referirem\nà mesma coisa já que é possível entender ao que se referem. Contudo, a seguir\nmostramos uma regra para diferenciá-los.</p>\n<ul>\n<li><p><strong>Parâmetros</strong> são utilizados para definir uma função: No exemplo a seguir,\n<code>param1</code> e <code>param2</code> são parâmetros:</p>\n<pre><code class=\"language-js\">function foo(param1, param2) {\n  // ...\n}\n</code></pre>\n</li>\n<li><p><strong>Argumentos</strong> são utilizados para invocar uma função. No exemplo a seguir,\n<code>3</code> e <code>7</code> são argumentos:</p>\n<pre><code class=\"language-js\">foo(3, 7);\n</code></pre>\n</li>\n</ul>\n<h2 id=\"criação-de-funções\">Criação de Funções</h2>\n<p>Nesta seção veremos 3 maneiras de criar uma função:</p>\n<ul>\n<li>Por meio de uma <em>function expression</em> (função como expressão).</li>\n<li>Por meio de uma <em>function declaration</em> (declaração de uma função).</li>\n<li>Por meio do construtor <code>Function()</code>.</li>\n</ul>\n<p>Todas as funções são objetos, instâncias de <code>Function</code>:</p>\n<pre><code class=\"language-js\">function id(x) {\n  return x;\n}\n\nconsole.log(id instanceof Function); // true\n</code></pre>\n<p>Para tal, as funções obtêm seus métodos de <code>Function.prototype</code>.</p>\n<h3 id=\"function-expressions\">Function Expressions</h3>\n<p>Uma <em>function expression</em> produz um valor - um objeto de função. Por exemplo:</p>\n<pre><code class=\"language-js\">const add = function(x, y) {\n  return x + y;\n};\n\nconsole.log(add(2, 3)); // 5\n</code></pre>\n<p>O código anterior atribui o resultado de uma função como expressão para a\nvariável <code>add</code> e pode ser chamada por meio desta variável. Neste tipo de função\né possível atribuir uma função a uma variável, passar como parâmetros de outra\nfunção e outras coisas mais. Devido a este tipo de função não possuir um nome,\npodem ser chamadas de <em>anonymous function expressions</em> (funções anônimas).</p>\n<h4 id=\"named-function-expressions\">Named Function Expressions</h4>\n<p>É possível nomear uma função como uma expressão. As <em>named function expressions</em>\n(funções que se expressam por nome) permitem à função fazer referências a si\nmesma. Vemos refletida sua utilidade quando desejamos aplicar recursividade. Por\nexemplo:</p>\n<pre><code class=\"language-js\">const factorial = function fact(number) {\n  if (number &lt;= 1) {\n    return 1;\n  }\n  return number * fact(number - 1);\n};\n\nconsole.log(factorial(3)); // 6\n</code></pre>\n<p><strong>Nota:</strong> Os nomes das funções como expressão com nome só são acessíveis dentro\nda função:</p>\n<pre><code class=\"language-js\">const repeat = function me(n, str) {\n  return n &gt; 0 ? str + me(n-1, str) : '';\n};\n\nconsole.log(repeat(3, 'Yeah')); // YeahYeahYeah\nconsole.log(me); // ReferenceError: me is not defined\n</code></pre>\n<h3 id=\"function-declarations\">Function Declarations</h3>\n<p>A seguir temos uma declaração de função:</p>\n<pre><code class=\"language-js\">function add(x, y) {\n  return x + y;\n}\n</code></pre>\n<p>O código anterior é parecido com o de uma função como expressão, mas é uma\ninstrução. De certa maneira, é equivalente ao código a seguir:</p>\n<pre><code class=\"language-js\">const add = function(x, y) {\n  return x + y;\n};\n</code></pre>\n<p>Em outras palavras, uma <em>function declaration</em> consiste na palavra chave\nreservada <em>function</em>, uma lista de parâmetros para a função, delimitados por\nparênteses e vírgulas, e a sentença JavaScript que define a função, delimitada\npor chaves.</p>\n<h3 id=\"function-constructor\">Function Constructor</h3>\n<p>O construtor <code>Function()</code> avalia código JavaScript armazenado em strings. Por\nexemplo, o código a seguir é equivalente aos dos exemplos anteriores:</p>\n<pre><code class=\"language-js\">const add = new Function('x', 'y', 'return x + y');\n</code></pre>\n<p>No entanto, esta maneira de definir uma função é lenta e deixa o código entre\nstrings (ficam inacessíveis a ferramentas, por exemplo, de depuração com <em>Dev\nTools</em>). Portanto é melhor utilizar <em>function expression</em> ou uma <em>function\ndeclaration</em> se for possível.</p>\n<h2 id=\"hoisting\">Hoisting</h2>\n<p><strong>Hoisting</strong> significa \"elevar para o início do escopo\". <em>Function declarations</em>\nsão elevadas (<em>hoisted</em>) completamente, enquanto as declarações de variáveis só\nparcialmente.</p>\n<p><em>Function declarations</em> são completamente elevadas. Isso permite chamar uma\nfunção antes de sua declaração:</p>\n<pre><code class=\"language-js\">welcome(); // 'Welcome to Laboratoria'\nfunction welcome() { // esta função é elevada - hoisting\n  console.log('Welcome to Laboratoria');\n}\n</code></pre>\n<p>A razão pela qual o código anterior funciona é que o motor de JavaScript move a\ndeclaração da função <code>welcome</code> para o início do escopo. Ele acaba executando\ncomo se estivesse escrito da seguinte maneira:</p>\n<pre><code class=\"language-js\">function welcome() { // esta função é elevada - hoisting\n  console.log('Welcome to Laboratoria');\n}\nwelcome(); // 'Welcome to Laboratoria'\n</code></pre>\n<p>As declarações de variáveis são elevadas também, mas somente as declarações mas\nnão as atribuições. Portanto, definir uma função como expressão atribuindo a uma\nvariável acaba em um erro no exemplo anterior:</p>\n<pre><code class=\"language-js\">welcome(); // TypeError: undefined is not a function\nconst welcome = function welcome() {\n  console.log('Welcome to Laboratoria');\n};\n</code></pre>\n<p>Somente as declarações são elevadas. O motor de JavaScript executa o código\nanterior como se estivesse escrito da seguinte maneira:</p>\n<pre><code class=\"language-js\">const welcome; // undefined\nwelcome(); // TypeError: undefined is not a function\nwelcome = function welcome() {\n  console.log('Welcome to Laboratoria');\n};\n</code></pre>\n",
          "order": 1,
          "durationString": "20min"
        },
        "02-arrow": {
          "title": "Arrow Functions",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h2 id=\"diferenças-entre-arrow-functions-e-funções-clássicas\">Diferenças entre <em>arrow functions</em> e funções clássicas</h2>\n<p>Uma das novidades mais interessantes de ES6 são as denominadas <strong>funções seta</strong>,\nou <em>arrow functions</em>. As funções setas são, como seu nome indica, definidas por\nmeio de uma nova sintaxe que utiliza uma \"seta\" (<code>=&gt;</code>). As funções seta se\ncomportam de maneira sensivelmente diferente das funções tradicionais de\nJavaScript. A seguir, algumas de suas diferenças:</p>\n<ul>\n<li><strong>Não podem ser chamadas com <code>new</code></strong>: Como não possuem um método construtor,\nnão podem ser executadas como construtores. As funções seta dispararão um erro\nse forem utilizadas com <code>new</code>.</li>\n<li><strong>Não há protótipo</strong>: Como não possuem construtor, tampouco é necessário um\nprotótipo. Logo, não existirá a propriedade <code>prototype</code> e uma função seta.</li>\n<li><strong>Não criam um novo contexto</strong>. O valor de <code>this</code>, <code>super</code>, <code>arguments</code> e\n<code>new.target</code> dentro da função será o mesmo que na função tradicional\n(<em>non-arrow</em>) mais próxima.</li>\n<li><strong>Não pode trocar <code>this</code></strong>: O valor de <code>this</code> dentro da função seta permanece\nimutável ao longo de todo o ciclo de vida da função.</li>\n<li><strong>Não existe objeto <code>arguments</code></strong>: Somente é possível atribuir parâmetros a\numa função seta mediante parâmetros nomeados e <em>rest parameters</em>.</li>\n<li><strong>Não é possível duplicar parâmetros com o mesmo nome</strong>: Tanto no modo estrito\ncomo no não estrito, diferente das funções clássicas, que não permitem somente\no modo estrito.</li>\n</ul>\n<h3 id=\"sintaxe\">Sintaxe</h3>\n<p>O exemplo mais simples de uma *<em>arrow functions</em> é o a seguir, embora vejamos\nnos exemplos seguintes que podem existir diversas variações.</p>\n<pre><code class=\"language-js\">const echo = text =&gt; text;\n</code></pre>\n<p>Esta função seria equivalente a seguinte:</p>\n<pre><code class=\"language-js\">const echo = function(text) {\n  return text;\n};\n</code></pre>\n<p>Nos dois casos, a execução da função daria a seguinte saída:</p>\n<pre><code class=\"language-js\">console.log(echo('Olá Mundo!')); // Olá Mundo!\n</code></pre>\n<p>Como com qualquer função, podemos passar tantos argumentos quanto quisermos para\na função:</p>\n<pre><code class=\"language-js\">const sum = (a, b) =&gt; a + b;\nconsole.log(sum(1, 1)); // 2\n</code></pre>\n<p>Ou nenhum, claro:</p>\n<pre><code class=\"language-js\">const greet = () =&gt; 'Olá, estrangeiro!';\nconsole.log(greet()); // Olá, estrangeiro!\n</code></pre>\n<p>Se quisermos realizar operações mais complicadas, podemos usar chaves e definir\num valor de retorno:</p>\n<pre><code class=\"language-js\">const resize = ({x, y}, ratio) =&gt; {\n  return {\n    x: x * ratio,\n    y: y * ratio\n  };\n};\n\nconsole.log(resize({x: 5, y: 15}, 100)); // { x: 500, y: 1500 }\n</code></pre>\n<p>Uma função seta não cria um novo contexto. Uma de suas maiores fontes de erros\nem JavaScript acontecia pela criação de diferentes contextos em uma função\ndependendo de quem a executa. Vejamos o exemplo a seguir:</p>\n<pre><code class=\"language-js\">const randomWinner = function(drivers) {\n  const winner = Math.floor(Math.random() * (0 - drivers.length) + drivers.length);\n  return drivers[winner];\n};\n\nconst F1Race = {\n  drivers: [\n    'Alonso',\n    'Vettel',\n    'Button',\n    'Massa'\n  ],\n  init: function() {\n    console.log('Os seguintes pilotos começarão a corrida:', this.drivers);\n    setTimeout((function() {\n      console.log('O ganhador é ', randomWinner(this.drivers));\n    }), 1000);\n  }\n};\n\nF1Race.init();\n</code></pre>\n<p><code>F1Race</code> é um objeto que inicia uma corrida de Fórmula 1 por meio de sua função\n<code>init()</code>. Após um segundo, será executada a função <code>randowWinner()</code>, que a\npartir de um array de pilotos, escolherá um aleatoriamente.</p>\n<p>Quando executamos a função <code>init()</code>, o programa escreve no console o seguinte:</p>\n<pre><code class=\"language-text\">Os seguintes pilotos começarão a corrida: [ 'Alonso', 'Vettel', 'Button', 'Massa']\n</code></pre>\n<p>Isso é possível já que a função <code>init</code> tem como contexto o próprio objeto\n<code>F1Race</code>. Contudo, a função dá erro após um segundo, enquanto tenta calcular o\nganhador de maneira aleatória. Como isso é possível?</p>\n<p>O motivo é que a função de <em>callback</em> que é passada ao <code>setTimetout</code> cria um\nnovo contexto, no qual não existe o array de pilotos.</p>\n<p>No ES5 podíamos solucionar esse problema utilizando <code>bind(this)</code> para atribuir o\ncontexto de uma função de <em>callback</em> ao objeto que a contém da seguinte maneira:</p>\n<pre><code class=\"language-js\">init: function() {\n  console.log('Os seguintes pilotos começarão a corrida:', this.drivers);\n  setTimeout((function() {\n    console.log('O ganhador é ', randomWinner(this.drivers));\n  }).bind(this), 1000);\n}\n</code></pre>\n<p>Com ES2015, podemos solucionar este contratempo utilizando funções seta de uma\nmaneira muito mais elegante, já que ao criar o novo contexto, <code>this</code> sempre virá\ndeterminado pela função o contém:</p>\n<pre><code class=\"language-js\">init: function() {\n  console.log('Os seguintes pilotos começarão a corrida:', this.drivers);\n  setTimeout(() =&gt; console.log('O ganhador é ', randomWinner(this.drivers)), 1000);\n}\n</code></pre>\n",
          "order": 2,
          "durationString": "15min"
        }
      },
      "order": 2,
      "stats": {
        "duration": 50,
        "durationString": "50min",
        "exerciseCount": 0,
        "partCount": 3
      }
    },
    "04-arrays": {
      "title": "Arrays",
      "bonus": false,
      "description": "<p>Para resolver problemas complexos é preciso agrupar e manipular dados de uma\nmaneira mais eficiente. Para resolver problemas complejos necesitamos poder\nagrupar y manipular data de una manera más interesante. Felizmente, o JavaScript\nnos permite utilizar <code>arrays</code> e <code>objects</code>. Nesta unidade vamos nos concentrar\nnos <em>arrays</em> para depois passar aos objetos.</p>\n",
      "parts": {
        "01-arrays": {
          "title": "Arrays",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=joMxeCl6ppg",
              "id": "joMxeCl6ppg"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Aprenda o que são vetores (_arrays_) e para que servem</li>\n<li>Aprenda a criar, acessar e modificar os dados de um vetor</li>\n</ul>\n<p>O texto a seguir se baseia em grande medida, com alguns ajustes, ao capítulo 4\ndo <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn Haverbeke,\n2014. Tradução em\n<a href=\"http://braziljs.github.io/eloquente-javascript/chapters/valores-tipos-operadores\" target=\"_blank\">Português</a>,\ne ao capítulo 3 do <a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for\nkids</a>,\nNick Morgan, 2015;</p>\n<hr>\n<h2 id=\"agrupando-e-manipulando-dados\">Agrupando e manipulando dados</h2>\n<p>Como vimos, grande parte da programação consiste em agrupar e manipular dados.\nIsso nos permite transformar dados em informações e usar essas informações para\nresolver problemas. Até agora, pudemos agrupar e manipular dados usando tipos de\ndados simples, tais como: <em>numbers</em>, <em>booleans</em> e <em>strings</em>. Com eles, criamos\numa série de programas simples. Também aprendemos a modificar o fluxo desses\nprogramas, através de estruturas repetitivas, condicionais e funcionais, as\nquais nos permitiram criar produtos um pouco mais complexos. No entanto, nossos\nprogramas tinham muitas limitações porque operávamos apenas com <strong>tipos de dados\nsimples</strong>.</p>\n<p>Para resolver problemas mais complexos, precisamos ser capazes de agrupar e\nmanipular dados de uma maneira mais interessante. Felizmente, um ambiente\nJavaScript nos permite alcançar isso através de <em>arrays</em> e <em>objects</em>.</p>\n<h2 id=\"por-que-precisamos-de-matrizes\">Por que precisamos de matrizes?</h2>\n<p>Digamos, por exemplo, que queiramos representar um conjunto de números: <code>2</code>,\n<code>3</code>, <code>5</code>, <code>7</code> e <code>11</code></p>\n<p>Uma opção para representar isso seria:</p>\n<pre><code class=\"language-javascript\">const firstNumber = 2;\nconst secondNumber = 3;\nconst thirdNumber = 5;\nconst fourthNumber = 7;\n</code></pre>\n<p>Esta lista é bem estranha e trabalhosa. Isso implica em ter uma variável para\ncada elemento da nossa lista. Quando, na realidade, devemos ter apenas uma única\nvariável que \"contenha\" cada um. Imagine se você quiser uma lista de 1.000\nelementos!</p>\n<p>Outra opção - mais criativa - seria usar uma <code>string</code>. Afinal, as <em>strings</em>\npodem ser de qualquer tamanho, e então podemos colocar muita informação nelas.\nPoderíamos usar uma cadeia de caracteres (_string_) com os números\nintercalados por um espaço, como esta:</p>\n<pre><code class=\"language-javascript\">const listOfNumbers = '2 3 5 7 11';\n</code></pre>\n<p>No entanto, isso também é complicado. Teríamos que encontrar uma maneira de\nextrair cada elemento de uma <code>string</code> (considerando os espaços entre eles) e\ntambém teríamos que convertê-los para <code>number</code> a fim de acessar e manipular cada\num dos números.</p>\n<p>Felizmente, o Javascript fornece um tipo específico de dados para armazenar\nsequência de valores. É chamado de <code>array</code> (arranjo ou vetor/matriz) e é\nescrito como uma lista de valores entre colchetes, separados por vírgulas.</p>\n<pre><code class=\"language-javascript\">const listOfNumbers = [2, 3, 5, 7, 11];\n</code></pre>\n<p>Os arranjos são extremamente úteis para agrupar e manipular dados. É como quando\nvamos ao mercado e temos nossa \"lista de compras\". Poderíamos ter uma folha de\npapel para cada item que queremos comprar. Por exemplo, poderíamos ter uma folha\nde papel que diz \"ovos\", outra folha que diz \"pão\" e outra folha que diz\n\"laranjas\". No entanto, a maioria das pessoas escreve todos os itens para\ncomprar em <strong>uma única folha de papel</strong>.</p>\n<h2 id=\"acessando-informações-de-um-vetor\">Acessando informações de um vetor</h2>\n<p>Antes de começar, vamos gerar uma pequena função utilitária, que nos permite\ndescobrir se duas <code>strings</code> são iguais.</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n\nconsole.assert(equal([1, 2, 3], [1, 2, 3]));\nconsole.assert(!equal([1, 2, 3], ['a', 'b', 'c']));\nconsole.assert(!equal([1, 2, 3], [3, 2, 1]));\n</code></pre>\n<p>Para obter um elemento de um <code>array</code>, a notação com colchetes é usada contento o\níndice (_index_) do elemento desejado. Veja o exemplo abaixo:</p>\n<pre><code class=\"language-javascript\">const listOfNumbers = [2, 3, 5, 7, 11];\n\nconsole.assert(listOfNumbers[1] === 3);\nconsole.assert(listOfNumbers[1 - 1] === 2);\n</code></pre>\n<p>Índice é o número que corresponde a (ou coincide com) a posição em que o valor\né armazenado. Assim como nas <em>strings</em>, o primeiro elemento de um vetor está no\níndice <code>0</code>, o segundo no <code>1</code>, o terceiro no <code>2</code>, e assim por diante. É por isso\nque acessar o índice <code>1 - 1</code> no vetor acima, ou seja, devolve o número <code>2</code>\n(índice <code>0</code>).</p>\n<p><img src=\"https://user-images.githubusercontent.com/211721/40194836-51eebf22-59d1-11e8-8de8-8b29feb3bbf7.png\" alt=\"image\"></p>\n<p>Se você não tem experiência em programação, habituar-se com essa convenção pode\nlevar algum tempo. Mas a contagem baseada em zero tem uma longa tradição em\ntecnologia e, desde que a convenção seja seguida consistentemente (o que é\nfeito em JavaScript), ela funciona bem. Tome muito cuidado, pois esse descuido\né a causa de muitos <em>bugs</em>, inclusive para programadores um pouco mais\nexperientes.</p>\n<h2 id=\"definindo-ou-alterando-os-elementos-de-um-array\">Definindo ou alterando os elementos de um array</h2>\n<p>Podemos usar os índices entre colchetes para definir, alterar ou adicionar\nelementos a um vetor. Por exemplo, para substituir o primeiro elemento de\n<code>arraylistOfNumbers</code>  pelo número 1, poderíamos fazer o seguinte:</p>\n<pre><code class=\"language-js\">listOfNumbers[0] = 1;\n\nconsole.assert(\n  equal(listOfNumbers, [1, 3, 5, 7, 11]),\n);\n</code></pre>\n<p>Também podemos usar os índices entre colchetes para adicionar elementos em um\nvetor. Por exemplo, para adicionar o número 13 ao <em>array</em> <code>listOfNumbers</code>,\nfaríamos assim:</p>\n<pre><code class=\"language-js\">listOfNumbers[5] = 13;\n\nconsole.assert(\n  equal(listOfNumbers, [1, 3, 5, 7, 11, 13]),\n);\n</code></pre>\n<p>Ainda, podemos criar um vetor vazio e definir cada elemento individualmente a\nseguir, da seguinte maneira:</p>\n<pre><code class=\"language-js\">const listOfNumbers = [];\nlistOfNumbers[0] = 2;\nlistOfNumbers[1] = 3;\nlistOfNumbers[2] = 5;\nlistOfNumbers[3] = 7;\nlistOfNumbers[4] = 11;\n\nconsole.assert(\n  equal(listOfNumbers, [2, 3, 5, 7, 11]),\n);\n</code></pre>\n<h2 id=\"misturando-tipos-de-dados-em-arrays\">Misturando tipos de dados em <em>arrays</em></h2>\n<p>Os elementos de um <em>array</em> não precisam ser todos do mesmo tipo de dados.\nPodemos, por exemplo, ter um vetor que contenha um <code>number</code> (o número 3), uma\n<code>string</code> (\"dinossauros\") e outro <code>number</code> (o número 3627.5):</p>\n<pre><code class=\"language-js\">const mixedArray = [3, 'hola mundo', 3627.5];\nconsole.assert(mixedArray[0] === 3);\nconsole.assert(mixedArray[1] === 'hola mundo');\nconsole.assert(mixedArray[2] === 3627.5);\n</code></pre>\n<p>Podemos até ter um vetor dentro de outro (algo que muitas pessoas chamam de\nmatriz ou <em>array</em>  de 2 dimensões). Por exemplo, para organizar os dados de\nperguntas e respostas de um questionário, podemos usar um arranjo no qual cada\nelemento é um vetor com dois elementos: uma pergunta e uma resposta.</p>\n<pre><code class=\"language-js\">let questions = [\n  ['Em quantos países a Laboratoria opera?', 4],\n  ['Qual é a capital do Peru?', 'Lima'],\n  ['O que é dança chilena típica?', 'Cueca'],\n  ['Qual é a moeda do México?', 'Peso']\n];\n</code></pre>\n<p>Para acessar elementos individuais dos vetores internos, basta adicionar um novo\npar de colchetes com o índice correspondente. Por exemplo, para obter a resposta\npara a pergunta \"Qual é a moeda do México?\", nós faríamos:</p>\n<pre><code class=\"language-js\">questions = [\n  ['Em quantos países a Laboratoria opera?', 4],\n  ['Qual é a capital do Peru?', 'Lima'],\n  ['O que é dança chilena típica?', 'Cueca'],\n  ['Qual é a moeda do México?', 'Peso']\n];\nconsole.assert(questions[3][1] === 'Peso');\n</code></pre>\n<p>Vamos fazer de novo passo a passo:</p>\n<pre><code class=\"language-js\">questions = [\n  ['Em quantos países a Laboratoria opera?', 4],\n  ['Qual é a capital do Peru?', 'Lima'],\n  ['O que é dança chilena típica?', 'Cueca'],\n  ['Qual é a moeda do México?', 'Peso']\n];\nconst quest3 = questions[3];\nconsole.assert(\n  equal(quest3, ['Qual é a moeda do México?', 'Peso']),\n);\nconsole.assert(quest3[1] === 'Peso');\n</code></pre>\n<p>A seguir Juliana nos explica os conceitos principais de <code>arrays</code> con um\nexemplo:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/joMxeCl6ppg?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 0,
          "durationString": "1h"
        },
        "02-array-proto": {
          "title": "Array Proto",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<p>Arranjos (_arrays_) em JavaScript são implementados como objetos, o que pode\nsoar um pouco estranho mas, em JavaScript, quase todos os tipos de dados\n(<code>number</code>, <code>string</code>, <code>array</code>, ...) são implementados como objetos e, como tal,\nos valores desses <em>tipos</em> terão uma série de <em>métodos</em> e <em>propriedades</em>\nassociados a eles. Tecnicamente, eles herdam esses <em>métodos</em> e <em>propriedades</em> de\num <em>protótipo</em>.</p>\n<p>Neste curso, nós não vamos aprofundar o mecanismo de <em>herança prototipal</em>  em\nJavaScript, mas precisamos ao menos saber que qualquer arranjo (_array_) em\nJavaScript é uma <em>instância</em> do construtor (_constructor_) <code>Array</code> e,\nportanto, herda todos os <em>métodos</em> e <em>propriedades</em> definidos em\n<code>Array.prototype</code>.</p>\n<p>A propósito, todos os objetos têm um <em>protótipo</em> e, por exemplo, é através\ndesses protótipos que nossas <code>strings</code> magicamente possuem uma <em>propriedade</em>\n<code>length</code> ou um método <code>toLowerCase()</code>. São herdados de <code>String.prototype.length</code>\ne <code>String.prototype.toLowerCase</code>, respectivamente.</p>\n<p>Voltando aos arranjos... Vejamos um exemplo: abra o console do navegador e\ndigite <code>[].</code>. Deve aparecer automaticamente uma lista com todos os <em>métodos</em> e\n<em>propriedades</em> de nossa matriz vazia (<code>[]</code>):</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/37485550-c77d636e-2859-11e8-8b76-21fc103691e5.png\" alt=\"Métodos e propriedades de &quot;Array&quot; no console do\nnavegador\"></p>\n<h2 id=\"propriedades-de-arrayprototype\">Propriedades de <code>Array.prototype</code></h2>\n<p>Antes de começar, vamos recordar como era a nossa função que nos permite\ncomparar arrays.</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n</code></pre>\n<p>A única propriedade dos arranjos que nos interessa por agora é\n<code>Array.prototype.length</code>, uma propriedade de somente leitura que sempre nos\nmostra o comprimento atual do <em>array</em>. Por exemplo:</p>\n<pre><code class=\"language-js\">console.assert([].length === 0);\nconsole.assert(['a'].length === 1);\nconsole.assert([true, 0, 'foo'].length === 3);\n</code></pre>\n<h2 id=\"métodos-comuns-de-arrayprototype\">Métodos comuns de <code>Array.prototype</code></h2>\n<p>O JavaScript nos fornece um monte de métodos para manipular arranjos, iterá-los,\netc. Não se preocupe em memorizar a lista completa (não acredito que alguém\nsaiba de cabeça), pois você irá se familiarizar com eles conforme o uso,\naprendendo a tirar vantagem de seus benefícios. Lembre-se de que sempre há a\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">documentação\noficial</a>\ndisponível. Faça uso dela, é a melhor referência.</p>\n<p>Vejamos alguns métodos comuns dos arranjos.</p>\n<h3 id=\"arrayprototypepush\">Array.prototype.push</h3>\n<p>O método <code>Array.prototype.push</code> recebe um valor, adiciona-o ao final do arranjo\npelo qual foi chamado e devolve o novo tamanho (ou comprimento).</p>\n<pre><code class=\"language-js\">let arr = [0, 0, 0];\nconsole.assert(arr.length === 3);\nconsole.assert(typeof arr.push === 'function');\nconsole.assert(arr.push(1) === 4);\nconsole.assert(equal(arr, [0, 0, 0, 1]));\n</code></pre>\n<p>Nesse caso, a funcionalidade do método <code>push()</code> pode ser replicada usando uma\nsimples atribuição:</p>\n<pre><code class=\"language-js\">arr = [0, 0, 0];\nconsole.assert(arr.length === 3);\narr[arr.length] = 1;\nconsole.assert(equal(arr, [0, 0, 0, 1]));\n</code></pre>\n<p>A maior diferença é uma questão de semântica e estilo/paradigma. Talvez pareça\nsutil, mas acredite, mais tarde você verá o quanto é valioso. Na programação,\nmuitas vezes veremos que há mais de uma maneira de fazer as coisas, o que pode\ncriar confusão e frustração mas, no final das contas, isso é o reflexo de\ndiferentes maneiras de pensar no código, e cada uma tem o seu lugar. Por\nexemplo, na <em>programação funcional</em> que veremos mais adiante no Bootcamp,\nfavorecemos o uso de múltiplos processadores aplicando argumentos a funções e\nevitando a atribuição e mudança de valores. Neste contexto, e em particular no\nJavaScript moderno, veremos que os métodos dos arranjos nos permitirão escrever\ncódigos mais expressivos, concisos e, por que não, bonitos.</p>\n<h3 id=\"arrayprototypepop\">Array.prototype.pop</h3>\n<p>Esse método não recebe nenhum argumento. Ele simplesmente extrai o último\nelemento do arranjo e o retorna (modificando o arranjo diretamente - _in\nplace_).</p>\n<pre><code class=\"language-js\">arr = ['oh', 'my', 'god'];\nconsole.assert(arr.pop() === 'god');\nconsole.assert(equal(arr, ['oh', 'my']));\n</code></pre>\n<h3 id=\"arrayprototypeslice\">Array.prototype.slice</h3>\n<p><code>Array.prototype.slice</code> cria um novo arranjo através de uma cópia superficial _\n_(_shallow copy_) de uma parte do arranjo pelo qual é invocado. Ele recebe\ndois argumentos: <code>begin</code> e <code>end</code> que indicam qual parte do arranjo queremos\ncopiar (sem incluir o elemento de índice <code>end</code>).</p>\n<p>O arranjo original não é modificado.</p>\n<p>Execute os seguintes exemplos no console do navegador para ver como o método\n<code>slice()</code> se comporta.</p>\n<pre><code class=\"language-js\">arr = [3, 2, 1];\nconsole.assert(\n  equal(arr.slice(0), [3, 2, 1]),\n);\nconsole.assert(\n  equal(arr.slice(1), [2, 1]),\n);\nconsole.assert(\n  equal(arr.slice(2), [1]),\n);\nconsole.assert(\n  equal(arr.slice(-1), [1]),\n);\nconsole.assert(\n  equal(arr.slice(0, 1), [3]),\n);\nconsole.assert(\n  equal(arr, [3, 2, 1]),\n);\n</code></pre>\n<h3 id=\"arrayprototypeindexof\">Array.prototype.indexOf</h3>\n<p>O método <code>indexOf()</code> recebe um valor e devolve o índice do vetor que contém esse\nvalor se ele for encontrado, ou <code>-1</code> caso contrário.  Esse método é usado com\nmuita frequência para verificar se um arranjo contém um determinado valor\n(basta que o resultado seja diferente de <code>-1</code>).</p>\n<pre><code class=\"language-js\">arr = ['foo', 'bar', 'baz'];\nconsole.assert(arr.indexOf('foo') === 0);\nconsole.assert(arr.indexOf('hmmm') === -1);\n</code></pre>\n<h2 id=\"propriedades-e-métodos-herdados-de-objectprototype\">Propriedades e métodos herdados de Object.prototype</h2>\n<p>Vale ressaltar que os arranjos também herdam de <code>Object.prototype</code>\nindiretamente, assim como todos os demais objetos em JavaScript. Então nossos\narranjos também terão métodos como <code>toString()</code> ou <code>isPrototypeOf()</code>. Na próxima\nunidade (e cursos posteriores), vamos explorar <code>Object.prototype</code>, o conceito\nde <em>herança</em> e a cadeia de protótipos.</p>\n<p>Nesta leitura, vimos alguns exemplos de métodos que todos os arranjos possuem,\nmas há muitos mais. Recomendamos que você explore a documentação oficial do\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\" target=\"_blank\">Array.prototype no MDN</a>;\nlá, você pode ver todos os <em>métodos</em> e <em>propriedades</em> disponíveis e suas\ninterfaces (quais argumentos eles esperam, o que devolvem, ...).</p>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">Array na\nMDN</a></li>\n<li><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\">Object.prototype na\nMDN</a></li>\n</ul>\n",
          "order": 1,
          "durationString": "30min"
        },
        "03-filter-map-sort-reduce": {
          "title": "`filter`, `map`,`sort` e`reduce`",
          "type": "read",
          "format": "self-paced",
          "duration": 45,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=M0sG5YTRiII",
              "id": "M0sG5YTRiII"
            }
          ],
          "body": "<p>Já vimos alguns dos métodos de uso mais comuns para arrays, porém\n<code>Array.prototype</code> nos fornece vários outros métodos úteis.</p>\n<p>Para facilitar um pouco a vida, os dividimos da seguinte forma:</p>\n<ul>\n<li>para agregar e retirar elementos: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>,\n<code>splice</code> e <code>concat</code>.</li>\n<li>para buscar elementos dentro da array: <code>indexOf</code>, <code>lastIndexOf</code>, <code>includes</code>,\n<code>find</code>, <code>findIndex</code> e <code>filter</code>.</li>\n<li>para transformar arrays: <code>map</code>,<code>reduce</code>, <code>sort</code>, <code>reverse</code>, <code>split</code> e <code>join</code>.</li>\n</ul>\n<p>Agora focaremos nos quatro métodos que consideramos mais utilizados: <code>filter</code>,\n<code>map</code> <code>sort</code> e <code>reduce</code>.</p>\n<p>Para conhecer em detalhes cada um destes métodos, visite a documentação no\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">MDN</a></p>\n<p>Vamos usar uma função para comparar arrays.</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n</code></pre>\n<p>Abaixo segue  um conjunto de dados que utilizaremos como exemplo para nossos\nexemplos :)</p>\n<pre><code class=\"language-js\">const inventors = [\n  {\n    first: 'Ada',\n    last: 'Lovelace',\n    year: 1815,\n    passed: 1852,\n  },\n  {\n    first: 'Lise',\n    last: 'Meitner',\n    year: 1878,\n    passed: 1968,\n  },\n  {\n    first: 'Caroline',\n    last: 'Herschel',\n    year: 1750,\n    passed: 1848,\n  },\n  {\n    first: 'Hanna',\n    last: 'Hammarström',\n    year: 1829,\n    passed: 1909,\n  },\n];\n</code></pre>\n<p>Agora que já temos o que precisamos, vamos começar.</p>\n<h2 id=\"arrayprototypefilter\"><code>Array.prototype.filter</code></h2>\n<p><code>filter</code> nos permite obter um subconjunto dos elementos da array, desde que\ncumpram uma certa condição.</p>\n<pre><code class=\"language-js\">const deadBeforeSXX = inventors.filter(inventor =&gt; (inventor.passed &lt; 1900));\nconsole.assert(\n  equal(deadBeforeSXX, [\n    {\n      first: 'Ada',\n      last: 'Lovelace',\n      year: 1815,\n      passed: 1852,\n    },\n    {\n      first: 'Caroline',\n      last: 'Herschel',\n      year: 1750,\n      passed: 1848,\n    },\n  ]),\n);\n</code></pre>\n<p>A seguir o Dani explica mais a fundo como o método <code>filter</code> funciona:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/M0sG5YTRiII?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h2 id=\"arrayprototypemap\"><code>Array.prototype.map</code></h2>\n<p><code>map</code> nos permite visitar cada um dos elementos da array, coletando neste\nprocesso um valor de retorno para cada elemento visitado.</p>\n<p>Por exemplo, supondo que queremos uma lista de nomes e sobrenomes da nossa base\nde dados.</p>\n<pre><code class=\"language-js\">const fullNames = inventors.map(inventor =&gt; `${inventor.first} ${inventor.last}`);\nconsole.assert(\n  equal(fullNames, [\n    'Ada Lovelace',\n    'Lise Meitner',\n    'Caroline Herschel',\n    'Hanna Hammarström',\n  ]),\n);\n</code></pre>\n<p>Ou quantos anos cada uma viveu.</p>\n<pre><code class=\"language-js\">const yearAlive = inventors.map(({\n  first, last, passed, year,\n}) =&gt; [`${first} ${last}`, passed - year]);\nconsole.assert(\n  equal(yearAlive, [\n    ['Ada Lovelace', 37],\n    ['Lise Meitner', 90],\n    ['Caroline Herschel', 98],\n    ['Hanna Hammarström', 80],\n  ]),\n);\n</code></pre>\n<h2 id=\"arrayprototypesort\"><code>Array.prototype.sort</code></h2>\n<p>Ordena a array <em>in place</em> (ou seja, dentro da própria array).</p>\n<pre><code class=\"language-js\">let arr = [1, 2, 15];\narr.sort();\nconsole.assert(equal(arr, [1, 15, 2]));\n</code></pre>\n<p>Se olhar bem, vai perceber que algo está estranho: por padrão, <code>sort</code> ordena a\narray convertendo todos os elementos em <code>strings</code>. Por isso <code>15</code> apareceu antes\nde <code>2</code>.</p>\n<p>Como resolvemos isso?</p>\n<pre><code class=\"language-js\">const compareNumeric = (a, b) =&gt; {\n  if (a &gt; b) return 1;\n  if (a === b) return 0;\n  /* if (a &lt; b) */\n  return -1;\n};\narr = [1, 2, 15];\narr.sort(compareNumeric);\nconsole.assert(\n  equal(arr, [1, 2, 15]),\n);\n</code></pre>\n<p>Vejamos alguns exemplos mais interessantes.</p>\n<h3 id=\"ordenar-de-maior-a-menor-segundo-o-ano-de-nascimento\">Ordenar de maior a menor segundo o ano de nascimento</h3>\n<pre><code class=\"language-js\">let ordered = inventors.sort((a, b) =&gt; {\n  if (a.year &gt; b.year) {\n    return 1;\n  }\n  return -1;\n});\nconsole.assert(equal(\n  ordered,\n  [\n    {\n      first: 'Caroline',\n      last: 'Herschel',\n      year: 1750,\n      passed: 1848,\n    },\n    {\n      first: 'Ada',\n      last: 'Lovelace',\n      year: 1815,\n      passed: 1852,\n    },\n    {\n      first: 'Hanna',\n      last: 'Hammarström',\n      year: 1829,\n      passed: 1909,\n    },\n    {\n      first: 'Lise',\n      last: 'Meitner',\n      year: 1878,\n      passed: 1968,\n    },\n  ],\n));\n</code></pre>\n<p>Poderíamos escrever a função de comparação usando um operador ternário, obtendo\no mesmo resultado.</p>\n<pre><code class=\"language-js\">ordered = inventors.sort((a, b) =&gt; (a.year &gt; b.year ? 1 : -1));\n</code></pre>\n<h3 id=\"ordenar-segundo-a-quantidade-de-anos-vividos\">Ordenar segundo a quantidade de anos vividos</h3>\n<pre><code class=\"language-js\">const moreYearsAlive = inventors.sort((a, b) =&gt; {\n  const last = a.passed - a.year;\n  const next = b.passed - b.year;\n  return last &gt; next ? -1 : 1;\n});\nconsole.assert(equal(\n  moreYearsAlive,\n  [\n    {\n      first: 'Caroline',\n      last: 'Herschel',\n      year: 1750,\n      passed: 1848,\n    },\n    {\n      first: 'Lise',\n      last: 'Meitner',\n      year: 1878,\n      passed: 1968,\n    },\n    {\n      first: 'Hanna',\n      last: 'Hammarström',\n      year: 1829,\n      passed: 1909,\n    },\n    {\n      first: 'Ada',\n      last: 'Lovelace',\n      year: 1815,\n      passed: 1852,\n    },\n  ],\n));\n</code></pre>\n<h2 id=\"arrayprototypereduce\"><code>Array.prototype.reduce</code></h2>\n<p>Quando queremos iterar uma array, usamos <code>forEach</code>. Agora, para fazer o mesmo,\nmas coletando uma lista de valores, com um valor de cada elemento, usamos <code>map</code>.</p>\n<p><code>reduce</code> é similar ao <code>map</code>, porém o utilizamos para iterar uma array e obter um\n<strong>único valor</strong> que contenha um consolidado de todos os elementos.</p>\n<p>Façamos o seguinte:</p>\n<pre><code class=\"language-js\">let initial = 0;\nconst value = arr.reduce((previousValue, item, index, array) =&gt; {\n  /* aqui tu codigo */\n}, initial);\n</code></pre>\n<p>Onde</p>\n<ul>\n<li><p><code>item</code> -- é o elemento atual que estamos iterando</p>\n</li>\n<li><p><code>index</code> -- é o índice atual</p>\n</li>\n<li><p><code>array</code> -- é a array atual</p>\n</li>\n</ul>\n<p>Até aqui tudo mais ou menos normal, porém adicionamos um parâmetro:</p>\n<ul>\n<li><code>valorPrevio</code> -- que é o resultado da chamada anterior da função. Na primeira\nchamada da função, o valor de <code>valorPrevio</code> é <code>inicial</code>.</li>\n</ul>\n<p>Vejamos um exemplo simples: somar todos os elementos de uma array.</p>\n<pre><code class=\"language-js\">arr = [1, 2, 3, 4, 5];\ninitial = 0;\nconst arrSum = arr.reduce((sum, current) =&gt; sum + current, initial);\nconsole.assert(arrSum === 15);\n</code></pre>\n<p>Aqui usamos a variante mais comum de <code>reduce</code>, que só utiliza os dois primeiros\nparâmetros.</p>\n<p>Vejamos com mais detalhes o que está acontecendo:</p>\n<ol>\n<li>Na primeira chamada, <code>soma</code> tem o valor de <code>inicial</code> (o segundo argumento de\n<code>reduce</code>), que é <code>0</code>. E <code>atual</code> é o primeiro elemento da array, que é <code>1</code>.\nEntão o resultado é <code>1</code>.</li>\n<li>Na segunda chamada, <code>sum === 1</code>, somamos o segundo elemento da array (<code>2</code>) e\ndevolvemos.</li>\n<li>Na terceira chamada, <code>sum === 3</code> e somamos ao terceiro elemento (<code>3</code>) ...</li>\n</ol>\n<p>E assim segue:</p>\n<p><img src=\"https://user-images.githubusercontent.com/211721/40194646-c88004e4-59d0-11e8-8ba2-71e6afeef003.png\" alt=\"image\"></p>\n<p>Se passarmos para uma tabela, onde cada fila representa uma chamada da função\nsobre o próximo elemento da array:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>soma</code></th>\n<th><code>atual</code></th>\n<th><code>resultado</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>primeira chamada</td>\n<td><code>0</code></td>\n<td><code>1</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td>segunda chamada</td>\n<td><code>1</code></td>\n<td><code>2</code></td>\n<td><code>3</code></td>\n</tr>\n<tr>\n<td>terceira chamada</td>\n<td><code>3</code></td>\n<td><code>3</code></td>\n<td><code>6</code></td>\n</tr>\n<tr>\n<td>quarta chamada</td>\n<td><code>6</code></td>\n<td><code>4</code></td>\n<td><code>10</code></td>\n</tr>\n<tr>\n<td>quinta chamada</td>\n<td><code>10</code></td>\n<td><code>5</code></td>\n<td><code>15</code></td>\n</tr>\n</tbody></table>\n<p>Como podemos ver, o resultado da chamada anterior se converte no primeiro\nparâmetro da próxima chamada.</p>\n<p>Finalizando, apenas vamos mencionar que <code>reduceRight</code> faz a mesma coisa, porém\ncomeçando pelo final da array.</p>\n<p>Vejamos agora dois exemplos:</p>\n<h3 id=\"calcular-a-quantidade-de-anos-vividos-de-todas-as-inventoras-somados\">Calcular a quantidade de anos vividos de todas as inventoras, somados</h3>\n<pre><code class=\"language-js\">const totalYears = inventors.reduce(\n  (total, inventor) =&gt; total + (inventor.passed - inventor.year),\n  0,\n);\nconsole.assert(totalYears === 305);\n</code></pre>\n<h3 id=\"somar-a-quantidade-de-ocorrências-de-cada-meio-de-transporte\">Somar a quantidade de ocorrências de cada meio de transporte</h3>\n<p>Vamos mudar de base de dados.</p>\n<pre><code class=\"language-js\">const transportationData = [\n  'car', 'car', 'truck', 'truck', 'bike', 'walk',\n  'car', 'van', 'bike', 'walk', 'car', 'van',\n  'car', 'truck',\n];\n\nconst transportReduceFn = (obj, item) =&gt; {\n  const result = {\n    ...obj,\n  };\n  /* si es la primera vez que encuentro este medio de transporte */\n  if (!obj[item]) {\n    result[item] = 0; /* inicializo en 0 */\n  }\n  result[item] += 1;\n  return result;\n};\n\nlet transportation = transportationData.reduce(transportReduceFn, {});\nconsole.assert(equal(\n  transportation,\n  {\n    car: 5, truck: 3, bike: 2, walk: 2, van: 2,\n  },\n));\n</code></pre>\n<h3 id=\"agora-a-mesma-coisa-porém-agregando-um-novo-meio-de-transporte-pogobol\">Agora a mesma coisa, porém agregando um novo meio de transporte (pogobol)</h3>\n<pre><code class=\"language-js\">transportationData.push('pogostick');\ntransportation = transportationData.reduce(transportReduceFn, {});\nconsole.assert(equal(\n  transportation,\n  {\n    car: 5, truck: 3, bike: 2, walk: 2, van: 2, pogostick: 1,\n  },\n));\n</code></pre>\n<hr>\n<p>Nesta leitura vimos alguns exemplos de métodos de arrays que, uma vez que se\naprende a dominá-los, são super úteis.</p>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">Array no\nMDN</a></li>\n<li><a href=\"https://javascript.info/array-methods\" target=\"_blank\">Array methods em javascript.info (em\ninglês)</a></li>\n</ul>\n",
          "order": 2,
          "durationString": "45min"
        },
        "04-guided-exercises": {
          "title": "Exercícios Livres",
          "type": "practice",
          "format": "self-paced",
          "duration": 80,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=U3CGMyjzlvM",
              "id": "U3CGMyjzlvM"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=ErS_iFp8eFc&t",
              "id": "ErS_iFp8eFc"
            },
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=AJCWkJgTCj0",
              "id": "AJCWkJgTCj0"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Entender, através de casos práticos, como aplicar os conceitos de <code>funções</code> e\n<code>arrays</code> para a resolução de problemas.</li>\n</ul>\n<hr>\n<h2 id=\"enunciados\">Enunciados</h2>\n<p>Como já fizemos anteriormente, agora é hora de aplicar os conceitos aprendidos\npara resolver problemas.</p>\n<p>A seguir, você verá vários problemas a serem resolvidos. Tente resolvê-los\nprimeiro por conta própria. Mais abaixo, você encontrará as soluções da nossa\nequipe. Depois que você tentar, compare suas soluções a nossa.</p>\n<h3 id=\"1-reverse\">1. Reverse</h3>\n<p>Crie uma função que inverta a ordem dos elementos de um vetor (_array_).\nComplete este desafio de duas maneiras: em uma, o vetor invertido é um <strong>novo</strong>\nvetor; na segunda, modifique o <strong>mesmo</strong> <em>array</em> que é fornecido como argumento\n(_in place_). Pesquise o método\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\"><code>reverse</code></a>.\nO que você pode concluir?</p>\n<h3 id=\"2-search\">2. Search</h3>\n<p>Crie uma função que procure um elemento em um vetor, retorne sua posição\n(índice - _index_) e imprima o valor no console. Dica: use o <a href=\"https://en.wikipedia.org/wiki/Linear_search\" target=\"_blank\">algoritmo de\nbusca linear</a>. Nesse exercício,\nintroduzimos o conceito de <strong>algoritmo</strong>. Para entender o que é um algoritmo,\nconfira os seguintes vídeos:</p>\n<ul>\n<li><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/U3CGMyjzlvM?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></li>\n<li><a href=\"https://pt.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/v/what-are-algorithms\" target=\"_blank\">Kahn Academy: O que é um algoritmo e por que você deve se importar com\nisso?</a></li>\n</ul>\n<h2 id=\"soluções\">Soluções</h2>\n<p>A seguir, Rafael lhe explicará como ele resolveu cada um dos exercícios\nanteriores.</p>\n<h3 id=\"1-reverse-1\">1. Reverse</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ErS_iFp8eFc?t=&amp;autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n<h3 id=\"2-search-1\">2. Search</h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/AJCWkJgTCj0?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "1.3h"
        },
        "05-quiz": {
          "questions": [
            {
              "title": "1) Os elementos de uma matriz devem ser todos do mesmo tipo de dados",
              "description": "",
              "answers": [
                "Verdadeiro",
                "Falso"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) Para que os Arrays são úteis?",
              "description": "",
              "answers": [
                "Para deixar de usar <em>strings</em>",
                "Para iniciar seu programa",
                "Para não mais usar variáveis",
                "Para agrupar e manipular dados"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "3) No código a seguir",
              "description": "<pre><code class=\"language-javascript\">const listOfNumbers = [2, 3, 4, 5, 6];\n</code></pre><p>Qual o resultado que obtenho quando executo <code>console.log(listOfNumbers[3])</code>?</p>",
              "answers": [
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>",
                "<code>6</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "4) No código a seguir",
              "description": "<pre><code class=\"language-javascript\">const listOfNumbers = [2, 3, 4, 5, 6];\n</code></pre><p>se escrevermos <code>listOfNumbers[3] = 1</code>, qual seria o vetor resultante?</p>",
              "answers": [
                "<code>[1, 3, 4, 5, 6]</code>",
                "<code>[2, 1, 4, 5, 6]</code>",
                "<code>[2, 3, 1, 5, 6]</code>",
                "<code>[2, 3, 4, 1, 6]</code>",
                "<code>[2, 3, 4, 5, 1]</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) No código a seguir",
              "description": "<pre><code class=\"language-javascript\">const questions = [\n  ['¿En cuántos países opera Laboratoria?', 3],\n  ['¿Cuál es la capital de Perú?', 'Lima'],\n  ['¿Cuál es baile típico Chileno?', 'Cueca'],\n  ['¿Cuál es la moneda de México?', 'Peso'],\n];\n</code></pre><p>como obtenho o elemento <code>Lima</code>?</p>",
              "answers": [
                "<code>console.log(questions[1][1])</code>",
                "<code>console.log(questions[1][2])</code>",
                "<code>console.log(questions[2][1])</code>",
                "<code>console.log(questions[2][2])</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "6) Os elementos de um Array são armazenados em propriedades",
              "description": "",
              "answers": [
                "Verdadeiro",
                "Falso"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "7) Qual é o resultado do código a seguir?",
              "description": "<pre><code class=\"language-javascript\">const coders = ['michelle', 'lourdes', 'ruth'];\ncoders.push('alexandra');\n</code></pre>",
              "answers": [
                "<code>['alexandra']</code>",
                "<code>['alexandra','michelle', 'lourdes', 'ruth']</code>",
                "<code>['michelle', 'lourdes', 'ruth', 'alexandra']</code>",
                "Faltam argumentos."
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) Qual é o resultado do código abaixo?",
              "description": "<pre><code class=\"language-javascript\">const coders = ['michelle', 'lourdes', 'ruth'];\nconst removed = coders.shift();\n\nconsole.log('Elemento eliminado: ' + removed);\n</code></pre>",
              "answers": [
                "Elemento excluído: <code>michelle</code>",
                "Elemento excluído: <code>lourdes</code>",
                "Elemento excluído: <code>ruth</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "9) Qual é o resultado do código seguinte?",
              "description": "<pre><code class=\"language-javascript\">const courses = ['Intro JS', 'Intro UX', 'UX master'];\ncourses.unshift('JS master', 'English for Developers');\n\nconsole.log(courses.length);\n</code></pre>",
              "answers": [
                "<code>['JS master', 'English for Developers']</code>",
                "<code>['Intro JS', 'Intro UX', 'UX master', 'JS master', 'English for Developers']</code>",
                "<code>3</code>",
                "<code>5</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "10) Qual é o resultado do código a seguir?",
              "description": "<pre><code class=\"language-javascript\">const listOfNumbers = [];\n\nfor (let i = 0; i &lt;= 5; i += 1) {\n  listOfNumbers.push(i);\n}\n\nlistOfNumbers.pop();\n\nconsole.log(listOfNumbers.length);\n</code></pre>",
              "answers": [
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "11) No código a seguir, preencha a lacuna",
              "description": "<pre><code class=\"language-javascript\">const course1 = 'Intro JS, ' ;\nconst course2 = 'Intro UX, ';\nconst course3 = 'UX master.';\n\nconst allCourses = ___________(course2, course3);\n\nconsole.log(allCourses);\n// → Intro JS, Intro UX, UX master.\n</code></pre>",
              "answers": [
                "<code>concat{course1}</code>",
                "<code>course1.concat</code>",
                "<code>concat(course1).</code>",
                "<code>concat + course1 +</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "12) Qual é o resultado código abaixo?",
              "description": "<pre><code class=\"language-javascript\">const courses = ['Intro JS', 'Intro UX', 'UX master', 'JS master'];\ncourses.pop();\ncourses.push('English for Developers');\ncourses.indexOf('English for Developers');\n</code></pre>",
              "answers": [
                "<code>1</code>",
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "13) No código a seguir, qual método devo usar para obter o resultado solicitado?",
              "description": "<pre><code class=\"language-javascript\">const courses = ['Intro JS', 'Intro UX', 'UX master', 'JS master'];\ncourses.___________;\n\n// → 'Intro JS,Intro UX,UX master,JS master'\n</code></pre>",
              "answers": [
                "<code>concat()</code>",
                "<code>join()</code>",
                "<code>string()</code>",
                "<code>unshift()</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "14) No código a seguir, qual seria o resultado?",
              "description": "<pre><code class=\"language-javascript\">const coders = ['michelle', 'lourdes', 'ruth', 'mariana'];\n\nif (coders.length &lt; 3) {\n  coders.push('alejandra');\n  coders.slice(1, 2);\n} else {\n  coders.pop();\n  coders.slice(1, 3);\n}\n</code></pre>",
              "answers": [
                "<code>['alejandra']</code>",
                "<code>['lourdes']</code>",
                "<code>['lourdes', 'ruth']</code>",
                "<code>['lourdes', 'ruth', 'mariana']</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "15) Qual seria o resultado do código a seguir?",
              "description": "<pre><code class=\"language-javascript\">const listOfNumbers = [2, 12, 5, 8, 16, 12, 8];\nlistOfNumbers.lastIndexOf(12);\n</code></pre>",
              "answers": [
                "<code>1</code>",
                "<code>2</code>",
                "<code>5</code>",
                "<code>6</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "16) No código seguinte, preencha os espaços para que a ordem dos elementos do vetor seja invertida",
              "description": "<pre><code class=\"language-javascript\">const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (let i = 0; i &lt; array.length; i += 1) {\n  const item = array._________();\n  array._________(i, 0, item);\n}\n\nconsole.log(array);\n// → [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n</code></pre>",
              "answers": [
                "<code>pop</code> - <code>slice</code>",
                "<code>pop</code> - <code>splice</code>",
                "<code>push</code> - <code>slice</code>",
                "<code>push</code> - <code>splice</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "17) No código a seguir, o que devemos comparar? Complete as lacunas",
              "description": "<pre><code class=\"language-javascript\">const search = (array, element) =&gt; {\n  for (let i = 0; i &lt; array.length; i += 1) {\n    if (_________ === _________) {\n      return i;\n    }\n  }\n};\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7], 2));\n// → 1\n</code></pre>",
              "answers": [
                "<code>array[i]</code> - <code>element</code>",
                "<code>length</code> - <code>array[i]</code>",
                "<code>i</code> - <code>element[i]</code>",
                "<code>element[i]</code> - <code>array</code>"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz",
          "type": "quiz",
          "format": "self-paced",
          "duration": 20,
          "order": 4,
          "durationString": "20min"
        },
        "06-practice": {
          "title": "Exercícios",
          "type": "practice",
          "format": "self-paced",
          "duration": 180,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>A seguir, apresentaremos uma série de desafios para você completar enquanto\ncoloca seus conhecimentos à prova.</li>\n</ul>\n",
          "exercises": {
            "01-compute-average-length-of-words": {
              "title": "computeAverageLengthOfWords",
              "body": "<p>Escreva uma função <code>computeAverageLengthOfWords</code> que receba duas strings e\ndevolva o comprimento médio de ambas as strings.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const output = computeAverageLengthOfWords('code', 'programs');\nconsole.log(output); // --&gt; 6\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# computeAverageLengthOfWords\n\nEscribe una función 'computeAverageLengthOfWords' que recibe dos strings y\ndevuelve el promedio de la longitud de ambos strings.\n\nEjemplo de entrada:\n\n```js\nconst output = computeAverageLengthOfWords('code', 'programs');\nconsole.log(output); // --> 6\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29tcHV0ZUF2ZXJhZ2VMZW5ndGhPZldvcmRzLmpz": "const computeAverageLengthOfWords = (word1, word2) => {\n  // your code here\n\n};\n\nmodule.exports = computeAverageLengthOfWords;\n"
                },
                "c29sdXRpb24=": {
                  "Y29tcHV0ZUF2ZXJhZ2VMZW5ndGhPZldvcmRzLmpz": "const computeAverageLengthOfWords = (word1, word2) => (word1.length + word2.length) / 2;\n\nmodule.exports = computeAverageLengthOfWords;\n"
                },
                "dGVzdA==": {
                  "Y29tcHV0ZUF2ZXJhZ2VMZW5ndGhPZldvcmRzLnNwZWMuanM=": "const { assert } = require('chai');\nconst computeAverageLengthOfWords = require('../solution/computeAverageLengthOfWords');\n\ndescribe('computeAverageLengthOfWords()', () => {\n  it('debería regresar  4, para  (\"A\", \"kamnjhs\")', () => {\n    assert.deepEqual(computeAverageLengthOfWords('A', 'kamnjhs'), 4);\n  });\n\n  it('debería regresar  12, para (\"Lalalalala\", \"Kekekekekekeke\")', () => {\n    assert.deepEqual(computeAverageLengthOfWords('Lalalalala', 'Kekekekekekeke'), 12);\n  });\n\n  it('debería regresar 5, para (\"Kemal\", \"Kemal\")', () => {\n    assert.deepEqual(computeAverageLengthOfWords('Kemal', 'Kemal'), 5);\n  });\n});\n"
                }
              }
            },
            "02-get-nth-element": {
              "title": "getNthElement",
              "body": "<p>Escreva uma função chamada <code>getNthElement</code>.</p>\n<p>Dado um <em>array</em> e um inteiro, <code>getNthElement</code> devolve o valor de acordo com o\ninteiro dado, dentro do array fornecido.</p>\n<p>Notas:</p>\n<ul>\n<li>Se o array tiver um comprimento de <code>0</code>, ele deve retornar  <code>undefined</code>.</li>\n</ul>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const output = getNthElement([1, 3, 5], 1);\nconsole.log(output); // --&gt; 3\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getNthElement\n\nEscribe una función llamada `getNthElement`.\n\nDado un arreglo y un entero, `getNthElement` devuelve el valor según el entero\ndado, dentro del arreglo dado.\n\nNotas:\n\n- Si el arreglo tiene una longitud de 0, debería devolver' `undefined`'.\n\nEjemplo de entrada:\n\n```js\nconst output = getNthElement([1, 3, 5], 1);\nconsole.log(output); // --> 3\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TnRoRWxlbWVudC5qcw==": "const getNthElement = (array, n) => {\n  // your code here\n};\n\nmodule.exports = getNthElement;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TnRoRWxlbWVudC5qcw==": "const getNthElement = (array, n) => array[n];\n\nmodule.exports = getNthElement;\n"
                },
                "dGVzdA==": {
                  "Z2V0TnRoRWxlbWVudC5zcGVjLmpz": "const { assert } = require('chai');\nconst getNthElement = require('../solution/getNthElement');\n\ndescribe('getNthElement()', () => {\n  it('debería regresar undefined, para array vacío', () => {\n    const arr = [];\n    assert.deepEqual(getNthElement(arr, 1), undefined);\n  });\n\n  it('debería regresar 2, para getNthElement([1, 2, 3, 4, 5, 6, 100, 7, 9], 1)', () => {\n    const arr = [1, 2, 3, 4, 5, 6, 100, 7, 9];\n    assert.deepEqual(getNthElement(arr, 1), 2);\n  });\n});\n"
                }
              }
            },
            "03-convert-double-space-to-single": {
              "title": "convertDoubleSpaceToSingle",
              "body": "<p>Escreva uma função chamada <code>convertDoubleSpaceToSingle</code>.</p>\n<p>Dada uma <em>string</em>,  <code>convertDoubleSpaceToSingle</code> devolve essa cadeia de\ncaracteres com os espaços duplos convertidos em espaços simples.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const output = convertDoubleSpaceToSingle(\"string  with  double  spaces\");\nconsole.log(output); // --&gt; \"string with double spaces\"\n</code></pre>\n<p>Notas:</p>\n<ul>\n<li>Para resolver esse problema, você deve estar familiarizado com <code>String.split</code>e\n<code>Array.join</code>.</li>\n</ul>\n",
              "files": {
                "UkVBRE1FLm1k": "# convertDoubleSpaceToSingle\n\nEscribe una función llamada `convertDoubleSpaceToSingle`.\n\nDada una cadena, `convertDoubleSpaceToSingle` devuelve la cadena pasada en\ncadena con todos los espacios dobles convertidos a espacios simples.\n\nEjemplo de entrada:\n\n```js\nconst output = convertDoubleSpaceToSingle('string  with  double  spaces');\nconsole.log(output); // --> \"string with double spaces\"\n\n```\n\nNotas:\n\n- Para hacer este problema, debes estar familiarizada con `String.split`, y `Array.join`.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29udmVydERvdWJsZVNwYWNlVG9TaW5nbGUuanM=": "const convertDoubleSpaceToSingle = (str) => {\n  // your code here\n};\n\nmodule.exports = convertDoubleSpaceToSingle;\n"
                },
                "c29sdXRpb24=": {
                  "Y29udmVydERvdWJsZVNwYWNlVG9TaW5nbGUuanM=": "const convertDoubleSpaceToSingle = str => str.split('  ').join(' ');\n\nmodule.exports = convertDoubleSpaceToSingle;\n"
                },
                "dGVzdA==": {
                  "Y29udmVydERvdWJsZVNwYWNlVG9TaW5nbGUuc3BlYy5qcw==": "const { assert } = require('chai');\nconst convertDoubleSpaceToSingle = require('../solution/convertDoubleSpaceToSingle');\n\ndescribe('convertDoubleSpaceToSingle()', () => {\n  it(\"debería regresar '', para string vacío\", () => {\n    assert.deepEqual(convertDoubleSpaceToSingle(''), '');\n  });\n\n  it(\"debería regresar 'Messi is the greatest player ever', para 'Messi  is  the  greatest  player  ever'\", () => {\n    const output = convertDoubleSpaceToSingle('Messi  is  the  greatest  player  ever');\n    assert.deepEqual(output, 'Messi is the greatest player ever');\n  });\n});\n"
                }
              }
            },
            "04-are-valid-credentials": {
              "title": "areValidCredentials",
              "body": "<p>Escreva uma função chamada <code>areValidCredentials</code>.</p>\n<p>Dado um nome e uma senha, <code>areValidCredentials</code> retorna <code>true</code>se o nome contiver\nmais do que 3 caracteres e a senha, pelo menos 8 caracteres. Caso contrário,\nretorna <code>false</code>.</p>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = areValidCredentials('Ritu', 'mylongpassword');\nconsole.log(output); // --&gt; true\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# areValidCredentials\n\nEscribe una función llamada `areValidCredentials`.\n\nDando un nombre y una contraseña, `areValidCredentials`, devuelve `true` si el\nnombre es superior a 3 caracteres, Y, la contraseña tiene al menos 8 caracteres\nde longitud. De lo contrario, devuelve `false`.\n\nEjemplo de entrada:\n\n```js\nconst output = areValidCredentials('Ritu', 'mylongpassword');\nconsole.log(output); // --> true\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YXJlVmFsaWRDcmVkZW50aWFscy5qcw==": "const areValidCredentials = (name, password) => {\n  // your code here\n};\n\nmodule.exports = areValidCredentials;\n"
                },
                "c29sdXRpb24=": {
                  "YXJlVmFsaWRDcmVkZW50aWFscy5qcw==": "const areValidCredentials = (name, password) => (name.length > 3 && password.length >= 8);\n\nmodule.exports = areValidCredentials;\n"
                },
                "dGVzdA==": {
                  "YXJlVmFsaWRDcmVkZW50aWFscy5zcGVjLmpz": "const { assert } = require('chai');\nconst areValidCredentials = require('../solution/areValidCredentials');\n\ndescribe('areValidCredentials()', () => {\n  it('debería regresar true cuando las credenciales son válidas', () => {\n    const output = areValidCredentials('Kemal', 'testtesttest');\n    assert.deepEqual(output, true);\n  });\n\n  it('debería regresar false cuando el nombre es demasiado corto', () => {\n    const output = areValidCredentials('K', 'mylongpassword');\n    assert.deepEqual(output, false);\n  });\n\n  it('debería regresar false cuando la contraseña es demasiado corta', () => {\n    const output = areValidCredentials('Kemal', 'aah');\n    assert.deepEqual(output, false);\n  });\n});\n"
                }
              }
            },
            "05-find-pair-for-sum": {
              "title": "findPairForSum",
              "body": "<p>Dada uma lista de inteiros não negativos e o resultado desejado de uma soma,\nencontre dois números na lista cuja soma seja o resultado desejado.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const pair = findPairForSum([3, 34, 4, 12, 5, 2], 9);\nconsole.log(pair); // --&gt; [4, 5]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# findPairForSum\n\nDada una lista de números enteros no negativos y una suma objetivo, encuentra un\npar de números que sumen a la suma objetivo.\n\nEjemplo de entrada:\n\n```js\nconst pair = findPairForSum([3, 34, 4, 12, 5, 2], 9);\nconsole.log(pair); // --> [4, 5]\n\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFBhaXJGb3JTdW0uanM=": "const findPairForSum = (array, number) => {\n\n};\n\nmodule.exports = findPairForSum;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFBhaXJGb3JTdW0uanM=": "const findPairForSum = (array, number) => {\n  for (let i = 0; i < array.length; i += 1) {\n    for (let j = i + 1; j < array.length; j += 1) {\n      if ((array[i] + array[j]) === number) {\n        return [array[i], array[j]];\n      }\n    }\n  }\n\n  return [];\n};\n\nmodule.exports = findPairForSum;\n"
                },
                "dGVzdA==": {
                  "ZmluZFBhaXJGb3JTdW0uc3BlYy5qcw==": "const { assert } = require('chai');\nconst findPairForSum = require('../solution/findPairForSum');\n\ndescribe('findPairForSum()', () => {\n  it('debería regresar [0, 1], para ([0, 8, 1, 7, 19, 12, 4], 1)', () => {\n    const pair = findPairForSum([0, 8, 1, 7, 19, 12, 4], 1);\n    const hasil = [0, 1];\n\n    assert.deepEqual(pair, hasil);\n  });\n\n  it('debería regresar [2, 11], para  ([1, 2, 6, 8, 11, 10], 13)', () => {\n    const pair = findPairForSum([1, 2, 6, 8, 11, 10], 13);\n    const hasil = [2, 11];\n\n    assert.deepEqual(pair, hasil);\n  });\n\n\n  it('debería regresar [4, 5], para ([3, 34, 4, 12, 5, 2], 9)', () => {\n    const pair = findPairForSum([3, 34, 4, 12, 5, 2], 9);\n    const hasil = [4, 5];\n\n    assert.deepEqual(pair, hasil);\n  });\n});\n"
                }
              }
            },
            "06-filter-odd-elements": {
              "title": "filterOddElements",
              "body": "<p>Escreva uma função chamada <code>filterOddElements</code>.</p>\n<p>Dado um vetor de números, <code>filterOddElements</code> retorna um <em>array</em> que contém\napenas os números ímpares do vetor fornecido.</p>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = filterOddElements([1, 2, 3, 4, 5]);\nconsole.log(output); // --&gt; [1, 3, 5]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# filterOddElements\n\nEscribe una función llamada \"filterOddElements\".\n\nDado un array de números,\"filterOddElements\" devuelve un array que contiene sólo\nlos números impares del array dado.\n\nEjemplo:\n\n```js\nconst output = filterOddElements([1, 2, 3, 4, 5]);\nconsole.log(output); // --> [1, 3, 5]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmlsdGVyT2RkRWxlbWVudHMuanM=": "const filterOddElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = filterOddElements;\n"
                },
                "c29sdXRpb24=": {
                  "ZmlsdGVyT2RkRWxlbWVudHMuanM=": "const filterOddElements = (arr) => {\n  const ret = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] % 2 !== 0) {\n      ret.push(arr[i]);\n    }\n  }\n\n  return ret;\n};\n\nmodule.exports = filterOddElements;\n"
                },
                "dGVzdA==": {
                  "ZmlsdGVyT2RkRWxlbWVudHMuc3BlYy5qcw==": "const { assert } = require('chai');\nconst filterOddElements = require('../solution/filterOddElements');\n\ndescribe('filterOddElements()', () => {\n  it('Prueba: ([2, 4, 6, 8, 10]) => []', () => {\n    const arr = [2, 4, 6, 8, 10];\n    const hasil = [];\n    const call = filterOddElements(arr);\n\n    assert.deepEqual(call, hasil);\n  });\n\n  it('Prueba: ([69, 10, 6, 8, 22]) => [69]', () => {\n    const arr = [69, 10, 6, 8, 22];\n    const hasil = [69];\n    const call = filterOddElements(arr);\n\n    assert.deepEqual(call, hasil);\n  });\n\n\n  it('Prueba: ([1, 2, 3, 4, 5]) => [1, 3, 5]', () => {\n    const arr = [1, 2, 3, 4, 5];\n    const hasil = [1, 3, 5];\n    const call = filterOddElements(arr);\n\n    assert.deepEqual(call, hasil);\n  });\n});\n"
                }
              }
            },
            "07-find-shortest-word-among-mixed-elements": {
              "title": "findShortestWordAmongMixedElements",
              "body": "<p>Escreva uma função chamada \"findShortestWordAmongMixedElements\".</p>\n<p>Dado um <em>array</em>, \"findShortestWordAmongMixedElements\" devolve a string mais\ncurta encontrada no <em>array</em> especificado.</p>\n<p>Notas:</p>\n<ul>\n<li>Se houver repetições, você deve optar pelo primeiro elemento que aparece no\n<em>array</em> especificado.</li>\n<li>Assuma que o array pode ter outros valores além de <em>strings</em>.</li>\n<li>Se o <em>array</em> informado estiver vazio, ela deve devolver uma <em>string</em> vazia.</li>\n<li>Se o <em>array</em> informado não contiver <em>strings</em>, ela deverá retornar uma\n<em>string</em> vazia.</li>\n</ul>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = findShortestWordAmongMixedElements([4, 'two', 2, 'three']);\nconsole.log(output); // --&gt; 'two'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# findShortestWordAmongMixedElements\n\nEscribe una función llamada \"findShortestWordAmongMixedElements\".\n\nDado un array, \"findShortestWordAmongMixedElements\" devuelve la cadena más corta\ndentro del array dado.\n\nNotas:\n\n- Si hay vínculos, debería devolver el primer elemento que aparezca en el array\n  dado.\n- Espera que el array tenga otros valores además de las cuerdas.\n- Si el array dado está vacío, debería devolver una cadena vacía.\n- Si el array dado no contiene cadenas, debería devolver una cadena vacía.\n\nEjemplo:\n\n```js\nconst output = findShortestWordAmongMixedElements([4, 'two', 2, 'three']);\nconsole.log(output); // --> 'two'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFNob3J0ZXN0V29yZEFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const findShortestWordAmongMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = findShortestWordAmongMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFNob3J0ZXN0V29yZEFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const findShortestWordAmongMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  let min = 10000;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'string') {\n      if (arr[i].length < min) {\n        min = arr[i];\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return '';\n  }\n\n  return arr[index];\n};\n\nmodule.exports = findShortestWordAmongMixedElements;\n"
                },
                "dGVzdA==": {
                  "ZmluZFNob3J0ZXN0V29yZEFtb25nTWl4ZWRFbGVtZW50cy5zcGVjLmpz": "const { assert } = require('chai');\nconst findShortestWordAmongMixedElements = require('../solution/findShortestWordAmongMixedElements');\n\ndescribe('findShortestWordAmongMixedElements()', () => {\n  it(\"debería regresar '', para  ([3, 4, 5])\", () => {\n    const output = findShortestWordAmongMixedElements([3, 4, 5]);\n    assert.deepEqual(output, '');\n  });\n\n  it(\"debería regresar '', para ([])\", () => {\n    const output = findShortestWordAmongMixedElements([]);\n    assert.deepEqual(output, '');\n  });\n\n\n  it(\"debería regresar 'yes', para ([1, 2, 3, 'yes', 'one')\", () => {\n    const output = findShortestWordAmongMixedElements([1, 2, 3, 'yes', 'one']);\n    assert.deepEqual(output, 'yes');\n  });\n\n\n  it(\"debería regresar 'two', para [4, 'two', 2, 'three'])\", () => {\n    const output = findShortestWordAmongMixedElements([4, 'two', 2, 'three']);\n    assert.deepEqual(output, 'two');\n  });\n});\n"
                }
              }
            },
            "08-find-smallest-number-among-mixed-elements": {
              "title": "findSmallestNumberAmongMixedElements",
              "body": "<p>Escreva uma função chamada \"findSmallestNumberAmongMixedElements\".</p>\n<p>Dado um array de elementos mistos, \"findSmallestNumberAmongMixedElements\"\ndevolve o menor número dentro do <em>array</em> especificado.</p>\n<p>Notas:</p>\n<ul>\n<li>Se o <em>array</em> estiver vazio, ela deve devolver <code>0</code>.</li>\n<li>Se  o <em>array</em> não contiver números, deverá devolver <code>0</code>.</li>\n</ul>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = findSmallestNumberAmongMixedElements([4, 'lincoln', 9, 'octopus']);\nconsole.log(output); // --&gt; 4\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# findSmallestNumberAmongMixedElements\n\nEscribe una función llamada \"findSmallestNumberAmongMixedElements\".\n\nDado un arreglo de elementos mixtos, \"findSmallestNumberAmongMixedElements\"\ndevuelve el número más pequeño dentro del arreglo dado.\n\nNotas:\n\n- Si el arreglo está vacío, debería devolver 0.\n- Si el arreglo no contiene números, debería devolver 0.\n\nEjemplo:\n\n```js\nconst output = findSmallestNumberAmongMixedElements([4, 'lincoln', 9, 'octopus']);\nconsole.log(output); // --> 4\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFNtYWxsZXN0TnVtYmVyQW1vbmdNaXhlZEVsZW1lbnRzLmpz": "const findSmallestNumberAmongMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = findSmallestNumberAmongMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFNtYWxsZXN0TnVtYmVyQW1vbmdNaXhlZEVsZW1lbnRzLmpz": "const findSmallestNumberAmongMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  let min = 10000;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'number') {\n      if (arr[i] < min) {\n        min = arr[i];\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return '';\n  }\n\n  return arr[index];\n};\n\nmodule.exports = findSmallestNumberAmongMixedElements;\n"
                },
                "dGVzdA==": {
                  "ZmluZFNtYWxsZXN0TnVtYmVyQW1vbmdNaXhlZEVsZW1lbnRzLnNwZWMuanM=": "const { assert } = require('chai');\nconst findSmallestNumberAmongMixedElements = require('../solution/findSmallestNumberAmongMixedElements');\n\ndescribe('findSmallestNumberAmongMixedElements()', () => {\n  it(\"debería regresar 0, para  (['cat', 'is', 'cute', 'as', 'fuck'])\", () => {\n    const output = findSmallestNumberAmongMixedElements(['cat', 'is', 'cute', 'as', 'fuck']);\n    assert.equal(output, 0);\n  });\n\n  it('debería regresar 0, para ([])', () => {\n    const output = findSmallestNumberAmongMixedElements([]);\n    assert.equal(output, 0);\n  });\n\n\n  it(\"debería regresar 1, para ([10, 9, 'Yes', 'why', 1, 'ahh'])\", () => {\n    const output = findSmallestNumberAmongMixedElements([10, 9, 'Yes', 'why', 1, 'ahh']);\n    assert.equal(output, 1);\n  });\n});\n"
                }
              }
            },
            "09-get-longest-word-of-mixed-elements": {
              "title": "getLongestWordOfMixedElements",
              "body": "<p>Escreva uma função chamada \"getLongestWordOfMixedElements\".</p>\n<p>Dado um array de tipos mistos, \"getLongestWordOfMixedElements\" devolve a\n<em>string</em> mais longa do <em>array</em> especificado.</p>\n<p>Notas:</p>\n<ul>\n<li>Se o <em>array</em> estiver vazio, ela deve devolver uma <em>string</em> vazia (<code>\"\"</code>).</li>\n<li>Se o <em>array</em> não contiver cadeias de texto, ela deverá devolver uma <em>string</em>\nvazia.</li>\n</ul>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = getLongestWordOfMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --&gt; 'word'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getLongestWordOfMixedElements\n\nEscribe una función llamada \"getLongestWordOfMixedElements\".\n\nDado un arreglo de tipos mixtos, \"getLongestWordOfMixedElements\" devuelve la\ncadena más larga del arreglo dado.\n\nNotas:\n\n- Si el arreglo está vacío, debería devolver una cadena vacía (\"\").\n- Si el arreglo no contiene cadenas de texto, debería devolver una cadena vacía.\n\nEjemplo:\n\n```js\nconst output = getLongestWordOfMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --> 'word'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TG9uZ2VzdFdvcmRPZk1peGVkRWxlbWVudHMuanM=": "const getLongestWordOfMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = getLongestWordOfMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TG9uZ2VzdFdvcmRPZk1peGVkRWxlbWVudHMuanM=": "const getLongestWordOfMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  let max = 0;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'string') {\n      if (arr[i].length > max) {\n        max = arr[i].length;\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return '';\n  }\n\n  return arr[index];\n};\n\nmodule.exports = getLongestWordOfMixedElements;\n"
                },
                "dGVzdA==": {
                  "Z2V0TG9uZ2VzdFdvcmRPZk1peGVkRWxlbWVudHMuc3BlYy5qcw==": "const { assert } = require('chai');\nconst getLongestWordOfMixedElements = require('../solution/getLongestWordOfMixedElements');\n\ndescribe('getLongestWordOfMixedElements()', () => {\n  it(\"debería regresar '', para  ([3, 4, 5, 6, 7])\", () => {\n    const output = getLongestWordOfMixedElements([3, 4, 5, 6, 7]);\n    assert.deepEqual(output, '');\n  });\n\n  it(\"debería regresar '', para ([])\", () => {\n    const output = getLongestWordOfMixedElements([]);\n    assert.deepEqual(output, '');\n  });\n\n\n  it(\"debería regresar 'word', para ([3, 'word', 5, 'up', 3, 1])\", () => {\n    const output = getLongestWordOfMixedElements([3, 'word', 5, 'up', 3, 1]);\n    assert.deepEqual(output, 'word');\n  });\n});\n"
                }
              }
            },
            "10-get-largest-number-among-mixed-elements": {
              "title": "getLargestNumberAmongMixedElements",
              "body": "<p>Escreva uma função chamada \"getLargestNumberAmongMixedElements\".</p>\n<p>Dado qualquer vetor, \"getLargestNumberAmongMixedElements\" retorna o maior número\ndo vetor especificado.</p>\n<p>Notas:</p>\n<ul>\n<li>O <em>array</em> pode conter valores de um tipo diferente de <code>number</code>.</li>\n<li>Se o <em>array</em> estiver vazio, ela deve retornar <code>0</code>.</li>\n<li>Se o <em>array</em> não contiver números, deverá retornar <code>0</code>.</li>\n</ul>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = getLargestNumberAmongMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --&gt; 5\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getLargestNumberAmongMixedElements\n\nEscriba una función llamada \"getLargestNumberAmongMixedElements\".\n\nDado cualquier arreglo, \"getLargestNumberAmongMixedElements\" devuelve el mayor\nnúmero en el arreglo dado.\n\nNotas:\n\n- El arreglo puede contener valores de un tipo distinto a los números.\n- Si el arreglo está vacío, debería devolver 0.\n- Si el arreglo no contiene números, debería devolver 0.\n\nEjemplo:\n\n```js\nconst output = getLargestNumberAmongMixedElements([3, 'word', 5, 'up', 3, 1]);\nconsole.log(output); // --> 5\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TGFyZ2VzdE51bWJlckFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const getLargestNumberAmongMixedElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = getLargestNumberAmongMixedElements;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TGFyZ2VzdE51bWJlckFtb25nTWl4ZWRFbGVtZW50cy5qcw==": "const getLargestNumberAmongMixedElements = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n\n  let max = 0;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'number') {\n      if (arr[i] > max) {\n        max = arr[i];\n        index = i;\n      }\n    }\n  }\n\n  if (index === -1) {\n    return 0;\n  }\n\n  return arr[index];\n};\n\nmodule.exports = getLargestNumberAmongMixedElements;\n"
                },
                "dGVzdA==": {
                  "Z2V0TGFyZ2VzdE51bWJlckFtb25nTWl4ZWRFbGVtZW50cy5zcGVjLmpz": "const { assert } = require('chai');\nconst getLargestNumberAmongMixedElements = require('../solution/getLargestNumberAmongMixedElements');\n\ndescribe('getLargestNumberAmongMixedElements()', () => {\n  it(\"debería regresar 0, para  (['wat', 'no', true, true])\", () => {\n    const output = getLargestNumberAmongMixedElements(['wat', 'no', true, true]);\n    assert.deepEqual(output, 0);\n  });\n\n  it('debería regresar 0, para ([])', () => {\n    const output = getLargestNumberAmongMixedElements([]);\n    assert.deepEqual(output, 0);\n  });\n\n\n  it(\"debería regresar 5, para ([3, 'word', 5, 'up', 3, 1])\", () => {\n    const output = getLargestNumberAmongMixedElements([3, 'word', 5, 'up', 3, 1]);\n    assert.deepEqual(output, 5);\n  });\n});\n"
                }
              }
            },
            "11-compute-sum-of-all-elements": {
              "title": "computeSumOfAllElements",
              "body": "<p>Escreva uma função chamada <code>computeSumOfAllElements</code>.</p>\n<p>Dado um <em>array</em> de números, <code>computeSumOfAllElements</code> devolve a soma de todos os\nelementos do <em>array</em> dado.</p>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = computeSumOfAllElements([1, 2, 3]);\nconsole.log(output); // --&gt; 6\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# computeSumOfAllElements\n\nEscribe una función llamada `computeSumOfAllElements`.\n\nDado un array de números, `computeSumOfAllElements` devuelve la suma de todos\nlos elementos del array dado.\n\nEjemplo:\n\n```js\nconst output = computeSumOfAllElements([1, 2, 3]);\nconsole.log(output); // --> 6\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29tcHV0ZVN1bU9mQWxsRWxlbWVudHMuanM=": "const computeSumOfAllElements = (arr) => {\n  // your code here\n};\n\nmodule.exports = computeSumOfAllElements;\n"
                },
                "c29sdXRpb24=": {
                  "Y29tcHV0ZVN1bU9mQWxsRWxlbWVudHMuanM=": "const computeSumOfAllElements = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'number') {\n      sum += arr[i];\n    }\n  }\n\n  return sum;\n};\n\nmodule.exports = computeSumOfAllElements;\n"
                },
                "dGVzdA==": {
                  "Y29tcHV0ZVN1bU9mQWxsRWxlbWVudHMuc3BlYy5qcw==": "const { assert } = require('chai');\nconst computeSumOfAllElements = require('../solution/computeSumOfAllElements');\n\ndescribe('computeSumOfAllElements()', () => {\n  it('debería regresar 0, para  ([1, 2, 3])', () => {\n    const output = computeSumOfAllElements([1, 2, 3]);\n    assert.deepEqual(output, 6);\n  });\n\n  it('debería regresar 169, para ([10, 90, 69])', () => {\n    const output = computeSumOfAllElements([10, 90, 69]);\n\n    assert.deepEqual(output, 169);\n  });\n\n\n  it('debería regresar 28, para ([4, 5, 10, 9])', () => {\n    const output = computeSumOfAllElements([4, 5, 10, 9]);\n    assert.deepEqual(output, 28);\n  });\n});\n"
                }
              }
            },
            "12-compute-sum-between": {
              "title": "computeSumBetween",
              "body": "<p>Escreva uma função chamada \"computeSumBetween\".</p>\n<p>Com 2 inteiros, por exemplo <code>num1</code> e <code>num2</code>, \"computeSumBetween\" devolve a soma\nde todos os números entre eles, começando em <code>num1</code> e excluindo <code>num2</code>.</p>\n<p>Notas:</p>\n<ul>\n<li>A soma entre 1 e 4 é 1 + 2 + 3 = 6.</li>\n<li>Se <code>num2</code> não for maior que <code>num1</code>, ela deve devolver 0.</li>\n</ul>\n<pre><code class=\"language-javascript\">const output = computeSumBetween (2, 5);\nconsole.log (salida); // -&gt; 9\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# computeSumBetween\n\nEscribe una función llamada \"computeSumBetween\".\n\nDado 2 enteros, \"computeSumBetween\" devuelve la suma entre los dos enteros\ndados, comenzando en num1 y excluyendo num2.\n\nNotas:\n\n* La suma entre 1 y 4 es 1 + 2 + 3 = 6.\n* Si num2 no es mayor que num1, debe devolver 0.\n\n```js\nconst output = computeSumBetween (2, 5);\nconsole.log (salida); // -> 9\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29tcHV0ZVN1bUJldHdlZW4uanM=": "const computeSumBetween = (num1, num2) => {\n  // your code here\n};\n\nmodule.exports = computeSumBetween;\n"
                },
                "c29sdXRpb24=": {
                  "Y29tcHV0ZVN1bUJldHdlZW4uanM=": "const computeSumBetween = (num1, num2) => {\n  let sum = 0;\n\n  for (let i = num1; i < num2; i += 1) {\n    sum += i;\n  }\n\n  return sum;\n};\n\nmodule.exports = computeSumBetween;\n"
                },
                "dGVzdA==": {
                  "Y29tcHV0ZVN1bUJldHdlZW4uc3BlYy5qcw==": "const { assert } = require('chai');\nconst computeSumBetween = require('../solution/computeSumBetween');\n\ndescribe('computeSumBetween()', () => {\n  it(\"debería regresar [{a: 1, b: 2, c: true}, {a: 10, b: 20, c: false}], para [[['a', 1], ['b', 2], ['c', true]],[['a', 10], ['b', 20], ['c', false]]]\", () => {\n    const output = computeSumBetween(5, 5);\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar [{firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'}, {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}], para [[['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']],[['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']]]\", () => {\n    const output = computeSumBetween(2, 5);\n\n    assert.deepEqual(output, 9);\n  });\n});\n"
                }
              }
            },
            "13-get-longest-of-three-words": {
              "title": "getLongestOfThreeWords",
              "body": "<p>Escreva uma função chamada <code>getLongestOfThreeWords</code>.</p>\n<p>Com 3 palavras, <code>getLongestOfThreeWords</code> devolve a mais longa das três palavras.</p>\n<p>Notas:</p>\n<ul>\n<li>Se houver um empate, você deve retornar a primeira palavra do empate.</li>\n</ul>\n<pre><code class=\"language-javascript\">const output = getLongestOfThreeWords('estas', 'três', 'palavras');\nconsole.log(output); // -&gt; 'palabras'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getLongestOfThreeWords\n\nEscribe una función llamada `getLongestOfThreeWords`.\n\nDado 3 palabras, `getLongestOfThreeWords` devuelve la más larga de tres\npalabras.\n\nNotas:\n\n- Si hay un empate, debe devolver la primera palabra en el empate.\n\n```js\nconst output = getLongestOfThreeWords('estos', 'tres', 'palabras');\nconsole.log(output); // -> 'estos'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0TG9uZ2VzdE9mVGhyZWVXb3Jkcy5qcw==": "const getLongestOfThreeWords = (word1, word2, word3) => {\n  // your code here\n};\n\nmodule.exports = getLongestOfThreeWords;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0TG9uZ2VzdE9mVGhyZWVXb3Jkcy5qcw==": "const getLongestOfThreeWords = (word1, word2, word3) => {\n  let strLong = word1;\n\n  if (strLong.length < word2.length) {\n    strLong = word2;\n  }\n\n  if (strLong.length < word3.length) {\n    strLong = word3;\n  }\n\n  return strLong;\n};\n\nmodule.exports = getLongestOfThreeWords;\n"
                },
                "dGVzdA==": {
                  "Z2V0TG9uZ2VzdE9mVGhyZWVXb3Jkcy5zcGVjLmpz": "const { assert } = require('chai');\nconst getLongestOfThreeWords = require('../solution/getLongestOfThreeWords');\n\ndescribe('getLongestOfThreeWords()', () => {\n  it(\"debería regresar 'these', para 'these', 'three', 'words'\", () => {\n    const output = getLongestOfThreeWords('these', 'three', 'words');\n\n    assert.deepEqual(output, 'these');\n  });\n\n  it(\"debería regresar 'three', para 'a', 'two', 'three', 'four'\", () => {\n    const output = getLongestOfThreeWords('a', 'two', 'three', 'four');\n\n    assert.deepEqual(output, 'three');\n  });\n});\n"
                }
              }
            },
            "14-find-shortest-of-three-words": {
              "title": "findShortestOfThreeWords",
              "body": "<p>Escreva uma função chamada <code>findShortestOfThreeWords</code>.</p>\n<p>Com 3 <em>strings</em>, <code>findShortestOfThreeWords</code> devolve a <em>string</em> mais curta delas.</p>\n<p>Notas:</p>\n<ul>\n<li>Se houver um empate, você deve retornar a primeira palavra da lista de\nparâmetros.</li>\n</ul>\n<pre><code class=\"language-javascript\">const output = findShortestOfThreeWords('a', 'dos', 'tres');\nconsole.log(output); // -&gt; 'a'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# findShortestOfThreeWords\n\nEscribe una función llamada `findShortestOfThreeWords`.\n\nDado 3 cadenas, `findShortestOfThreeWords` devuelve el más corto de las cadenas\ndadas.\n\nNotas:\n\n- Si hay empate, debe devolver la primera palabra en la lista de parámetros.\n\n```js\nconst = findShortestOfThreeWords('a', 'dos', 'tres');\nconsole.log(salida); // -> 'a'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "ZmluZFNob3J0ZXN0T2ZUaHJlZVdvcmRzLmpz": "const findShortestOfThreeWords = (word1, word2, word3) => {\n  // your code here\n};\n\nmodule.exports = findShortestOfThreeWords;\n"
                },
                "c29sdXRpb24=": {
                  "ZmluZFNob3J0ZXN0T2ZUaHJlZVdvcmRzLmpz": "const findShortestOfThreeWords = (word1, word2, word3) => {\n  let strShort = word1;\n\n  if (strShort.length > word2.length) {\n    strShort = word2;\n  }\n\n  if (strShort.length > word3.length) {\n    strShort = word3;\n  }\n\n  return strShort;\n};\n\nmodule.exports = findShortestOfThreeWords;\n"
                },
                "dGVzdA==": {
                  "ZmluZFNob3J0ZXN0T2ZUaHJlZVdvcmRzLnNwZWMuanM=": "const { assert } = require('chai');\nconst findShortestOfThreeWords = require('../solution/findShortestOfThreeWords');\n\ndescribe('findShortestOfThreeWords()', () => {\n  it(\"debería regresar 'b', para 'yes', 'b', 'a', 'two', 'three', 'four'\", () => {\n    const output = findShortestOfThreeWords('yes', 'b', 'a', 'two', 'three', 'four');\n\n    assert.deepEqual(output, 'b');\n  });\n\n  it(\"debería regresar 'a', para 'a', 'two', 'three'\", () => {\n    const output = findShortestOfThreeWords('a', 'two', 'three');\n\n    assert.deepEqual(output, 'a');\n  });\n});\n"
                }
              }
            },
            "15-calculate-bill-total": {
              "title": "calculateBillTotal",
              "body": "<p>Escreva uma função chamada <code>calculateBillTotal</code>.</p>\n<p>Dado o imposto e a quantia antes da gorjeta de uma refeição,\n<code>calculateBillTotal</code>devolve a quantia total devida depois de impostos e gorjeta.</p>\n<p>Notas:</p>\n<ul>\n<li>Suponha que o imposto sobre vendas seja de 9,5% e a gorjeta seja de 15%.</li>\n<li>NÃO aplique o imposto sobre a gorjeta, apenas sobre a venda.</li>\n</ul>\n<pre><code class=\"language-js\">const output = calculateBillTotal(20);\nconsole.log(output); // -&gt; 24,9\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# calculateBillTotal\n\nEscribe una función llamada `calculateBillTotal`.\n\nDado el pre impuesto y la cantidad antes de propina de una comida,\n`calculateBillTotal` devuelve la cantidad total debida después de impuestos y\npropina.\n\nNotas:\n\n- Piensa que el impuesto de ventas es 9.5% y la propina es 15%.\n- NO inclines el impuesto sobre las ventas, solo sobre la cantidad de propina.\n\n```js\nconst output = calculateBillTotal(20);\nconsole.log(output); // -> 24,9\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y2FsY3VsYXRlQmlsbFRvdGFsLmpz": "const calculateBillTotal = (preTaxAndTipAmount) => {\n  // your code here\n};\n\nmodule.exports = calculateBillTotal;\n"
                },
                "c29sdXRpb24=": {
                  "Y2FsY3VsYXRlQmlsbFRvdGFsLmpz": "module.exports = amount => amount + (amount * 0.095) + (amount * 0.15);\n"
                },
                "dGVzdA==": {
                  "Y2FsY3VsYXRlQmlsbFRvdGFsLnNwZWMuanM=": "const { assert } = require('chai');\nconst calculateBillTotal = require('../solution/calculateBillTotal');\n\ndescribe('calculateBillTotal()', () => {\n  it('debería regresar 62.25, para 50', () => {\n    const preTaxAndTipAmount = 50;\n    const tax = preTaxAndTipAmount * (0.095);\n    const tip = preTaxAndTipAmount * (0.15);\n    const total = preTaxAndTipAmount + tax + tip;\n\n    assert.deepEqual(calculateBillTotal(preTaxAndTipAmount), total);\n  });\n\n  it('debería regresar 24.9, para 20', () => {\n    const preTaxAndTipAmount = 20;\n    const tax = preTaxAndTipAmount * (0.095);\n    const tip = preTaxAndTipAmount * (0.15);\n    const total = preTaxAndTipAmount + tax + tip;\n\n    assert.deepEqual(calculateBillTotal(preTaxAndTipAmount), total);\n  });\n\n  it('debería regresar 41.085, para 33', () => {\n    const preTaxAndTipAmount = 33;\n    const tax = preTaxAndTipAmount * (0.095);\n    const tip = preTaxAndTipAmount * (0.15);\n    const total = preTaxAndTipAmount + tax + tip;\n\n    assert.deepEqual(calculateBillTotal(preTaxAndTipAmount), total);\n  });\n});\n"
                }
              }
            },
            "16-convert-score-to-grade": {
              "title": "convertScoreToGrade",
              "body": "<p>Escreva uma função chamada <code>convertScoreToGrade</code>.</p>\n<p>Dada uma pontuação numérica, <code>convertScoreToGrade</code> devolve uma letra\n(_string_) que representa essa pontuação.</p>\n<p>Notas:</p>\n<ul>\n<li>(100 - 90) -&gt; 'A'</li>\n<li>(89 - 80) -&gt; 'B'</li>\n<li>(79 - 70) -&gt; 'C'</li>\n<li>(69 - 60) -&gt; 'D'</li>\n<li>(59 - 0) -&gt; 'F'</li>\n<li>Se a pontuação dada for maior que 100 ou menor que 0, você deve retornar\n'INVALID SCORE'.</li>\n</ul>\n<pre><code class=\"language-javascript\">const output = convertScoreToGrade(91);\nconsole.log(output); // -&gt; 'A'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# convertScoreToGrade\n\nEscribe una función llamada `convertScoreToGrade`.\n\nDada una puntuación, `convertScoreToGrade` devuelve una cadena que representa el\ngrado de letra correspondiente a la puntuación dada.\n\nNotas:\n\n- (100 - 90) -> 'A'\n- (89 - 80) ->' B '\n- (79 - 70) -> 'C'\n- (69 - 60) -> 'D'\n- (59 - 0) -> 'F'\n- Si la puntuación dada es mayor que 100 o menor que 0, debe devolver\n  'PUNTUACION INVALIDA'.\n\n```js\nconst output = convertScoreToGrade(91);\nconsole.log(output); // -> 'A'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29udmVydFNjb3JlVG9HcmFkZS5qcw==": "const convertScoreToGrade = (score) => {\n  // your code here\n};\n\nmodule.exports = convertScoreToGrade;\n"
                },
                "c29sdXRpb24=": {
                  "Y29udmVydFNjb3JlVG9HcmFkZS5qcw==": "const convertScoreToGrade = (score) => {\n  let str;\n\n  switch (true) {\n    case ((score <= 100) && (score >= 90)):\n      str = 'A';\n      break;\n    case ((score <= 89) && (score >= 80)):\n      str = 'B';\n      break;\n    case ((score <= 79) && (score >= 70)):\n      str = 'C';\n      break;\n    case ((score <= 69) && (score >= 60)):\n      str = 'D';\n      break;\n    case ((score <= 59) && (score >= 0)):\n      str = 'F';\n      break;\n    default:\n      str = 'PUNTUACION INVALIDA';\n      break;\n  }\n  return str;\n};\n\nmodule.exports = convertScoreToGrade;\n"
                },
                "dGVzdA==": {
                  "Y29udmVydFNjb3JlVG9HcmFkZS5zcGVjLmpz": "const { assert } = require('chai');\nconst convertScoreToGrade = require('../solution/convertScoreToGrade');\n\ndescribe('convertScoreToGrade()', () => {\n  it(\"debería regresar 'PUNTUACION INVALIDA', para 102\", () => {\n    const output = convertScoreToGrade(102);\n\n    assert.deepEqual(output, 'PUNTUACION INVALIDA');\n  });\n\n  it(\"debería regresar 'F', para 59\", () => {\n    const output = convertScoreToGrade(59);\n\n    assert.deepEqual(output, 'F');\n  });\n\n  it(\"debería regresar 'C', para 79\", () => {\n    const output = convertScoreToGrade(79);\n\n    assert.deepEqual(output, 'C');\n  });\n\n  it(\"debería regresar 'A', para 91\", () => {\n    const output = convertScoreToGrade(91);\n\n    assert.deepEqual(output, 'A');\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "3h"
        },
        "07-requiz": {
          "questions": [
            {
              "title": "1) No exemplo a seguir, o array  mixedArray apresenta um erro de sintaxe",
              "description": "<pre><code class=\"language-javascript\">const mixedArray = [3, oi mundo, 627.5];\n</code></pre>",
              "answers": [
                "Verdadeiro",
                "Falsa"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "2) Qual das seguintes opções NÃO é um método?",
              "description": "",
              "answers": [
                "<code>push</code>",
                "<code>concat</code>",
                "<code>length</code>",
                "<code>lastIndexOf</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "3) Considere o código abaixo",
              "description": "<pre><code class=\"language-javascript\">const listOfNumbers = [1, 2, 3, 4, 5, 6];\n</code></pre><p>Que resultado obtenho ao executar <code>console.log(listOfNumbers[6])</code>?</p>",
              "answers": [
                "<code>''</code>",
                "<code>4</code>",
                "<code>5</code>",
                "<code>6</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                4
              ]
            },
            {
              "title": "4) No código a seguir",
              "description": "<pre><code class=\"language-javascript\">const listOfNumbers = [1, 2, 3, 4, 5, 6];\n</code></pre><p>como ficaria o <em>array</em> se executarmos <code>listOfNumbers[3] = 'hola'</code>?</p>",
              "answers": [
                "<code>[1, 2, 'hola', 4, 5, 6]</code>",
                "<code>[1, 2, 3, 'hola', 5, 6]</code>",
                "<code>[1, 2, , 4, 5, 6]</code>",
                "<code>[1, 2, 3, , 5, 6]</code>",
                "<code>undefined</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "5) No código a seguir",
              "description": "<pre><code class=\"language-javascript\">const questions = [\n  ['¿En cuántos países opera Laboratoria?', 3],\n  ['¿Cuál es la capital de Perú?', 'Lima'],\n  ['¿Cuál es baile típico Chileno?', 'Cueca'],\n  ['¿Cuál es la moneda de México?', 'Peso']\n];\n</code></pre><p>como obtenho o elemento <code>Peso</code>?</p>",
              "answers": [
                "<code>console.log(questions[1][3])</code>",
                "<code>console.log(questions[2][4])</code>",
                "<code>console.log(questions[3][1])</code>",
                "<code>console.log(questions[4][2])</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) No exemplo a seguir, qual método devo usar para obter o resultado do comentário de código?",
              "description": "<pre><code class=\"language-javascript\">let courses = ['Intro JS', 'Intro UX', 'UX master'];\nlet removed = courses.__________;\n\nconsole.log('Elemento eliminado: ' + removed);\n// → Elemento eliminado: Intro JS\n</code></pre>",
              "answers": [
                "<code>pop()</code>",
                "<code>push()</code>",
                "<code>shift()</code>",
                "<code>unshift()</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "7) No exemplo a seguir, quais dos seguintes métodos você poderia usar para obter o resultado solicitado? Você pode escolher mais de uma opção",
              "description": "<pre><code class=\"language-javascript\">let courses = ['Intro JS', 'Intro UX', 'UX master'];\ncourses.__________('JS master', 'English for Developers');\n\nconsole.log(courses.length);\n// → 5\n</code></pre>",
              "answers": [
                "<code>pop()</code>",
                "<code>push()</code>",
                "<code>shift()</code>",
                "<code>unshift()</code>"
              ],
              "solution": [
                1,
                3
              ]
            },
            {
              "title": "8) No exemplo a seguir, quais métodos devo usar para obter o resultado solicitado?",
              "description": "<pre><code class=\"language-javascript\">let listOfNumbers = [];\nfor (let i = 1; i &lt;= 7; i++) {\n  listOfNumbers.__________(i);\n}\nlistOfNumbers.__________();\n\nconsole.log(listOfNumbers.length);\n// → 6\n</code></pre>",
              "answers": [
                "<code>join</code> - <code>search</code>",
                "<code>push</code> - <code>pop</code>",
                "<code>shift</code> - <code>unshift</code>",
                "<code>slice</code> - <code>splice</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "9) Qual seria o resultado do código a seguir?",
              "description": "<pre><code class=\"language-javascript\">const coder1 = 'Michelle, ';\nconst coder2 = 'Lourdes, ';\nconst coder3 = 'Ruth.';\n\nconst allCoders = coder1.concat(coder2, coder3);\n\nconsole.log(allCoders);\n</code></pre>",
              "answers": [
                "<code>Michelle, Lourdes, Ruth.</code>",
                "<code>[Michelle, Lourdes, Ruth.]</code>",
                "<code>['Michelle', 'Lourdes', 'Ruth'.]</code>",
                "No hay resultado, debido a que el código está mal escrito."
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "10) Qual é o resultado do código abaixo?",
              "description": "<pre><code class=\"language-javascript\">let coders = ['Michelle', 'Lourdes', 'Ruth'];\ncoders.pop();\ncoders.indexOf('Lourdes');\n</code></pre>",
              "answers": [
                "<code>0</code>",
                "<code>1</code>",
                "<code>2</code>",
                "<code>3</code>"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "11) No código a seguir, qual seria o resultado?",
              "description": "<pre><code class=\"language-javascript\">let coders = ['Michelle', 'Lourdes', 'Ruth'];\ncoders.push('Alejandra');\ncoders.join();\n</code></pre>",
              "answers": [
                "<code>['Michelle,Lourdes,Ruth,Alejandra']</code>",
                "<code>['Michelle,Lourdes,Ruth']</code>",
                "<code>['Michelle', 'Lourdes', 'Ruth', 'Alejandra']</code>",
                "<code>'Michelle,Lourdes,Ruth,Alejandra'</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "12) No exemplo a seguir, complete os espaços",
              "description": "<pre><code class=\"language-javascript\">let coders = ['michelle', 'lourdes', 'ruth', 'alejandra'];\ncoders.pop();\ncoders.slice(____,____);\n\n// → ['lourdes', 'ruth']\n</code></pre>",
              "answers": [
                "<code>1</code> - <code>3</code>",
                "<code>2</code> - <code>4</code>",
                "<code>1</code> - <code>2</code>",
                "<code>2</code> - <code>3</code>"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "13) No exemplo a seguir, qual método devo usar para obter o resultado comentado?",
              "description": "<pre><code class=\"language-javascript\">let listOfNumbers = [1, 2, 3, 1, 2, 3];\nlistOfNumbers.____________(2);\n\n// → 4\n</code></pre>",
              "answers": [
                "<code>pop()</code>",
                "<code>indexOf()</code>",
                "<code>unshift()</code>",
                "<code>lastIndexOf()</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "14) No código a seguir, qual seria o resultado?",
              "description": "<pre><code class=\"language-javascript\">let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (let i = 0; i &lt; array.length; i++) {\n  let item = array.pop();\n  array.splice(i, 0, item);\n}\n\nconsole.log(array);\n</code></pre>",
              "answers": [
                "<code>[1, 2, 3, 4, 5]</code>",
                "<code>[6, 7, 8, 9, 10]</code>",
                "<code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>",
                "<code>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "15) No código a seguir, qual seria o resultado?",
              "description": "<pre><code class=\"language-javascript\">function search(array, element) {\n  for (let i = 0; i &lt; array.length; i++) {\n    if (array[i] === element) {\n      return i;\n    }\n  }\n}\n\nconsole.log(search([7, 6, 5, 4, 3, 2, 1], 5));\n</code></pre>",
              "answers": [
                "<code>2</code>",
                "<code>3</code>",
                "<code>4</code>",
                "<code>5</code>"
              ],
              "solution": [
                0
              ]
            }
          ],
          "title": "Quiz 2",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 6,
          "durationString": "15min"
        }
      },
      "order": 3,
      "stats": {
        "duration": 430,
        "durationString": "7.2h",
        "exerciseCount": 16,
        "partCount": 7
      }
    },
    "05-objects": {
      "title": "Objects",
      "bonus": false,
      "description": "<p>O que são <code>objects</code> (objetos) e para que servem? Como criar, acessar e modificar\na informação de um objeto? Quais são as diferenças entre um <code>array</code> e um <code>object</code>.</p>\n",
      "parts": {
        "01-objects": {
          "title": "Objetos em JavaScript",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=_P1kAhq7W38",
              "id": "_P1kAhq7W38"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Aprender o que são <code>objects</code> e para que servem</li>\n<li>Aprender a criar, acessar e modificar as informações de um <code>object</code></li>\n<li>Entender a diferença entre um <code>array</code> e um<code>object</code></li>\n</ul>\n<hr>\n<p>O texto a seguir se baseia em grande medida, com alguns ajustes, ao capítulo 4\ndo <a href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a>,de Marijn Haverbeke,\n2014. Tradução em\n<a href=\"http://braziljs.github.io/eloquente-javascript/chapters/valores-tipos-operadores\" target=\"_blank\">Português</a>,\ne ao capítulo 3 do <a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for\nkids</a>,\nNick Morgan, 2015;</p>\n<hr>\n<h2 id=\"o-que-é-um-objeto-em-javascript\">O que é um objeto em JavaScript?</h2>\n<p>Os <code>objetos</code> em JavaScript são muito similares ao <code>arrays</code>, mas com alguns\ndiferenciais:</p>\n<ol>\n<li>Como vimos, para acessar informações dentro de um <code>array</code>, nós usamos um\nnúmero correspondente ao <em>índice</em>; isto é, a posição em que o valor está\nlocalizado. Os <code>objects</code>, por outro lado, utilizam <code>strings</code>ao invés de\nnúmeros para acessar os diferentes elementos. Essas <code>strings</code> são chamadas de\nchaves (<em>keys</em>) ou propriedades, e os elementos para os quais eles apontam\nsão chamados de valores (_values_). Juntas, essas informações são\nchamadas de <em>pares de chave-valor</em>.</li>\n<li>Como nos <code>arrays</code> é necessário o <em>índice</em> para acessar informações, é\nimportante manter uma determinada ordem de seus valores. No caso dos <em>pares\nde chave-valor</em>, as informações podem estar em qualquer ordem.</li>\n</ol>\n<p>Enquanto os <code>arrays</code> são usados ​​principalmente para representar listas de\nvárias coisas, os objetos costumam ser usados ​​para representar elementos\nsimples, mas com <strong>várias características ou atributos</strong>. Por exemplo, se\nquiséssemos agrupar os títulos dos nossos filmes favoritos, usaríamos um <code>array</code>\nassim:</p>\n<pre><code class=\"language-javascript\">let favoriteMovies = [\n  'The Big Fish',\n  'The Lord of the Rings',\n  'The Empire Strikes Back',\n  'The Artist',\n  'The Godfather',\n  'Back to the Future'\n];\n</code></pre>\n<p>Mas o que aconteceria se quiséssemos armazenar diferentes informações sobre o\n<strong>mesmo</strong> filme? É aí que entra a utilidade de um <code>object</code>.</p>\n<h2 id=\"criando-objetos\">Criando Objetos</h2>\n<p>Nós armazenamos diferentes informações sobre o filme <code>De Volta para o Futuro</code> em\num só lugar, por meio de um<code>object</code>:</p>\n<pre><code class=\"language-javascript\">let movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  plot: 'Marty McFly, a 17-year-old high school student, is accidentally sent 30 years into the past in a time-traveling DeLorean invented by his close friend, the maverick scientist Doc Brown.',\n  oscar: 1,\n  tags: ['Adventure', 'Comedy', 'Sci-Fi']\n};\n</code></pre>\n<p>No exemplo anterior, criamos uma variável chamada <code>movie</code>e atribuímos a ela um\nobjeto com seis <em>pares de chave-valor</em>. Para criar um objeto, usamos as chaves\n<code>{}</code>  ao invés dos colchetes <code>[]</code>  que usamos para criar <em>arrays</em>. Dentro das\nchaves, colocamos os <em>pares de chave-valor</em> separados por uma vírgula. Conforme\nmostrado no exemplo, não precisamos colocar uma vírgula após o último par de\nchave-valor.</p>\n<p>A sintaxe de cada par de <em>valores-chave</em> é a seguinte:</p>\n<pre><code class=\"language-javascript\">{chave: valor}\n</code></pre>\n<p>Quando criamos um <code>object</code>, a chave (_key_) é colocada antes dos dois pontos\n<code>:</code>, e o valor (_value_), depois. Os dois pontos agem um pouco como um sinal\nde igual ( <code>=</code>), isto é, os valores à direita são atribuídos aos nomes à\nesquerda, assim como quando variáveis ​​são criadas.</p>\n<h3 id=\"chaves-_strings_-com-ou-sem-aspas\">Chaves (_strings_) com ou sem aspas</h3>\n<p>Como vimos, as chaves são <code>strings</code>. Como mostra o exemplo anterior, não é\nnecessário colocar as chaves entre aspas. Isso ocorre porque o JavaScript sabe\nque as chaves são <code>strings</code>. No entanto, também é válido colocar as chaves entre\naspas. Por exemplo, o objeto abaixo também é válido:</p>\n<pre><code class=\"language-javascript\">const person = {\n  'age': 18,\n  'name': 'Michelle',\n  'friends': ['Alexandra','Ana']\n  };\n</code></pre>\n<p>Se não colocarmos as aspas, as chaves devem seguir as mesmas regras para nomear\nvariáveis. Por exemplo, elas não devem ter espaços. Mas se colocarmos as chaves\nentre aspas, podemos usar o nome que quisermos. Por exemplo, se quisermos\nadicionar uma chave do ano em que o filme saiu (\"ano de lançamento\"),\nfaríamos:</p>\n<pre><code class=\"language-javascript\">movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  'year of release': 1984,\n  plot: 'Marty McFly, a 17-year-old high school student, is accidentally sent 30 years into the past in a time-traveling DeLorean invented by his close friend, the maverick scientist Doc Brown.',\n  oscar: 1,\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n  'other awards': ['best sound']\n  };\n</code></pre>\n<p>É importante notar que, embora as <em>keys</em> sejam sempre <code>strings</code>, os <em>values</em>\npodem ser qualquer valor JavaScript - eles podem até ser uma variável que\ncontenha, ou melhor, \"agarre\" (com seus tentáculos) um valor.</p>\n<h2 id=\"acessando-informações-de-um-objeto\">Acessando informações de um objeto</h2>\n<p>Podemos acessar os valores de um <code>object</code>de duas maneiras:</p>\n<ol>\n<li>O primeiro é usar os colchetes <code>[]</code>, assim como fazemos com <em>arrays</em>. A única\ndiferença é que, em vez de usar o <em>índice</em> (um <code>number</code>), usamos a chave\n(uma <code>string</code>), sempre entre aspas.</li>\n<li>O segundo é usando o ponto ( <code>.</code>) com o nome da chave imediatamente depois,\n<strong>sem</strong> aspas. Isso é chamado notação de ponto (_dot notation_). Como na\ndeclaração das chaves, se usarmos notação de ponto, a chave deve obedecer às\nregras de nomes válidos (por exemplo, elas não devem conter espaços).</li>\n</ol>\n<p>Vamos ver alguns exemplos para esclarecer quando um ou outro é usado:</p>\n<pre><code class=\"language-js\">movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n};\n\nconsole.assert(movie['title'] === 'Back to the Future');\nconsole.assert(movie.title === movie['title']);\n</code></pre>\n<pre><code class=\"language-js\">let error = false;\ntry {\n  console.assert(movie[title] === 'Back to the Future');\n} catch (e) {\n  error = e.message;\n}\nconsole.assert(error === 'title is not defined');\n</code></pre>\n<pre><code class=\"language-js\">console.assert(movie.'title' === 'Back to the Future');\n// → Uncaught SyntaxError: Unexpected string\n</code></pre>\n<p>Vamos analisar os dois erros:</p>\n<ol>\n<li>Quando usamos colchetes <strong>sem</strong> aspas, o JavaScript acha que o título é uma\nvariável e como não há uma variável chamada titulo no nosso programa, um erro\nde referência é gerado e o JavaScript avisa que esse título não está\ndefinido:<code>Uncaught ReferenceError: titulo is not defined</code></li>\n<li>Quando usado <code>dot notation</code> <strong>com</strong> aspas, o JavaScript devolve um erro de\nsintaxe, uma vez que <code>dot notation</code>não deve ser usada com <code>string</code>. Por isso,\ndevolve-nos: <code>Uncaught SyntaxError: Unexpected string</code>.</li>\n</ol>\n<p>O que acontece quando pedimos uma chave que o <code>object</code> não tem? JavaScript nos\nretorna <code>undefined</code>. Vamos ver um exemplo:</p>\n<pre><code class=\"language-js\">movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  plot: 'Marty McFly, a 17-year-old high school student, ' +\n    'is accidentally sent 30 years into the past in a time-traveling DeLorean ' +\n    'invented by his close friend, the maverick scientist Doc Brown.',\n  oscar: 1,\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n\nconsole.assert(movie['producer'] === undefined);\n</code></pre>\n<p>E como conseguimos um dos atores (<code>stars</code>) do filme? Para isso, temos que\nacessar a chave <code>'stars'</code> do objeto <code>movie</code>, que devolverá um <code>array</code>, para em\nseguida acessar um dos elementos através de colchetes <code>[]</code> e o índice. Vejamos\num exemplo:</p>\n<pre><code class=\"language-js\">movie = {\n  title: 'Back to the Future',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n};\n\nconsole.assert(movie.stars[0] === 'Michael J. Fox');\nconsole.assert(movie['stars'][1] === 'Christopher Lloyd');\nconsole.assert(movie.stars[2] === 'Lea Thompson');\n</code></pre>\n<p>Observe que usamos <code>movie.stars</code>e <code>movie['stars']</code>para enfatizar que as duas\nformas funcionam, por motivos didáticos. Mas tenha cuidado, isso <strong>não</strong> é uma\nboa prática. Nós só fizemos isso para dar o exemplo. Quando escrevemos\nprogramas, seja nos desafios de código, nossos exercícios de classe ou projetos\npessoais, a coisa certa a fazer é escolher uma opção e ser consistente em todo o\ncódigo. Recomendamos, em particular, <code>movie.stars</code>uma vez que é mais curto e\nmais fácil de ler. Lembre-se que a mesma coisa acontece com as aspas das\n<code>strings</code>: você pode usar simples ou dupla, mas de forma consistente.</p>\n<h2 id=\"definindo-ou-alterando-os-elementos-de-um-objeto\">Definindo ou alterando os elementos de um objeto</h2>\n<p>Assim como com <code>arrays</code>, podemos adicionar ou alterar os elementos de um\n<code>object</code>usando os colchetes e chaves ou notação de ponto.</p>\n<p>Vamos ver um exemplo que começa com um <code>object</code>vazio e segue adicionando e\nmodificando elementos.</p>\n<pre><code class=\"language-js\">/* criando um objeto vazio */\nconst student = {};\n\n/* adicionando elementos ao objeto */\nstudent['name'] = 'Carolina';\nstudent['points'] = 2500;\n\n/* adicionando elementos ao objeto */\nstudent.courses = ['Intro a JS', 'Intro a UX'];\nstudent.isActive = true;\n\n/* ressucitamos a nossa função comparadora */\n\nconst equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n\nconsole.assert(equal(\n  student,\n  {\n    name: 'Carolina',\n    points: 2500,\n    courses: ['Intro a JS', 'Intro a UX'],\n    isActive: true,\n  },\n));\n\n/* atualiando os pontos */\nstudent['points'] = 3500;\n\nconsole.assert(equal(\n  student,\n  {\n    name: 'Carolina',\n    points: 3500,\n    courses: ['Intro a JS', 'Intro a UX'],\n    isActive: true,\n  },\n));\n</code></pre>\n<p>A seguir Daniel nos explica os conceitos principais de <code>objects</code> com um\nexemplo:</p>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/_P1kAhq7W38?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 0,
          "durationString": "1h"
        },
        "02-object-proto": {
          "title": "Object.prototype",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Conhecer o <code>Object.prototype</code></li>\n</ul>\n<h2 id=\"objectprototype\"><code>Object.prototype</code></h2>\n<p>Todos os objetos em JavaScript provém de <code>Object</code>, quer dizer que todos herdam\nos métodos e propriedades de <code>Object.prototype</code>, quer dizer que alterando este\nobjeto, se pode alterar o comportamento de <strong>todos</strong> os objetos.</p>\n<p>Para entender melhor leia: <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\">Object.prototype en\nMDN</a></p>\n",
          "order": 1,
          "durationString": "30min"
        },
        "03-arrays-and-objects": {
          "title": "Vetores e Objetos",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=mU8FjHZcE0Y",
              "id": "mU8FjHZcE0Y"
            }
          ],
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Entender, por meio de um exemplo, como combinar as duas estruturas de dados\nestudadas nesta unidade: <code>array</code> e <code>object</code></li>\n</ul>\n<hr>\n<p>O texto abaixo é amplamente baseado, com alguns ajustes, em 4 de <a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\" target=\"_blank\">JavaScript for\nKids</a> ,\nNick Morgan, 2015.</p>\n<hr>\n<h2 id=\"combinando-arrays-com-objects\">Combinando <em>arrays</em> com <em>objects</em></h2>\n<p>Já vimos o caso de ter um <code>array</code>como valor de uma propriedade <strong>dentro de</strong> um\n<code>object</code> (por exemplo, um <code>array</code> do elenco de um <code>object</code> _movie_), mas outra\ncombinação bem comum para agrupar dados é ter um <code>array</code> de <code>objects</code>. Vejamos\num exemplo:</p>\n<p>Imagine que temos dados de 3 estudantes da Laboratoria e queremos estruturá-los\nem nosso programa. Para cada aluna, temos os dados: seu nome, sua pontuação, os\ncursos que ela completou e se a aluna deixou ou continua com o programa.</p>\n<p>Uma maneira de estruturar esses dados seria criar um <code>object</code> para cada aluna,\ncada um com suas informações e, em seguida, um <code>array</code> que contenha todos os\ntrês <code>objects</code>.</p>\n<p>Vamos ver:</p>\n<pre><code class=\"language-js\">\nconst michelle = {\n  name: 'Michelle',\n  points: 2000,\n  isActive: true,\n  courses: ['Intro JS', 'JS avanzado', 'JS master']\n};\n\nconst alexandra = {\n  name: 'Alexandra',\n  points: 4100,\n  isActive: true,\n  courses: ['Intro JS', 'Intro UX', 'UX master']\n};\n\nconst andrea = {\n  name: 'Andrea',\n  points: 800,\n  isActive: false,\n  courses: ['Intro JS', 'JS avanzado']\n};\n\nconst students = [michelle, alexandra, andrea];\n</code></pre>\n<p>Observe que, para cada propriedade dos <code>objects</code>, usamos um tipo diferente de\ndados:</p>\n<ul>\n<li>O nome é um <code>string</code></li>\n<li>Os pontos são um <code>number</code></li>\n<li>Para descobrir se ela está estudando ou saiu do programa, escolhemos um\n<code>boolean</code>, onde <code>true</code> quer dizer que ela está ativa (ou seja, estudando)</li>\n<li>Os cursos que completou estão em um <code>array</code>.</li>\n</ul>\n<p>Que legal quando vemos tudo o que aprendemos aplicado em um único bloco de\ncódigo, né? :) A melhor parte é que, com essa estrutura, podemos acessar os\ndados de maneira simples.</p>\n<p>Em seguida, Daniel dirá como usar <code>funções</code>, <code>estruturas de repetição</code> e <code>estruturas condicionais</code> para imprimir no console:</p>\n<ol>\n<li>Os nomes de todas as alunas ativas</li>\n<li>O total de pontos da turma</li>\n<li>Os nomes das alunas que fizeram um determinado curso</li>\n</ol>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/mU8FjHZcE0Y?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 2,
          "durationString": "1h"
        },
        "04-guided-exercises": {
          "title": "Exercícios Livres",
          "type": "practice",
          "format": "self-paced",
          "duration": 40,
          "embeds": [
            {
              "type": "video",
              "provider": "youtube",
              "href": "https://www.youtube.com/watch?v=yQcNA41PMco",
              "id": "yQcNA41PMco"
            }
          ],
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Entender, através de casos práticos, como aplicar os conceitos de <code>funções</code>,\n<code>arrays</code> e <code>objetos</code> para resolução de problemas</li>\n</ul>\n<hr>\n<h2 id=\"enunciados\">Enunciados</h2>\n<p>Como já fizemos antes, é hora de aplicar os conceitos aprendidos para resolver\nproblemas.</p>\n<p>Em seguida, você terá um problema para resolver. Tente resolvê-lo primeiro\nsozinha. Abaixo, você encontrará a solução de Lourdes, outra excelente\ninstrutora da Laboratoria. Depois de tentar resolvê-lo, compare sua solução com\na de Lourdes.</p>\n<h3 id=\"1-array-para-object\">1. <em>Array</em> para <em>Object</em></h3>\n<p>Escreva uma função que receba um <em>array</em> 2D (vetor) e retorne um objeto com\ncada par de elementos do <code>array</code> como um par chave-valor . Por exemplo:</p>\n<ul>\n<li>Input</li>\n</ul>\n<pre><code class=\"language-js\">[['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n</code></pre>\n<ul>\n<li>Output</li>\n</ul>\n<pre><code class=\"language-js\">{\n  make : 'Ford',\n  model : 'Mustang',\n  year : 1964\n}\n</code></pre>\n<p>Escreva também uma função que faça o contrário. Transforme os pares de\n<em>key-value</em> de um <code>object</code> em um <code>array 2D</code>.</p>\n<h2 id=\"resolução\">Resolução</h2>\n<p>A seguir, Daniel explica como ele resolveu o exercício:</p>\n<h3 id=\"1-array-para-object-1\">1. <em>Array</em> para <em>Object</em></h3>\n<p><div class=\"iframe-container\"><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/yQcNA41PMco?autoplay=0\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"true\"></iframe></div></p>\n",
          "order": 3,
          "durationString": "40min"
        },
        "05-quiz": {
          "questions": [
            {
              "title": "1) Qual das seguintes afirmações sobre objetos NÃO está correta?",
              "description": "",
              "answers": [
                "As chaves dos objetos são equivalentes às suas propriedades",
                "Podemos calcular seu comprimento com a propriedade <code>length</code>",
                "Não é necessário colocar as chaves entre aspas",
                "Podemos incluir uma função como propriedade"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "2) Como podemos acessar os valores de um objeto? Você pode selecionar uma ou mais opções",
              "description": "",
              "answers": [
                "Usando colchetes <code>[]</code>",
                "Usando parênteses <code>()</code>",
                "Usando dois pontos <code>:</code>",
                "Usando ponto <code>.</code>"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "3) As propriedades geralmente _____________ algo sobre o valor associado e os métodos geralmente _____________ algo sobre o valor associado",
              "description": "",
              "answers": [
                "nos mostram - conservam",
                "conservam - nos mostram",
                "nos dizem - fazem",
                "fazem - nos dizem"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "4) toUpperCase() é _____________ que faz a ação de transformar em maiúsculas o valor associado, enquanto length é _____________ que nos informa o comprimento do valor associado",
              "description": "",
              "answers": [
                "um objeto - um <em>array</em>",
                "um <em>array</em> - um objeto",
                "uma propriedade - um método",
                "um método - uma propriedade"
              ],
              "solution": [
                3
              ]
            },
            {
              "title": "5) Confira o código a seguir",
              "description": "<pre><code class=\"language-javascript\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi']\n};\n</code></pre><p>Como eu acesso a propriedade <code>director</code>?</p>",
              "answers": [
                "<code>movie{director}</code>",
                "<code>director[0]</code>",
                "<code>movie.director</code>",
                "<code>return director</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "6) Qual é o erro no código abaixo?",
              "description": "<pre><code class=\"language-javascript\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  oscar: 1,\n  other awards: 'best sound',\n  tags: []\n};\n</code></pre>",
              "answers": [
                "O número <code>1</code> deve estar entre aspas",
                "Faltam as aspas para a propriedade <code>other awards</code>",
                "A propriedade <code>tags</code> não pode estar vazia",
                "Não há erro"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "7) Qual é o resultado do código seguinte?",
              "description": "<pre><code class=\"language-javascript\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n\nconsole.log(movie.stars[2]);\n</code></pre>",
              "answers": [
                "Michael J. Fox",
                "Christopher Lloyd",
                "Lea Thompson",
                "indefinido"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "8) No código a seguir",
              "description": "<pre><code class=\"language-javascript\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: [ 'Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n</code></pre><p>como podemos acessar a lista de chaves do objeto <code>movie</code>?</p>",
              "answers": [
                "<code>movie:keys</code>",
                "<code>movie.length</code>",
                "<code>Object.keys(movie)</code>",
                "<code>return keys(movie)</code>"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "9) Qual é o erro no código a seguir?",
              "description": "<pre><code class=\"language-javascript\">const objectToArray = (object) =&gt; {\n  const items = Object.keys(object);\n  const newArray = [];\n\n  for (let i = 0; i &lt; items.length; i += 1) {\n    newArray.pop([items[i], object[items[i]]]);\n  }\n\n  return newArray;\n};\n\nconsole.log(objectToArray({make: 'Ford', model: 'Mustang', year: 1964}));\n// → [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n</code></pre>",
              "answers": [
                "A variável <code>newArray</code> não pode estar vazia",
                "A variável <code>i</code> deve começar em <code>1</code>",
                "Deve ser usado em <code>push</code> vez de <code>pop</code>",
                "Deve ser usado em <code>console.log</code> ao invés de <code>return</code>"
              ],
              "solution": [
                2
              ]
            }
          ],
          "title": "Quiz 1",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 4,
          "durationString": "15min"
        },
        "06-practice": {
          "title": "Desafios de código",
          "type": "practice",
          "format": "self-paced",
          "duration": 180,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>Aqui, apresentaremos uma série de desafios que você deve completar para testar\nseus conhecimentos.</li>\n</ul>\n",
          "exercises": {
            "00-add-array-property": {
              "title": "addArrayProperty",
              "body": "<p>Escreva uma função chamada \"addArrayProperty(obj, key, array)\".</p>\n<p>Dado um objeto, uma chave (_key_) e um array, \"addArrayProperty\" define uma\nnova propriedade no objeto na chave fornecida, com seu valor definido no <em>array</em>\nespecificado.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const myObj = {};\nconst myStr = 'myProperty';\nconst myArray = [1 ,3 ];\n\naddArrayProperty(myObj, myStr, myArray);\nconsole.log(myObj.myProperty); // -&gt; [1, 3]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# addArrayProperty\n\nEscribe una función llamada `addArrayProperty(obj, key, array)`.\n\nDado un objeto, una llave y un array, `addArrayProperty` asigna una nueva\npropiedad sobre el objeto en la lave dada, con el array dado como valor.\n\nEjemplo de entrada:\n\n```js\nconst myObj = {};\nconst myStr = 'myProperty';\nconst myArray = [1, 3];\n\naddArrayProperty(myObj, myStr, myArray);\nconsole.log(myObj.myProperty); // => [1, 3]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YWRkQXJyYXlQcm9wZXJ0eS5qcw==": "const addArrayProperty = (obj, key, arr) => {\n  // your code here\n};\n\nmodule.exports = addArrayProperty;\n"
                },
                "c29sdXRpb24=": {
                  "YWRkQXJyYXlQcm9wZXJ0eS5qcw==": "const addArrayProperty = (obj, key, arr) => Object.assign(obj, { [key]: arr });\n\n\nmodule.exports = addArrayProperty;\n"
                },
                "dGVzdA==": {
                  "YWRkQXJyYXlQcm9wZXJ0eS5zcGVjLmpz": "const { assert } = require('chai');\nconst addArrayProperty = require('../solution/addArrayProperty');\n\ndescribe('addArrayProperty()', () => {\n  it('debería regresar [5, 8, 12], para addArrayProperty({}, \"key\", [5, 8, 12])', () => {\n    const myObj = {};\n    const myArray = [5, 8, 12];\n\n    addArrayProperty(myObj, 'key', myArray);\n    assert.deepEqual(myObj.key, myArray);\n  });\n});\n"
                }
              }
            },
            "01-object-properties-counter": {
              "title": "Contador de propriedades",
              "body": "<p>Dado um objeto como parâmetro, contar a quantidade de propriedades que existem\nno objeto e retornar este valor.</p>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = objectPropertiesCounter({ 'name': 'John', 'lastname': 'Doe' });\n\nconsole.log(ouput); // =&gt; 2\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# Contador de propiedades\n\nDado un objeto como parámetro, contar la cantidad de propiedades que este\ncontiene y retornarlo.\n\nEjemplo:\n\n```javascript\nconst output = objectPropertiesCounter({ 'name': 'John', 'lastname': 'Doe' });\n\nconsole.log(ouput); // => 2\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "b2JqZWN0UHJvcGVydGllc0NvdW50ZXIuanM=": "const objectPropertiesCounter = (obj) => {\n\n};\n\nmodule.exports = objectPropertiesCounter;\n"
                },
                "c29sdXRpb24=": {
                  "b2JqZWN0UHJvcGVydGllc0NvdW50ZXIuanM=": "const objectPropertiesCounter = obj => Object.keys(obj).length;\n\nmodule.exports = objectPropertiesCounter;\n"
                },
                "dGVzdA==": {
                  "b2JqZWN0UHJvcGVydGllc0NvdW50ZXIuc3BlYy5qcw==": "const { assert } = require('chai');\nconst objectPropertiesCounter = require('../solution/objectPropertiesCounter');\n\ndescribe('objectPropertiesCounter()', () => {\n  it('debería regresar la cantidad de propiedades cuando es un objeto simple', () => {\n    const obj = { name: 'John', lastname: 'Doe' };\n    const output = objectPropertiesCounter(obj);\n    assert.deepEqual(output, 2);\n  });\n\n  it('debería regresar la cantidad de propiedades cuando es un objeto con propiedades anidadas', () => {\n    const obj = {\n      name: 'Laboratoria',\n      cohorts: {\n        SCL: ['2017-1', '2017-2'],\n        CDMX: ['2017-1', '2017-2'],\n      },\n    };\n    const output = objectPropertiesCounter(obj);\n    assert.deepEqual(output, 2);\n  });\n\n  it('debería regresar 0 cuando es un objeto vacío', () => {\n    const obj = {};\n    const output = objectPropertiesCounter(obj);\n    assert.deepEqual(output, 0);\n  });\n});\n"
                }
              }
            },
            "02-remove-string-values-longer-than": {
              "title": "removeStringValuesLongerThan",
              "body": "<p>Escreva uma função chamada \"removeStringValuesLongerThan\".</p>\n<p>Dado um número e um objeto, \"removeStringValuesLongerThan\" remove qualquer\npropriedade no objeto dado cujos valores são strings maiores que o número\nfornecido.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const obj = {\n  name: 'Montana',\n  age: 20,\n  location: 'Texas',\n};\nremoveStringValuesLongerThan(6, obj);\nconsole.log(obj); // { age: 20, location: 'Texas' }\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# removeStringValuesLongerThan\n\nEscribe una función llamada `removeStringValuesLongerThan`.\n\nDado un número y un objeto, `removeStringValuesLongerThan` elimina cualquier\npropiedad en el objeto dado cuyos valores son cadenas de texto más largas que el\nnúmero dado.\n\nEjemplo de entrada:\n\n```js\nconst obj = {\n  name: 'Montana',\n  age: 20,\n  location: 'Texas',\n};\n\nremoveStringValuesLongerThan(6, obj);\nconsole.log(obj); // => { age: 20, location: 'Texas' }\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "cmVtb3ZlU3RyaW5nVmFsdWVzTG9uZ2VyVGhhbi5qcw==": "const removeStringValuesLongerThan = (num, obj) => {\n  // your code here\n};\n\nmodule.exports = removeStringValuesLongerThan;\n"
                },
                "c29sdXRpb24=": {
                  "cmVtb3ZlU3RyaW5nVmFsdWVzTG9uZ2VyVGhhbi5qcw==": "const removeStringValuesLongerThan = (num, obj) => Object.keys(obj).reduce(\n  (memo, key) => (\n    (obj[key].length > num)\n      ? memo\n      : { ...memo, [key]: obj[key] }\n  ),\n  {},\n);\n\n\nmodule.exports = removeStringValuesLongerThan;\n"
                },
                "dGVzdA==": {
                  "cmVtb3ZlU3RyaW5nVmFsdWVzTG9uZ2VyVGhhbi5zcGVjLmpz": "const { assert } = require('chai');\nconst removeStringValuesLongerThan = require('../solution/removeStringValuesLongerThan');\n\ndescribe('removeStringValuesLongerThan()', () => {\n  it('Prueba: key-value mayor a 1', () => {\n    const obj = {\n      name: 'Montana',\n      age: 20,\n      location: 'Texas',\n    };\n\n    const num = 1;\n    const hasil = {\n      age: 20,\n    };\n    assert.deepEqual(removeStringValuesLongerThan(num, obj), hasil);\n  });\n\n  it('Prueba: key-value mayor a 6', () => {\n    const obj = {\n      name: 'Montana',\n      age: 20,\n      location: 'Texas',\n    };\n\n    const num = 6;\n    const hasil = {\n      age: 20,\n      location: 'Texas',\n    };\n    assert.deepEqual(removeStringValuesLongerThan(num, obj), hasil);\n  });\n});\n"
                }
              }
            },
            "03-get-element-of-array-property": {
              "title": "getElementOfArrayProperty",
              "body": "<p>Escreva uma função chamada <code>getElementOfArrayProperty</code>.</p>\n<p>Dado um objeto, uma chave e um índice numérico, <code>getElementOfArrayProperty</code>\nretorna o valor do elemento no índice fornecido do array localizado dentro do\nobjeto informado na chave especificada.</p>\n<p>Notas:</p>\n<ul>\n<li>Se a matriz estiver vazia, ela deve devolver <code>undefined</code>.</li>\n<li>Se o índice fornecido estiver fora do intervalo da matriz localizada na chave\nespecificada, ela deverá devolver <code>undefined</code>.</li>\n<li>Se a propriedade na chave fornecida não for uma matriz, ela deve devolver\n<code>undefined</code>.</li>\n<li>Se não houver propriedade na chave, ela deve devolver <code>undefined</code>.</li>\n</ul>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const obj = {\n key: ['Jamil', 'Albrey'],\n};\n\nconst output = getElementOfArrayProperty(obj, 'key', 0);\nconsole.log(output); // --&gt; 'Jamil'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getElementOfArrayProperty\n\nEscriba una función llamada `getElementOfArrayProperty`.\n\nDado un objeto, una llave (nombre de una propiedad) y un índice numérico,\n`getElementOfArrayProperty` devuelve el valor del elemento en el índice dado del\narreglo localizado dentro del objeto dado en la llave dada.\n\nNotas:\n\n- Si el arreglo está vacío, debería devolver `undefined`.\n- Si el índice dado está fuera de rango del arreglo ubicado en la llave dada,\n  debería devolver `undefined`.\n- Si la propiedad en la llave dada no es un arreglo, debería devolver\n  `undefined`.\n- Si no hay ninguna propiedad en la llave, debería devolverse `undefined`.\n\nEjemplo de entrada:\n\n```js\nconst obj = {\n key: ['Jamil', 'Albrey'],\n};\n\nconst output = getElementOfArrayProperty(obj, 'key', 0);\nconsole.log(output); // => 'Jamil'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0RWxlbWVudE9mQXJyYXlQcm9wZXJ0eS5qcw==": "const getElementOfArrayProperty = (obj, key, index) => {\n  // your code here\n};\n\nmodule.exports = getElementOfArrayProperty;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0RWxlbWVudE9mQXJyYXlQcm9wZXJ0eS5qcw==": "const getElementOfArrayProperty = (obj, key, index) => {\n  if (!obj[key]) {\n    return undefined;\n  }\n\n  if (!Array.isArray(obj[key])) {\n    return undefined;\n  }\n\n  if (!obj[key][index]) {\n    return undefined;\n  }\n\n  return obj[key][index];\n};\n\nmodule.exports = getElementOfArrayProperty;\n"
                },
                "dGVzdA==": {
                  "Z2V0RWxlbWVudE9mQXJyYXlQcm9wZXJ0eS5zcGVjLmpz": "const { assert } = require('chai');\nconst getElementOfArrayProperty = require('../solution/getElementOfArrayProperty');\n\ndescribe('getElementOfArrayProperty()', () => {\n  it(\"debería regresar undefined, para ({yey: [1, 3, 5, 7]}, 'key', 1)\", () => {\n    const obj = {\n      yey: [1, 3, 5, 7],\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 1);\n\n    assert.deepEqual(output, undefined);\n  });\n\n  it(\"debería regresar undefined, para  ({key: 'eyoooo'}, 'key', 1)\", () => {\n    const obj = {\n      key: 'eyoooo',\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 0);\n    assert.deepEqual(output, undefined);\n  });\n\n\n  it(\"debería regresar undefined, para ({key: ['Kemal', 'Mahmud']}, 'key', 2)\", () => {\n    const obj = {\n      key: ['Kemal', 'Mahmud'],\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 2);\n    assert.deepEqual(output, undefined);\n  });\n\n  it(\"debería regresar 3, para ({key: [1, 2, 3, 4, 5]}, 'key', 2)\", () => {\n    const obj = {\n      key: [1, 2, 3, 4, 5],\n    };\n    const output = getElementOfArrayProperty(obj, 'key', 2);\n    assert.deepEqual(output, 3);\n  });\n});\n"
                }
              }
            },
            "04-greet-customer": {
              "title": "greetCustomer",
              "body": "<p>Escreva uma função chamada <code>greetCustomer</code>.</p>\n<p>Dado um nome, <code>greetCustomer</code> retorna uma saudação com base em quantas vezes o\ncliente visitou o restaurante. Consulte o objeto <code>customerData</code>.</p>\n<p>A saudação deve ser diferente, dependendo do nome da reserva.</p>\n<p>Caso 1 - Cliente desconhecido (o nome não está presente nos dados do cliente):</p>\n<pre><code class=\"language-javascript\">console.log(greetCustomer('Terrance')); // --&gt; 'Welcome! Is this your first time?'\n</code></pre>\n<p>Caso 2 - Cliente que visitou apenas uma vez (o valor das visitas é 1)</p>\n<pre><code class=\"language-javascript\">console.log(greetCustomer('Joe')); // --&gt; 'Welcome back, Joe! We're glad you liked us the first time!'\n</code></pre>\n<p>Caso 3 - Cliente repetido: (o valor de 'visitas' é maior que 1)</p>\n<pre><code class=\"language-javascript\">console.log(greetCustomer('Carol')); // --&gt; 'Welcome back, Carol! So glad to see you again!'\n</code></pre>\n<p>Notas:</p>\n<ul>\n<li>Sua função não deve alterar o objeto <code>customerData</code> para atualizar o número de\nvisitas.</li>\n<li>Não codifique os dados exatos da amostra. Esta é uma má ideia:</li>\n</ul>\n<pre><code class=\"language-javascript\">if (firstName === 'Joe') {\n  // do something\n}\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# greetCustomer\n\nEscribe una función llamada `greetCustomer`.\n\nDando un nombre, `greetCustomer` devuelve un saludo basado en cuántas veces ese\ncliente ha visitado el restaurante.  Consulte el objeto `customerData`.\n\nEl saludo debe ser diferente, dependiendo del nombre de la reservación.\n\nCaso 1 - Cliente desconocido (el nombre no está presente en los datos de\ncliente):\n\n```js\nconsole.log(greetCustomer('Terrance'));\n// => 'Welcome! Is this your first time?'\n```\n\nCaso 2 - Cliente que ha visitado sólo una vez (el valor de las visitas es 1)\n\n```js\nconsole.log(greetCustomer('Joe'));\n// => 'Welcome back, Joe! We're glad you liked us the first time!'\n```\n\nCaso 3 - Repetir cliente: (valor de' visitas' es mayor que 1)\n\n```js\nconsole.log(greetCustomer('Carol'));\n// --> 'Welcome back, Carol! So glad to see you again!'\n```\n\nNotas:\n\n- Tu función no debe alterar el objeto `customerData` para actualizar el número\n  de visitas.\n- No codificar los datos exactos de la muestra. Esto es una mala idea:\n\n```js\nif (firstName === 'Joe') {\n  // do something\n}\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z3JlZXRDdXN0b21lci5qcw==": "const customerData = {\n  Joe: {\n    visits: 1,\n  },\n  Carol: {\n    visits: 2,\n  },\n  Howard: {\n    visits: 3,\n  },\n  Carrie: {\n    visits: 4,\n  },\n};\n\nconst greetCustomer = (firstName) => {\n  const greeting = '';\n\n  // your code here\n\n  return greeting;\n};\n\nmodule.exports = greetCustomer;\n"
                },
                "c29sdXRpb24=": {
                  "Z3JlZXRDdXN0b21lci5qcw==": "const customerData = {\n  Joe: {\n    visits: 1,\n  },\n  Carol: {\n    visits: 2,\n  },\n  Howard: {\n    visits: 3,\n  },\n  Carrie: {\n    visits: 4,\n  },\n};\n\nconst greetCustomer = (firstName) => {\n  if (!customerData[firstName]) {\n    return 'Welcome! Is this your first time?';\n  }\n\n  if (customerData[firstName].visits === 1) {\n    return `Welcome back, ${firstName}! We're glad you liked us the first time!`;\n  }\n\n  if (customerData[firstName].visits > 1) {\n    return `Welcome back, ${firstName}! So glad to see you again!`;\n  }\n\n  return undefined;\n};\n\nmodule.exports = greetCustomer;\n"
                },
                "dGVzdA==": {
                  "Z3JlZXRDdXN0b21lci5zcGVjLmpz": "const { assert } = require('chai');\nconst greetCustomer = require('../solution/greetCustomer');\n\ndescribe('greetCustomer()', () => {\n  it(\"debería regresar 'Welcome back, Howard! So glad to see you again!', para  ('Howard')\", () => {\n    const pair = greetCustomer('Howard');\n    const hasil = 'Welcome back, Howard! So glad to see you again!';\n\n    assert.deepEqual(pair, hasil);\n  });\n\n  it(\"debería regresar'Welcome back, Joe! We're glad you liked us the first time!', para ('Joe')\", () => {\n    const pair = greetCustomer('Joe');\n    const hasil = \"Welcome back, Joe! We're glad you liked us the first time!\";\n\n    assert.deepEqual(pair, hasil);\n  });\n\n\n  it(\"debería regresar  'Welcome! Is this your first time?', para  ('Kemal')\", () => {\n    const pair = greetCustomer('Kemal');\n    const hasil = 'Welcome! Is this your first time?';\n\n    assert.deepEqual(pair, hasil);\n  });\n});\n"
                }
              }
            },
            "05-transform-first-and-last": {
              "title": "transformFirstAndLast",
              "body": "<p>Escreva uma função 'transformFirstAndLast' que receba um vetor e retorne um\nobjeto com:</p>\n<ol>\n<li>o primeiro elemento do vetor como a chave do objeto e</li>\n<li>o último elemento do vetor como o valor dessa chave.</li>\n</ol>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']\n</code></pre>\n<p>Valor de retorno da função (saída):</p>\n<pre><code class=\"language-javascript\">{\n  Queen: 'Beyonce'\n}\n</code></pre>\n<p>Não altere o vetor de entrada. Suponha que todos os elementos do <em>array</em> de\nentrada sejam do tipo <code>string</code>.</p>\n<p>Observe que o vetor de entrada pode ter um número variável de elementos. Seu\ncódigo deve responder de forma flexível.</p>\n<p>Por exemplo, você deve manipular entradas como:</p>\n<pre><code class=\"language-javascript\">['Kevin', 'Bacon', 'Amor', 'Hart', 'Costner', 'Spacey']\n</code></pre>\n<p>Saída da função:</p>\n<pre><code class=\"language-javascript\">{\n  Kevin: \"Spacey\"\n}\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# transformFirstAndLast\n\nEscribe una función `transformFirstAndLast` que toma un array y devuelve un\nobjeto con:\n\n1. el primer elemento del array como la llave del objeto, y\n2. el último elemento del array como valor de esa llave.\n\nEjemplo de entrada:\n\n```js\n['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']\n```\n\nValor de retorno de la función (salida):\n\n```js\n{\n  Queen: 'Beyonce'\n}\n```\n\nNo cambies el array de entrada. Piensa que todos los elementos del array de\nentrada serán del tipo `string`.\n\nTen en cuenta que el array de entrada puede tener un número variable de\nelementos. Tu código debería acomodarse de manera flexible.\n\nEjemplo, debe manejar la entrada como:\n\n```js\n['Kevin', 'Bacon', 'Amor', 'Hart', 'Costner', 'Spacey']\n```\n\nValor de retorno de la función (salida):\n\n```js\n{\n  Kevin: \"Spacey\"\n}\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "dHJhbnNmb3JtRmlyc3RBbmRMYXN0Lmpz": "const transformFirstAndLast = (array) => {\n  // your code here\n};\n\nmodule.exports = transformFirstAndLast;\n"
                },
                "c29sdXRpb24=": {
                  "dHJhbnNmb3JtRmlyc3RBbmRMYXN0Lmpz": "const transformFirstAndLast = (array) => {\n  const obj = {};\n\n  obj[array[0]] = array[array.length - 1];\n\n  return obj;\n};\n\nmodule.exports = transformFirstAndLast;\n"
                },
                "dGVzdA==": {
                  "dHJhbnNmb3JtRmlyc3RBbmRMYXN0LnNwZWMuanM=": "const { assert } = require('chai');\nconst transformFirstAndLast = require('../solution/transformFirstAndLast');\n\ndescribe('transformFirstAndLast()', () => {\n  it(\"debería regresar { King : 'Freddie' }, para ['King', 'Kemal', 'Freddie']\", () => {\n    assert.deepEqual(transformFirstAndLast(['King', 'Kemal', 'Freddie']), { King: 'Freddie' });\n  });\n\n  it(\"debería regresar { Queen : 'Beyonce' }, para ['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']\", () => {\n    assert.deepEqual(transformFirstAndLast(['Queen', 'Elizabeth', 'Of Hearts', 'Beyonce']), { Queen: 'Beyonce' });\n  });\n});\n"
                }
              }
            },
            "06-get-all-keys": {
              "title": "getAllKeys",
              "body": "<p>Escreva uma função chamada \"getAllKeys\" que retorna um <em>array</em> com todas as\nchaves do objeto de entrada.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">{\n  name: 'Sam',\n  age: 25,\n  hasPets: true\n}\n</code></pre>\n<p>Valor de retorno da função (saída):</p>\n<pre><code class=\"language-javascript\">['name', 'age', 'hasPets']\n</code></pre>\n<p>Tenha em mente que sua função deve ser capaz de manipular qualquer objeto\npassado nela.</p>\n<p>Por exemplo, você também deve tratar uma entrada como a seguinte:</p>\n<pre><code class=\"language-javascript\">{\n  a: 'a',\n  number: 11,\n  hungry: true,\n  grammyWins: 1\n}\n</code></pre>\n<p>Saída da função:</p>\n<pre><code class=\"language-javascript\">['a', 'number', 'hungry', 'grammyWins']\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getAllKeys\n\nEscribe una función llamada `getAllKeys` que devuelve un array de todas las\nllaves del objeto de entrada.\n\nEjemplo de entrada:\n\n```js\n{\n  name: 'Sam',\n  age: 25,\n  hasPets: true\n}\n```\n\nValor de retorno de la función (salida):\n\n```js\n['name', 'age', 'hasPets']\n```\n\nTen en cuenta que tu función debe ser capaz de manejar cualquier objeto pasado\nen ella.\n\nPor ejemplo, también debe manejar una entrada como:\n\n```js\n{\n  a: 'a',\n  number: 11,\n  hungry: true,\n  grammyWins: 1\n}\n```\n\nValor de retorno de la función (salida):\n\n```js\n['a', 'number', 'hungry', 'grammyWins']\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0QWxsS2V5cy5qcw==": "const getAllKeys = (obj) => {\n  // your code here\n};\n\nmodule.exports = getAllKeys;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0QWxsS2V5cy5qcw==": "const getAllKeys = obj => Object.keys(obj);\n\nmodule.exports = getAllKeys;\n"
                },
                "dGVzdA==": {
                  "Z2V0QWxsS2V5cy5zcGVjLmpz": "const { assert } = require('chai');\nconst getAllKeys = require('../solution/getAllKeys');\n\ndescribe('getAllKeys()', () => {\n  it(\"debería regresar ['tes', 'ini', 'berhasil'], para { tes : 'tes', ini : 'apa',berhasil : 10 }\", () => {\n    const hasil = ['tes', 'ini', 'berhasil'];\n    const obj = {\n      tes: 'tes',\n      ini: 'apa',\n      berhasil: 10,\n    };\n\n    assert.deepEqual(getAllKeys(obj), hasil);\n  });\n\n  it(\"debería regresar ['a', 'number', 'hungry', 'grammyWins'], para { a: 'a', number: 11, hungry: true, grammyWins: 1 }\", () => {\n    const hasil = ['a', 'number', 'hungry', 'grammyWins'];\n    const obj = {\n      a: 'a',\n      number: 11,\n      hungry: true,\n      grammyWins: 1,\n    };\n\n    assert.deepEqual(getAllKeys(obj), hasil);\n  });\n});\n"
                }
              }
            },
            "07-from-list-to-object": {
              "title": "fromListToObject",
              "body": "<p>Escreva uma função <code>fromListToObject</code> que receba um <em>array</em> de <em>arrays</em> e\nretorne um objeto com cada par de elementos do <em>array</em> como um par de\nchave-valor.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">[['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n</code></pre>\n<p>Saída função:</p>\n<pre><code class=\"language-javascript\">{\n  make: 'Ford'\n  model: 'Mustang',\n  year: 1964\n}\n</code></pre>\n<p>Não mude a string de entrada. Suponha que todos os elementos do <em>array</em> sejam do\ntipo <code>string</code>.</p>\n<p>Observe que a entrada pode ter um número diferente de elementos do que a amostra\nfornecida. Por exemplo, se a entrada tiver 6 valores em vez de 4, seu código\ndeve se adaptar de maneira flexível.</p>\n",
              "files": {
                "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                "UkVBRE1FLm1k": "# fromListToObject\n\nEscribe una función `fromListToObject` que toma un array de matrices, y\ndevuelve un objeto con cada par de elementos en la array como un par\nllave-valor.\n\nEjemplo de entrada:\n\n```js\n[['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\n```\n\nValor de retorno de la función (salida):\n\n```js\n{\n  make: 'Ford'\n  model: 'Mustang',\n  year: 1964\n}\n```\n\nNo cambies la cadena de entrada. Piensa que todos los elementos del array serán\ndel tipo `string`.\n\nTen en cuenta que la entrada puede tener un número diferente de elementos que\nla muestra dada. Por ejemplo, si la entrada tenía 6 valores en lugar de 4, tu\ncódigo debería adaptarse de manera flexible.\n",
                "Ym9pbGVycGxhdGU=": {
                  "ZnJvbUxpc3RUb09iamVjdC5qcw==": "const fromListToObject = (array) => {\n  // your code here\n};\n\nmodule.exports = fromListToObject;\n"
                },
                "c29sdXRpb24=": {
                  "ZnJvbUxpc3RUb09iamVjdC5qcw==": "const fromListToObject = (array) => {\n  const obj = {};\n\n  for (let i = 0; i < array.length; i += 1) {\n    /* eslint-disable-next-line prefer-destructuring */\n    obj[array[i][0]] = array[i][1];\n  }\n\n  return obj;\n};\n\nmodule.exports = fromListToObject;\n"
                },
                "dGVzdA==": {
                  "ZnJvbUxpc3RUb09iamVjdC5zcGVjLmpz": "const { assert } = require('chai');\nconst fromListToObject = require('../solution/fromListToObject');\n\ndescribe('fromListToObject()', () => {\n  it(\"debería regresar { make: 'Ford', model: 'Mustang', year: 1964, quality: 'eeehhh' }, para [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964], ['quality', 'eeehhh']]\", () => {\n    const array = [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964], ['quality', 'eeehhh']];\n    const hasil = {\n      make: 'Ford',\n      model: 'Mustang',\n      year: 1964,\n      quality: 'eeehhh',\n    };\n    assert.deepEqual(fromListToObject(array), hasil);\n  });\n\n  it(\"debería regresar { make : 'Ford', model : 'Mustang', year : 1964 }, para [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]]\", () => {\n    const array = [['make', 'Ford'], ['model', 'Mustang'], ['year', 1964]];\n    const hasil = {\n      make: 'Ford',\n      model: 'Mustang',\n      year: 1964,\n    };\n    assert.deepEqual(fromListToObject(array), hasil);\n  });\n\n  it(\"debería regresar { Kemal: 'Mahmud' }, para [['Kemal', 'Mahmud']]\", () => {\n    const array = [['Kemal', 'Mahmud']];\n    const hasil = {\n      Kemal: 'Mahmud',\n    };\n    assert.deepEqual(fromListToObject(array), hasil);\n  });\n});\n"
                }
              }
            },
            "08-list-all-values": {
              "title": "listAllValues",
              "body": "<p>Escreva uma função chamada <code>listAllValues</code> que retorna um <em>array</em> de todos os\nvalores do objeto de entrada.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">{\n  name: 'Krysten'\n  age: 33,\n  hasPets: false\n}\n</code></pre>\n<p>Valor devolvido pela função (saída):</p>\n<pre><code class=\"language-javascript\">['Krysten', 33, false]\n</code></pre>\n<p>Observe que a entrada pode ter um número diferente de chaves e valores que a\namostra fornecida. Por exemplo, você também deve manipular uma entrada como:</p>\n<pre><code class=\"language-javascript\">{\n  a: 'a',\n  number: 11 ,\n  hungry: true,\n  grammyWins: 1\n}\n</code></pre>\n<p>Valor devolvido pela função (saída):</p>\n<pre><code class=\"language-javascript\">['a', 11, true, 1]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# listAllValues\n\nEscribe una función llamada `listAllValues` que devuelve un array de todos los\nvalores del objeto de entrada.\n\nEjemplo de entrada:\n\n```js\n{\n  name: 'Krysten',\n  age: 33,\n  hasPets: false\n}\n```\n\nValor de retorno de la función (salida):\n\n```js\n['Krysten', 33, false]\n```\n\nTen en cuenta que la entrada puede tener un número diferente de llaves y\nvalores que la muestra dada.\n\nPor ejemplo, también debe manejar una entrada como:\n\n```js\n{\n  a: 'a',\n  number: 11,\n  hungry: true,\n  grammyWins: 1\n}\n```\n\nValor de retorno de la función (salida):\n\n```js\n['a', 11, true, 1]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "bGlzdEFsbFZhbHVlcy5qcw==": "const listAllValues = (obj) => {\n  // your code here\n};\n\nmodule.exports = listAllValues;\n"
                },
                "c29sdXRpb24=": {
                  "bGlzdEFsbFZhbHVlcy5qcw==": "const listAllValues = (obj) => {\n  const arr = [];\n  const arrKeys = Object.keys(obj);\n\n  for (let i = 0; i < arrKeys.length; i += 1) {\n    arr.push(obj[arrKeys[i]]);\n  }\n\n  return arr;\n};\n\nmodule.exports = listAllValues;\n"
                },
                "dGVzdA==": {
                  "bGlzdEFsbFZhbHVlcy5zcGVjLmpz": "const { assert } = require('chai');\nconst listAllValues = require('../solution/listAllValues');\n\ndescribe('listAllValues()', () => {\n  it('debería regresar [1, 2, 3, false, false], para { a: 1, b: 2, c: 3, d: false, e: false }', () => {\n    const obj = {\n      a: 1,\n      b: 2,\n      c: 3,\n      d: false,\n      e: false,\n    };\n    const hasil = [1, 2, 3, false, false];\n\n    assert.deepEqual(listAllValues(obj), hasil);\n  });\n\n  it(\"debería regresar ['a', 11, true, 1], para { a: 'a', number: 11, hungry: true, grammyWins: 1 }\", () => {\n    const obj = {\n      a: 'a',\n      number: 11,\n      hungry: true,\n      grammyWins: 1,\n    };\n    const hasil = ['a', 11, true, 1];\n\n    assert.deepEqual(listAllValues(obj), hasil);\n  });\n\n  it(\"debería regresar ['yes'], para { tez: 'yes' }\", () => {\n    const obj = {\n      tez: 'yes',\n    };\n    const hasil = ['yes'];\n\n    assert.deepEqual(listAllValues(obj), hasil);\n  });\n});\n"
                }
              }
            },
            "09-transform-employee-data": {
              "title": "transformEmployeeData",
              "body": "<p>Escreva uma função chamada \"transformEmployeeData\" que transforma alguns dados\nde funcionários de um formato para outro.</p>\n<p>O argumento ficará assim:</p>\n<pre><code class=\"language-javascript\">[\n  [\n    ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']\n  ]\n  [\n    ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36 ], ['role', 'manager']\n  ]\n]\n</code></pre>\n<p>Dada a entrada, o valor de retorno deve ficar assim:</p>\n<pre><code class=\"language-javascript\">[\n    {firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'},\n    {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}\n]\n</code></pre>\n<p>Observe que a entrada pode ter um número diferente de linhas ou chaves\ndiferentes da amostra fornecida.</p>\n<p>Por exemplo, digamos que o departamento de recursos humanos inclua um campo\n\"tshirtSize\" em cada registro de funcionário. Seu código deve ser flexível para\ntratar essa situação.</p>\n",
              "files": {
                "UkVBRE1FLm1k": "# transformEmployeeData\n\nEscribe una función llamada `transformEmployeeData` que transforma algunos\ndatos de los empleados de un formato a otro.\n\nEl argumento se verá así:\n\n```js\n[\n  [\n    ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']\n  ],\n  [\n    ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']\n  ]\n]\n```\n\nDado que la entrada, el valor devuelto debe verse como esto:\n\n```js\n[\n    {firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'},\n    {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}\n]\n```\n\nTenga en cuenta que la entrada puede tener un número diferente de filas o llaves\ndiferentes de la muestra dada.\n\nPor ejemplo, digamos que el departamento de recursos humanos agrega un campo\n\"tshirtSize\" a cada registro de empleado. Su código debería acomodarse de manera\nflexible.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "dHJhbnNmb3JtRW1wbG95ZWVEYXRhLmpz": "const transformEmployeeData = (array) => {\n  // your code here\n};\n\nmodule.exports = transformEmployeeData;\n"
                },
                "c29sdXRpb24=": {
                  "dHJhbnNmb3JtRW1wbG95ZWVEYXRhLmpz": "const transformEmployeeData = (array) => {\n  const arrayMain = [];\n\n  for (let i = 0; i < array.length; i += 1) {\n    const arr = array[i];\n    const obj = {};\n\n    for (let j = 0; j < arr.length; j += 1) {\n      /* eslint-disable-next-line prefer-destructuring */\n      obj[arr[j][0]] = arr[j][1];\n    }\n\n    arrayMain.push(obj);\n  }\n\n  return arrayMain;\n};\n\nmodule.exports = transformEmployeeData;\n"
                },
                "dGVzdA==": {
                  "dHJhbnNmb3JtRW1wbG95ZWVEYXRhLnNwZWMuanM=": "const { assert } = require('chai');\nconst transformEmployeeData = require('../solution/transformEmployeeData');\n\ndescribe('transformEmployeeData()', () => {\n  it(\"debería regresar [{a: 1, b: 2, c: true}, {a: 10, b: 20, c: false}], para [[['a', 1], ['b', 2], ['c', true]],[['a', 10], ['b', 20], ['c', false]]]\", () => {\n    const array = [\n      [\n        ['a', 1], ['b', 2], ['c', true],\n      ],\n      [\n        ['a', 10], ['b', 20], ['c', false],\n      ],\n    ];\n    const hasil = [\n      { a: 1, b: 2, c: true },\n      { a: 10, b: 20, c: false },\n    ];\n    assert.deepEqual(transformEmployeeData(array), hasil);\n  });\n\n  it(\"debería regresar [{firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'}, {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}], para [[['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']],[['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']]]\", () => {\n    const array = [\n      [\n        ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk'],\n      ],\n      [\n        ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager'],\n      ],\n    ];\n    const hasil = [\n      {\n        firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk',\n      },\n      {\n        firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager',\n      },\n    ];\n    assert.deepEqual(transformEmployeeData(array), hasil);\n  });\n});\n"
                }
              }
            },
            "10-convert-object-to-list": {
              "title": "convertObjectToList",
              "body": "<p>Escreva uma função chamada \"convertObjectToList\" que converte um objeto literal\nem um vetor de vetores, como neste exemplo:</p>\n<p>Argumento:</p>\n<pre><code class=\"language-javascript\">{\n  name: 'Holly',\n  edad: 35,\n  papel: 'productor'\n}\n</code></pre>\n<p>Valor devolvido:</p>\n<pre><code class=\"language-javascript\">[['name', 'Holly'], ['edad', 35], ['rol', 'productor']]\n</code></pre>\n<p>Tenha em mente que sua função deve ser capaz de manipular qualquer objeto como\neste, não apenas a amostra exata fornecida acima.</p>\n<p>Por exemplo, você também deve conseguir manipular a entrada abaixo ou qualquer\noutro objeto que contenha pares de chave-valor simples.</p>\n<pre><code class=\"language-javascript\">{\n  species: 'canino',\n  name: 'Bowser',\n  weight: 45\n}\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# convertObjectToList\n\nEscribe una función llamada `convertObjectToList` que convierte un objeto\nliteral en una array de arrays, como esto:\n\nArgumento:\n\n```js\n{\n  name: 'Holly',\n  edad: 35,\n  papel: 'productor'\n}\n```\n\nValor de retorno:\n\n```js\n[['name', 'Holly'], ['edad', 35], ['rol', 'productor']]\n```\n\nTen en cuenta que tu función debe ser capaz de manejar cualquier objeto como\neste, no sólo la muestra exacta proporcionada anteriormente.\n\nPor ejemplo, también debería ser capaz de manejar esto, o cualquier otro objeto\nque contiene pares llave-valor simples.\n\n```js\n{\n  species: 'canino',\n  name: 'Bowser',\n  weight: 45\n}\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y29udmVydE9iamVjdFRvTGlzdC5qcw==": "const convertObjectToList = (obj) => {\n  // your code here\n};\n\nmodule.exports = convertObjectToList;\n"
                },
                "c29sdXRpb24=": {
                  "Y29udmVydE9iamVjdFRvTGlzdC5qcw==": "const convertObjectToList = (obj) => {\n  const arr = [];\n  const arrKeys = Object.keys(obj);\n\n  for (let i = 0; i < arrKeys.length; i += 1) {\n    arr.push([arrKeys[i], obj[arrKeys[i]]]);\n  }\n\n  return arr;\n};\n\nmodule.exports = convertObjectToList;\n"
                },
                "dGVzdA==": {
                  "Y29udmVydE9iamVjdFRvTGlzdC5zcGVjLmpz": "const { assert } = require('chai');\nconst convertObjectToList = require('../solution/convertObjectToList');\n\ndescribe('convertObjectToList()', () => {\n  it(\"debería regresar [['a', 1], ['b', 'c'], ['d', true], ['e', 10]], para { a: 1, b: 'c', d: true, e: 10 }\", () => {\n    const obj = {\n      a: 1,\n      b: 'c',\n      d: true,\n      e: 10,\n    };\n    const hasil = [['a', 1], ['b', 'c'], ['d', true], ['e', 10]];\n\n    assert.deepEqual(convertObjectToList(obj), hasil);\n  });\n\n  it(\"debería regresar [['name', 'Holly'], ['age', 35], ['role', 'producer']], para { name: 'Holly', age: 35, role: 'producer' }\", () => {\n    const obj = {\n      name: 'Holly',\n      age: 35,\n      role: 'producer',\n    };\n    const hasil = [['name', 'Holly'], ['age', 35], ['role', 'producer']];\n\n    assert.deepEqual(convertObjectToList(obj), hasil);\n  });\n});\n"
                }
              }
            },
            "11-get-sum-of-all-elements-at-property": {
              "title": "getSumOfAllElementsAtProperty",
              "body": "<p>Escreva uma função chamada \"getSumOfAllElementsAtProperty\".</p>\n<p>Dado um objeto e uma chave, \"getSumOfAllElementsAtProperty\" devolve a soma de\ntodos os elementos da matriz.</p>\n<p>Notas:</p>\n<ul>\n<li>Se o <em>array</em> estiver vazio, ela deve devolver 0.</li>\n<li>Se a propriedade na chave fornecida não for um <em>array</em>, ela deverá devolver 0.</li>\n<li>Se não houver nenhuma propriedade na chave fornecida, ela deverá devolver 0.</li>\n</ul>\n<pre><code class=\"language-javascript\">const obj = {\n  key: [4, 1, 8],\n};\n\nconst output = getSumOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // -&gt; 13\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getSumOfAllElementsAtProperty\n\nEscribe una función llamada `getSumOfAllElementsAtProperty`.\n\nDado un objeto y una key, `getSumOfAllElementsAtProperty` devuelve la suma de\ntodos los elementos del array.\n\nNotas:\n\n- Si el array está vacío, debe devolver `0`.\n- Si la propiedad en la key dada no es un array, debe devolver `0`.\n- Si no hay ninguna propiedad en la key dada, debe devolver `0`.\n\n```js\nconst obj = {\n  key: [4, 1, 8],\n};\n\nconst output = getSumOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // => 13\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0U3VtT2ZBbGxFbGVtZW50c0F0UHJvcGVydHkuanM=": "const getSumOfAllElementsAtProperty = (obj, key) => {\n  // your code here\n};\n\nmodule.exports = getSumOfAllElementsAtProperty;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0U3VtT2ZBbGxFbGVtZW50c0F0UHJvcGVydHkuanM=": "const getSumOfAllElementsAtProperty = (obj, key) => {\n  let sum = 0;\n  const array = obj[key];\n\n  if (Array.isArray(array) && (array.length > 0)) {\n    [sum] = array;\n\n    for (let i = 1; i < array.length; i += 1) { sum += array[i]; }\n  }\n\n  return sum;\n};\n\nmodule.exports = getSumOfAllElementsAtProperty;\n"
                },
                "dGVzdA==": {
                  "Z2V0U3VtT2ZBbGxFbGVtZW50c0F0UHJvcGVydHkuc3BlYy5qcw==": "const { assert } = require('chai');\nconst getSumOfAllElementsAtProperty = require('../solution/getSumOfAllElementsAtProperty');\n\ndescribe('getSumOfAllElementsAtProperty()', () => {\n  it(\"debería regresar 0, para { key: Badddlyyyy } y 'key'\", () => {\n    const obj = {\n      koy: 'Badddlyyyy',\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { koy: 'nope' } y 'key'\", () => {\n    const obj = {\n      koy: [],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { key: [] } y 'key'\", () => {\n    const obj = {\n      key: [],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 35, para { key: [10, 11, 15, -1] } y 'key'\", () => {\n    const obj = {\n      key: [10, 11, 15, -1],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 35);\n  });\n\n  it(\"debería regresar 13, para { key: [4, 1, 8] } y 'key'\", () => {\n    const obj = {\n      key: [4, 1, 8],\n    };\n    const output = getSumOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 13);\n  });\n});\n"
                }
              }
            },
            "12-get-product-of-all-elements-at-property": {
              "title": "getProductOfAllElementsAtProperty",
              "body": "<p>Escreva uma função chamada <code>getProductOfAllElementsAtProperty</code>.</p>\n<p>Dado um objeto e uma chave, <code>getProductOfAllElementsAtProperty</code> retorna o\nproduto de todos os elementos do <em>array</em>.</p>\n<p>Notas:</p>\n<ul>\n<li>Se o <em>array</em> estiver vazio, ela deve devolver 0.</li>\n<li>Se a propriedade na chave fornecida não for um <em>array</em>, ela deverá devolver 0.</li>\n<li>Se não houver nenhuma propriedade na chave fornecida, ela deverá devolver 0.</li>\n</ul>\n<pre><code class=\"language-javascript\">const obj = {\n  key: [1, 2, 3, 4],\n};\n\nconst output = getProductOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // -&gt; 24\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# getProductOfAllElementsAtProperty\n\nEscribe una función llamada `getProductOfAllElementsAtProperty`.\n\nDado un objeto y una key, `getProductOfAllElementsAtProperty` devuelve el\nproducto de todos los elementos del array.\n\nNotas:\n\n- Si el array está vacío, debe devolver 0.\n- Si la propiedad en la key dada no es un array, debe devolver 0.\n- Si no hay ninguna propiedad en la key dada, debe devolver 0.\n\n```js\nconst obj = {\n  key: [1, 2, 3, 4],\n};\n\nconst output = getProductOfAllElementsAtProperty(obj, 'key');\nconsole.log(output); // => 24\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Z2V0UHJvZHVjdE9mQWxsRWxlbWVudHNBdFByb3BlcnR5Lmpz": "const getProductOfAllElementsAtProperty = (obj, key) => {\n  // your code here\n};\n\nmodule.exports = getProductOfAllElementsAtProperty;\n"
                },
                "c29sdXRpb24=": {
                  "Z2V0UHJvZHVjdE9mQWxsRWxlbWVudHNBdFByb3BlcnR5Lmpz": "const getProductOfAllElementsAtProperty = (obj, key) => {\n  let product = 0;\n  const array = obj[key];\n\n  if (Array.isArray(array) && (array.length > 0)) {\n    [product] = array;\n\n    for (let i = 1; i < array.length; i += 1) { product *= array[i]; }\n  }\n\n  return product;\n};\n\nmodule.exports = getProductOfAllElementsAtProperty;\n"
                },
                "dGVzdA==": {
                  "Z2V0UHJvZHVjdE9mQWxsRWxlbWVudHNBdFByb3BlcnR5LnNwZWMuanM=": "const { assert } = require('chai');\nconst getProductOfAllElementsAtProperty = require('../solution/getProductOfAllElementsAtProperty');\n\ndescribe('getProductOfAllElementsAtProperty()', () => {\n  it(\"debería regresar 0, para { koy: [1, 2, 3] } y 'key'\", () => {\n    const obj = {\n      koy: [1, 2, 3],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { key: 'nope' } y 'key'\", () => {\n    const obj = {\n      key: 'nope',\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 0, para { key: [] } y 'key'\", () => {\n    const obj = {\n      key: [],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 0);\n  });\n\n  it(\"debería regresar 24, para { key: [1, 2, 3, 4] } y 'key'\", () => {\n    const obj = {\n      key: [1, 2, 3, 4],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 24);\n  });\n\n  it(\"debería regresar 60, para { key: [1, 5, 6, 2, 1] } y 'key'\", () => {\n    const obj = {\n      key: [1, 5, 6, 2, 1],\n    };\n    const output = getProductOfAllElementsAtProperty(obj, 'key');\n\n    assert.deepEqual(output, 60);\n  });\n});\n"
                }
              }
            },
            "13-add-object-property": {
              "title": "addObjectProperty",
              "body": "<p>Escreva uma função chamada \"addObjectProperty\".</p>\n<p>Dados dois objetos e uma chave, \"addObjectProperty\" define uma nova propriedade\nno primeiro objeto na chave determinada. O valor dessa nova propriedade é o\nsegundo objeto completo.</p>\n<pre><code class=\"language-javascript\">const person1 = {\n  name: 'Joe Blow',\n  role: 'schlub',\n};\n\nconst person2 = {\n  name: 'Mr. Burns',\n  role: 'supervisor',\n};\n\naddObjectProperty(person1, 'manager', person2);\nconsole.log(person1.manager);\n// --&gt; { name: 'Mr. Burns', role: 'supervisor' }\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# addObjectProperty\n\nEscribe una función llamada `addObjectProperty`.\n\nDado dos objetos y una llave, `addObjectProperty` establece una nueva propiedad\nen el primer objeto en la llave dada. El valor de esta nueva propiedad es el\nsegundo objeto completo.\n\n```js\nconst person1 = {\n  name: 'Joe Blow',\n  role: 'schlub',\n};\n\nconst person2 = {\n  name: 'Mr. Burns',\n  role: 'supervisor',\n};\n\naddObjectProperty(person1, 'manager', person2);\nconsole.log(person1.manager); // => { name: 'Mr. Burns', role: 'supervisor' }\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YWRkT2JqZWN0UHJvcGVydHkuanM=": "const addObjectProperty = (obj1, key, obj2) => {\n  // your code here\n};\n\nmodule.exports = addObjectProperty;\n"
                },
                "c29sdXRpb24=": {
                  "YWRkT2JqZWN0UHJvcGVydHkuanM=": "const addObjectProperty = (obj1, key, obj2) => Object.assign(obj1, { [key]: obj2 });\n\nmodule.exports = addObjectProperty;\n"
                },
                "dGVzdA==": {
                  "YWRkT2JqZWN0UHJvcGVydHkuc3BlYy5qcw==": "const { assert } = require('chai');\nconst addObjectProperty = require('../solution/addObjectProperty');\n\ndescribe('addObjectProperty(obj1, key, obj2)', () => {\n  it('debería asignar obj2 en obj1[key]', () => {\n    const person1 = { name: 'Medina', role: 'Euuuuhhh' };\n    const person2 = { name: 'Fadel', role: 'Aaaahhhh' };\n\n    addObjectProperty(person1, 'bawahan', person2);\n\n    assert.deepEqual(person1.bawahan, person2);\n  });\n});\n"
                }
              }
            },
            "14-add-full-name-property": {
              "title": "addFullNameProperty",
              "body": "<p>Escreva uma função chamada \"addFullNameProperty\".</p>\n<p>Dado um objeto que tem uma propriedade <code>firstName</code> e uma propriedade <code>lastName</code>,\n<code>addFullNameProperty(person)</code> retorna um novo objeto com as mesmas propriedades\nque o objeto recebido, mas com mais uma propriedade <code>fullName</code> cujo valor é\numa string com o nome e sobrenome separados por um espaço.</p>\n<pre><code class=\"language-javascript\">const person = {\n  firstName: 'Jade',\n  lastName: 'Smith',\n};\n\nconst personWithFullName = addFullNameProperty(person);\n\nconsole.log(personWithFullName.fullName); // =&gt; 'Jade Smith'\nconsole.log(personWithFullName.firstName); // =&gt; 'Jade'\nconsole.log(personWithFullName.lastName); // =&gt; 'Smith'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# addFullNameProperty\n\nEscribe una función llamada `addFullNameProperty(person)`.\n\nDado un objeto `person` con una propiedad `firstName` y una propiedad\n`lastName`, `addFullNameProperty(person)` debe retornar un nuevo objeto con las\nmismas propiedades que el objeto recibido pero con una propiedad más `fullName`,\ncuyo valor debe ser una cadena (string) con el nombre y el apellido separados\npor un espacio.\n\n```js\nconst person = {\n  firstName: 'Jade',\n  lastName: 'Smith',\n};\n\nconst personWithFullName = addFullNameProperty(person);\n\nconsole.log(personWithFullName.fullName); // => 'Jade Smith'\nconsole.log(personWithFullName.firstName); // => 'Jade'\nconsole.log(personWithFullName.lastName); // => 'Smith'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "YWRkRnVsbE5hbWVQcm9wZXJ0eS5qcw==": "const addFullNameProperty = (obj) => {\n  // your code here\n};\n\nmodule.exports = addFullNameProperty;\n"
                },
                "c29sdXRpb24=": {
                  "YWRkRnVsbE5hbWVQcm9wZXJ0eS5qcw==": "const addFullNameProperty = obj => ({\n  ...obj,\n  fullName: `${obj.firstName} ${obj.lastName}`,\n});\n\nmodule.exports = addFullNameProperty;\n"
                },
                "dGVzdA==": {
                  "YWRkRnVsbE5hbWVQcm9wZXJ0eS5zcGVjLmpz": "const { assert } = require('chai');\nconst addFullNameProperty = require('../solution/addFullNameProperty');\n\ndescribe('addFullNameProperty()', () => {\n  it('debería regresar \"Kemal Mahmud\", para {firstName: \"Kemal\", lastName: \"Mahmud\"}', () => {\n    const person = { firstName: 'Kemal', lastName: 'Mahmud' };\n    const personWithFullName = addFullNameProperty(person);\n\n    assert.ok(personWithFullName !== person);\n    assert.equal(personWithFullName.firstName, 'Kemal');\n    assert.equal(personWithFullName.lastName, 'Mahmud');\n    assert.equal(personWithFullName.fullName, 'Kemal Mahmud');\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "3h"
        },
        "07-requiz": {
          "questions": [
            {
              "title": "1) Para que os objetos são úteis?",
              "description": "",
              "answers": [
                "Para deixar de usar <em>arrays</em> e variáveis",
                "Para poder usar repositórios em <code>Git</code>",
                "Para armazenar diferentes peças de informação sobre você",
                "Para salvar minhas informações na nuvem e depois compartilhá-las"
              ],
              "solution": [
                2
              ]
            },
            {
              "title": "2) Qual das seguintes afirmações sobre Objetos é correta? Você pode selecionar uma ou mais opções",
              "description": "",
              "answers": [
                "As propriedades devem sempre ser colocadas entre aspas",
                "Nós não devemos incluir um <em>array</em> como propriedade",
                "Podemos incluir uma função como propriedade",
                "As chaves dos objetos são equivalentes às suas propriedades"
              ],
              "solution": [
                2,
                3
              ]
            },
            {
              "title": "3) Podemos acessar os valores de um objeto usando colchetes []ou usando ponto.",
              "description": "",
              "answers": [
                "Verdadeiro",
                "Falso"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "4) Os métodos são _____________ que contêm _____________",
              "description": "",
              "answers": [
                "propriedades - funções",
                "funções - propriedades",
                "elementos - objetos",
                "objetos - elementos"
              ],
              "solution": [
                0
              ]
            },
            {
              "title": "5) Qual é o resultado do código a seguir?",
              "description": "<pre><code class=\"language-javascript\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox', 'Christopher Lloyd', 'Lea Thompson'],\n  tags: ['Adventure', 'Comedy', 'Sci-Fi'],\n};\n\nconsole.log(movie.tags[1]);\n</code></pre>",
              "answers": [
                "Adventure",
                "Comedy",
                "Sci-Fi",
                "undefined"
              ],
              "solution": [
                1
              ]
            },
            {
              "title": "6) Qual é o erro no código a seguir?",
              "description": "<pre><code class=\"language-javascript\">const movie = {\n  title: 'Back to the Future',\n  director: 'Robert Zemeckis',\n  stars: ['Michael J. Fox'; 'Christopher Lloyd'; 'Lea Thompson'],\n  oscar: 1,\n  'other awards': 'best sound',\n  tags: [],\n};\n</code></pre>",
              "answers": [
                "A propriedade <code>tags</code> não pode estar vazia",
                "As aspas <code>' '</code> da propriedade <code>other awards</code> estão sobrando",
                "Na propriedade <code>stars</code>, devemos usar vírgulas (<code>,</code>) em vez de pontos e\nvírgulas (<code>;</code>)",
                "Não há erro"
              ],
              "solution": [
                2
              ]
            }
          ],
          "title": "Quiz 2",
          "type": "quiz",
          "format": "self-paced",
          "duration": 15,
          "order": 6,
          "durationString": "15min"
        }
      },
      "order": 4,
      "stats": {
        "duration": 400,
        "durationString": "6.7h",
        "exerciseCount": 15,
        "partCount": 7
      }
    },
    "06-strings": {
      "title": "Strings",
      "bonus": false,
      "description": "<p>Em JavaScript, textos são do tipo <code>string</code>, que guardam junções de caracteres.</p>\n",
      "parts": {
        "01-strings": {
          "title": "Strings",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Aprender as possibilidades e flexibilidade que as <code>strings</code> nos oferecem</li>\n</ul>\n<p>Este conteúdo foi quase uma tradução literal de\n<a href=\"https://javascript.info/string\" target=\"_blank\">https://javascript.info/string</a>, aqui a\n<a href=\"https://github.com/iliakan/javascript-tutorial-en/blob/master/1-js/05-data-types/03-string/article.md\" target=\"_blank\">fonte</a></p>\n<hr>\n<p>Em JavaScript, todos os <em>textos</em> são do tipo <code>string</code>. Até apenas um caractere é\ndo tipo <code>string</code>.</p>\n<h2 id=\"quotes-aspas\">Quotes (Aspas)</h2>\n<p>Vamos lembrar o tipo de aspas que temos.</p>\n<p>As <code>strings</code> podem ser aspas simples (<em>single quotes</em>), duplas (<em>double quotes</em>)\nou crase (<em>backticks</em>):</p>\n<pre><code class=\"language-js\">const single = 'single-quoted';\nconst double = \"double-quoted\";\nconst backticks = `backticks`;\n</code></pre>\n<p>As aspas simples e duplas, são basicamente a mesma coisa. A crase tem uma\ndiferença, nos permite colocar (interpolar) qualquer expressão dentro de uma\nstring:</p>\n<pre><code class=\"language-js\">const greeting = 'Mundo';\nconsole.assert(`Olá ${greeting}` === 'Olá Mundo');\n\nconst sqrt = Math.sqrt(7);\nconsole.assert(`sqrt(7) ~ ${sqrt.toFixed(2)}` === 'sqrt(7) ~ 2.65');\n\nconst sum = (a, b) =&gt; a + b;\nconsole.assert(`1 + 2 = ${sum(1, 2)}` === '1 + 2 = 3');\n\nconsole.assert(`${'Olá'.concat(` ${'Mun'.concat('do')}`)}!` === 'Olá Mundo!');\n</code></pre>\n<p>Outra vantagem de usar crase, é o que nós permite criar textos com múltiplas\nlinhas:</p>\n<pre><code class=\"language-js\">const guestList = `Guests:\n * John\n * Pete\n * Mary\n`;\n\nconsole.assert(guestList === 'Guests:\\n * John\\n * Pete\\n * Mary\\n');\n</code></pre>\n<p>Se tentarmos usar aspas simples ou duplas para fazer o mesmo, dará um erro:</p>\n<pre><code class=\"language-js\">let guestList = \"Guests:  // Error: Unexpected token ILLEGAL\n* John\";\n</code></pre>\n<p>As aspas simples ou duplas foram herdadas de linguagem tradicionais, onde não se\ncontemplam a interpolação de variáveis ou as <code>strings</code> de mais de uma linha.</p>\n<p>As crases apareceram muito depois e por isso são muito mais versáteis.</p>\n<h2 id=\"caracteres-especiais\">Caracteres especiais</h2>\n<p>Como vimos antes, é possível criar um <em>multiline string</em> usando aspas simples,\ngraças a um caractere especial, chamado <em>newline character</em>, que é representado\npor <code>\\n</code>, e isso adiciona uma nova linha:</p>\n<pre><code class=\"language-js\">console.assert(\n  `Guests:\n * John\n * Pete\n * Mary` === 'Guests:\\n * John\\n * Pete\\n * Mary',\n);\n\nconsole.assert(\n  `Hello\nWorld` === 'Hello\\nWorld',\n);\n</code></pre>\n<p>Existe outros caractes especiais, que não são tão comuns. Aqui está a lista:</p>\n<table>\n<thead>\n<tr>\n<th>Caractere</th>\n<th>Descrição</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\'</code></td>\n<td>Single quote</td>\n</tr>\n<tr>\n<td><code>\\\"</code></td>\n<td>Double quote</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>Backslash</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>Backspace</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>Form feed</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>Newline</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>Carriage return</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>Horizontal tab</td>\n</tr>\n<tr>\n<td><code>\\ddd</code></td>\n<td>Secuencia octal (3 digitos: ddd)</td>\n</tr>\n<tr>\n<td><code>\\xdd</code></td>\n<td>Secuencia hexadecimal (2 digitos: dd)</td>\n</tr>\n<tr>\n<td><code>\\uNNNN</code></td>\n<td>Símbolo unicode con código hexadecimal</td>\n</tr>\n</tbody></table>\n<p>Alguns exemplos com Unicode:</p>\n<pre><code class=\"language-js\">console.assert('\\u00A9' === '©');\nconsole.assert('\\u{1F60D}' === '😍');\n</code></pre>\n<p>Todos os caracteres especiais, começam com a barra invertida <code>\\</code>. Também chamado\nde <em>escape character</em>.</p>\n<pre><code class=\"language-js\">console.assert('I\\'m the Walrus!' === \"I'm the Walrus!\");\n</code></pre>\n<p>Note que só usamos a barra invertida apenas para que o intérprete do JavaScript\nentenda o que queremos dizer. Uma vez na memória, o <code>\\</code> desaparece.</p>\n<p>O que fazemos se precisamos mostrar uma barra invertida? Usamos <code>\\\\</code>:</p>\n<pre><code class=\"language-js\">alert( `The backslash: \\\\` ); // The backslash: \\\n</code></pre>\n<h2 id=\"stringlength\"><code>String.length</code></h2>\n<p>A propriedade <code>length</code> retorna o tamanho da <code>String</code>:</p>\n<pre><code class=\"language-js\">console.assert('My\\n'.length === 3);\n</code></pre>\n<p>Note que os caracteres especiais, apesar de serem compostos por 2 caractes,\ncontam apenas um.</p>\n<h2 id=\"acessando-caracteres-específicos\">Acessando caracteres específicos</h2>\n<p>Para obter o caractere da possição <code>pos</code>, usamos os colchetes <code>[pos]</code> ou o\nmétodo <code>str.charAt(pos)</code>.</p>\n<pre><code class=\"language-js\">let str = `Hello`;\n\nconsole.assert(str[0] === 'H');\nconsole.assert(str.charAt(0) === 'H');\nconsole.assert(str[1000] === undefined);\nconsole.assert(str.charAt(1000) === '');\n\n/* el último caracter */\nconsole.assert(str[str.length - 1] === 'o');\n</code></pre>\n<h2 id=\"imutabilidade\">Imutabilidade</h2>\n<p>Em JavaScript, as <code>string</code> <strong>não podem alterar o seu valor</strong>. Inclusive se\ntentarmos, não conseguimos.</p>\n<pre><code class=\"language-js\">str = 'Hi';\nstr[0] = 'P';\nconsole.assert(str[0] === 'H'); /* No cambió */\n</code></pre>\n<p>A forma mais comum de fazer isso é criando uma nova <code>string</code> e passando a\nanterior:</p>\n<pre><code class=\"language-js\">str = 'Hi';\nstr = `P${str[1]}`; /* substituímos */\n\nconsole.assert(str === 'Pi');\n</code></pre>\n<h2 id=\"maiúscula--minúscula\">Maiúscula / minúscula</h2>\n<pre><code class=\"language-js\">console.assert('Interface'.toUpperCase() === 'INTERFACE');\nconsole.assert('Interface'.toLowerCase() === 'interface');\nconsole.assert('Interface'[0].toLowerCase() === 'i');\n</code></pre>\n<h2 id=\"substrings\">Substrings</h2>\n<h3 id=\"strindexof\">str.indexOf</h3>\n<pre><code class=\"language-js\">str = 'Widget with id';\n\nconsole.assert(str.indexOf('Widget') === 0);\nconsole.assert(str.indexOf('widget') === -1);\nconsole.assert(str.indexOf('id') === 1);\n</code></pre>\n<p><code>String.indexOf</code> funciona de maneira análoga <code>Array.indexOf</code>: recebe um segundo\nparâmetro opcional, que nós permite começar a buscar a partir de uma posição\nparticular.</p>\n<pre><code class=\"language-js\">console.assert(str.indexOf('id', 2) === 12);\n</code></pre>\n<p>Vejamos como seriam todas as ocorrências:</p>\n<pre><code class=\"language-js\">const equal = (one, other) =&gt; JSON.stringify(one) === JSON.stringify(other);\n\nstr = 'As sly as a fox, as strong as an ox';\n\nconst target = 'as'; // texto a buscar\nconst result = [];\n\nlet pos = 0;\nwhile (true) {\n  const foundPos = str.indexOf(target, pos);\n  if (foundPos === -1) break; // já não há mais ocorrências\n\n  result.push(foundPos);\n  pos = foundPos + 1; // próxima posição\n}\n\nconsole.assert(equal(\n  result,\n  [7, 17, 27],\n));\n</code></pre>\n<p>Assim como no <code>Array</code>, também existem os métodos <code>lastIndexOf(pos)</code> e\n<code>lastIndexOf</code>.</p>\n<h3 id=\"includes-startswith-endswith\"><code>includes</code>, <code>startsWith</code>, <code>endsWith</code></h3>\n<pre><code class=\"language-js\">console.assert('Widget with id'.includes('Widget'));\nconsole.assert(!'Hello'.includes('Bye'));\n</code></pre>\n<p>Também conta com um segundo parâmetro opcional</p>\n<pre><code class=\"language-js\">console.assert('Midget'.includes('id'));\nconsole.assert(!'Midget'.includes('id', 3));\nconsole.assert('Widget'.startsWith('Wid'));\nconsole.assert('Widget'.endsWith('get'));\n</code></pre>\n<h2 id=\"obtendo-substrings\">Obtendo substrings</h2>\n<p>Existem 3 métodos no JavaScript que nos permitem obter substring: <code>substring</code>,\n<code>substr</code> e <code>slice</code>.</p>\n<p><code>str.slice(start [, end])</code>: Retorna parte da string começando com <code>start</code> até\n(mas sem incluir) <code>end</code>.</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.slice(1, 4) === 'tri');\nconsole.assert(str.slice(0, 1) === 's');\n</code></pre>\n<p>Se não passar o segundo parâmetro, a função vai até o final da <code>string</code>.</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.slice(2) === 'ringify');\n</code></pre>\n<p>Valores negativamos para <code>start/end</code> também são possível. Isso quer dizer que a\nposição é contada a partir do final:</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.slice(-4, -1) === 'gif');\n</code></pre>\n<p><code>str.substring(start [, end])</code>: Retorna a substring entre <code>start</code> e <code>end</code>.</p>\n<p>É quase idêntico a <code>slice</code>, mas permite valores de <code>start</code> maiores que <code>end</code>.</p>\n<pre><code class=\"language-js\">str = 'stringify';\n\nconsole.assert(str.substring(2, 6) === 'ring');\nconsole.assert(str.substring(6, 2) === 'ring');\n</code></pre>\n<p>Com <code>slice</code> não funciona:</p>\n<pre><code class=\"language-js\">console.assert(str.slice(2, 6) === 'ring');\nconsole.assert(str.slice(6, 2) === '');\n</code></pre>\n<p><code>str.substr(start [, end])</code>: Retorna parte da <code>string</code> começando do <code>start</code> até\no <code>end</code>.</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.substr(2, 4) === 'ring');\n</code></pre>\n<p>O primeiro argumento pode ser negativo e assim irá contar desde o final:</p>\n<pre><code class=\"language-js\">str = 'stringify';\nconsole.assert(str.substr(-4, 2) === 'gi');\n</code></pre>\n<p>Em resumo:</p>\n<table>\n<thead>\n<tr>\n<th>método</th>\n<th>seleciona...</th>\n<th>argumentos negativos</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>slice(start, end)</code></td>\n<td>desde <code>start</code> até <code>end</code> (exclui <code>end</code>)</td>\n<td>permite negativos</td>\n</tr>\n<tr>\n<td><code>substring(start, end)</code></td>\n<td>entre <code>start</code> e <code>end</code></td>\n<td>interpreta como <code>0</code></td>\n</tr>\n<tr>\n<td><code>substr(start, length)</code></td>\n<td>desde <code>start</code>, <code>length</code> caracteres</td>\n<td>permite <code>start</code> negativo</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Todos os anteriores realizam  a mesma tarefa, mas devemos ter em conta que\n<code>substr</code> não é parte das especificação do <code>core</code> do JavaScript, mas o <em>Anexo</em>\nB, que cobre funcionalidades exclusicas dos navegadores. Mas a prática\nfunciona para todo o entorno.</p>\n</blockquote>\n<h2 id=\"comparando-strings\">Comparando strings</h2>\n<p>As <code>strings</code> são comparadas caractere por caractere em ardem alfabética.</p>\n<p>Mas existem alguns casos raros:</p>\n<ol>\n<li><p>As minúsculas são sempre <em>maiores</em> que as maiúsculas:</p>\n<pre><code class=\"language-js\">console.assert('a' &gt; 'Z');\n</code></pre>\n</li>\n<li><p>Os caracteres com sinais diacríticos, são maiores que todos os outros\ncaracteres:</p>\n<pre><code class=\"language-js\">console.assert('Ñandu' &gt; 'Zebra');\n</code></pre>\n</li>\n</ol>\n<p>Para entender o que acontence, vejamos um pouco como representam intermanente as\n<code>strings</code> em JavaScript.</p>\n<p>As <code>strings</code> se codificam usando <a href=\"https://pt.wikipedia.org/wiki/UTF-16\" target=\"_blank\">UTF-16</a>.\nIsso significa que cada caractere possui um código numérico. Nós temos métodos\nespeciais que nos permitem ir e vir entre um caractere e o código que o\nrepresenta.</p>\n<p><code>str.codePointAt(pos)</code>: Retorna o código do caractere na posição <code>pos</code>:</p>\n<pre><code class=\"language-js\">console.assert('z'.codePointAt(0) === 122);\nconsole.assert('Z'.codePointAt(0) === 90);\n</code></pre>\n<p><code>String.fromCodePoint(code)</code>: Criar uma <code>string</code> a partir do <code>code</code> numérico:</p>\n<pre><code class=\"language-js\">console.assert(String.fromCodePoint(90) === 'Z');\n</code></pre>\n<p>Agora vejamos qual são os caracteres com códigos dentre <code>65..220</code> (o alfabeto):</p>\n<pre><code class=\"language-js\">let alphabet = '';\nfor (let i = 65; i &lt;= 122; i += 1) {\n  alphabet += String.fromCodePoint(i);\n}\n\nconsole.assert(\n  alphabet === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz',\n);\n</code></pre>\n<p>Agora está claro porque <code>a &gt; Z</code>.</p>\n<h2 id=\"resumo\">Resumo</h2>\n<ul>\n<li>Tem 3 tipos de aspas. As crases nos permitem definir <code>strings</code> multilinhas e\ninterpolar valores.</li>\n<li>As <code>strings</code> em JavaScript se codificam usando UTF-16.</li>\n<li>Existem caracteres especiais como <code>\\n</code>.</li>\n<li>Para obter um caractere específico usamos: <code>[]</code>.</li>\n<li>Para obter uma substring, usamod: <code>slice</code> ou <code>substring</code>.</li>\n</ul>\n<p>Existem vários métodos úteis:</p>\n<ul>\n<li><code>str.trim()</code> -- retira os espaços extras do começo e final da <code>string</code>.</li>\n<li><code>str.repeat(n)</code> -- repete a <code>string</code> <code>n</code> vezes.</li>\n<li>... muito mais. leia no <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\">Strings no\nMDN</a>\npara mais detalhes.</li>\n</ul>\n<p>As <code>strings</code> também têm métodos para pesquisar e substituir usando expressões\n<em>regular</em>, mas isso é para outra chance.</p>\n<hr>\n<h2 id=\"recursos-sugeridos\">Recursos sugeridos</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/UTF-16\" target=\"_blank\">UTF-16</a></li>\n<li><a href=\"https://ascii.cl/es/\" target=\"_blank\">ASCII</a></li>\n<li><a href=\"https://javascript.info/string#internals-unicode\" target=\"_blank\">Js Strings Internals e\nUnicode</a></li>\n<li><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/template_strings\" target=\"_blank\">Uso da\ncrase</a></li>\n</ul>\n",
          "order": 0,
          "durationString": "30min"
        },
        "02-practice": {
          "title": "Desafios de código",
          "type": "practice",
          "format": "self-paced",
          "duration": 15,
          "exercises": {
            "01-currency-amount": {
              "title": "Montantes sem moeda",
              "env": "js",
              "body": "<p>Dado um <code>array</code> de valores em diferentes moedas, retorne apenas os valores sem\nimportar a moeda.</p>\n<blockquote>\n<p>As moedas participantes são apenas pesos chilenos ($ CLP), pesos mexicanos\n($ MXN) e soles (S/. PEN).</p>\n</blockquote>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\">const output = currencyAmount([ '$ 600 CLP', '$ 1000 MXN', 'S/. 200 PEN' ]);\n\nconsole.log(ouput); // -&gt; [ 600, 1000, 200 ]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# Montos sin moneda\n\n* Environment: `js`\n\n***\n\nDado un arreglo de montos en distintas monedas, retornar solo los valores sin\nimportar la moneda.\n\n> Las monedas participantes solo son pesos chilenos ($ CLP), pesos mexicanos\n> ($ MXN) y soles (S/. PEN).\n\nEjemplo:\n\n```javascript\nconst output = currencyAmount([ '$ 600 CLP', '$ 1000 MXN', 'S/. 200 PEN' ]);\n\nconsole.log(ouput); // -> [ 600, 1000, 200 ]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Y3VycmVuY3lBbW91bnQuanM=": "const currencyAmount = (amounts) => {\n\n};\n\nmodule.exports = currencyAmount;\n"
                },
                "c29sdXRpb24=": {
                  "Y3VycmVuY3lBbW91bnQuanM=": "const currencyAmount = amounts => amounts.map(amount => Number(amount.replace(/(\\$|S\\/\\.)|(CLP|MXN|PEN)/g, '')));\n\nmodule.exports = currencyAmount;\n"
                },
                "dGVzdA==": {
                  "Y3VycmVuY3lBbW91bnQuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst currencyAmount = require('../solution/currencyAmount');\n\ndescribe('currencyAmount()', () => {\n  it('debería regresar los montos cuando es un arreglo de montos enteros en monedas variadas', () => {\n    const amounts = ['$ 600 CLP', '$ 1000 MXN', 'S/. 200 PEN'];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, [600, 1000, 200]);\n  });\n\n  it('debería regresar los montos cuando es un arreglo de montos reales en monedas variadas', () => {\n    const amounts = ['$ 825.50 CLP', '$ 999.99 MXN', 'S/. 500.25 PEN'];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, [825.50, 999.99, 500.25]);\n  });\n\n  it('debería regresar los montos cuando es un arreglo de montos reales con una sola moneda', () => {\n    const amounts = ['$ 600 MXN', '$ 100.50 MXN', '$ 1349.99 MXN'];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, [600, 100.50, 1349.99]);\n  });\n\n  it('debería regresar un arreglo vacío cuando es un arreglo vacíơ', () => {\n    const amounts = [];\n    const output = currencyAmount(amounts);\n    Assert.deepEqual(output, []);\n  });\n});\n"
                }
              }
            },
            "02-first-and-last-to-upper": {
              "title": "Conversor de Maiúsculas",
              "env": "js",
              "body": "<p>Implemente uma função de capitalize a primeira e a última letra de uma <em>string</em>.</p>\n<p>Siga os passos abaixo para completar o programa:</p>\n<ol>\n<li>Selecione a primeira e a última letra e utilize a função\n<code>String.prototype.toUpperCase</code>.</li>\n<li>Componha a nova <code>string</code> e devolva-a.</li>\n</ol>\n",
              "files": {
                "UkVBRE1FLm1k": "# Convertir a Mayúsculas\n\n* Environment: `js`\n\n***\n\nImplementa una función que capitalice la primera y última letra de un _string_.\n\nSigue los pasos a continuación para que completes el programa.\n\n1. Seleccione la primera y ultima letra y utilice la función\n   `String.prototype.toUpperCase`.\n2. Componer la nueva cadena y retornarla.\n",
                "Ym9pbGVycGxhdGU=": {
                  "LmVzbGludHJj": "{\n  \"rules\": {\n    \"no-unused-vars\": \"off\"\n  }\n}\n",
                  "Zmlyc3RBbmRMYXN0VG9VcHBlci5qcw==": "const firstAndLastToUpper = (str) => {\n\n};\n\nmodule.exports = firstAndLastToUpper;\n"
                },
                "c29sdXRpb24=": {
                  "Zmlyc3RBbmRMYXN0VG9VcHBlci5qcw==": "const firstAndLastToUpper = (str) => {\n  const firstLetter = str.charAt(0).toUpperCase();\n  const length = str.length - 1;\n  const lastletter = str.charAt(length).toUpperCase();\n  const result = firstLetter + str.slice(1, length) + lastletter;\n  return result;\n};\n\nmodule.exports = firstAndLastToUpper;\n"
                },
                "dGVzdA==": {
                  "Zmlyc3RBbmRMYXN0VG9VcHBlci5zcGVjLmpz": "const Assert = require('chai').assert;\nconst firstAndLastToUpper = require('../solution/firstAndLastToUpper');\n\ndescribe('firstAndLastToUpper()', () => {\n  it('debería retornar en mayúsculas la primer y última letra de un string', () => {\n    Assert.deepEqual(firstAndLastToUpper('murcielago'), 'MurcielagO');\n    Assert.deepEqual(firstAndLastToUpper('sol'), 'SoL');\n    Assert.deepEqual(firstAndLastToUpper('abecedario'), 'AbecedariO');\n  });\n\n  it('debería retornar \"\" si no se le ingresa ningún parametro', () => {\n    Assert.deepEqual(firstAndLastToUpper(''), '');\n  });\n});\n"
                }
              }
            }
          },
          "order": 1,
          "durationString": "15min"
        }
      },
      "order": 5,
      "stats": {
        "duration": 45,
        "durationString": "45min",
        "exerciseCount": 2,
        "partCount": 2
      }
    },
    "07-built-ins": {
      "title": "Built-ins (bibliotecas padrão)",
      "bonus": false,
      "description": "<p>Existem alguns objetos e funções especiais que vem com o JavaScript mais que não\nsão parte da linguagem em si. São conhecidas como <em>bibliotecas padrão</em> e sempre\npodemos contar com elas.</p>\n",
      "parts": {
        "01-intro": {
          "title": "Objetos pré-construídos",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<h3 id=\"javascript-investigando-o-núcleo-da-linguagem\">JavaScript, investigando o núcleo da linguagem</h3>\n<p>Todas as linguagens de programação tem objetos pré-construídos (built-in) que\noferencem mais funcionalidades do que só a linguagem em si. Os objetos\npré-construídos nos permitem salvar tempo com funcionalidades disponíveis como\nparte da linguagem.</p>\n<p>JavaScript tem muitos <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects\" target=\"_blank\">objetos\npré-construídos</a>.</p>\n<p>O termo \"objetos globais\" (ou objetos padrão pré-construídos) não devem ser\nconfundidos com o objetvo global em si. Aqui, os objetos globais se referem a\nobjetos no <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/global_scope\" target=\"_blank\">ámbito global</a>.\nEstes objetos e funções que já vem com o JavaScript mas que não são parte da\nlinguagem em si, também conhecidas como <em>biblioteca padrão</em>, já que sempre\npodemos contar com elas. São bibliotecas que não temos que importar e sempre\nestão disponíveis, independentemente do escopo onde o código é executado\n(navegador, node, ...).</p>\n<h3 id=\"porque-usar-biblioteca-padrão\">Porque usar biblioteca padrão?</h3>\n<p>Existem muitas funcionalidades disponíveis para ajudar a escrever um programa\nbom e eficiente. Como desenvolvedor de software, nosso trabalho é encontrar a\nsolução mais simples a um problema. \"Mais simples\" é um pouco vago, vamos\ndefinir como \"é eficiente, relativamente fácil de entender, funciona e não\ndemora muito para implementar\".</p>\n<p>Quanto você levaria para escrever uma função que pegue cada numero de um <em>array</em>\ne veja se ele é positivo? Muitas funções que você encontrará em um biblioteca\npadrão são provavelmente triviais por natureza, mas já ter essas funções padrão\nvão acelerar a implementação do código (você vai falar menos vezes \"tem alguma\nfunção para isso, ou eu deveria fazer\"). Além disso outras pessoas que leem o\nseu codigo podem concentrar em aprender sobre as partes que realmente importam e\nnão perder o seu tempo tentando entendero bibliotecas que fazem apenas uma linha\nde código.</p>\n<h3 id=\"algumas-vantagem-de-utilizar-bibliotecas-padrão\">Algumas vantagem de utilizar bibliotecas padrão</h3>\n<ul>\n<li><p>Funcionam</p>\n<p>Uma das razões mais importantes do porque utilizar funções de uma biblioteca\npadrão é simplemente porque elas funcionam, elas já passaram por muitas provas\nde uso e são fáceis de usar.</p>\n</li>\n<li><p>Estão otimizadas para rendimento</p>\n<p>Existe um grupo de desenvolvimento focado em melhorá-las contantemente. Um dos\nobjetivos dessa equipe é criar códigos mais eficientes e otimizados para obter\no máximo rendimento.</p>\n</li>\n<li><p>Salvam um tempo considerável</p>\n<p>Dado que as funções gerais, como <em>\"printar\"</em> na tela, calcular uma raíz\nquadrada e muitas outras já estão escritas. Com isso você não precisa se\npreocupar em criar essas funções.</p>\n</li>\n<li><p>São suportadas na maioria dos navegadores</p>\n<p>Você esperar que a sua aplicação funcione para sempre, em qualquer lugar e\ndispositivo. Mas no mundo real as coisas estão sempre mundando. Com essas\nfunções você terá uma garantia maior de que o seu código continuará\nfuncionando.</p>\n</li>\n</ul>\n<h3 id=\"exemplo\">Exemplo</h3>\n<p>Suponhamos que você quer encontrar a raíz quadrada de um número. Você sempre\npode escrever o seu próprio código para isso. Mas esse processo pode levar um\ntempo e pode não ser nada eficiente.</p>\n<p>No JavaScript você pode encontrar a raíz quadrada utilizando a\nfunção<code>Math.sqrt()</code>.</p>\n<h3 id=\"alguns-objetos-pré-construídos-mais-utilizados\">Alguns objetos pré-construídos mais utilizados</h3>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">Array</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\">Object</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\" target=\"_blank\">Function</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" target=\"_blank\">Boolean</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Number\" target=\"_blank\">Number</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math\" target=\"_blank\">Math</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date\" target=\"_blank\">Date</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\">String</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\">RegExp</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/JSON\" target=\"_blank\">JSON</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\">Symbol</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error\" target=\"_blank\">Error</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/EvalError\" target=\"_blank\">EvalError</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/InternalError\" target=\"_blank\">InternalError</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RangeError\" target=\"_blank\">RangeError</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" target=\"_blank\">ReferenceError</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\" target=\"_blank\">SyntaxError</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" target=\"_blank\">TypeError</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/URIError\" target=\"_blank\">URIError</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/DataView\" target=\"_blank\">DataView</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\">Proxy</a></p>\n</li>\n</ul>\n",
          "order": 0,
          "durationString": "15min"
        }
      },
      "order": 6,
      "stats": {
        "duration": 15,
        "durationString": "15min",
        "exerciseCount": 0,
        "partCount": 1
      }
    },
    "08-async": {
      "title": "Asincronía",
      "bonus": false,
      "description": "<p>JavaScript é uma linguagem que permite manipular <em>assincronia</em> de uma maneira\nelegante graças à sua implementação de funções e sua natureza <em>non-blocking</em>\n(que não bloqueia a <em>thread</em> enquanto espera que uma tarefa assíncrona seja\ncompletada). Nesta unidade veremos <strong>callbacks</strong>, <strong>eventos</strong> e <strong>promessas</strong>\ncomo maneiras de trabalhar com tarefas assíncronas.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Abertura",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"por-que-aprender-isto\">Por que aprender isto?</h2>\n<p>Entender o conceito de <em>assincronia</em> e como manipular processos assíncronos é\nfundamental para toda desenvolvedora web. Todas as interações com o usuários,\noperações de rede, eventos do navegador, ... são assíncronas. Isso quer dizer\nque precisam <em>esperar</em> (que um evento ocorra, que recebamos uma resposta por\nhttp, ...) para poder completar o trabalho.</p>\n<p>JavaScript é uma linguagem que permite manipular <em>assincronia</em> de uma maneira\nelegante graças à sua implementação de funções e sua natureza <em>non-blocking</em>\n(que não bloqueia a <em>thread</em> enquanto espera que uma tarefa assíncrona seja\ncompletada). Nesta unidade veremos <strong>callbacks</strong>, <strong>eventos</strong> e <strong>promessas</strong>\ncomo maneiras de trabalhar com tarefas assíncronas.</p>\n<h2 id=\"guia-de-perguntas-e-conceitos-chave\">Guia de perguntas e conceitos chave</h2>\n<p>Quando começamos a estudar um novo assunto, é útil termos uma ideia de conceitos\nmais importantes que vamos aprender e dos temas centrais a que devemos prestar\natenção especial.</p>\n<p>A seguir apresentamos uma série de perguntas que você deve ser capaz de\nresponder ao terminar esta unidade. Use estas perguntas como guia para orientar\nseu esforço de aprendizagem. Retorne a elas constantemente a medida que avança\npara validar que está indo na direção correta. Que este guia sirva como um\n\"checklist\" que você vai riscando conforme avança.</p>\n<ul>\n<li>O que é uma tarefa assíncrona?</li>\n<li>O que significa bloquear a <em>thread</em>?</li>\n<li>O que é um <em>callback</em>?</li>\n<li>O que é um <em>evento</em>?</li>\n<li>Como ouvir <em>eventos</em>?</li>\n<li>Como deixar de ouvir <em>eventos</em>?</li>\n<li>O que é uma promessa?</li>\n<li>Como usar promessas?</li>\n<li>Como implementar novas promessas?</li>\n<li>Como encadear promessas?</li>\n</ul>\n",
          "order": 0,
          "durationString": "5min"
        },
        "01-callbacks": {
          "title": "Callbacks",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>As diferentes linguagens e estilos de programação sempre tiveram um problema com\no tempo que as coisas levam para serem realizadas, talvez não no sentido humano,\nmas sim para um computador, que pode executar milhões de operações por segundo.\nEm particular isso acontece com operações como buscar informação no disco\nrígido, buscar informação em alguma API da internet ou também esperar que o\nusuário faça algo. Um estilo que teve sucesso no passado é o modo <code>síncrono</code>:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\nconst contents = fs.readFileSync('assets/ajson.json').toString();\nconsole.log(contents);\n</code></pre>\n<p>Nesse estilo vemos que para imprimir o conteúdo do arquivo, é preciso esperar\nque <code>readFileSync</code> termine de ler, o que não é muito eficiente do ponto de vista\ndo usuário que precisa esperar essa tarefa ser concluída para começar a ver algo\nna tela. Mas é eficiente do ponto de vista do programador, que só precisa se\npreocupar que o programa funcione e que com 3 linhas consiga obter os dados.\nCada linha é executada uma após a outra, o que torna o programa fácil de\nacompanhar.</p>\n<p>Com a chegada de JavaScript, também se popularizou um novo estilo de\nprogramação, chamado <code>assíncrono</code>:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nfs.readFile('assets/ajson.json', (err, buf) =&gt; {\n  console.log(buf.toString());\n});\n\nconsole.log('Espera mientras leemos el archivo...');\n</code></pre>\n<p>Com esta maneira de programar não nos preocupamos em esperar os dados. Podemos\nfazer outras coisas durante o processo, como informar o usuário que algo está\nsendo executado por meio de uma mensagem (ou barra de progresso se estivermos em\numa página web). Para isso criamos uma função, a qual comumente se chama\n<em>callback</em>, que será executada assim que os dados forem retornados do processo\nlento.</p>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/pt-BR/docs/Glossario/Callback_function\" target=\"_blank\">Callback function -\nMDN</a></li>\n</ul>\n",
          "order": 1,
          "durationString": "15min"
        },
        "05-promises": {
          "title": "Promesas",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>Até agora vimos o uso de <em>callbacks</em> para manipular tarefas assíncronas. Nesta\nleitura introduzimos um tipo novo de dado (<code>Promise</code>), que é especificamente\nprojetado para encapsular operações assíncronas e poder encadeá-las.</p>\n<p>Quando usamos <em>callbacks</em>, é comum nos depararmos com situações onde uma\noperação assíncrona depende de que outra tenha sido completada e assim vamos\nencadeando <em>callbacks</em> e é fácil perder o fio da meada do que está sendo\nexecutado em um momento determinado. Mais ainda assim na vida real começam a\nexistir <em>callbacks</em> para tudo:</p>\n<pre><code class=\"language-js\">umProcessoLento(\n  (dados) =&gt; {\n    outroProcessoLento(\n      (outrosDados) =&gt; {\n        eAindaOutroProcessoLento(\n          (maisDados) =&gt; {\n            /*\n             * podemos seguir encadeando callbacks...\n             */\n          }\n        );\n      }\n    );\n  }\n);\n</code></pre>\n<p>Isto se chama <strong>callback hell</strong> e ocorre quando processos lentos dependem do\nresultado de outros anteriores e acabamos encadeando uma dentro da outra as\nfunções que esperam os dados que vêm desses processos.</p>\n<p>Para isso é que desde ES6 se criaram as <code>promessas</code> (<em>Promises</em> en inglês), que\nsão projetadas para representar esses dados que estão chegando, chegarão ou\nsimplesmente nunca cheguem (no caso de acontecer alguma falha). Vejamos um\nexemplo delas:</p>\n<pre><code class=\"language-js\">const readFiles = require('read-files-promise');\n\nreadFiles([\n  'path/to/file0',\n  'path/to/file1',\n], { encoding: 'utf8' })\n  .then((buffers) =&gt; {\n    buffers;\n  })\n  .catch((error) =&gt; {\n    console.log('Falha neste processo muito lento');\n  });\n</code></pre>\n<p>Muito melhor, embora vejamos mais linhas, há grandes diferenças com a abordagem\nde <em>callbacks</em>. O primeiro é que há um espaço para a função que receberá os\ndados e outro para a que executará o código de emergência em caso de falha, mas\na principal é que as promessas podem ser encadeadas como veremos no próximo\nexemplo:</p>\n<pre><code class=\"language-js\">const readFiles = require('read-files-promise');\n\nreadFiles(['path/to/file0'], { encoding: 'utf8' })\n  .then((buffers) =&gt; {\n    buffers; // [ConteudoDeArquivo0]\n\n    return readFiles(['path/to/file1'], { encoding: 'utf8' });\n  })\n  .then((buffers) =&gt; {\n    buffers; // [ConteudoDeArquivo1]\n  })\n  .catch((error) =&gt; {\n    console.log(\"Falhamos em ler os arquivos\")\n  });\n</code></pre>\n<p>Agora sim, muito mais ordenado, claro e mantendo a funcionalidade, em que o\n<code>outroProcessoLento</code> depende dos dados do primeiro processo lento. Observe que\nmantivemos somente uma função de emergência no caso de um erro acontecer para\nambos os processos, o que ajuda em reduzir o código poluído e de ser dependente\nda função que falhou na cadeia, coisa que teria que ser replicada em cada um dos\n<em>callbacks</em> do <strong>callback hell</strong>.</p>\n<p>Agora que sabemos o porquê das promessas, vamos ver como criá-las e usá-las.</p>\n<h2 id=\"criação-de-promises\">Criação de <em>Promises</em></h2>\n<p>Nesta seção nos colocamos ao lado do programador de processos lentos, motivo\npelo qual precisamos de uma forma de ordenar nosso trabalho para que os outros\nprogramadores usem nosso processo lento. Vejamos um processo qualquer por dentro\ne analisemos as partes que o compõem, para assim entendermos como podemos\ncriá-las.</p>\n<pre><code class=\"language-js\">let processoLento = new Promise((resolve, reject) =&gt; {\n  let dados = {};\n  //...\n  //muitas linhas de código\n  //...\n  if (error) {\n    //uh oh, as coisas não foram tão bem\n    reject(new Error('Aconteceu um erro, sinto muito.'));\n  }\n  //...\n  resolve(dados);\n});\n</code></pre>\n<h3 id=\"new-promise\"><em>new Promise</em></h3>\n<p>A primeira coisa é a criação de uma promessa por meio do código <code>new Promise(...)</code>. Como você pode ver, é um objeto que representa esse dado que pode\nestar agora, no futuro ou simplesmente não estar. Para ser criado esse objeto\nrecebe um <em>callback</em>, mas não como todos e sim com um especial que tem dois\nparâmetros que veremos a seguir.</p>\n<h4 id=\"parâmetro-resolve\">Parâmetro <em>resolve</em></h4>\n<p>O primeiro parâmetro do <em>callback</em> da promessa é uma função especial que será\ninvocada quando o trabalho lento que estamos fazendo termina. Com isso a\npromessa termina e os dados que queremos retornar se toram parâmetros de\n<code>resolve</code>.</p>\n<h4 id=\"parâmetro-reject\">Parâmetro <em>reject</em></h4>\n<p>Nosso trabalho lento pode falhar e é óbvio que tudo pode falhar (muito obrigado\nMurphy) e por isso temos que ter uma forma de comunicar que nosso processo lento\nteve um erro. As promessas vêm ao resgate e nos fornecem <code>reject</code>, uma função\nque podemos chamar no case de erro e que recebe como parâmetros... se já\nadivinhou, um erro de JavaScript.</p>\n<h2 id=\"uso-de-promessas\">Uso de promessas</h2>\n<p>O uso comum é tal qual como mostramos no exemplo anterior de código, mas agora\nque estamos vendo com mais detalhe, expliquemos cada um dos componentes de uso\nda promessa que vimos com nosso <em>processoLento</em> e <em>outroProcessoLento</em>.</p>\n<h3 id=\"then\"><em>then</em></h3>\n<p><code>then</code> é uma função que o usuário da promessa fornece para quando o processo\nlento termina de ser executado corretamente. O número de parâmetros que recebe\nsão variáveis e depende do criador (é muito importante a comunicação entre vocês\nprogramadoras), geralmente retornam um único parâmetro com os dados resultantes.\nSe queremos encadear promessas, tal como vimos anteriormente, é importante ao\nfinal desta função retornar outra promessa. Se ao contrário queremos retornar um\nvalor para o passo seguinte, faremos da seguinte forma:</p>\n<pre><code class=\"language-js\">  //... muito código antes...\n  return Promise.resolve(dado);\n}.then(\n  (dado) =&gt; {\n    // Aqui podemos usar o dado que retornamos no 'then' anterior\n  }\n);\n</code></pre>\n<h3 id=\"catch\">catch</h3>\n<p><code>catch</code> no entanto é uma função que será executada no caso de que <strong>haja uma\nfalha em qualquer passo da cadeia</strong>. Isto é muito importante, porque concentra\ntoda a manipulação de erros em só uma parte, aliviando a programadora de ter que\ntratar erros em cada um dos <em>callbacks</em>.</p>\n<h2 id=\"estado-de-promessas\">Estado de promessas</h2>\n<p>Uma promessa pode estar nestes estados:</p>\n<ul>\n<li><strong>pending</strong>: Estado inicial, nem terminada com sucesso nem fracassada.</li>\n<li><strong>fulfilled</strong>: operação ocorreu com sucesso.</li>\n<li><strong>rejected</strong>: operação com erro ou recusada.</li>\n<li><strong>settled</strong>: a <em>Promise</em> teve sucesso ou fracasso, mas não está pendente.</li>\n</ul>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/primers/promises\" target=\"_blank\">Promises - Jake Archibald - Google\nDevelopers</a></li>\n</ul>\n",
          "order": 2,
          "durationString": "15min"
        },
        "08-closing": {
          "title": "Encerramento",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"resumo\">Resumo</h2>\n<p>Chegamos ao final da unidade ;-)</p>\n<h2 id=\"respondamos-juntas-às-perguntas-da-abertura\">Respondamos juntas às perguntas da abertura</h2>\n<ul>\n<li>O que é uma tarefa assíncrona?</li>\n<li>O que significa bloquear a <em>thread</em>?</li>\n<li>O que é um <em>callback</em>?</li>\n<li>O que é um <em>evento</em>?</li>\n<li>Como ouvir <em>eventos</em>?</li>\n<li>Como deixar de ouvir <em>eventos</em>?</li>\n<li>O que é uma promessa?</li>\n<li>Como usar promessas?</li>\n<li>Como implementar novas promessas?</li>\n<li>Como encadear promessas?</li>\n</ul>\n",
          "order": 3,
          "durationString": "5min"
        }
      },
      "order": 7,
      "stats": {
        "duration": 40,
        "durationString": "40min",
        "exerciseCount": 0,
        "partCount": 4
      }
    },
    "09-errors": {
      "title": "Erros",
      "bonus": false,
      "description": "<p>O tratamento de erros é importante dentro de todo o desenvolvimento de software,\ne mais ainda quando se pensa em costruir um produto que se esperar que sera\nreutilizável e mantenible. Nesta unidade vamos ver como tratar erros nas diversas\nparte do nosso código.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Abertura",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"por-que-aprender\">Por que aprender?</h2>\n<p>O tratamento de erros talvez não seja o tema mais sexy dentro da programação,\nporém é sem dúvida um dos mais importantes. O bom tratamento dos erros não\napenas garante um uso melhor do código, como também nos ajuda a entender\nexceções, onde estão ocorrendo e porquê.</p>\n<h2 id=\"guia-de-perguntas-e-conceitos-chave\">Guia de perguntas e conceitos-chave</h2>\n<p>Quando começamos a estudar um tema novo, é útil ter uma ideia dos conceitos mais\nimportantes do que vamos aprender e dos temas centrais onde devemos prestar mais\natenção.</p>\n<p>A seguir apresentamos uma série de perguntas que você deve ser capaz de\nresponder ao término dessa unidade. Utilize estas perguntas como guia para\norientar seus esforços de aprendizagem. Volte a elas constantemente à medida em\nque avança para validar se está avançando na direção correta. Elas devem servir\ncomo um \"checklist\" que você marca enquanto vai avançando.</p>\n<ul>\n<li>O que é o modo estrito no JavaScript</li>\n<li>O que é um <code>Error</code> e tipos de erros</li>\n<li>Como usar <code>try...catch</code> para tratar erros</li>\n<li>Como tratar erros em callbacks</li>\n<li>Como tratar erros em promessas (promises)</li>\n</ul>\n",
          "order": 0,
          "durationString": "5min"
        },
        "01-strict-mode": {
          "title": "Modo Estrito",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>O modo estrito realiza mudanças na semântica normal do JavaScript. Um aspecto\nimportante disso é que o modo estrito elimina erros silenciosos, forçando a\nescrita de um código melhor.</p>\n<p>O comando <code>use strict</code> não significa uma instrução de código, apenas indica ao\nnavegador o modo como deve executar o código JavaScript.</p>\n<p>Poderíamos falar de dois modos de execução do JavaScript: <code>normal mode</code>, que é\ncomo temos estudado até agora, e o <code>strict mode</code> que é o que vamos aprender.</p>\n<h2 id=\"chamando-o-modo-estrito\">Chamando o modo estrito</h2>\n<p>Para chamar o modo estrito, você deve apenas escrever <code>'use strict';</code>em seu\narquivo JavaScript. Por exemplo:</p>\n<pre><code class=\"language-js\">'use strict';\n</code></pre>\n<p>Agora que você sabe como chamar o modo estrito, vamos ver um exemplo rápido.</p>\n<pre><code class=\"language-js\">'use strict';\nfoo = 'Alexandra'; // Uncaught ReferenceError: foo is not defined\n</code></pre>\n<p>Agora que estamos utilizando o <em>modo estrito</em> o JavaScript nos retorna um erro,\ndizendo que <code>foo</code> não está definida. É necessário declarar a variável antes de\nutilizá-la.</p>\n<pre><code class=\"language-js\">'use strict';\nconst foo = 'Guilherme'; // Funciona!\n</code></pre>\n<p>O modo estrito modifica a sintaxe e o comportamento durante a execução. As\nmudanças geralmente caem dentro das seguintes categorias: modificações que\nconvertem erratas em erros (como erros de sintaxe ou no tempo de execução), que\nsimplificam como uma variável em particular é calculada, que simplificam o uso\ndo eval() e argumentos, que tornam mais fácil a escrita de JavaScript \"seguro\" e\nque antecipam a evolução futura do ECMAScript.</p>\n<h2 id=\"convertendo-erratas-em-erros\">Convertendo erratas em erros</h2>\n<p>O modo estrito modifica alguns erros de sintaxe tolerados no modo normal e os\nconverte em erros. O JavaScript foi desenvolvido de um modo que o tornasse mais\nfácil para programadoras iniciantes, dessa forma podem existir operações que\ndeveriam ser erros, porém são tratadas como livres de erros. Algumas vezes isso\né útil para solucionar um problema no momento, porém pode criar problemas mais\ngraves no futuro. O modo estrito trata estas erratas como erros, para que possam\nser encontradas e resolvidas imediatamente.</p>\n<p>Em primeiro lugar, o modo estrito impossibilita a criação de variáveis globais\npor acidente. No modo não estrito do JavaScript, uma variável declarada de forma\nincorreta criará uma nova propriedade no objeto global e o código continuará\nrodando como se nada tivesse acontecido (ainda que seja possível que o código\nfalhe no futuro, em uma versão mais moderna do JS). No modo estrito, qualquer\ndeclaração de produza variáveis globais por acidente resultará em erro.</p>\n<p>Em segundo lugar, o modo estrito gera uma exceção para declarações que de outro\nmodo falhariam silenciosamente. Por exemplo, NaN é uma variável que não pode ser\ndeclarada. Em um código normal, declarar um valor como <code>NaN</code> não tem efeito; a\nprogramadora não recebe nenhuma mensagem de erro. Ao invés disso, no modo\nestrito, ao tentar atribuir <code>NaN</code> como valor, a programadora receberá uma\nexceção. Qualquer declaração que falhe silenciosamente no código normal\n(declarações a uma propriedade do tipo \"somente leitura\", a uma propriedade get,\nadicionar propriedades a objetos não extensíveis) resultará em uma exceção no\nmodo estrito:</p>\n<pre><code class=\"language-js\">'use strict';\n// atribuição global\nvar undefined = 5; // TypeError: \"undefined\" is read-only\nvar Infinity = 5; // TypeError: \"Infinity\" is read-only\n\n// Atribuição a uma propriedade somente leitura\nconst obj1 = {};\nObject.defineProperty(obj1, 'x', { value: 42, writable: false });\nobj1.x = 9; // gera um TypeError\n\n// Atribuição a uma propriedade do tipo getter\nconst obj2 = { get x() { return 17; } };\nobj2.x = 5; // gera um TypeError\n\n// Atribuição a uma nova propriedade de um objeto não extensível\nconst fixed = {};\nObject.preventExtensions(fixed);\nfixed.newProp = 'ohai'; // gera um TypeError\n</code></pre>\n<p>Em terceiro lugar, o modo estrito gera uma exceção ao tentar eliminar\npropriedades não elimináveis (enquanto no código normal a tentativa não surtiria\nnenhum efeito):</p>\n<pre><code class=\"language-js\">'use strict';\ndelete Object.prototype; // gera um TypeError\n</code></pre>\n",
          "order": 1,
          "durationString": "15min"
        },
        "02-try-catch": {
          "title": "Try...catch",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>O JavaScript suporta um conjunto compacto de declarações específicas para o\nmanejo de fluxo, que podem ser utilizadas para incorporar uma maior\ninteratividade entre suas aplicações.</p>\n<p>A documentação do JavaScript contem muitos detalhes sobre as declarações\nmencionadas nesta unidade. O ponto e vírgula (;) é utilizado para separar\nsentenças no código JavaScript.</p>\n<p>No JavaScript, qualquer expressão é também uma sentença. Uma sentença\ncondicional é um conjunto de comandos que são executados caso uma condição seja\nverdadeira. São suportados dois tipos se sentenças condicionais: <code>if...else</code> e\n<code>switch</code>.</p>\n<p>Com todo o conteúdo que estudamos até agora, você já sabe quais são as sentenças\ncondicionais e também conhece os loops, que pertencem à parte de controle de\nfluxo no JavaScript. A partir de agora vamos falar sobre as sentenças para\ntratamento de exceções. Praticamente qualquer objeto pode ser lançado (<em>thrown</em>\nem inglês) no JavaScript. Porém, nem todos os objetos lançados são criados da\nmesma forma. Embora seja bastante comum o lançamento de números ou strings como\nerros, normalmente é mais eficiente utilizar um dos tipos de exceção criados\nespecificamente com este propósito:</p>\n<h2 id=\"sentença-throw\">Sentença throw</h2>\n<p>Utilize a sentença throw para gerar uma exceção, especificando a expressão que\ncontém o valor a ser lançado:</p>\n<pre><code class=\"language-js\">throw expresión;\n</code></pre>\n<p>Pode lançar qualquer expressão, não apenas de um tipo específico. No código\nabaixo utilizamos expressões de vários tipos:</p>\n<pre><code class=\"language-js\">throw \"Error2\";   // Tipo string\nthrow 42;         // Tipo número\nthrow true;       // Tipo booleano\nthrow {toString: function() { return \"¡Soy un objeto!\"; } };\n</code></pre>\n<p>É possível especificar um objeto para gerar a exceção. Em seguida, pode-se\nreferenciar as propriedades deste objeto em um bloco catch. No exemplo seguinte,\né criado o objeto myUserException do tipo UserException, que é utilizado na\nsentença throw.</p>\n<pre><code class=\"language-js\">// Cria um tipo de objeto UserException\nfunction UserException (aviso){\n  this.aviso=aviso;\n  this.nome=\"UserException\";\n}\n\n// Make the exception convert to a pretty string when used as a string\n// (e.g. by the error console)\nUserException.prototype.toString = function () {\n  return this.nombre + ': \"' + this.aviso + '\"';\n}\n\n// Create an instance of the object type and throw it\nthrow new UserException(\"Value too high\");\n</code></pre>\n<h2 id=\"trycatch\">try...catch</h2>\n<p>A sentença <code>try...catch</code> marca um bloco de instruções que podem causar alguma\nexceção, e declara uma ou mais respostas caso a exceção seja gerada. Neste caso,\na sentença <code>try...catch</code> trata de interceptá-la.</p>\n<p>A <code>try...catch</code> consiste em um bloco <code>try</code>, que contém uma ou mais instruções, e\nnenhum a vários blocos <code>catch</code>, contendo sentenças que especificam o que fazer\nse uma exceção é pega no bloco <code>try</code>. É desejável que as instruções dentro do\nbloco <code>try</code> sejam executadas com êxito, caso contrário cairão no bloco <code>catch</code>\npara serem controladas. Se nenhuma instrução dentro do bloco <code>try</code> (ou em uma\nfunção chamada dentro do bloco) gera uma exceção, o controle passa imediatamente\npara o bloco <code>catch</code>. Caso nenhuma exceção seja gerada no bloco <code>try</code>, o bloco\n<code>catch</code> é ignorado. Por último, se executa o bloco <code>finally</code> assim que os blocos\nanteriores tenham sido executados, mas antes das instruções que estão em seguida\nao <code>try...catch</code>.</p>\n<p>O exemplo abaixo utiliza a sentença <code>try...catch</code>. O exemplo chama uma função\nque retorna o nome de um mês a partir de um array baseado em um valor que foi\npassado como argumento para a função. Se o valor não corresponde com o número de\num mês (de <code>1</code> a <code>12</code>), a exceção é gerada com o valor <code>'InvalidMonthNo'</code> e as\ninstruções no bloco <code>catch</code> atribuirão à variável <code>monthName</code> o valor de\n<code>unknown</code>.</p>\n<pre><code class=\"language-js\">function getMonthName (mo) {\n  mo = mo - 1; // Ajusta o índice do array para o aray de meses (1=Jan, 12=Dec)\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  if (months[mo] != null) {\n    return months[mo];\n  } else {\n    throw 'InvalidMonthNo'; //Lança o termo \"InvalidMonthNo\" ao ocorrer uma exceção\n  }\n}\n\ntry { // instruções a testar\n  monthName = getMonthName(myMonth); // A função pode gerar uma exceção\n}\ncatch (e) {\n  monthName = 'unknown';\n  logMyErrors(e); // Passa o objeto da exceção para o tratamento do erro\n}\n</code></pre>\n<h2 id=\"o-bloco-catch\">O bloco catch</h2>\n<p>Um bloco <code>catch</code> é utilizado para tratar todas as exceções que possam ser\ngeradas no bloco <code>try</code>.</p>\n<p>O bloco <code>catch</code> especifica um identificador (catchID na sintaxe anterior) que\nmantem o valor especificado pela sentença <code>throw</code>; este identificador pode ser\nutilizado para obter informações a respeito da exceção gerada. O JavaScript cria\neste identificador ao entrar no bloco <code>catch</code>; o identificador se mantém na\nduração do bloco <code>catch</code>; após o término da execução do bloco <code>catch</code>, o\nidentificador já não estará mais disponível.</p>\n<p>Por exemplo, o seguinte código gera uma exceção. Quando a exceção ocorre, o\ncontrole é transferido para o bloco <code>catch</code>.</p>\n<pre><code class=\"language-js\">try {\n  throw \"myException\" // gera uma exceção\n}\ncatch (e) {\n  // instruções para tratar qualquer exceção gerada\n  logMyErrors(e) // Passa o objeto de exceção para o tratamento de erros\n}\n</code></pre>\n",
          "order": 2,
          "durationString": "15min"
        },
        "03-callbacks": {
          "title": "Erros em callbacks",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>Na unidade anterior vimos como a sentença <code>try...catch</code> nos permite cercar\ncódigo que poderia resultar em uma exceção e assim evitar que a exceção\ninterrompa a execução do programa.</p>\n<p>Porém, o que acontece quando o erro ocorre em uma operação assíncrona? Vejamos\num exemplo. Vamos imaginar que em um script escrito para Node.js temos uma\nfunção chamada <code>getLatestNodeInfo()</code>, e que esta é uma função assíncrona (deve\nhaver uma consulta por HTTP para verificar qual é a versão mais recente do\nNode.js) que recebe um <em>callback</em> como argumento.</p>\n<pre><code class=\"language-js\">getLatestNodeInfo((err, data) =&gt; {\n  if (err) {\n    return console.error(err);\n  }\n\n  console.log(data);\n});\n</code></pre>\n<p>No mundo do Node.js é muito comum que os callbacks tenham esta sintaxe <code>(err, data)</code>, onde o primeiro argumento é um erro (caso ocorra algum) e o segundo\nargumento é a <code>data</code> ou o <em>resultado</em> caso a operação se complete com sucesso.</p>\n<p>Ao implementar funções assíncronas, onde vamos comunicar o <em>resultado</em> através\nde um <em>callback</em>, evitamos lançar erros com <code>throw</code>; ao invés disso, os\ncomunicamos como argumento a uma função callback. Isto nos permite \"prender\" um\nerro assíncrono (que ocorreu em outro contexto de execução) e tratar erros que\nde outra forma não poderíamos.</p>\n<p>Considere a seguinte implementação da função <code>getLatestNodeInfo()</code>:</p>\n<pre><code class=\"language-js\">const http = require('http');\n\nconst getLatestNodeInfo = (cb) =&gt;\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      throw new Error(`Request Failed. Status Code: ${statusCode}`);\n    }\n\n    // ...\n\n  }).on('error', cb);\n</code></pre>\n<p>Nesta implementação (por enquanto incompleta e incorreta) estamos lançando um\nerro com <code>throw</code> dentro de uma <em>callback</em>. Vendo a sentença <code>throw</code>, poderíamos\npensar que é possível usar <code>try...catch</code> para cercar o erro. Algo assim:</p>\n<pre><code class=\"language-js\">// tentativa falha de pegar o erro lançado com `throw` dentro de uma callback\ntry {\n  getLatestNodeInfo(() =&gt; {\n    // ...\n  });\n} catch (err) {\n  console.log('erro pego com try...catch', err);\n}\n</code></pre>\n<p>Neste caso, se ocorrer a condição do erro (pode-se mudar <code>statusCode !== 200</code>\npara <code>statusCode === 200</code> temporariamente para causar o erro), vemos que a\nexceção não é pega no bloco <code>catch</code>; a execução do programa termina sem que\ntenhamos a oportunidade de tratar o erro. Isto se dá porque a exceção está sendo\njogada a partir de uma callback que se executa em outro contexto, mais adiante\nno tempo. Este <code>try...catch</code> só pega erros que possam ocorrer na parte síncrona\nda função, antes que seja feito o request.</p>\n<p>É por isso que as funções assíncronas evitam lançar erros com <code>throw</code> e sempre\ncomunicam os erros através de argumentos passados a <em>callbacks</em>, seja em uma\ncallback com vários argumentos onde o primeiro seja o possível erro, ou em\ncallbacks dedicadas, como por exemplo o <em>handler</em> que passamos por request no\nexemplo anterior:</p>\n<pre><code class=\"language-js\">http\n  .get(url, successCallback)\n  .on('error', errorCallback);\n</code></pre>\n<p>Agora sim, completemos nossa implementação de <code>getLatestNodeInfo()</code>, porém dessa\nvez passando os erros através da <em>callback</em> recebida do usuário ao invés de\nutilizar <code>throw</code>. Nota-se também que a implementação utiliza <code>try...catch</code>\ninternamente para cercar erros que poderiam acontecer durante o <em>parseamento</em> da\ndata recebida (utilizando <code>JSON.parse()</code>), que é uma operação síncrona que\ndevemos evitar que gere um erro, já que não poderia ser tratado de fora da\nfunção. Para solucionar isso, primeiro pegamos o erro e depois o devolvemos como\nargumento para a <em>callback</em>.</p>\n<pre><code class=\"language-js\">const getLatestNodeInfo = (cb) =&gt;\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      return cb(new Error(`Request Failed. Status Code: ${statusCode}`));\n    } else if (!/^application\\/json/.test(headers['content-type'])) {\n      return cb(new Error(`Bad content-type. Expected application/json but got ${contentType}`));\n    }\n\n    let rawData = '';\n    resp.setEncoding('utf8');\n    resp.on('data', (chunk) =&gt; { rawData += chunk; });\n    resp.on('end', () =&gt; {\n      try {\n        const parsedData = JSON.parse(rawData);\n        cb(null, parsedData.shift());\n      } catch (err) {\n        cb(err);\n      }\n    });\n  }).on('error', cb);\n</code></pre>\n<p>Esta nova implementação nos assegura que os erros que possam ocorrer na função\nsempre sejam passados como argumentos para a <em>callback</em> recebida pelo usuário.</p>\n",
          "order": 3,
          "durationString": "15min"
        },
        "04-promises": {
          "title": "Erros em promessas",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>A partir do ECMAScript 6, o JavaScript incluiu objetos <code>Promise</code> que nos\npermitem controlar o fluxo de operações síncronas e assíncronas.</p>\n<p>Assim como com as <em>callbacks</em>, quando vamos implementar <em>promessas</em> também\nevitamos lançar erros com <code>throw</code>. No caso das promessas temos uma série de\nfunções dedicadas especialmente ao tratamento de erros. Do ponto de vista da\nimplementação de <em>promessas</em>, temos a função <code>reject</code> e no caso do consumo de\npromessas temos o mẽtodo <code>promise.catch()</code>, assim como a opção de um segundo\nargumento do método <code>promise.then(onSuccess, onError)</code>.</p>\n<p>Continuando com o exemplo da leitura anterior, modificamos nossa implementação\nde <code>getLatestNodeInfo()</code> para que retorne uma promessa ao invés de usar uma\n<em>callback</em> simples:</p>\n<pre><code class=\"language-js\">const http = require('http');\n\nconst getLatestNodeInfo = () =&gt; new Promise((resolve, reject) =&gt; {\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      return reject(new Error(`Request Failed. Status Code: ${statusCode}`));\n    } else if (!/^application\\/json/.test(headers['content-type'])) {\n      return reject(new Error(`Bad content-type. Expected application/json but got ${contentType}`));\n    }\n\n    let rawData = '';\n    resp.setEncoding('utf8');\n    resp.on('data', (chunk) =&gt; { rawData += chunk; });\n    resp.on('end', () =&gt; {\n      try {\n        const parsedData = JSON.parse(rawData);\n        resolve(parsedData.shift());\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }).on('error', reject);\n});\n</code></pre>\n<p>Nesta nova implementação nós substituímos as chamadas a <code>cb()</code> (a <em>callback</em> que\nrecebíamos como argumento) com chamadas para <code>reject()</code> (nos casos de erro) e\n<code>resolve()</code> (em caso de êxito). Isto no permite agora chamar nossa função\n<code>getLatestNodeInfo()</code> da seguinte maneira:</p>\n<pre><code class=\"language-js\">getLatestNodeInfo()\n  .then(data =&gt; console.log(`Versão mais recente de Node.js: ${data.version}`))\n  .catch(err =&gt; console.error(err));\n</code></pre>\n<p>Da mesma forma, poderíamos escrever:</p>\n<pre><code class=\"language-js\">getLatestNodeInfo().then(\n  data =&gt; console.log(`Versão mais recente de Node.js: ${data.version}`),\n  err =&gt; console.error(err)\n);\n</code></pre>\n<h2 id=\"tratamento-de-erros-em-promessas-encadeadas\">Tratamento de erros em promessas encadeadas</h2>\n<p>Uma das grandes vantagens das promessas é que podemos encadeá-las. Isso quer\ndizer que, quando invocamos o método <code>promise.then()</code>, podemos retornar:</p>\n<ul>\n<li>ou um valor que resolve a promessa</li>\n<li>ou outra promessa, que resolverá outro valor</li>\n</ul>\n<p>O método<code>promise.then()</code>, por sua vez, retorna uma promessa sobre a qual podemos\ninvocar novamente <code>then</code> e recebe como argumento o valor resultado do <code>then</code>\nanterior.</p>\n<p>Para ilustrar este conceito, modifiquemos outra vez nossa implementação de\n<code>getLatestNodeInfo()</code> para que faça um pouco menos de trabalho, e ao invés de\nparsear o texto recebido com <code>JSON.parse</code> e de aí selecionar a última versão,\nfaçamos com que devolva diretamente o texto recebido. Aproveitamos para mudar o\nnome da função, que agora não devolve a última versão, mas sim informações sobre\ntodos os releases (em JSON sem parsear):</p>\n<pre><code class=\"language-js\">const getNodeReleases = () =&gt; new Promise((resolve, reject) =&gt; {\n  http.get('http://nodejs.org/dist/index.json', (resp) =&gt; {\n    const { statusCode, headers } = resp;\n\n    if (statusCode !== 200) {\n      return reject(new Error(`Request Failed. Status Code: ${statusCode}`));\n    } else if (!/^application\\/json/.test(headers['content-type'])) {\n      return reject(new Error(`Bad content-type. Expected application/json but got ${contentType}`));\n    }\n\n    let rawData = '';\n    resp.setEncoding('utf8');\n    resp.on('data', (chunk) =&gt; { rawData += chunk; });\n    resp.on('end', () =&gt; resolve(rawData));\n  }).on('error', reject);\n});\n</code></pre>\n<p>Vamos chamar nossa nova função <code>getNodeReleases()</code>:</p>\n<pre><code class=\"language-js\">getNodeReleases()\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(err));\n</code></pre>\n<p>Se não ocorrer nenhum erro de rede, isso deve resultar na invocação da função\npassada para <code>.then ()</code> com o texto recebido do request e não o último <code>catch ()</code>. A saída deve ser algo como isto:</p>\n<pre><code class=\"language-text\">[\n{\"version\":\"v9.4.0\",\"date\":\"2018-01-10\",\"files\":[\"aix-ppc64\",\"headers\",\"linux-arm64\",\"linux-armv6l\",\"linux-armv7l\",\"linux-ppc64le\",\"linux-x64\",\"linux-x86\",\"osx-x64-pkg\",\"osx-x64-tar\",\"src\",\"sunos-x64\",\"sunos-x86\",\"win-x64-7z\",\"win-x64-exe\",\"win-x64-msi\",\"win-x64-zip\",\"win-x86-7z\",\"win-x86-exe\",\"win-x86-msi\",\"win-x86-zip\"],\"npm\":\"5.6.0\",\"v8\":\"6.2.414.46\",\"uv\":\"1.18.0\",\"zlib\":\"1.2.11\",\"openssl\":\"1.0.2n\",\"modules\":\"59\",\"lts\":false},\n{\"version\":\"v9.3.0\",\"date\":\"2017-12-12\",\"files\":[\"aix-ppc64\",\"headers\",\"linux-arm64\",\"linux-armv6l\",\"linux-armv7l\",\"linux-ppc64le\",\"linux-x64\",\"linux-x86\",\"osx-x64-pkg\",\"osx-x64-tar\",\"src\",\"sunos-x64\",\"sunos-x86\",\"win-x64-7z\",\"win-x64-exe\",\"win-x64-msi\",\"win-x64-zip\",\"win-x86-7z\",\"win-x86-exe\",\"win-x86-msi\",\"win-x86-zip\"],\"npm\":\"5.5.1\",\"v8\":\"6.2.414.46\",\"uv\":\"1.18.0\",\"zlib\":\"1.2.11\",\"openssl\":\"1.0.2n\",\"modules\":\"59\",\"lts\":false},\n...\n]\n</code></pre>\n<p>Agora, para recuperar a funcionalidade que tínhamos antes, podemos encadear\nchamadas a <code>.then()</code>, onde cada uma representa uma transformação, que pode ser\nsíncrona (simplesmente retornando um valor) ou assíncrona (retornando uma\npromessa).</p>\n<pre><code class=\"language-js\">getNodeReleases()\n  .then(data =&gt; JSON.parse(data))\n  .then(data =&gt; data.shift())\n  .then(data =&gt; console.log(`Versão mais recente de Node.js: ${data.version}`))\n  .catch(err =&gt; console.error(err));\n</code></pre>\n<p>O interessante, do ponto de vista do tratamento de erros, é que só é necessário\num <code>.catch()</code>. Se qualquer um dos <code>.then ()</code> retornar um erro à promessa que\nresolve um erro, diretamente passamos para <code>.catch ()</code> (é feito um\n<em>curto-circuito</em> que impede o seguinte <code>.then ()</code> de executar).</p>\n<p>Para completar o exemplo, implantaremos novamente a função\n<code>getLatestNodeInfo()</code>, porém dessa vez fazendo uso de nessa nova função\n<code>getNodeReleases()</code> e encadeando promessas.</p>\n<pre><code class=\"language-js\">const getLatestNodeInfo = () =&gt;\n  getNodeReleases()\n    .then(data =&gt; JSON.parse(data))\n    .then(data =&gt; data.shift());\n</code></pre>\n<p>Esta nova implementação simplesmente encadeia algumas transformações através de\npromessas que resolvem diretamente um valor e retornam uma promessa nova, o que\nnos permitirá usar a função <code>getLatestNodeInfo ()</code> da mesma forma que no\nprimeiro exemplo desta leitura:</p>\n<pre><code class=\"language-js\">getLatestNodeInfo()\n  .then(data =&gt; console.log(`Versión más reciente de Node.js: ${data.version}`))\n  .catch(err =&gt; console.error(err))\n</code></pre>\n<hr>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/primers/promises\" target=\"_blank\">Promises - Jake Archibald - Google\nDevelopers</a></li>\n</ul>\n",
          "order": 4,
          "durationString": "15min"
        },
        "05-practice": {
          "title": "Exercícios",
          "type": "practice",
          "format": "self-paced",
          "duration": 30,
          "exercises": {
            "01-validate-string": {
              "title": "validateString",
              "body": "<p>Escreva uma função que receba uma string como argumento e lance os seguintes\nerros:</p>\n<ul>\n<li><code>TypeError</code> com a mensagem <code>O argumento str deve ser uma string</code> quando o\nargumento recebido não for do tipo <code>string</code>.</li>\n<li><code>RangeError</code> com a mensagem <code>O argumento str deve ter pelo menos 4 caracteres</code>\nquando o argumento recebido for uma <code>string</code> de menos de 4 caracteres.</li>\n<li><code>RangeError</code> com a mensagem <code>O argumento str deve ter no máximo 10 caracteres</code>\nquando o argumento recebido tiver mais de 10 caracteres.</li>\n</ul>\n<p>Exemplo:</p>\n<pre><code class=\"language-js\">// TypeError: O argumento str deve ser uma string\nvalidateString();\n\n// RangeError: O argumento str deve ter pelo menos 4 caracteres\nvalidateString('');\nvalidateString('abc');\n\n// RangeError: O argumento str deve ter no máximo 10 caracteres\nvalidateString('abcdefghijk');\nvalidateString('olá mundo cruel');\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# validateString\n\nEscribe una función que reciba un string como argumento y arroje los siguientes\nerrores:\n\n* `TypeError` con mensaje `El argumento str debe ser un string` cuando el\n  argumento recibido no es de tipo `string`.\n* `RangeError` con mensaje `El argumento str debe tener al menos 4 caracteres`\n  cuando el argumento recibido es un `string` de menos de 4 caracteres.\n* `RangeError` con mensaje\n  `El argumento str debe tener un máximo de 10 caracteres` cuando el argumento\n  recibido tiene más de 10 caracteres.\n\nEjemplo:\n\n```js\n// TypeError: El argumento str debe ser un string\nvalidateString();\n\n// RangeError: El argumento str debe tener al menos 4 caracteres\nvalidateString('');\nvalidateString('abc');\n\n// RangeError: El argumento str debe tener un máximo de 10 caracteres\nvalidateString('abcdefghijk');\nvalidateString('hola mundo cruel');\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "dmFsaWRhdGVTdHJpbmcuanM=": "module.exports = (str) => {\n  // ...\n};\n"
                },
                "c29sdXRpb24=": {
                  "dmFsaWRhdGVTdHJpbmcuanM=": "module.exports = (str) => {\n  if (typeof str !== 'string') {\n    throw new TypeError('El argumento str debe ser un string');\n  }\n\n  if (str.length < 4) {\n    throw new RangeError('El argumento str debe tener al menos 4 caracteres');\n  }\n\n  if (str.length > 10) {\n    throw new RangeError('El argumento str debe tener un máximo de 10 caracteres');\n  }\n\n  return str;\n};\n"
                },
                "dGVzdA==": {
                  "dmFsaWRhdGVTdHJpbmcuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst validateString = require('../solution/validateString');\n\n\ndescribe('validateString()', () => {\n  it('debería ser una función', () => {\n    Assert.equal(typeof validateString, 'function');\n  });\n\n  it('debería arrojar TypeError cuando argumento no es srting', () => {\n    Assert.throws(\n      () => validateString(),\n      TypeError,\n      'El argumento str debe ser un string',\n    );\n  });\n\n  it('debería arrojar RangeError cuando srting tiene menos de 4 caracteres', () => {\n    Assert.throws(\n      () => validateString(''),\n      RangeError,\n      'El argumento str debe tener al menos 4 caracteres',\n    );\n  });\n\n  it('debería arrojar RangeError cuando srting tiene más de 10 caracteres', () => {\n    Assert.throws(\n      () => validateString('abcdefghijk'),\n      RangeError,\n      'El argumento str debe tener un máximo de 10 caracteres',\n    );\n  });\n});\n"
                }
              }
            },
            "02-parse-json": {
              "title": "parseJson",
              "body": "<p>Implementa uma função que receba uma string (no formato JSON) e retorne o JSON\nparseado (usando <code>JSON.parse</code>). A função não deve lançar exceções, porém\n<code>JSON.parse</code> poderá lançá-las. Se ocorrer uma exceção ao parsear a string JSON,\ndevemos evitar que seja lançado um erro, e sim devolvê-lo como valor de retorno.</p>\n<h2 id=\"exemplo\">Exemplo</h2>\n<pre><code class=\"language-js\">const result = parseJson('bad JSON');\nif (result instanceof Error) {\n  console.log('Ocorreu um erro', err.message);\n}\n\nconst json = parseJson('{ \"foo\": true, \"bar\": \"baz\" }');\nconsole.log(json);\n// =&gt; { foo: true, bar: 'baz' }\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# parseJson\n\nImplementa una función que reciba un string (en formato JSON) y retorne el JSON\nparseado (usando `JSON.parse`). La función no debe arrojar excepciones, a pesar\nde que `JSON.parse` puede arrojarlas. Si ocurriera una excepción al parsear el\nstring JSON, debemos evitar que se arroje el error y en vez hay que devolverlo\ncomo valor de retorno.\n\n## Ejemplo\n\n```js\nconst result = parseJson('bad JSON');\nif (result instanceof Error) {\n  console.log('Ocurrión un error', err.message);\n}\n\n\nconst json = parseJson('{ \"foo\": true, \"bar\": \"baz\" }');\nconsole.log(json);\n// => { foo: true, bar: 'baz' }\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "cGFyc2VKc29uLmpz": "const parseJson = () => {\n  // Tu código acá\n};\n\nmodule.exports = parseJson;\n"
                },
                "c29sdXRpb24=": {
                  "cGFyc2VKc29uLmpz": "const parseJson = (str) => {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return err;\n  }\n};\n\nmodule.exports = parseJson;\n"
                },
                "dGVzdA==": {
                  "cGFyc2VKc29uLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst parseJson = require('../solution/parseJson');\n\ndescribe('parseJson()', () => {\n  it('debería ser una función', () => {\n    Assert.equal(typeof parseJson, 'function');\n  });\n\n  it('debería devolver un error en vez de arrojarlo con JSON inválido', () => {\n    const result = parseJson();\n    Assert.ok(result instanceof Error);\n    Assert.ok(/Unexpected token/i.test(result.message));\n  });\n\n  it('debería devolver JSON parseado cuando formato del string es ok', () => {\n    const result = parseJson('{ \"foo\": true, \"bar\": \"baz\" }');\n    Assert.deepEqual(result, { foo: true, bar: 'baz' });\n  });\n});\n"
                }
              }
            }
          },
          "order": 5,
          "durationString": "30min"
        },
        "07-closing": {
          "title": "Encerramento",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"resumo\">Resumo</h2>\n<p>Chegamos ao fim dessa unidade 😃</p>\n<h2 id=\"vamos-responder-juntas-às-perguntas-da-abertura\">Vamos responder juntas às perguntas da abertura</h2>\n<ul>\n<li>O que é o modo estrito em JavaScript</li>\n<li>O que é um <code>Error</code> e tipos de erros</li>\n<li>Como usar <code>try...catch</code> para tratar erros</li>\n<li>Como tratar erros em callbacks</li>\n<li>Como tratar erros em promessas</li>\n</ul>\n",
          "order": 6,
          "durationString": "5min"
        }
      },
      "order": 8,
      "stats": {
        "duration": 100,
        "durationString": "1.7h",
        "exerciseCount": 2,
        "partCount": 7
      }
    },
    "10-debugging": {
      "title": "Debugging",
      "bonus": false,
      "description": "<p>O debugging é um apescto importante na programação, trata de encontrar e\ncorrigir diferentes tipos de erros que podem aparecer a qualquer momento.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Abertura: Debugging",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<p>Nesta unidade aprenderemos sobre depuração (<code>debugging</code>):</p>\n<ul>\n<li>Por que é importante saber depurar;</li>\n<li>O que devemos levar em conta para depurar código em JavaScript;</li>\n<li>Qual ferramenta do navegador pode nos ajudar a depurar código.</li>\n</ul>\n<h2 id=\"por-que-aprender-debugging\">Por que aprender <code>debugging</code></h2>\n<p>A depuração é um aspecto importante em programação. Trata de encontrar e\ncorrigir diferentes tipos de erros que podem acontecer no momento de programar.</p>\n<h2 id=\"guia-de-perguntas-e-conceitos-chave\">Guia de perguntas e conceitos chave</h2>\n<p>Quando começamos a estudar um tema novo, é útil termos uma ideia dos conceitos\nmais importantes que vamos aprender e dos temas centrais aos quais devemos\nprestar atenção especial.</p>\n<p>A seguir apresentamos uma série de perguntas que você deve ser capaz de\nresponder ao terminar esta unidade. Use estas perguntas como guia para orientar\nseu esforço de aprendizagem. Retorne a elas constantemente a medida que avança\npara validar que está indo na direção correta. Que este guia sirva como um\n\"checklist\" que você vai riscando conforme avança.</p>\n<ul>\n<li>Por que a depuração é importante?</li>\n<li>Que tipos de erros podemos encontrar no desenvolvimento de software?</li>\n<li>Por que é importante reconhecer as mensagens de erros? Identifique algumas que\nvocê já viu.</li>\n<li>O que é o Dev Tools?</li>\n<li>O que são <code>breakpoints</code>?</li>\n<li>Como depurar no Dev Tools?</li>\n</ul>\n",
          "order": 0,
          "durationString": "10min"
        },
        "01-intro": {
          "title": "O que é _debugging_?",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Representar graficamente as diferentes etapas de um processo e suas iterações,\nfacilitando a compreensão de seu funcionamento.</li>\n<li>Conhecer a utilidade dos diagramas de fluxo para analisar o processo, propor\nideias, representar os controles, etc.</li>\n</ul>\n<hr>\n<p><em>Debugging</em> é um processo de identificação e resolução de erros (<em>bugs</em>). Você\njá se deparou com a situação de programar todo o código de um projeto ou script,\ntestá-lo e perceber que não funciona como o esperado? O passo seguinte é\nretornar ao código e procurar a linha que pode estar errada, certo? Então, esse\nprocesso é chamado de <em>depuração</em>. Qual é o erro? Por que acontece o erro? Como\naconteceu o erro? Vai prejudicar outra parte do código?</p>\n<p>E sua importância, já vista implicitamente, é que permite identificar os erros a\nserem resolvidos e não ser vítimas de memes como esse:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*S6iw5QmBC2v_NbUzbrhwMw.jpeg\" alt=\"Curly Brace\nBug\"></p>\n<h2 id=\"tipos-de-erros\">Tipos de Erros</h2>\n<p>Quando falamos de depuração, estamos falando de erros e quando programamos é\nmuito provável que aconteçam dois tipos de erros: <em>erros de sintaxe</em> e <em>erros\nlógicos</em>.</p>\n<blockquote>\n<p>Um <strong>erro de sintaxe</strong> é gerado ao escrever, incorretamente, alguma parte do\ncódigo fonte do programa. Esse erro impedirá, tanto ao compilador como ao\nintérprete, traduzir aquela instrução, já que nenhum dos dois entenderá o que\no programador está dizendo. — Wikipedia</p>\n</blockquote>\n<pre><code class=\"language-javascript\">/*\n * Erros de sintaxe:\n */\n\n// Nome da variável começando com número\nconst 1cosa = 10;\n\n/*\n *\n * Erro de operador:\n * '=' é atribuição enquanto que '==' é comparação e '===' é comparação estrita.\n *\n */\nif (numero = 0) {\n  console.log('Zero');\n} else if (numero &gt; 0) {\n  /*\n   *\n   * Positivo deve ser entre aspas pois é uma string\n   * e não uma variável definida anteriormente.\n   *\n   */\n  console.log(positivo);\n} else {\n  /*\n   *\n   * `lo` não é um método do objeto `console`. O método desejado neste\n   * snippet é `console.log`.\n   * Este tipo de erro que ocorre no momento de escrever é conhecido\n   * como um `typo`.\n   *\n   */\n  console.lo('Negativo');\n}\n</code></pre>\n<blockquote>\n<p>Os <strong>erros lógicos</strong> são erros que impedem que seu programa faça o que estava\nprevisto. Seu código pode compilar e executar sem erros, mas o resultado da\noperação pode gerar um resultado inesperado. — Microsoft Developer Network.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">/*\n * Erro lógico\n */\n\n// Função que espera 2 números como parâmetros para retornar a soma de ambos.\nconst soma = (num1, num2) =&gt; num1 + num2;\n\n// Imaginemos que o número 1 é 6.\nconst num1 = prompt('Digite o número 1');\n\n// Imaginemos que o número 2 é 4.\nconst num2 = prompt('Digite o número 2');\n\nconst resultado = soma(num1, num2);\n\n// Resultado esperado: 10.\n// Resultado obtido: \"64\".\nconsole.log(resultado);\n\n/*\n *\n * O erro que acontece neste snippet é que tudo que o usuário digita por um prompt é\n * uma string e devemos considerar isso para obter o resultado desejado.\n * Neste caso, teríamos que converter o tipo de dado de string para número.\n *\n */\n</code></pre>\n",
          "order": 1,
          "durationString": "30min"
        },
        "02-error-messages": {
          "title": "Mensagens de erro",
          "type": "read",
          "format": "self-paced",
          "duration": 60,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Conhecer os diferentes tipos de mensagens de erro e o vocabulário dessas\nmensagens para resolver os problemas no código.</li>\n</ul>\n<hr>\n<p>Todos cometem erros, inclusive programadores com muita experiência. Felizmente,\no console de Dev Tools dirá quando um erro acontece. Por outro lado, estas\nmensagens podem ser difíceis de compreender e às vezes seus significados não são\ntão óbvios. O objetivo desta leitura é explorar alguns erros comuns e seus\nsignificados e assim resolver problemas no código.</p>\n<h2 id=\"erros-comuns\">Erros comuns</h2>\n<p>Há muitos tipos de erros, mas há alguns que são mais comuns. Leia estas\nreferências para compreender os erros mais comuns.</p>\n<h3 id=\"referenceerror-x-is-not-defined\">ReferenceError: \"x\" is not defined</h3>\n<p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Errors/N%C3%A3o_definido\" target=\"_blank\">ReferenceError: \"x\" is not defined -\nMDN</a></p>\n<h3 id=\"syntaxerror-unexpected-token\">SyntaxError: Unexpected token</h3>\n<p>Um \"token\" é uma peça pequena do código. Por exemplo, variáveis, funções,\noperadores e palavras chave (como <code>if</code> ou <code>while</code>), todos são tokens.</p>\n<p>A palavra \"unexpected\" significa \"inesperado\". Logo, se você tiver um token\ninesperado significa que o navegador estava lendo o código até que chegou a algo\nque não deveria esta ali. Usualmente isso significa que está faltando algo (como\numa vírgula ou um <code>+</code>) logo antes do token inesperado.</p>\n<p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Errors/Unexpected_token\" target=\"_blank\">SyntaxError: Unexpected token -\nMDN</a></p>\n<p>Exemplos:</p>\n<pre><code class=\"language-javascript\">const foo = 'Nicole's code';\n// SyntaxError: unexpected token: identifier\n</code></pre>\n<pre><code class=\"language-javascript\">const list = [1, 2,\n\nconst instruments = [\n  'Ukulele',\n  'Guitar',\n  'Piano'.\n};\n// SyntaxError: expected expression, got keyword 'const'\n</code></pre>\n<pre><code class=\"language-javascript\">const data = [{foo: 'bar'} {bar: 'foo'}];\n// SyntaxError: missing ] after element list\n</code></pre>\n<p>Às vezes, ao invés de \"Unexpected Token\", será exibido algo como \"Unexpected\nIdentifier\" ou \"Unexpected Number\". Estes são erros similares e também quase\nsempre significam que você esqueceu de adicionar algo logo antes do token\ninesperado. Felizmente, Chrome DevTools dirá o número da linha na qual está o\nerro e <code>repl.it</code> dirá não só o número da linha como também o número da coluna.</p>\n<p><img src=\"https://user-images.githubusercontent.com/11894994/62891126-4d4a6a80-bd1b-11e9-9087-2f1c5dd898d6.png\" alt=\"repl.it screenshot\">.</p>\n<h3 id=\"typeerror-x-is-not-a-function\">TypeError: \"x\" is not a function</h3>\n<p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_function\" target=\"_blank\">TypeError: \"x\" is not a function -\nMDN</a></p>\n<h3 id=\"syntaxerror-missing--after-argument-list\">SyntaxError: missing ) after argument list</h3>\n<p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Errors/Fata_par%C3%AAnteses_ap%C3%B3s_lista_argumento\" target=\"_blank\">SyntaxError: missing ) after argument list -\nMDN</a></p>\n<h3 id=\"assignment-in-conditional-expression\">Assignment in Conditional Expression</h3>\n<p>\"Assignment in Conditional Expression\" não é uma mensagem de erro. É uma\nadvertência de <code>repl.it</code>.</p>\n<p>Significa que existe um operador de atribuição (<code>=</code>) em uma condição, mas\ndeveria ser um operador de comparação(<code>===</code>).</p>\n<p>Por exemplo,</p>\n<pre><code class=\"language-javascript\">if (x = 5) {\n  console.log('x es 5.');\n}\n</code></pre>\n<h3 id=\"outras-notas\">Outras notas</h3>\n<p>É importante considerar que as mensagens de erros podem variar entre os\nnavegadores. O guia de referência do MDN descreve mensagens do Firefox. As\nmensagens de erros dos outros navegadores são similares, mas não exatamente as\nmesmas. Nesta leitura, focamos nas mensagens do Chrome e <code>repl.it</code>.</p>\n<p><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Errors\" target=\"_blank\">Referência MDN de\nErros</a></p>\n",
          "order": 2,
          "durationString": "1h"
        },
        "03-code-challenges": {
          "title": "Desafios de código",
          "type": "practice",
          "format": "self-paced",
          "duration": 60,
          "body": "<h2 id=\"objetivos\">Objetivos</h2>\n<ul>\n<li>A seguir apresentamos uma série de desafios que você deve completar para\ntestar seus conhecimentos.</li>\n</ul>\n",
          "exercises": {
            "01-say-hello": {
              "title": "sayHello",
              "body": "<p>Corrija os erros na função e explique em um comentário qual foi o problema.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">sayHello(); // --&gt; 'Olá'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# sayHello\n\nCorrige los errores en la función y explique cuál fue el problema en un\ncomentario.\n\nEjemplo de entrada:\n\n```javascript\nsayHello(); // --> 'Hola'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "c2F5SGVsbG8uanM=": "const sayHello = () => {\n  console.log(Hola);\n};\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = sayHello;\n"
                },
                "c29sdXRpb24=": {
                  "c2F5SGVsbG8uanM=": "const sayHello = () => {\n  console.log('Hola');\n};\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * A la palabra 'hola' le faltaban comillas.\n */\n\nmodule.exports = sayHello;\n"
                },
                "dGVzdA==": {
                  "c2F5SGVsbG8uc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst sayHello = require('../solution/sayHello');\n\ndescribe('sayHello()', () => {\n  it('debería regresar undefined, para ()', () => {\n    Assert.deepEqual(sayHello(), undefined);\n  });\n});\n"
                }
              }
            },
            "02-create-array": {
              "title": "createArray",
              "body": "<p>Corrija os erros na função e explique em um comentário qual foi o problema.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const a = createArray();\nconsole.log(a); // --&gt; [1, 2, 3]\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# createArray\n\nCorrige los errores en la función y explique cuál fue el problema en un\ncomentario.\n\nEjemplo de entrada:\n\n```javascript\nconst a = createArray();\nconsole.log(a); // --> [1, 2, 3]\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "Y3JlYXRlQXJyYXkuanM=": "function createArray() {\n  const data = [1 2 3];\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = createArray;\n"
                },
                "c29sdXRpb24=": {
                  "Y3JlYXRlQXJyYXkuanM=": "function createArray() {\n  const data = [1, 2, 3];\n  return data;\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * Al arreglo le faltaban dos comas.\n */\n\nmodule.exports = createArray;\n"
                },
                "dGVzdA==": {
                  "Y3JlYXRlQXJyYXkuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst createArray = require('../solution/createArray');\n\ndescribe('createArray()', () => {\n  it('debería regresar [1, 2, 3], para ()', () => {\n    Assert.deepEqual(createArray(), [1, 2, 3]);\n  });\n});\n"
                }
              }
            },
            "03-calculate-tip": {
              "title": "ReferenceError: calculateTip",
              "body": "<p>Corrija os erros na função e explique em um comentário qual foi o problema.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">const tip = calculateTip(100);\nconsole.log(tip); // --&gt; 15\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# ReferenceError: calculateTip\n\nCorrige los errores en la función y explique cuál fue el problema en un\ncomentario.\n\nEjemplo de entrada:\n\n```javascript\nconst tip = calculateTip(100);\nconsole.log(tip); // --> 15\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "Y2FsY3VsYXRlVGlwLmpz": "/* Regresa num1 por ciento de num2. */\nconst percent = (num1, num2) => num1 * 100 / num2;\n\nconst calculateTip = billAmount => percent(15, billAmount);\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = calculateTip;\n"
                },
                "c29sdXRpb24=": {
                  "Y2FsY3VsYXRlVGlwLmpz": "/* Regresa num1 por ciento de num2. */\nconst percent = (num1, num2) => num1 * num2 / 100;\n\nconst calculateTip = billAmount => percent(15, billAmount);\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * La variable en la línea 11 tiene el mismo nombre que la función en la línea\n * 2.\n */\n\nmodule.exports = calculateTip;\n"
                },
                "dGVzdA==": {
                  "Y2FsY3VsYXRlVGlwLnNwZWMuanM=": "const Assert = require('chai').assert;\nconst calculateTip = require('../solution/calculateTip');\n\ndescribe('calculateTip()', () => {\n  it('debería regresar 15, para (100)', () => {\n    Assert.deepEqual(calculateTip(100), 15);\n  });\n\n  it('debería regresar 4.5, para (30)', () => {\n    Assert.deepEqual(calculateTip(30), 4.5);\n  });\n\n  it('debería regresar 0, para (0)', () => {\n    Assert.deepEqual(calculateTip(0), 0);\n  });\n\n  it('debería regresar 7.5, para (50)', () => {\n    Assert.deepEqual(calculateTip(50), 7.5);\n  });\n});\n"
                }
              }
            },
            "04-tell-fortune": {
              "title": "tellFortune",
              "body": "<p>Corrija os erros na função e explique em um comentário qual foi o problema.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-javascript\">tellFortune('scientist', 'Boston');\n// --&gt; 'In the year 2025, you will be a scientist and live in Boston.'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# tellFortune\n\nCorrige los errores en la función y explique cuál fue el problema en un\ncomentario.\n\nEjemplo de entrada:\n\n```javascript\ntellFortune('scientist', 'Boston');\n// --> 'In the year 2025, you will be a scientist and live in Boston.'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "dGVsbEZvcnR1bmUuanM=": "function tellFortune(job, location) {\n  return 'In the year 2025, you will be a ' + job ' and live in ' + location + '.';\n}\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = tellFortune;\n"
                },
                "c29sdXRpb24=": {
                  "dGVsbEZvcnR1bmUuanM=": "function tellFortune(job, location) {\n  return 'In the year 2025, you will be a ' + job + ' and live in ' + location + '.';\n}\n/**\n * ¿Cuál fue el problema con el código?\n *\n * A la linea 2 le faltaba un plus.\n */\n\nmodule.exports = tellFortune;\n"
                },
                "dGVzdA==": {
                  "dGVsbEZvcnR1bmUuc3BlYy5qcw==": "const Assert = require('chai').assert;\nconst tellFortune = require('../solution/tellFortune');\n\ndescribe('tellFortune()', () => {\n  it('debería regresar \"In the year 2025, you will be a programmer and live in Lima.\", para (\"programmer\", \"Lima\")', () => {\n    Assert.deepEqual(tellFortune('programmer', 'Lima'), 'In the year 2025, you will be a programmer and live in Lima.');\n  });\n\n  it('debería regresar \"In the year 2025, you will be a scientist and live in Boston.\", para (\"scientist\", \"Boston\")', () => {\n    Assert.deepEqual(tellFortune('scientist', 'Boston'), 'In the year 2025, you will be a scientist and live in Boston.');\n  });\n\n  it('debería regresar \"In the year 2025, you will be a singer and live in Madrid.\", para (\"singer\", \"Madrid\")', () => {\n    Assert.deepEqual(tellFortune('singer', 'Madrid'), 'In the year 2025, you will be a singer and live in Madrid.');\n  });\n\n  it('debería regresar \"In the year 2025, you will be a farmer and live in Fiji.\", para (\"farmer\", \"Fiji\")', () => {\n    Assert.deepEqual(tellFortune('farmer', 'Fiji'), 'In the year 2025, you will be a farmer and live in Fiji.');\n  });\n});\n"
                }
              }
            },
            "05-what-to-wear": {
              "title": "ReferenceError: whatToWear",
              "body": "<p>Corrija os erros na função e explique em um comentário qual foi o problema.</p>\n<p>Exemplo de entrada:</p>\n<pre><code class=\"language-js\">const winterClothes = whatToWear('winter');\nconsole.log(winterClothes); // --&gt; 'Bring a hat and gloves.'\n</code></pre>\n",
              "files": {
                "UkVBRE1FLm1k": "# ReferenceError: whatToWear\n\nCorrige los errores en la función y explique cuál fue el problema en un\ncomentario.\n\nEjemplo de entrada:\n\n```js\nconst winterClothes = whatToWear('winter');\nconsole.log(winterClothes); // --> 'Bring a hat and gloves.'\n```\n",
                "Ym9pbGVycGxhdGU=": {
                  "d2hhdFRvV2Vhci5qcw==": "function whatToWear(season) {\n  if (season = 'spring') {\n    return 'Bring an umbrella.';\n  } else if (season = 'summer') {\n    return 'Wear sunglasses.';\n  } else if (season = 'autumn') {\n    return 'Wear a light jacket.';\n  } else if (season = 'winter') {\n    return 'Bring a hat and gloves.';\n  } else {\n    return 'Please enter a valid season.';\n  }\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * ESCRIBA SU RESPUESTA AQUÍ.\n */\n\nmodule.exports = whatToWear;\n"
                },
                "c29sdXRpb24=": {
                  "d2hhdFRvV2Vhci5qcw==": "function whatToWear(season) {\n  if (season === 'spring') {\n    return 'Bring an umbrella.';\n  } else if (season === 'summer') {\n    return 'Wear sunglasses.';\n  } else if (season === 'autumn') {\n    return 'Wear a light jacket.';\n  } else if (season === 'winter') {\n    return 'Bring a hat and gloves.';\n  } else {\n    return 'Please enter a valid season.';\n  }\n}\n\n/**\n * ¿Cuál fue el problema con el código?\n *\n * Usaba operador de asignación en vez de comparación.\n */\n\nmodule.exports = whatToWear;\n"
                },
                "dGVzdA==": {
                  "d2hhdFRvV2Vhci5zcGVjLmpz": "\nconst Assert = require('chai').assert;\nconst whatToWear = require('../solution/whatToWear');\n\ndescribe('whatToWear()', () => {\n  it('debería regresar \"Bring an umbrella.\", para (\"spring\")', () => {\n    Assert.deepEqual(whatToWear('spring'), 'Bring an umbrella.');\n  });\n\n  it('debería regresar \"Wear sunglasses.\", para (\"summer\")', () => {\n    Assert.deepEqual(whatToWear('summer'), 'Wear sunglasses.');\n  });\n\n  it('debería regresar \"Wear a light jacket.\", para (\"autumn\")', () => {\n    Assert.deepEqual(whatToWear('autumn'), 'Wear a light jacket.');\n  });\n\n  it('debería regresar \"Bring a hat and gloves.\", para (\"winter\")', () => {\n    Assert.deepEqual(whatToWear('winter'), 'Bring a hat and gloves.');\n  });\n\n  it('debería regresar \"Please enter a valid season.\", para (\"foo\")', () => {\n    Assert.deepEqual(whatToWear('foo'), 'Please enter a valid season.');\n  });\n});\n"
                }
              }
            }
          },
          "order": 3,
          "durationString": "1h"
        },
        "04-breakpoints": {
          "title": "Como debuggar em JS?",
          "type": "read",
          "format": "self-paced",
          "duration": 40,
          "body": "<h2 id=\"objetivos-de-aprendizagem\">Objetivos de Aprendizagem</h2>\n<ul>\n<li>Aprender a depurar com o Dev Tools.</li>\n<li>Aprender a usar o <code>debugger statement</code>.</li>\n</ul>\n<hr>\n<p>Para depurar em JavaScript podemos utilizar 2 ferramentas: DevTools do navegador\ne o <code>debugger statement</code>.</p>\n<h2 id=\"devtools\">DevTools</h2>\n<p>O DevTools (é chamado assim no Chrome mas existe o mesmo em outros navegadores)\né uma ferramenta utilizada para inspecionar e depurar tudo o que acontece em\nnossa aplicação web.</p>\n<p>Para acessá-la existem diversos métodos. Um dos mais simples é abrir a página\nweb que você deseja depurar, clicar com o botão direito em qualquer parte da\npágina e selecionar a opção <em>Inspect</em> ou <em>Inspecionar</em>.</p>\n<p>Por padrão, será aberta uma aba chamada <em>Elements</em> ou <em>Elementos</em>; contudo, para\nfazer o debug de nosso código JavaScript devemos mudar para a aba <em>Sources</em> ou\n<em>Fonte</em>.</p>\n<p>Provavelmente, ao ver o conteúdo da aba <em>Sources</em>, você verá um arquivo HTML e\nnenhum arquivo JS por mais que saibamos o que estamos utilizando. Para poder\nvisualizar os arquivos JS que nossa web app utiliza, só é necessário recarregar\na página.</p>\n<p>Não ficou claro? Não se preocupe. Em seguida temos um GIF que mostra tudo o que\nmencionamos acima.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*JhVFiJNoGZAAmlnk00y6TA.gif\" alt=\"Chrome Dev Tools:\nSources\"></p>\n<p>Para a depuração do código JS, podemos fazer uso de <strong>breakpoints</strong>, que são\npontos onde queremos que nosso código pare durante o tempo de execução.</p>\n<p>No exemplo a seguir, temos um código que verifica se o número digitado por um\nusuário é zero, positivo ou negativo.</p>\n<pre><code class=\"language-javascript\">let number = prompt('Digite um número');\nnumber = Number(numero);\n\nif (number === 0) {\n  alert('Zero');\n} else if (number &gt; 0) {\n  alert('Positivo');\n} else {\n  alert('Negativo');\n}\n</code></pre>\n<p>Para adicionar um <em>breakpoint</em> no DevTools você só tem que clicar no número\nindicador da linha de código onde queremos parar o script. Uma vez colocado o\nbreakpoint, devemos recarregas a página para que pare onde indicamos.</p>\n<p>Uma vez parado, a linha de código onde colocamos o <em>breakpoint</em> ficará\ndestacada, enquanto que a páginaweb ficará opaca e mostrará uma mensagem <em>Paused\nin debugger</em> ao lado de 2 botões. O primeiro (cor azul), chamado  <em>Resume Script\nExecution</em>, determina que a execução continue até o próximo <em>breakpoint</em> ou até\nque termine o script. O segundo (cor cinza), chamado <em>Step over next function\ncall</em>, continua a seguir o fluxo de execução do programa.</p>\n<p>A seguir você pode ver esse processo em um GIF:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DbS6jAUYz3mPJjyv8MMU-w.gif\" alt=\"Chrome Dev Tools:\nBreakpoints\"></p>\n<p>Dois botões que nos ajudam a depurar nosso código são: <em>Step into next function\ncall</em> e <em>Step out of current function</em>. O primeiro permite entrar no código de\numa função em tempo de execução, enquanto o segundo permite sair da função na\nqual estamos depurando.</p>\n<p>No exemplo a seguir, se tivéssemos um breakpoint na linha 8, e usássemos o botão\n<em>Step over next function</em>, iríamos para a linha 9; contudo, se usamos o botão de\n<em>Step into next function call</em>, entraria na linha de código número 2 já que esse\né o código que está dentro de nossa função.</p>\n<p>Chegou a hora de testarmos:</p>\n<pre><code class=\"language-javascript\">function factorial(number) {\n  if (number === 1) {\n    return 1;\n  }\n  return number * factorial(number - 1);\n}\n\nconst result = factorial(5);\nconsole.log(result);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*C3k9ZTu-q9i8GFB2P47muQ.gif\" alt=\"Chrome Dev Tools:\nDebugging\"></p>\n<h2 id=\"debugger-statement\">Debugger Statement</h2>\n<p>O segundo método para depurar um código é utilizando uma palavra reservada em JS\nchamada <code>debugger</code>. Esta palavra permite especificar no código a linha exata em\nque queremos que nosso aplicativo web seja depurado.</p>\n<blockquote>\n<p>Nota: Para que o script pare na palavra <code>debugger</code>, precisamos ter o Dev Tools\naberto e então recarregar a página.</p>\n</blockquote>\n<p>A seguir temos uma demonstração usando o seguinte script:</p>\n<pre><code class=\"language-javascript\">const number = parseInt(prompt('Digite um número (de 1 a 10):'));\nconst randomNumber = Math.floor(Math.random() * 10);\n\ndebugger;\nif (randomNumber === number) {\n    console.log('Adivinhou!');\n} else {\n    console.log('Perdeu! O número é ' + randomNumber);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*RcPHfLBSK1Bh8FzfqJlqpQ.gif\" alt=\"Debugger\nstatement\"></p>\n<h2 id=\"agora-é-sua-vez\">Agora é sua vez</h2>\n<p>Para colocar em prática esta leitura, você pode depurar o código a seguir:</p>\n<pre><code class=\"language-javascript\">/*\n * Corrija o seguinte código de maneira que obtenha o resultado esperado.\n * Utilize as técnicas de depuração que você conhece para encontrar e resolver\n * o erro.\n */\n\nconst reverse = (text) =&gt; {\n  let reversedText = '';\n  const textLength = text.length;\n\n  for (let i = textLength; i &gt; 0; i--) {\n   reversedText += text.charAt(i);\n  }\n\n  return reversedText;\n};\n\nconst result = reverse('Laboratoria');\n// Resultado atual: airotaroba\n// Resultado esperado: airotarobaL\nconsole.log(result);\n\n// HINT: São duas alterações para que fique correto ;)\n</code></pre>\n<p>Assim, a partir de agora...</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*znr2Wn2kXro7XkimgplRCg.jpeg\" alt=\"Debug all the\nthings\"></p>\n",
          "order": 4,
          "durationString": "40min"
        },
        "05-closing": {
          "title": "Encerramento: Debugging",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<h2 id=\"agenda\">Agenda</h2>\n<h3 id=\"1-responda-às-perguntas-da-abertura\">1. Responda às perguntas da abertura</h3>\n<ul>\n<li>Por que a depuração é importante?</li>\n<li>Que tipos de erros podemos encontrar no desenvolvimento de software?</li>\n<li>Por que é importante reconhecer as mensagens de erros? Identifique algumas que\nvocê já viu.</li>\n<li>O que é o Dev Tools?</li>\n<li>O que são <code>breakpoints</code>?</li>\n<li>Como depurar no Dev Tools?</li>\n</ul>\n",
          "order": 5,
          "durationString": "10min"
        }
      },
      "order": 9,
      "stats": {
        "duration": 210,
        "durationString": "3.5h",
        "exerciseCount": 5,
        "partCount": 6
      }
    },
    "11-testing": {
      "title": "Testes",
      "bonus": false,
      "description": "<p>Testar o seu codigo é importante para garantir que funcione como se espera.\nEscrever testes desdo começo ajuda a desenhar melhor o nosso código.</p>\n",
      "parts": {
        "00-opening": {
          "title": "Abertura",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"por-que-aprender-isto\">Por que aprender isto?</h2>\n<p>Testar seu código é importante para garantir que funcione conforme o esperado,\nmas não somente isso. Escrever testes desde o início auxilia a criar e projetar\ncódigos melhores.</p>\n<p>Escrevemos testes para:</p>\n<ol>\n<li>Encontrar problemas na codificação;</li>\n<li>Evitar que problemas/bugs cheguem à produção;</li>\n<li>Para provar/demonstrar que um programa não possui falhas;</li>\n<li>Para verificar a confiabilidade de nosso código;</li>\n<li>Para garantir que um <em>produto</em> se comporte como esperamos;</li>\n<li>Para detectar problemas rapidamente, o que permite reduzir o custo de\nmodificações.</li>\n</ol>\n<p>Neste curso teremos uma ênfase especial no desenvolvimento orientado a testes\n(<a href=\"https://pt.wikipedia.org/wiki/Test_Driven_Development\" target=\"_blank\">Test Drive Development -\nTDD</a>). Nesta unidade você\npoderá seguir os passos necessários para escrever seus primeiros testes e\nentender o valor inestimável que propiciam.</p>\n<p>Ao longo do curso usaremos testes não somente no <em>projeto final</em> mas também como\nferramentas para demonstrar as diferentes características da linguagem conforme\nformos avançando.</p>\n<h2 id=\"guia-de-perguntas-e-conceitos-chave\">Guia de perguntas e conceitos chave</h2>\n<p>Quando começamos a estudar um novo assunto, é útil termos uma ideia de conceitos\nmais importantes que vamos aprender e dos temas centrais a que devemos prestar\natenção especial.</p>\n<p>A seguir apresentamos uma série de perguntas que você deve ser capaz de\nresponder ao terminar esta unidade. Use estas perguntas como guia para orientar\nseu esforço de aprendizagem. Retorne a elas constantemente a medida que avança\npara validar que está indo na direção correta. Que este guia sirva como um\n\"checklist\" que você vai riscando conforme avança.</p>\n<ul>\n<li>O que é um teste?</li>\n<li>O que é um <em>framework</em> de <em>testing</em>?</li>\n<li>Como escrever testes usando a interface BDD (<code>describe()</code>, <code>it()</code>, ...) do\n<code>mocha</code>?</li>\n<li>Como usar a biblioteca padrão de Node.js para atribuições com o módulo\n<code>assert</code>?</li>\n<li>Como usar as <em>asserts</em> do <code>chai</code>?</li>\n<li>Como executar testes no ambiente do navegador de forma automatizada com\n<code>karma</code>?</li>\n</ul>\n",
          "order": 0,
          "durationString": "5min"
        },
        "01-basics": {
          "title": "O que é um teste?",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<p>Quando falamos de <strong>tests</strong> (testes), poderíamos pensar em ferramentas de testes\ncomo <code>Mocha</code>, <code>Jest</code>, <code>Jasmine</code>, ... ou metodologias de desenvolvimento como TDD\nou BDD. Tudo isso pode ser muito confuso. Nesta unidade trataremos de\ndesmistificar um pouco este tema começando pelo princípio. Para tal, pensemos em\ntestes simplesmente como o ato de executar algo no computador e depois verificar\nque efetivamente aconteceu o que esperávamos.</p>\n<p>O teste mais simples possível:</p>\n<pre><code class=\"language-js\">const a = 5;\nconsole.log(a);\n</code></pre>\n<p>Poderíamos dizer que nosso amigo <code>console.log</code> é a ferramenta de testes mais\nbásica de todas. Ao imprimir um valor no console, podemos ver com nossos e olhos\ne <em>comprovar</em> que é esse o valor (de uma maneira visual). Estamos provando (ou\ncomprovando) que efetivamente a variável <code>a</code> recebeu o valor <code>5</code>, que era\nexatamente o que esperávamos.</p>\n<p>Este processo nos permite ver o que está acontecendo com o código enquanto o\nescrevemos. Utilize o <code>console.log</code> e utilize-o muito. Mas obviamente ele possui\nlimitações. Neste caso dependemos que uma pessoa execute o comando, veja o\n<em>output</em> (saída) e na sua cabeça faça a comprovação. Muito útil para a pessoa,\nmas não é automatizável nem escalável.</p>\n<p>Por sorte, somos programadoras e podemos escrever um pouco de código (e ou usar\ncódigo de outras) para resolver estes problemas.</p>\n<hr>\n<p>Para continuar nesta unidade, recomendamos que você crie uma pasta em algum\nlugar de seu computador e vá criando os arquivos e programando conforme\navançamos. Todo o código desta lição pode ser executado com <code>node</code>.</p>\n<hr>\n<p>Agora imaginemos que queiramos uma função que dado um caractere, ela nos diga se\né uma vogal ou não (deveria retornar <code>true</code> para as vogais e <code>false</code> para\nqualquer outro caractere). Antes de implementar a função poderíamos projetar\nalguns <em>tests</em>. Crie um arquivo com o nome <code>isVowel.spec.js</code> e escreva o código\na seguir:</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`:\n\nconst isVowel = require('./isVowel');\n\nconsole.log('Deveria retornar true para a letra a');\nif (isVowel('a') === true) {\n  console.log('✓ ok');\n} else {\n  console.error('✗ fail');\n}\n\nconsole.log('Deveria retornar false para a letra b');\nif (isVowel('b') === false) {\n  console.log('✓ ok');\n} else {\n  console.error('✗ fail');\n}\n</code></pre>\n<p>Executemos nossos testes com <code>node</code> na linha de comando:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\nmodule.js:557\n    throw err;\n    ^\n\nError: Cannot find module './isVowel'\n    at Function.Module._resolveFilename (module.js:555:15)\n    at Function.Module._load (module.js:482:25)\n    at Module.require (module.js:604:17)\n    at require (internal/module.js:11:18)\n    at Object.&lt;anonymous&gt; (/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:1:79)\n    at Module._compile (module.js:660:30)\n    at Object.Module._extensions..js (module.js:671:10)\n    at Module.load (module.js:573:32)\n    at tryModuleLoad (module.js:513:12)\n    at Function.Module._load (module.js:505:3)\n</code></pre>\n<p>Como podemos ver, recebemos um erro: <code>Error: Cannot find module './isVowel'</code>. Os\nerros podem ser um pouco enigmáticos no início e você precisa aprender a\n<em>lê-los</em>. A mensagem de erro em diz que não foi possível encontrar o módulo\n<code>./isVowel</code> e abaixo temos uma série de linhas com o <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\" target=\"_blank\"><em>stack\ntrace</em></a>,\nque nos mostra a pilha de chamadas a partir de onde ocorreu o erro. Neste caso\npodemos ver que é mencionado nosso script\n(<code>/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:1:79</code>),\ne ao final do caminho do arquivo vemos que aparecem dois números separados por\ndois pontos (<code>:</code>). Estes números nos dizem em qual linha e qual coluna (posição\ndentro da linha) está o código em questão. A linha <code>1</code> contém\n<code>require('./isVowel')</code>, que é a responsável pelo erro.</p>\n<p>Isso acontece porque importamos um módulo do arquivo <code>./isVowel.js</code> no mesmo\ndiretório que nosso script com os testes, mas ele não existe. Assim que o\ncriamos e declaramos uma função com o nome <code>isVowel</code>:</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.js`\n\nconst isVowel = function (char) {\n  // ...\n};\n</code></pre>\n<p>Se executarmos novamente os testes, agora a saída mostrada no console deveria\naparecer algo assim:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\nDeveria retornar true para a letra a\n/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:4\nif (isVowel('a') !== true) {\n    ^\n\nTypeError: isVowel is not a function\n    at Object.&lt;anonymous&gt; (/Users/lupo/work/laboratoria/curricula-js/05-deep-dive/03-testing/01-basics/files/isVowel.spec.js:6:5)\n    at Module._compile (module.js:660:30)\n    at Object.Module._extensions..js (module.js:671:10)\n    at Module.load (module.js:573:32)\n    at tryModuleLoad (module.js:513:12)\n    at Function.Module._load (module.js:505:3)\n    at Function.Module.runMain (module.js:701:10)\n    at startup (bootstrap_node.js:194:16)\n    at bootstrap_node.js:618:3\n</code></pre>\n<p>Isto quer dizer que agora sim foi possível carregar o módulo (o erro de antes já\nnão aparece), mas agora recebemos um novo erro: <code>TypeError: isVowel is not a function</code> Se olharmos na linha logo abaixo da mensagem de erro, vemos que o erro\nfoi disparado no arquivo <code>isVowel.spec.js</code> na linha <code>6</code> e coluna <code>5</code>). Se\nolharmos no código, veremos que linha <code>6</code> e coluna <code>5</code> é onde está\n<code>isVowel('a')</code>. Esta é a linha na qual invocamos a função <code>isVowel</code> pela\nprimeira vez e parece que não é o que esperávamos (uma função, doh!).</p>\n<p>O motivo pelo qual vemos esse erro é porque apesar de termos criado o arquivo\n<code>isVowel.js</code> e termos declarado uma função com o nome <code>isVowel</code> não a\n<em>exportamos</em>.</p>\n<p>Mais adiante veremos mais detalhes sobre como <em>exportar</em> usando tanto CommonJS\n(<code>require</code>, <code>module</code>, <code>module.exports</code>) como módulos de ES6 (<code>import</code>,\n<code>export</code>). Por enquanto não vamos esmiuçar esses detalhes. O importante por\nenquanto é saber que estamos executando nosso código com <code>node</code>, com o qual\nvamos usar o sistema de módulos de <code>node</code> (CommonJS). Quando usamos este\nsistemas, podemos <em>exportar</em> qualquer valor atribuindo-o à propriedade <code>exports</code>\ndo objeto global <code>module</code> (<code>module.exports</code>). <code>Node.js</code> se encarrega de que o\n<code>module</code> exista no âmbito global.</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.js`\n\nconst isVowel = function (char) {\n  // ...\n};\n\nmodule.exports = isVowel;\n</code></pre>\n<p>Executemos os <em>tests</em> uma vez más:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\nDeveria retornar true para a letra a\n✗ fail\nDeveria retornar false para a letra b\n✗ fail\n</code></pre>\n<p>Viva! Finalmente nosso script de tests executou sem <em>erros</em>, mas vemos que a\nimplementação de <code>isVowel()</code> não passa em nenhum dos testes que escrevemos.</p>\n<p>Agora sim, implementamos a funcionalidade esperada em <code>isVowel()</code>:</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.js`\n\nconst isVowel = function (char) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(char) &gt; -1;\n};\n\nmodule.exports = isVowel;\n</code></pre>\n<p>E executemos os testes mais uma vez:</p>\n<pre><code class=\"language-sh\">$ node ./isVowel.spec.js\nDeveria retornar true para a letra a\n✓ ok\nDeveria retornar false para a letra b\n✓ ok\n</code></pre>\n<hr>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<p><a href=\"https://martinfowler.com/bliki/UnitTest.html\" target=\"_blank\">Unit Test - Martin Fowler</a></p>\n",
          "order": 1,
          "durationString": "20min"
        },
        "02-frameworks": {
          "title": "*Frameworks*",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<p>Já vimos um pouco o que fazemos quando testamos e porque testamos. Agora vamos\nintroduzir algumas ferramentas para facilitar esse processo de ter que executar\nalgo e comprovar se aconteceu o que esperávamos.</p>\n<p>Existem vários frameworks e bibliotecas ótimas de <em>testing</em> para JavaScript:\n<a href=\"https://mochajs.org/\" target=\"_blank\">Mocha</a>, <a href=\"https://facebook.github.io/jest/\" target=\"_blank\">Jest</a>,\n<a href=\"https://jasmine.github.io/\" target=\"_blank\">Jasmine</a>,\n<a href=\"https://github.com/substack/tape\" target=\"_blank\">Tape</a>,... para falar só das mais populares.</p>\n<blockquote>\n<p>Teste unitário envolve quebrar seu programa em pedaços e submeter cada pedaço\na uma série de testes.</p>\n<p>Normalmente testes são executados como programas a parte, mas o método de teste\nvaria, dependendo da linguagem e do tipo de software (GUI, linha de comando,\nbiblioteca).</p>\n<p>A maior parte das linguagens possuem frameworks para testes unitários. Você\ndeve olhar o framework que você utiliza.</p>\n<p>Testes normalmente são executados periodicamente, frequentemente após cada\nmudança do código fonte. Quando mais frequente melhor, porque mais cedo você\nverá os problemas.</p>\n<p>Fonte: <a href=\"https://stackoverflow.com/a/652309/374331\" target=\"_blank\">Stack Overflow</a></p>\n</blockquote>\n<p>Neste curso concentraremos os esforços no <strong>Mocha</strong> e em particular à interface\n<a href=\"https://mochajs.org/#bdd\" target=\"_blank\">BDD</a>, que implementa uma API para fazer\n<a href=\"https://pt.wikipedia.org/wiki/Behavior_Driven_Development\" target=\"_blank\">Behavior-driven\ndevelopment</a>.</p>\n<h2 id=\"instalando-mocha\">Instalando Mocha</h2>\n<p>Para começar, instalaremos o <code>mocha</code> globalmente usando <code>npm</code>.</p>\n<pre><code class=\"language-sh\">npm install --global mocha\n</code></pre>\n<p>Alternativamente, se você prefere abreviaturas, é possível usar este outro\ncomando que faz exatamente o mesmo que o anterior, mas usando os atalhos.</p>\n<pre><code class=\"language-sh\">npm i -g mocha\n</code></pre>\n<p>Se você receber um erro que diz algo como <code>Error: EACCES: permission denied ...</code>, provavelmente significa que você não possui permissão na pasta na qual\nestá instalado <code>Node.js</code>. Nesse caso, você pode tentar executar o comando usando\n<code>sudo</code>:</p>\n<pre><code class=\"language-sh\">sudo npm i -g mocha\n</code></pre>\n<p>Se tudo correu bem, você já deve ter o <code>mocha</code> instalado como um comando que\nvocê pode executar pelo terminal. Podemos usar o comando <code>which</code> para ver se ele\nencontra o executável:</p>\n<pre><code class=\"language-sh\">$ which mocha\n/usr/local/bin/mocha\n</code></pre>\n<p>Se o <code>mocha</code> não estivesse instalado no seu <code>Path</code> o comando <code>which</code> não\nmostraria nada. Por outro lado, agora que sabemos que temos o executável de\n<code>mocha</code> disponível, podemos ver a ajuda executando o comando <code>mocha --help</code>:</p>\n<pre><code class=\"language-sh\">$ mocha --help\n\n  Usage: mocha [debug] [options] [files]\n\n\n  Options:\n\n    -V, --version                           output the version number\n    -A, --async-only                        force all tests to take a callback (async) or return a promise\n    -c, --colors                            force enabling of colors\n    -C, --no-colors                         force disabling of colors\n    -G, --growl                             enable growl notification support\n    -O, --reporter-options &lt;k=v,k2=v2,...&gt;  reporter-specific options\n    -R, --reporter &lt;name&gt;                   specify the reporter to use\n    -S, --sort                              sort test files\n    -b, --bail                              bail after first test failure\n    ...\n\n\n  Commands:\n\n    init &lt;path&gt;  initialize a client-side mocha setup at &lt;path&gt;\n</code></pre>\n<h2 id=\"nossos-primeiros-testes-com-a-interface-bdd\">Nossos primeiros testes com a interface BDD</h2>\n<p>Agora que já temos o <code>mocha</code> instalado, podemos usar o comando para executar\nscripts com nossos testes, usando tudo o que a biblioteca nos oferece.</p>\n<p>Para começar vamos nos limitar a duas funções que o <code>mocha</code> injeta no ambiente:\n<code>describe()</code> e <code>it()</code>. Estas duas funções permitirão construir a estrutura que\nqueremos testar.</p>\n<p>No exemplo que vínhamos acompanhando, nossos testes dizem algo como: verifique\nque <em>isVowel()</em>:</p>\n<ul>\n<li>retorna <code>true</code> quando é invocada com o valor <code>a</code> (<code>isVowel('a') === true</code>)</li>\n<li>retorna <code>false</code> quando é invocada com o valor <code>b</code> (<code>isVowel('b') === false</code>)</li>\n</ul>\n<p>Esta lógica pode ser expressada usando <code>describe()</code> e <code>it()</code>. Com <code>describe()</code>\nvamos dizer o que estamos testando e com <code>it()</code> especificaremos quais\ncaracterísticas ou comportamentos queremos comprovar/afirmar.</p>\n<p>Reescrevamos nossos testes usando esta API (<code>describe</code> e <code>it</code>). O primeiro passo\né indicar que queremos testar (a função <code>isVowel()</code> neste caso) usando uma\nchamada <code>describe()</code>, que recebe argumentos, um string informativo para lhe dar\num nome ao grupo de testes e uma função que terá todos os testes e <code>asserts</code>\npara esta coisa que estamos testando.</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`\n\ndescribe('isVowel()', () =&gt; {\n  // Aqui vão os testes que descrevem o comportamento de `isVowel()`\n});\n</code></pre>\n<p>Salve isto no arquivo <code>isVowel.spec.js</code> e execute-o com o <code>mocha</code>:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  0 passing (2ms)\n</code></pre>\n<p>Não recebemos nenhum erro porque tampouco aconteceu algo de interessante. Só\nvemos que <code>0</code> testes passaram. Na hora de escrever os testes (seja antes ou\ndepois de implementar o código que queremos testar), é muito comum planejar os\ntestes sem lhes dar uma implementação. No nosso caso, sabemos que queremos\nprovar que <code>isVowel()</code>:</p>\n<ul>\n<li>retorna <code>true</code> quando se invoca com o valor <code>a</code>.</li>\n<li>retorna <code>false</code> quando se invoca com o valor <code>b</code>.</li>\n</ul>\n<p>Isto traduzido para a semântica de BDD no Mocha, podemos expressar assim:</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`\n\ndescribe('isVowel()', () =&gt; {\n  it('Deveria retornar true para a letra a');\n  it('Deveria retornar false para a letra b');\n});\n</code></pre>\n<p>Votemos a executar os testes com o comando <code>mocha</code>:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n    - Deveria retornar true para a letra a.\n    - Deveria retornar false para a letra b.\n\n\n  0 passing (5ms)\n  2 pending\n</code></pre>\n<p>Você verá que embora não tenhamos especificado como fazer as verificações, fomos\ndescrevendo igualmente o comportamento esperado. Mais tarde poderemos refinar a\nimplementação conforme avançamos. Isto é muito útil tanto para <em>documentar</em> o\ncomportamento de nosso código como para ver o nível de totalidade da\nimplementação e quais casos consideramos (ou não).</p>\n<p>No <em>snippet</em> anterior invocamos <code>it()</code> com uma string que permite descrever a\ncaracterística ou comportamento esperado. O mais comum é que estas strings\ncomecem com a palavra <em>deveria ...</em>. Desta maneira vamos articulando a semântica\nque depois <em>leremos</em> como <em>isVowel() deveria...</em>.</p>\n<p>Mocha nos mostra os testes que adicionamos com <code>it()</code> mas nos diz que estão\n<em>pendentes</em>. Isto porque demos um nome mas fizemos uma implementação. Para\nadicionar o código que de fato executa o teste, <code>it()</code> recebe um segundo\nargumento, uma função que será invocada para executar o teste em questão.</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`\n\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('Deveria retornar true para a letra a', () =&gt; {\n    // Aqui invocamos `isVowel()` e verificamos o resultado\n  });\n\n  it('Deveria retornar false para a letra b', () =&gt; {\n    // Aqui invocamos `isVowel()` e verificamos o resultado\n  });\n\n});\n</code></pre>\n<p>Já temos uma estrutura pronta para implementar nossos testes. Para continuar\ngradualmente com o exemplo, simplesmente copie as verificações que fizemos na\nprimeira versão dos testes (leitura anterior) dentro de nossa nova estrutura:</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`\n\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('Deveria retornar true para a letra a', () =&gt; {\n    if (isVowel('a') !== true) {\n      console.error('✗ fail');\n    } else {\n      console.log('✓ ok');\n    }\n  });\n\n  it('Deveria retornar false para a letra b', () =&gt; {\n    if (isVowel('b') !== false) {\n      console.error('✗ fail');\n    } else {\n      console.log('✓ ok');\n    }\n  });\n\n});\n</code></pre>\n<p>Executemos os testes outra vez:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n✓ ok\n    ✓ Deveria retornar true para a letra a.\n✓ ok\n    ✓ Deveria retornar false para a letra b.\n\n\n  2 passing (6ms)\n</code></pre>\n<p>Hmmm... como você pode ver nossas verificações foram executadas, mas o Mocha e\nnosso código não parecem estar se comunicando. Isso porque o Mocha espera que\nfaçamos as verificações usando <em>asserts</em> que podem comunicar se uma verificação\npassou ou não com o Mocha para que ele possa tratar os resultados, ao invés de\nter que <em>manualmente</em> exibir as mensagens no console.</p>\n<p>Na leitura seguinte, veremos como utilizar <em>asserts</em> nos seus testes, com\n<code>assert</code> de Node.js e com <code>Chai.assert</code>.</p>\n",
          "order": 2,
          "durationString": "30min"
        },
        "03-assertions": {
          "title": "*Asserts*",
          "type": "read",
          "format": "self-paced",
          "duration": 30,
          "body": "<p>Nas leituras anteriores vimos como usar <code>mocha</code> para construir a estrutura que\nqueremos verificar/testar, mas contudo ainda nos falta fazer as\ncomprovações/asserções que permitam verificar se o código que estamos testando\nse comporta como esperamos.</p>\n<p>Para haver isso usamos as <em>asserções</em>. Uma <em>asserção</em> é um pedaço de código que\ncomprova se um valor é o esperado e no caso de não ser, avise-nos. Desta\nmaneira, se no futuro algo mudar no comportamento do código, os testes\npermitirão ver exatamente o quê.</p>\n<h2 id=\"vanilla\">Vanilla</h2>\n<p>Comecemos por implementar nossa própria <em>asserção</em> de igualdade. Isso não é mais\ndo que uma função que compara dois valores para ver se são iguais. Em caso\nnegativo, exibe um erro com uma mensagem informativa.</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`\n\nconst isVowel = require('./isVowel');\n\nconst assertEqual = (value, expected) =&gt; {\n  if (value !== expected) {\n    throw new Error(`Expected '${value}' to equal '${expected}'`);\n  }\n};\n\ndescribe('isVowel()', () =&gt; {\n\n  it('Deveria retornar true para a letra a', () =&gt; {\n    assertEqual(isVowel('a'), true);\n  });\n\n  it('Deveria retornar false para a letra b', () =&gt; {\n    assertEqual(isVowel('b'), false);\n  });\n\n});\n</code></pre>\n<p>Executemos os testes novamente.</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n    ✓ Deveria retornar true para a letra a.\n    ✓ Deveria retornar false para a letra b.\n\n\n  2 passing (8ms)\n</code></pre>\n<p>Agora toda a saída que vemos é produzido pelo Mocha (já não existe uma saída\noriunda de nossos <code>console.log</code>'s) e vemos que ambos os testes passam.</p>\n<p>Só para testar (e vale a redundância) modifiquemos (melhor dizer \"quebremos\") a\nimplementação de <code>isVowel()</code> para ver que nossos testes efetivamente reportam os\nproblemas.</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.js`\n\nconst isVowel = function (char) {\n  return ['b', 'e', 'i', 'o', 'u'].indexOf(char) &gt; -1;\n};\n\nmodule.exports = isVowel;\n</code></pre>\n<p>Trocamos o <code>a</code> por um <code>b</code>. E nossos testes agora deveriam mostrar a saída como:</p>\n<pre><code class=\"language-sh\">$ mocha ./isVowel.spec.js\n\n\n  isVowel()\n    1) Deveria retornar true para a letra a.\n    2) Deveria retornar false para a letra b.\n\n\n  0 passing (7ms)\n  2 failing\n\n  1) isVowel()\n       Deveria retornar true para a letra a:\n     Error: Expected 'false' to equal 'true'\n      at assertEqual (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:7:11)\n      at Context.it (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:14:5)\n\n  2) isVowel()\n       Deveria retornar false para a letra b:\n     Error: Expected 'true' to equal 'false'\n      at assertEqual (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:7:11)\n      at Context.it (05-deep-dive/03-testing/03-assertions/files/isVowel-vanilla-assert.spec.js:18:5)\n</code></pre>\n<p>Como podemos ver, os testes se comportam como esperávamos!</p>\n<p>Este exemplo é ilustrativo, mas no mundo real provavelmente você não vai querer\nimplementar seu próprio código de asserções (não somente de igualdade, mas sim\ntodo o tipo de comparações). O mais comum é usar uma dependência externa (uma\nbiblioteca ou módulo) como veremos nos próximos exemplos.</p>\n<h2 id=\"módulo-assert-de-nodejs\">Módulo <em>assert</em> de Node.js</h2>\n<p>Node.js contém seu próprio módulo de asserções sem necessidade de ter que\ninstalar nenhuma dependência. Se você estiver executando seus testes com\nNode.js, é muito comum utilizar este módulo (<code>assert</code>), a menos que a biblioteca\nou <em>framework</em> que estiver usando já contenham seus próprios sistemas de\nasserções (por exemplo, <code>Jest</code>).</p>\n<p>Troquemos nossa função <code>assertEqual</code> com o módulo <code>assert</code> de Node.js:</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`\n\nconst assert = require('assert');\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('Deveria retornar true para a letra a', () =&gt; {\n    assert.equal(isVowel('a'), true);\n  });\n\n  it('Deveria retornar false para a letra b', () =&gt; {\n    assert.equal(isVowel('b'), false);\n  });\n\n});\n</code></pre>\n<p><a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\">Documentação Assert - Node.js</a></p>\n<h2 id=\"chaiassert\">Chai.assert</h2>\n<p>O Mocha não contém uma interface para asserções e no navegador não temos o\nmódulo <code>assert</code> de Node.js. Logo, é muito comum usar o Mocha em conjunto com\n<code>Chai</code>, que é uma biblioteca de asserções que nos oferece várias interfaces.\nEntre elas, uma muito parecida com o <code>assert</code> de Node.js:</p>\n<pre><code class=\"language-js\">// Arquivo `isVowel.spec.js`\n\nconst { assert } = require('chai');\nconst isVowel = require('./isVowel');\n\ndescribe('isVowel()', () =&gt; {\n\n  it('Deveria retornar true para a letra a', () =&gt; {\n    assert.equal(isVowel('a'), true);\n  });\n\n  it('Deveria retornar false para a letra b', () =&gt; {\n    assert.equal(isVowel('b'), false);\n  });\n\n});\n</code></pre>\n<p><a href=\"http://chaijs.com/\" target=\"_blank\">Chai - Documentação oficial</a></p>\n<h2 id=\"leituras-complementares\">Leituras complementares</h2>\n<ul>\n<li><a href=\"https://medium.com/@hbarcelos/bdd-made-simple-in-node-js-with-mocha-and-chai-3a3ce44ecce2\" target=\"_blank\">BDD made simple in Node.JS with Mocha and Chai - @hbarcelos en\nmedium.com</a></li>\n</ul>\n",
          "order": 3,
          "durationString": "30min"
        },
        "04-browser": {
          "title": "Testes no navegador",
          "type": "read",
          "format": "self-paced",
          "duration": 15,
          "body": "<p>Até este ponto estivemos executando nossos testes com Node.js, mas como\n<em>front-end developers</em> também é interessante executar nossos testes em um\nambiente de navegador, com um <code>window</code> e com um <code>DOM</code> de verdade. Isto nos\npermitirá automatizar testes assim como fazer <em>cross-browser testing</em> e validar\nnosso código em navegadores diferentes.</p>\n<p>Imagine que você tenha uma página web com uma lista ordenada (<code>ul</code>), algo assim:</p>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li&gt;Betty Snyder Holberton&lt;/li&gt;\n  &lt;li&gt;Jean Jennings Bartik&lt;/li&gt;\n  &lt;li&gt;Kathleen McNulty Mauchly Antonelli&lt;/li&gt;\n  &lt;li&gt;Marlyn Wescoff Meltzer&lt;/li&gt;\n  &lt;li&gt;Ruth Lichterman Teitelbaum&lt;/li&gt;\n  &lt;li&gt;Frances Bilas Spence&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>E os usuários estão solicitando uma <em>feature</em> para que os textos que aparecem na\nlista saiam com todas as vogais em maiúscula. É um pedido meio estranho, mas a\nprópria vida é muito estranha...</p>\n<p>Para implementar esta <em>feature</em> você combina com sua equipe que precisam de uma\nfunção que receba uma string e retorna outra string na qual todas as vogais\ntenham sido trocadas de minúsculas para maiúsculas. Precisamos de uma função com\na seguinte assinatura (<em>signature</em>):</p>\n<pre><code class=\"language-js\">string makeVowelsUpperCase(string)\n</code></pre>\n<p>Se esta função existisse, sabemos que poderíamos selecionar os nós que queremos\n(os <code>&lt;li&gt;</code>) e trocar seu conteúdo com o retorno de <code>makeVowelsUpperCase()</code>\npassado o conteúdo original como argumento.</p>\n<pre><code class=\"language-js\">[...document.querySelectorAll('li')]\n  .forEach(el =&gt; el.innerHTML = makeVowelsUpperCase(el.innerHTML));\n</code></pre>\n<p>Antes de atribuir a alguém a implementação desta função, decidimos escrever\nalguns testes para que sirvam de guia e descrevam o comportamento esperado. Em\numa nova pasta, crie um arquivo com o nome <code>makeVowelsUpperCase.spec.js</code> e\nadicione os testes a seguir:</p>\n<pre><code class=\"language-js\">describe('makeVowelsUpperCase()', () =&gt; {\n\n  it('Deveria converter \"olá mundo\" em \"OlÁ mUndO\"', () =&gt; {\n    assert.equal(makeVowelsUpperCase('olá mundo'), 'OlÁ mUndO');\n  });\n\n  it('Deveria converter \"Betty Snyder Holberton\" em \"BEtty SnydEr HOlbErtOn\"', () =&gt; {\n    assert.equal(\n      makeVowelsUpperCase('Betty Snyder Holberton'),\n      'BEtty SnydEr HOlbErtOn'\n    );\n  });\n\n});\n</code></pre>\n<p>Como ponto de partida para a implementação, por enquanto simplesmente criamos um\narquivo com o nome <code>makeVowelsUpperCase.js</code> na mesma pasta onde você criou o\narquivo anterior com os testes. Neste arquivo por enquanto só vamos declarar uma\nfunção que recebe um argumento e retorna o argumento tal como o recebeu.</p>\n<pre><code class=\"language-js\">const makeVowelsUpperCase = function (string) {\n  return string;\n};\n</code></pre>\n<p>Para poder executar os testes no navegador comecemos criando um arquivo HTML com\no nome <code>test.html</code>.</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=utf-8&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"mocha\"&gt;&lt;/div&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/chai/4.1.2/chai.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"./makeVowelsUpperCase.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      const { assert } = chai;\n      mocha.setup('bdd');\n    &lt;/script&gt;\n    &lt;script src=\"./makeVowelsUpperCase.spec.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;mocha.run();&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Neste arquivo HTML faça o seguinte:</p>\n<ol>\n<li><p>Adicione a folha de estilo de <code>mocha</code> a partir do CDN de\n<a href=\"https://cdnjs.com/\" target=\"_blank\">cdnjs</a>:</p>\n<pre><code class=\"language-html\">&lt;link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.css\"\n/&gt;\n</code></pre>\n</li>\n<li><p>Adicione um <code>&lt;div&gt;</code> com <code>id=\"mocha\"</code> para que o Mocha escreva os resultados:</p>\n<pre><code class=\"language-html\">&lt;div id=\"mocha\"&gt;&lt;/div&gt;\n</code></pre>\n</li>\n<li><p>Adicione <code>mocha</code> e <code>chai</code> a partir do CDN de <a href=\"https://cdnjs.com/\" target=\"_blank\">cdnjs</a>:</p>\n<pre><code class=\"language-html\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/mocha/4.1.0/mocha.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/chai/4.1.2/chai.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>Incluímos o código que queremos testar (o arquivo <code>makeVowelsUpperCase.js</code>)\nque acabamos de criar:</p>\n<pre><code class=\"language-html\">&lt;script src=\"./makeVowelsUpperCase.js\"&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>Criamos uma referência para o <code>chai.assert</code> na constante <code>assert</code> no ambiente\nglobal para podermos usar diretamente <code>assert</code> nos testes (ao invés de\n<code>chai.assert</code>):</p>\n<pre><code class=\"language-js\">const { assert } = chai;\n</code></pre>\n</li>\n<li><p>Inicialize a interface BDD de <code>mocha</code>:</p>\n<pre><code class=\"language-js\">mocha.setup('bdd');\n</code></pre>\n</li>\n<li><p>Incluímos todos os testes que queremos executar:</p>\n<pre><code class=\"language-html\">&lt;script src=\"./makeVowelsUpperCase.spec.js\"&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>Finalmente executamos os testes:</p>\n<pre><code class=\"language-js\">mocha.run();\n</code></pre>\n</li>\n</ol>\n<p>Já temos um ambiente para executar os estes no navegador. Abra o arquivo\n<code>test.html</code> no seu navegador. Você deve ver algo assim:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/34898926-a840563a-f7c3-11e7-8872-c3f3a1f5339d.png\" alt=\"Output de Mocha no\nnavegador\"></p>\n<p>Isto nos mostra que nossos testes foram executados, mas a implementação atual de\n<code>makeVowelsUpperCase</code> não passa nos testes já que não retorna os valores\nesperados.</p>\n<p>Já estamos prontas para atribuir-lhe o trabalho de implementar a função com uma\ncolega, a qual terá clara qual a intenção da função e seu comportamento\nesperado. Os testes permitirão saber se a implementação se adequa aos\nrequerimentos.</p>\n<p>Continuemos imaginando... digamos que alguns dias se passará e Pepita, uma\ncolega, envia-nos uma implementação de <code>makeVowelsUpperCase</code> para que revisemos.\nAntes de sequer lermos o código, primeiro vamos executar os testes. Tenha\ncerteza de substituir o código no arquivo <code>makeVowelsUpperCase.js</code> com o enviado\npor Pepita:</p>\n<pre><code class=\"language-js\">const isVowel = function (char) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n  for (let i = 0; i &lt; vowels.length; i++) {\n    if (char === vowels[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst makeVowelsUpperCase = function (string) {\n  let result = '';\n\n  for (let i = 0; i &lt; string.length; i++) {\n    if (isVowel(string[i])) {\n      result += string[i].toUpperCase();\n    } else {\n      result += string[i];\n    }\n  }\n\n  return result;\n};\n</code></pre>\n<p>Se agora abrirmos outra vez o arquivo <code>test.html</code> veremos o seguinte:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/34899917-c8f6d402-f7c9-11e7-9e69-c00ed149d0e0.png\" alt=\"Output de Mocha no navegador com testes\naprovados\"></p>\n<p>Parece que o código de Pepita passa em todos os testes :tada:</p>\n<hr>\n<p>Mas aqui não termina a história... mais uns dias se passaram, o código de Pepita\njá está em produção e recebemos um chamado de um <em>bug</em>: as vogais com acento não\nestão sendo trocadas por maiúsculas! Como temos testes para esta função, podemos\nescrever rapidamente um novo teste para replicar e confirmar o problema\nrelatado, assim que adicionamos o seguinte teste em nosso arquivo\n<code>makeVowelsUpperCase.spec.js</code>:</p>\n<pre><code class=\"language-js\">\nit('Deveria converter vogais com acento', () =&gt; {\n  assert.equal(makeVowelsUpperCase('como está?'), 'cOmO EstÁ?');\n});\n</code></pre>\n<p>Se executarmos o testes podemos ver que de fato o novo teste não passa:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/34906409-37ba7ecc-f83b-11e7-9500-10b5d1b49842.png\" alt=\"imagem\"></p>\n<p>Na leitura seguinte veremos como consertar isso.</p>\n",
          "order": 4,
          "durationString": "15min"
        },
        "10-closing": {
          "title": "Encerramento",
          "type": "read",
          "format": "self-paced",
          "duration": 5,
          "body": "<h2 id=\"resumo\">Resumo</h2>\n<p>Chegamos ao final da unidade 😃</p>\n<h2 id=\"respondamos-juntas-as-perguntas-da-abertura\">Respondamos juntas as perguntas da abertura</h2>\n<ul>\n<li>O que é um teste?</li>\n<li>O que é um <em>framework</em> de <em>testing</em>?</li>\n<li>Como escrever testes usando a interface BDD (<code>describe()</code>, <code>it()</code>, ...) do <code>mocha</code>?</li>\n<li>Como usar a biblioteca padrão de Node.js para atribuições com o módulo <code>assert</code>?</li>\n<li>Como usar os <em>asserts</em> do <code>chai</code>?</li>\n<li>Como executar testes no ambiente do navegador de forma automatizada com <code>karma</code>?</li>\n</ul>\n",
          "order": 5,
          "durationString": "5min"
        }
      },
      "order": 10,
      "stats": {
        "duration": 105,
        "durationString": "1.8h",
        "exerciseCount": 0,
        "partCount": 6
      }
    }
  },
  "grades": "",
  "contributors": "",
  "books": "<ul>\n<li><a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a>, Marijn Haverbeke, 2014</li>\n<li><a href=\"http://pepa.holla.cz/wp-content/uploads/2015/11/JavaScript-for-Kids.pdf\">JavaScript for\nkids</a>,\nNick Morgan, 2015</li>\n<li><a href=\"http://shop.oreilly.com/product/9780596517748.do\">JavaScript: The Good\nParts</a>, Douglas Crockford,\nO&#39;Reilly Media</li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">You Don&#39;t Know JS</a>, Kyle Simpson,\nO&#39;Reilly Media</li>\n<li><a href=\"https://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182/ref=as_li_ss_tl?ie=UTF8&amp;redirect=true&amp;linkCode=ll1&amp;tag=eejs-20&amp;linkId=4c5500843ce7dc958e290bdaeebd739b\">Effective JavaScript: 68 Specific Ways to Harness the Power of\nJavaScript</a>,\nDavid Herman, 2013</li>\n<li><a href=\"http://shop.oreilly.com/product/9780596805531.do\">JavaScript: The Definitive\nGuide</a>, David Flanagan,\nO&#39;Reilly Media</li>\n</ul>\n",
  "benchmarks": "",
  "references": "",
  "repo": "Laboratoria/bootcamp",
  "path": "topics/javascript",
  "version": "3.1.0",
  "parserVersion": "3.0.0",
  "track": "js",
  "locale": "pt-BR",
  "stats": {
    "duration": 2100,
    "durationString": "35h",
    "exerciseCount": 50,
    "unitCount": 11,
    "partCount": 59
  }
}
