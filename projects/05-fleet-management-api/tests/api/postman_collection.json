{
	"info": {
		"_postman_id": "716f4a1e-c584-4d0d-93da-0d5a3e6e4ff9",
		"name": "API testing",
		"description": "# ‚õìÔ∏è Get started here\n\nPostman allows you to test your APIs using simple Javascript code. You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis template guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## üîñ **How to use this template**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\".\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" alt=\"\" height=\"103\" width=\"266\">\n\n**Step 3:** To customize this template, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## ‚ÑπÔ∏è Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "21472578"
	},
	"item": [
		{
			"name": "taxis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/taxis endpoint exists and responds with status OK 200\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/taxis endpoint responds with default limit 10 if none is specified\", () => {",
							"});",
							"",
							"pm.test(\"/taxis endpoint responds with specified page and limit\", () => {",
							"});",
							"",
							"pm.test(\"/taxis returns an array of taxis with id and plate\", () => {",
							"    const { taxis } = pm.response.json();",
							"    pm.expect(Array.isArray(taxis)).to.eq(true);",
							"    pm.expect(taxis[0]).to.have.property('id');",
							"    pm.expect(taxis[0]).to.have.property('plate');",
							"",
							"    // var schema = {",
							"    //     \"items\": {",
							"    //         \"type\": \"boolean\"",
							"    //     }",
							"    // };",
							"",
							"    // var data1 = [true, false];",
							"    // var data2 = [true, 123];",
							"",
							"    // pm.test('Schema is valid', function () {",
							"    //     pm.expect(tv4.validate(data1, schema)).to.be.true;",
							"    //     pm.expect(tv4.validate(data2, schema)).to.be.true;",
							"    // });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/taxis/",
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the¬†`token`¬†collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		},
		{
			"name": "trajectories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/trajectories/{{taxiId}}?date={{date}} endpoint exists and responds with status OK 200\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/trajectories/{{taxiId}}?date={{date}} responds with data for only the specified taxi id and date\", () => {",
							"});",
							"",
							"pm.test(\"/trajectories/ responds with 400 for missing required parameters\", () => {",
							"     pm.expect(pm.response.code).to.eq(400);",
							"});",
							"",
							"pm.test(\"/trajectories/{{taxiId}}?date={{date}} responds with 400 if date badly formatted\", () => {",
							"     pm.expect(pm.response.code).to.eq(400);",
							"});",
							"",
							"pm.test(\"/trajectories/{{taxiId}}?date={{date}} responds with 401 if no authentication header\", () => {",
							"    pm.expect(pm.response.code).to.eq(401);",
							"});",
							"",
							"pm.test(\"/trajectories/{{taxiId}}?date={{date}} responds with 403 if user is not admin\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});",
							"",
							"pm.test(\"/trajectories/{{taxiId}}?date={{date}} responds with 404 if taxi id not found\", () => {",
							"    pm.expect(pm.response.code).to.eq(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/trajectories/:taxiId?date",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"trajectories",
						":taxiId"
					],
					"query": [
						{
							"key": "date",
							"value": null
						}
					],
					"variable": [
						{
							"key": "taxiId",
							"value": "",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "latest trajectories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/trajectories/latest endpoint exists and responds with status OK 200\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/trajectories/latest endpoint responds with a trajectory for unique taxi ids\", () => {",
							"});",
							"",
							"",
							"pm.test(\"/trajectories/latest responds with 401 if no authentication header\", () => {",
							"    pm.expect(pm.response.code).to.eq(401);",
							"});",
							"",
							"pm.test(\"/trajectories/latest responds with 403 if user is not admin\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/trajectories/latest"
			},
			"response": []
		},
		{
			"name": "non-existent route",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"responds with status 404 for non existent route /taxiss\", () => {",
							"    pm.expect(pm.response.code).to.eq(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/taxiss/"
			},
			"response": []
		},
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"m.test(\"/users endpoint exists and responds with status OK 200\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users endpoint responds with default limit 10 if none is specified\", () => {",
							"});",
							"",
							"pm.test(\"/users endpoint responds with specified page and limit\", () => {",
							"});",
							"",
							"pm.test(\"/users endpoint responds with 401 if no authentication header\", () => {",
							"    pm.expect(pm.response.code).to.eq(401);",
							"});",
							"",
							"pm.test(\"/users endpoint responds with 403 if authenticated user is not admin\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/users"
			},
			"response": []
		},
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"m.test(\"/users POST endpoint exists and responds with status OK 200 if successful\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users POST endpoint responds with 400 if no email or password provided\", () => {",
							"    pm.expect(pm.response.code).to.eq(400);",
							"});",
							"",
							"pm.test(\"/users POST endpoint responds with 401 if no authentication header\", () => {",
							"    pm.expect(pm.response.code).to.eq(401);",
							"});",
							"",
							"pm.test(\"/users POST endpoint responds with 403 if user with email already exists\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});",
							"",
							"pm.test(\"/users POST endpoint responds with 403 if authenticated user is not admin\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": "{{baseURL}}/users"
			},
			"response": []
		},
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/users/{{uid}} endpoint exists and responds with status OK 200 if successful\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} PATCH endpoint exists and responds with an object if successful\", () => {",
							"});",
							"",
							"pm.test(\"/users/{{uid}} PATCH endpoint responds with 200 if admin user is trying to update user info, including role\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} PATCH endpoint responds with 200 if non-admin user updates own information\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users PATCH endpoint responds with 403 if non-admin user tries to update their role\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});",
							"",
							"pm.test(\"/users PATCH endpoint responds with 403 if non-admin user is trying to update another user\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} PATCH endpoint responds with 404 if requested user does not exist\", () => {",
							"    pm.expect(pm.response.code).to.eq(404);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} PATCH endpoint responds with 401 if no authentication header\", () => {",
							"    pm.expect(pm.response.code).to.eq(401);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} endpoint responds with 403 if user with email already exists\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});",
							"",
							"pm.test(\"/users endpoint responds with 403 if authenticated user is not admin\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/:uid",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						":uid"
					],
					"variable": [
						{
							"key": "uid",
							"value": "",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/users/{{uid}} DELETE endpoint exists and responds with status OK 200 if successful\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} DELETE endpoint exists and responds with an object if successful\", () => {",
							"});",
							"",
							"pm.test(\"/users/{{uid}} DELETE endpoint responds with 200 if admin user deletes user info\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} DELETE endpoint responds with 200 if non-admin user deletes own information\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/users DELETE endpoint responds with 403 if non-admin user is trying to delete another user\", () => {",
							"    pm.expect(pm.response.code).to.eq(403);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} DELETE endpoint responds with 404 if requested user does not exist\", () => {",
							"    pm.expect(pm.response.code).to.eq(404);",
							"});",
							"",
							"pm.test(\"/users/{{uid}} PATCH endpoint responds with 401 if no authentication header\", () => {",
							"    pm.expect(pm.response.code).to.eq(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/:uid",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						":uid"
					],
					"variable": [
						{
							"key": "uid",
							"value": "",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/login endpoint exists and responds with status OK 200 if successful\", () => {",
							"    pm.expect(pm.response.status).to.eq('OK');",
							"    pm.expect(pm.response.code).to.eq(200);",
							"});",
							"",
							"pm.test(\"/login endpoint exists and responds with an object with accessToken and user if authentication successful\", () => {",
							"});",
							"",
							"pm.test(\"/login endpoint responds with 400 if email or password are missing\", () => {",
							"    pm.expect(pm.response.code).to.eq(400);",
							"});",
							"",
							"pm.test(\"/login endpoint responds with 404 if credentials do not match\", () => {",
							"    pm.expect(pm.response.code).to.eq(404);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": "{{baseURL}}/login"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://postman-integration-testing.glitch.me/"
		}
	]
}
